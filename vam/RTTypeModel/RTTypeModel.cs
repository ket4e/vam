using System;
using System.Collections.Generic;
using Battlehub.RTSaveLoad;
using Battlehub.RTSaveLoad.PersistentObjects;
using Battlehub.RTSaveLoad.PersistentObjects.AI;
using Battlehub.RTSaveLoad.PersistentObjects.Audio;
using Battlehub.RTSaveLoad.PersistentObjects.EventSystems;
using Battlehub.RTSaveLoad.PersistentObjects.Experimental.Rendering;
using Battlehub.RTSaveLoad.PersistentObjects.Networking.Match;
using Battlehub.RTSaveLoad.PersistentObjects.Networking.PlayerConnection;
using Battlehub.RTSaveLoad.PersistentObjects.Rendering;
using Battlehub.RTSaveLoad.PersistentObjects.UI;
using Battlehub.RTSaveLoad.PersistentObjects.Video;
using Battlehub.RTSaveLoad.PersistentObjects.VR.WSA;
using Battlehub.RTSaveLoad.UnityEngineNS;
using Battlehub.RTSaveLoad.UnityEngineNS.AINS;
using Battlehub.RTSaveLoad.UnityEngineNS.ExperimentalNS.DirectorNS;
using Battlehub.RTSaveLoad.UnityEngineNS.SceneManagementNS;
using Battlehub.RTSaveLoad.UnityEngineNS.UINS;
using ProtoBuf;
using ProtoBuf.Meta;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public sealed class RTTypeModel : TypeModel
{
	private static readonly Dictionary<Type, int> knownTypes = new Dictionary<Type, int>(1015);

	static RTTypeModel()
	{
		knownTypes.Add(typeof(PersistentAnimationCurve), 258);
		knownTypes.Add(typeof(PersistentSpriteState), 258);
		knownTypes.Add(typeof(PersistentOptionData), 258);
		knownTypes.Add(typeof(PersistentNavigation), 258);
		knownTypes.Add(typeof(PersistentObject), 258);
		knownTypes.Add(typeof(PersistentScript), 258);
		knownTypes.Add(typeof(PersistentVideoClip), 258);
		knownTypes.Add(typeof(PersistentFont), 258);
		knownTypes.Add(typeof(PersistentTerrainData), 258);
		knownTypes.Add(typeof(PersistentMotion), 258);
		knownTypes.Add(typeof(PersistentAnimationClip), 258);
		knownTypes.Add(typeof(PersistentAvatarMask), 258);
		knownTypes.Add(typeof(PersistentAvatar), 258);
		knownTypes.Add(typeof(PersistentRuntimeAnimatorController), 258);
		knownTypes.Add(typeof(PersistentAnimatorOverrideController), 258);
		knownTypes.Add(typeof(PersistentAudioMixerGroup), 258);
		knownTypes.Add(typeof(PersistentAudioMixerSnapshot), 258);
		knownTypes.Add(typeof(PersistentAudioMixer), 258);
		knownTypes.Add(typeof(PersistentAudioClip), 258);
		knownTypes.Add(typeof(PersistentNavMeshData), 258);
		knownTypes.Add(typeof(PersistentPhysicsMaterial2D), 258);
		knownTypes.Add(typeof(PersistentPhysicMaterial), 258);
		knownTypes.Add(typeof(PersistentTexture), 258);
		knownTypes.Add(typeof(PersistentWebCamTexture), 258);
		knownTypes.Add(typeof(PersistentMovieTexture), 258);
		knownTypes.Add(typeof(PersistentRenderTexture), 258);
		knownTypes.Add(typeof(PersistentSparseTexture), 258);
		knownTypes.Add(typeof(PersistentCubemapArray), 258);
		knownTypes.Add(typeof(PersistentTexture2DArray), 258);
		knownTypes.Add(typeof(PersistentTexture3D), 258);
		knownTypes.Add(typeof(PersistentCubemap), 258);
		knownTypes.Add(typeof(PersistentTexture2D), 258);
		knownTypes.Add(typeof(PersistentProceduralTexture), 258);
		knownTypes.Add(typeof(PersistentTextAsset), 258);
		knownTypes.Add(typeof(PersistentSprite), 258);
		knownTypes.Add(typeof(PersistentShaderVariantCollection), 258);
		knownTypes.Add(typeof(PersistentMaterial), 258);
		knownTypes.Add(typeof(PersistentShader), 258);
		knownTypes.Add(typeof(PersistentGraphicsSettings), 258);
		knownTypes.Add(typeof(PersistentMesh), 258);
		knownTypes.Add(typeof(PersistentLightmapSettings), 258);
		knownTypes.Add(typeof(PersistentLightProbes), 258);
		knownTypes.Add(typeof(PersistentFlare), 258);
		knownTypes.Add(typeof(PersistentQualitySettings), 258);
		knownTypes.Add(typeof(PersistentRenderSettings), 258);
		knownTypes.Add(typeof(PersistentGameObject), 258);
		knownTypes.Add(typeof(PersistentComputeShader), 258);
		knownTypes.Add(typeof(PersistentComponent), 258);
		knownTypes.Add(typeof(PersistentWorldAnchor), 258);
		knownTypes.Add(typeof(PersistentCanvasRenderer), 258);
		knownTypes.Add(typeof(PersistentCanvasGroup), 258);
		knownTypes.Add(typeof(PersistentTextMesh), 258);
		knownTypes.Add(typeof(PersistentTree), 258);
		knownTypes.Add(typeof(PersistentCloth), 258);
		knownTypes.Add(typeof(PersistentRigidbody2D), 258);
		knownTypes.Add(typeof(PersistentCollider), 258);
		knownTypes.Add(typeof(PersistentTerrainCollider), 258);
		knownTypes.Add(typeof(PersistentWheelCollider), 258);
		knownTypes.Add(typeof(PersistentCharacterController), 258);
		knownTypes.Add(typeof(PersistentCapsuleCollider), 258);
		knownTypes.Add(typeof(PersistentMeshCollider), 258);
		knownTypes.Add(typeof(PersistentSphereCollider), 258);
		knownTypes.Add(typeof(PersistentBoxCollider), 258);
		knownTypes.Add(typeof(PersistentJoint), 258);
		knownTypes.Add(typeof(PersistentConfigurableJoint), 258);
		knownTypes.Add(typeof(PersistentCharacterJoint), 258);
		knownTypes.Add(typeof(PersistentFixedJoint), 258);
		knownTypes.Add(typeof(PersistentSpringJoint), 258);
		knownTypes.Add(typeof(PersistentHingeJoint), 258);
		knownTypes.Add(typeof(PersistentRigidbody), 258);
		knownTypes.Add(typeof(PersistentParticleSystem), 258);
		knownTypes.Add(typeof(PersistentTransform), 258);
		knownTypes.Add(typeof(PersistentRectTransform), 258);
		knownTypes.Add(typeof(PersistentWindZone), 258);
		knownTypes.Add(typeof(PersistentLODGroup), 258);
		knownTypes.Add(typeof(PersistentRenderer), 258);
		knownTypes.Add(typeof(PersistentParticleSystemRenderer), 258);
		knownTypes.Add(typeof(PersistentSpriteRenderer), 258);
		knownTypes.Add(typeof(PersistentMeshRenderer), 258);
		knownTypes.Add(typeof(PersistentLineRenderer), 258);
		knownTypes.Add(typeof(PersistentTrailRenderer), 258);
		knownTypes.Add(typeof(PersistentSkinnedMeshRenderer), 258);
		knownTypes.Add(typeof(PersistentBillboardRenderer), 258);
		knownTypes.Add(typeof(PersistentMeshFilter), 258);
		knownTypes.Add(typeof(PersistentOcclusionPortal), 258);
		knownTypes.Add(typeof(PersistentOcclusionArea), 258);
		knownTypes.Add(typeof(PersistentBehaviour), 258);
		knownTypes.Add(typeof(PersistentVideoPlayer), 258);
		knownTypes.Add(typeof(PersistentCanvas), 258);
		knownTypes.Add(typeof(PersistentTerrain), 258);
		knownTypes.Add(typeof(PersistentAnimation), 258);
		knownTypes.Add(typeof(PersistentAnimator), 258);
		knownTypes.Add(typeof(PersistentAudioChorusFilter), 258);
		knownTypes.Add(typeof(PersistentAudioEchoFilter), 258);
		knownTypes.Add(typeof(PersistentAudioDistortionFilter), 258);
		knownTypes.Add(typeof(PersistentAudioReverbZone), 258);
		knownTypes.Add(typeof(PersistentAudioListener), 258);
		knownTypes.Add(typeof(PersistentAudioBehaviour), 258);
		knownTypes.Add(typeof(PersistentAudioReverbFilter), 258);
		knownTypes.Add(typeof(PersistentAudioHighPassFilter), 258);
		knownTypes.Add(typeof(PersistentAudioLowPassFilter), 258);
		knownTypes.Add(typeof(PersistentAudioSource), 258);
		knownTypes.Add(typeof(PersistentOffMeshLink), 258);
		knownTypes.Add(typeof(PersistentNavMeshObstacle), 258);
		knownTypes.Add(typeof(PersistentNavMeshAgent), 258);
		knownTypes.Add(typeof(PersistentEffector2D), 258);
		knownTypes.Add(typeof(PersistentSurfaceEffector2D), 258);
		knownTypes.Add(typeof(PersistentPointEffector2D), 258);
		knownTypes.Add(typeof(PersistentBuoyancyEffector2D), 258);
		knownTypes.Add(typeof(PersistentPlatformEffector2D), 258);
		knownTypes.Add(typeof(PersistentAreaEffector2D), 258);
		knownTypes.Add(typeof(PersistentPhysicsUpdateBehaviour2D), 258);
		knownTypes.Add(typeof(PersistentConstantForce2D), 258);
		knownTypes.Add(typeof(PersistentCollider2D), 258);
		knownTypes.Add(typeof(PersistentPolygonCollider2D), 258);
		knownTypes.Add(typeof(PersistentCompositeCollider2D), 258);
		knownTypes.Add(typeof(PersistentCapsuleCollider2D), 258);
		knownTypes.Add(typeof(PersistentEdgeCollider2D), 258);
		knownTypes.Add(typeof(PersistentBoxCollider2D), 258);
		knownTypes.Add(typeof(PersistentCircleCollider2D), 258);
		knownTypes.Add(typeof(PersistentJoint2D), 258);
		knownTypes.Add(typeof(PersistentTargetJoint2D), 258);
		knownTypes.Add(typeof(PersistentRelativeJoint2D), 258);
		knownTypes.Add(typeof(PersistentAnchoredJoint2D), 258);
		knownTypes.Add(typeof(PersistentWheelJoint2D), 258);
		knownTypes.Add(typeof(PersistentFixedJoint2D), 258);
		knownTypes.Add(typeof(PersistentSliderJoint2D), 258);
		knownTypes.Add(typeof(PersistentHingeJoint2D), 258);
		knownTypes.Add(typeof(PersistentFrictionJoint2D), 258);
		knownTypes.Add(typeof(PersistentDistanceJoint2D), 258);
		knownTypes.Add(typeof(PersistentSpringJoint2D), 258);
		knownTypes.Add(typeof(PersistentConstantForce), 258);
		knownTypes.Add(typeof(PersistentSortingGroup), 258);
		knownTypes.Add(typeof(PersistentReflectionProbe), 258);
		knownTypes.Add(typeof(PersistentNetworkView), 258);
		knownTypes.Add(typeof(PersistentMonoBehaviour), 258);
		knownTypes.Add(typeof(PersistentUIBehaviour), 258);
		knownTypes.Add(typeof(PersistentBaseMeshEffect), 258);
		knownTypes.Add(typeof(PersistentShadow), 258);
		knownTypes.Add(typeof(PersistentOutline), 258);
		knownTypes.Add(typeof(PersistentPositionAsUV1), 258);
		knownTypes.Add(typeof(PersistentLayoutGroup), 258);
		knownTypes.Add(typeof(PersistentHorizontalOrVerticalLayoutGroup), 258);
		knownTypes.Add(typeof(PersistentVerticalLayoutGroup), 258);
		knownTypes.Add(typeof(PersistentHorizontalLayoutGroup), 258);
		knownTypes.Add(typeof(PersistentGridLayoutGroup), 258);
		knownTypes.Add(typeof(PersistentLayoutElement), 258);
		knownTypes.Add(typeof(PersistentContentSizeFitter), 258);
		knownTypes.Add(typeof(PersistentCanvasScaler), 258);
		knownTypes.Add(typeof(PersistentAspectRatioFitter), 258);
		knownTypes.Add(typeof(PersistentToggleGroup), 258);
		knownTypes.Add(typeof(PersistentSelectable), 258);
		knownTypes.Add(typeof(PersistentToggle), 258);
		knownTypes.Add(typeof(PersistentSlider), 258);
		knownTypes.Add(typeof(PersistentScrollbar), 258);
		knownTypes.Add(typeof(PersistentInputField), 258);
		knownTypes.Add(typeof(PersistentDropdown), 258);
		knownTypes.Add(typeof(PersistentButton), 258);
		knownTypes.Add(typeof(PersistentScrollRect), 258);
		knownTypes.Add(typeof(PersistentRectMask2D), 258);
		knownTypes.Add(typeof(PersistentMask), 258);
		knownTypes.Add(typeof(PersistentGraphic), 258);
		knownTypes.Add(typeof(PersistentMaskableGraphic), 258);
		knownTypes.Add(typeof(PersistentText), 258);
		knownTypes.Add(typeof(PersistentRawImage), 258);
		knownTypes.Add(typeof(PersistentImage), 258);
		knownTypes.Add(typeof(PersistentBaseRaycaster), 258);
		knownTypes.Add(typeof(PersistentGraphicRaycaster), 258);
		knownTypes.Add(typeof(PersistentPhysicsRaycaster), 258);
		knownTypes.Add(typeof(PersistentPhysics2DRaycaster), 258);
		knownTypes.Add(typeof(PersistentBaseInputModule), 258);
		knownTypes.Add(typeof(PersistentPointerInputModule), 258);
		knownTypes.Add(typeof(PersistentStandaloneInputModule), 258);
		knownTypes.Add(typeof(PersistentBaseInput), 258);
		knownTypes.Add(typeof(PersistentEventSystem), 258);
		knownTypes.Add(typeof(PersistentEventTrigger), 258);
		knownTypes.Add(typeof(PersistentNetworkMatch), 258);
		knownTypes.Add(typeof(PersistentLightProbeProxyVolume), 258);
		knownTypes.Add(typeof(PersistentLightProbeGroup), 258);
		knownTypes.Add(typeof(PersistentLight), 258);
		knownTypes.Add(typeof(PersistentGUILayer), 258);
		knownTypes.Add(typeof(PersistentGUIElement), 258);
		knownTypes.Add(typeof(PersistentSkybox), 258);
		knownTypes.Add(typeof(PersistentProjector), 258);
		knownTypes.Add(typeof(PersistentLensFlare), 258);
		knownTypes.Add(typeof(PersistentFlareLayer), 258);
		knownTypes.Add(typeof(PersistentCamera), 258);
		knownTypes.Add(typeof(PersistentBillboardAsset), 258);
		knownTypes.Add(typeof(PersistentScriptableObject), 258);
		knownTypes.Add(typeof(PersistentRenderPipelineAsset), 258);
		knownTypes.Add(typeof(PersistentPlayerConnection), 258);
		knownTypes.Add(typeof(PersistentGUISkin), 258);
		knownTypes.Add(typeof(PersistentStateMachineBehaviour), 258);
		knownTypes.Add(typeof(PersistentAssetBundleManifest), 258);
		knownTypes.Add(typeof(PersistentAssetBundle), 258);
		knownTypes.Add(typeof(PersistentTriggerModule), 258);
		knownTypes.Add(typeof(PersistentEmissionModule), 258);
		knownTypes.Add(typeof(PersistentCollisionModule), 258);
		knownTypes.Add(typeof(PersistentGUIStyleState), 258);
		knownTypes.Add(typeof(PersistentGUIStyle), 258);
		knownTypes.Add(typeof(PersistentVelocityOverLifetimeModule), 258);
		knownTypes.Add(typeof(PersistentTrailModule), 258);
		knownTypes.Add(typeof(PersistentTextureSheetAnimationModule), 258);
		knownTypes.Add(typeof(PersistentSubEmittersModule), 258);
		knownTypes.Add(typeof(PersistentSizeOverLifetimeModule), 258);
		knownTypes.Add(typeof(PersistentSizeBySpeedModule), 258);
		knownTypes.Add(typeof(PersistentShapeModule), 258);
		knownTypes.Add(typeof(PersistentRotationOverLifetimeModule), 258);
		knownTypes.Add(typeof(PersistentRotationBySpeedModule), 258);
		knownTypes.Add(typeof(PersistentParticle), 258);
		knownTypes.Add(typeof(PersistentNoiseModule), 258);
		knownTypes.Add(typeof(PersistentMinMaxGradient), 258);
		knownTypes.Add(typeof(PersistentMinMaxCurve), 258);
		knownTypes.Add(typeof(PersistentMainModule), 258);
		knownTypes.Add(typeof(PersistentLimitVelocityOverLifetimeModule), 258);
		knownTypes.Add(typeof(PersistentLightsModule), 258);
		knownTypes.Add(typeof(PersistentKeyframe), 258);
		knownTypes.Add(typeof(PersistentInheritVelocityModule), 258);
		knownTypes.Add(typeof(PersistentGradient), 258);
		knownTypes.Add(typeof(PersistentForceOverLifetimeModule), 258);
		knownTypes.Add(typeof(PersistentExternalForcesModule), 258);
		knownTypes.Add(typeof(PersistentEmitParams), 258);
		knownTypes.Add(typeof(PersistentCustomDataModule), 258);
		knownTypes.Add(typeof(PersistentColorOverLifetimeModule), 258);
		knownTypes.Add(typeof(PersistentColorBySpeedModule), 258);
		knownTypes.Add(typeof(PersistentBurst), 258);
		knownTypes.Add(typeof(PrimitiveContract<Vector4[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<Vector4>), 260);
		knownTypes.Add(typeof(PrimitiveContract<Vector3[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<Vector3>), 260);
		knownTypes.Add(typeof(PrimitiveContract<Color[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<Color>), 260);
		knownTypes.Add(typeof(PrimitiveContract<decimal[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<double[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<float[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<string[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<ulong[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<uint[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<ushort[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<long[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<int[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<short[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<byte[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<char[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<bool[]>), 260);
		knownTypes.Add(typeof(PrimitiveContract<decimal>), 260);
		knownTypes.Add(typeof(PrimitiveContract<double>), 260);
		knownTypes.Add(typeof(PrimitiveContract<float>), 260);
		knownTypes.Add(typeof(PrimitiveContract<string>), 260);
		knownTypes.Add(typeof(PrimitiveContract<ulong>), 260);
		knownTypes.Add(typeof(PrimitiveContract<uint>), 260);
		knownTypes.Add(typeof(PrimitiveContract<ushort>), 260);
		knownTypes.Add(typeof(PrimitiveContract<long>), 260);
		knownTypes.Add(typeof(PrimitiveContract<int>), 260);
		knownTypes.Add(typeof(PrimitiveContract<short>), 260);
		knownTypes.Add(typeof(PrimitiveContract<byte>), 260);
		knownTypes.Add(typeof(PrimitiveContract<char>), 260);
		knownTypes.Add(typeof(PrimitiveContract<bool>), 260);
		knownTypes.Add(typeof(PersistentData), 258);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAnimationCurve[]>), 259);
		knownTypes.Add(typeof(PrimitiveContract), 260);
		knownTypes.Add(typeof(List<PersistentAnimationCurve>), 261);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBurst[]>), 262);
		knownTypes.Add(typeof(List<PersistentBurst>), 263);
		knownTypes.Add(typeof(PrimitiveContract<PersistentColorBySpeedModule[]>), 264);
		knownTypes.Add(typeof(List<PersistentColorBySpeedModule>), 265);
		knownTypes.Add(typeof(PrimitiveContract<PersistentColorOverLifetimeModule[]>), 266);
		knownTypes.Add(typeof(List<PersistentColorOverLifetimeModule>), 267);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCustomDataModule[]>), 268);
		knownTypes.Add(typeof(List<PersistentCustomDataModule>), 269);
		knownTypes.Add(typeof(PrimitiveContract<PersistentEmitParams[]>), 270);
		knownTypes.Add(typeof(List<PersistentEmitParams>), 271);
		knownTypes.Add(typeof(PrimitiveContract<PersistentExternalForcesModule[]>), 272);
		knownTypes.Add(typeof(List<PersistentExternalForcesModule>), 273);
		knownTypes.Add(typeof(PrimitiveContract<PersistentForceOverLifetimeModule[]>), 274);
		knownTypes.Add(typeof(List<PersistentForceOverLifetimeModule>), 275);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGradient[]>), 276);
		knownTypes.Add(typeof(List<PersistentGradient>), 277);
		knownTypes.Add(typeof(PrimitiveContract<PersistentInheritVelocityModule[]>), 278);
		knownTypes.Add(typeof(List<PersistentInheritVelocityModule>), 279);
		knownTypes.Add(typeof(PrimitiveContract<PersistentKeyframe[]>), 280);
		knownTypes.Add(typeof(List<PersistentKeyframe>), 281);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLightsModule[]>), 282);
		knownTypes.Add(typeof(List<PersistentLightsModule>), 283);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]>), 284);
		knownTypes.Add(typeof(List<PersistentLimitVelocityOverLifetimeModule>), 285);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMainModule[]>), 286);
		knownTypes.Add(typeof(List<PersistentMainModule>), 287);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMinMaxCurve[]>), 288);
		knownTypes.Add(typeof(List<PersistentMinMaxCurve>), 289);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMinMaxGradient[]>), 290);
		knownTypes.Add(typeof(List<PersistentMinMaxGradient>), 291);
		knownTypes.Add(typeof(PrimitiveContract<PersistentNoiseModule[]>), 292);
		knownTypes.Add(typeof(List<PersistentNoiseModule>), 293);
		knownTypes.Add(typeof(PrimitiveContract<PersistentParticle[]>), 294);
		knownTypes.Add(typeof(List<PersistentParticle>), 295);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRotationBySpeedModule[]>), 296);
		knownTypes.Add(typeof(List<PersistentRotationBySpeedModule>), 297);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRotationOverLifetimeModule[]>), 298);
		knownTypes.Add(typeof(List<PersistentRotationOverLifetimeModule>), 299);
		knownTypes.Add(typeof(PrimitiveContract<PersistentShapeModule[]>), 300);
		knownTypes.Add(typeof(List<PersistentShapeModule>), 301);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSizeBySpeedModule[]>), 302);
		knownTypes.Add(typeof(List<PersistentSizeBySpeedModule>), 303);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSizeOverLifetimeModule[]>), 304);
		knownTypes.Add(typeof(List<PersistentSizeOverLifetimeModule>), 305);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSubEmittersModule[]>), 306);
		knownTypes.Add(typeof(List<PersistentSubEmittersModule>), 307);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTextureSheetAnimationModule[]>), 308);
		knownTypes.Add(typeof(List<PersistentTextureSheetAnimationModule>), 309);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTrailModule[]>), 310);
		knownTypes.Add(typeof(List<PersistentTrailModule>), 311);
		knownTypes.Add(typeof(PrimitiveContract<PersistentVelocityOverLifetimeModule[]>), 312);
		knownTypes.Add(typeof(List<PersistentVelocityOverLifetimeModule>), 313);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAnchoredJoint2D[]>), 314);
		knownTypes.Add(typeof(List<PersistentAnchoredJoint2D>), 315);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAnimation[]>), 316);
		knownTypes.Add(typeof(List<PersistentAnimation>), 317);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAnimationClip[]>), 318);
		knownTypes.Add(typeof(List<PersistentAnimationClip>), 319);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAnimator[]>), 320);
		knownTypes.Add(typeof(List<PersistentAnimator>), 321);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAnimatorOverrideController[]>), 322);
		knownTypes.Add(typeof(List<PersistentAnimatorOverrideController>), 323);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAreaEffector2D[]>), 324);
		knownTypes.Add(typeof(List<PersistentAreaEffector2D>), 325);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAspectRatioFitter[]>), 326);
		knownTypes.Add(typeof(List<PersistentAspectRatioFitter>), 327);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAssetBundle[]>), 328);
		knownTypes.Add(typeof(List<PersistentAssetBundle>), 329);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAssetBundleManifest[]>), 330);
		knownTypes.Add(typeof(List<PersistentAssetBundleManifest>), 331);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioBehaviour[]>), 332);
		knownTypes.Add(typeof(List<PersistentAudioBehaviour>), 333);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioChorusFilter[]>), 334);
		knownTypes.Add(typeof(List<PersistentAudioChorusFilter>), 335);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioClip[]>), 336);
		knownTypes.Add(typeof(List<PersistentAudioClip>), 337);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioDistortionFilter[]>), 338);
		knownTypes.Add(typeof(List<PersistentAudioDistortionFilter>), 339);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioEchoFilter[]>), 340);
		knownTypes.Add(typeof(List<PersistentAudioEchoFilter>), 341);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioHighPassFilter[]>), 342);
		knownTypes.Add(typeof(List<PersistentAudioHighPassFilter>), 343);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioListener[]>), 344);
		knownTypes.Add(typeof(List<PersistentAudioListener>), 345);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioLowPassFilter[]>), 346);
		knownTypes.Add(typeof(List<PersistentAudioLowPassFilter>), 347);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioMixer[]>), 348);
		knownTypes.Add(typeof(List<PersistentAudioMixer>), 349);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioMixerGroup[]>), 350);
		knownTypes.Add(typeof(List<PersistentAudioMixerGroup>), 351);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioMixerSnapshot[]>), 352);
		knownTypes.Add(typeof(List<PersistentAudioMixerSnapshot>), 353);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioReverbFilter[]>), 354);
		knownTypes.Add(typeof(List<PersistentAudioReverbFilter>), 355);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioReverbZone[]>), 356);
		knownTypes.Add(typeof(List<PersistentAudioReverbZone>), 357);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAudioSource[]>), 358);
		knownTypes.Add(typeof(List<PersistentAudioSource>), 359);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAvatar[]>), 360);
		knownTypes.Add(typeof(List<PersistentAvatar>), 361);
		knownTypes.Add(typeof(PrimitiveContract<PersistentAvatarMask[]>), 362);
		knownTypes.Add(typeof(List<PersistentAvatarMask>), 363);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBaseInput[]>), 364);
		knownTypes.Add(typeof(List<PersistentBaseInput>), 365);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBaseInputModule[]>), 366);
		knownTypes.Add(typeof(List<PersistentBaseInputModule>), 367);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBaseMeshEffect[]>), 368);
		knownTypes.Add(typeof(List<PersistentBaseMeshEffect>), 369);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBaseRaycaster[]>), 370);
		knownTypes.Add(typeof(List<PersistentBaseRaycaster>), 371);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBehaviour[]>), 372);
		knownTypes.Add(typeof(List<PersistentBehaviour>), 373);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBillboardAsset[]>), 374);
		knownTypes.Add(typeof(List<PersistentBillboardAsset>), 375);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBillboardRenderer[]>), 376);
		knownTypes.Add(typeof(List<PersistentBillboardRenderer>), 377);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBoxCollider[]>), 378);
		knownTypes.Add(typeof(List<PersistentBoxCollider>), 379);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBoxCollider2D[]>), 380);
		knownTypes.Add(typeof(List<PersistentBoxCollider2D>), 381);
		knownTypes.Add(typeof(PrimitiveContract<PersistentBuoyancyEffector2D[]>), 382);
		knownTypes.Add(typeof(List<PersistentBuoyancyEffector2D>), 383);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCamera[]>), 384);
		knownTypes.Add(typeof(List<PersistentCamera>), 385);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCanvas[]>), 386);
		knownTypes.Add(typeof(List<PersistentCanvas>), 387);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCanvasGroup[]>), 388);
		knownTypes.Add(typeof(List<PersistentCanvasGroup>), 389);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCanvasRenderer[]>), 390);
		knownTypes.Add(typeof(List<PersistentCanvasRenderer>), 391);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCanvasScaler[]>), 392);
		knownTypes.Add(typeof(List<PersistentCanvasScaler>), 393);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCapsuleCollider[]>), 394);
		knownTypes.Add(typeof(List<PersistentCapsuleCollider>), 395);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCapsuleCollider2D[]>), 396);
		knownTypes.Add(typeof(List<PersistentCapsuleCollider2D>), 397);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCharacterController[]>), 398);
		knownTypes.Add(typeof(List<PersistentCharacterController>), 399);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCharacterJoint[]>), 400);
		knownTypes.Add(typeof(List<PersistentCharacterJoint>), 401);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCircleCollider2D[]>), 402);
		knownTypes.Add(typeof(List<PersistentCircleCollider2D>), 403);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCollider[]>), 404);
		knownTypes.Add(typeof(List<PersistentCollider>), 405);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCollider2D[]>), 406);
		knownTypes.Add(typeof(List<PersistentCollider2D>), 407);
		knownTypes.Add(typeof(PrimitiveContract<PersistentComponent[]>), 408);
		knownTypes.Add(typeof(List<PersistentComponent>), 409);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCompositeCollider2D[]>), 410);
		knownTypes.Add(typeof(List<PersistentCompositeCollider2D>), 411);
		knownTypes.Add(typeof(PrimitiveContract<PersistentComputeShader[]>), 412);
		knownTypes.Add(typeof(List<PersistentComputeShader>), 413);
		knownTypes.Add(typeof(PrimitiveContract<PersistentConfigurableJoint[]>), 414);
		knownTypes.Add(typeof(List<PersistentConfigurableJoint>), 415);
		knownTypes.Add(typeof(PrimitiveContract<PersistentConstantForce[]>), 416);
		knownTypes.Add(typeof(List<PersistentConstantForce>), 417);
		knownTypes.Add(typeof(PrimitiveContract<PersistentConstantForce2D[]>), 418);
		knownTypes.Add(typeof(List<PersistentConstantForce2D>), 419);
		knownTypes.Add(typeof(PrimitiveContract<PersistentContentSizeFitter[]>), 420);
		knownTypes.Add(typeof(List<PersistentContentSizeFitter>), 421);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCubemap[]>), 422);
		knownTypes.Add(typeof(List<PersistentCubemap>), 423);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCubemapArray[]>), 424);
		knownTypes.Add(typeof(List<PersistentCubemapArray>), 425);
		knownTypes.Add(typeof(PrimitiveContract<PersistentData[]>), 426);
		knownTypes.Add(typeof(List<PersistentData>), 427);
		knownTypes.Add(typeof(PersistentDetailPrototype), 428);
		knownTypes.Add(typeof(PrimitiveContract<PersistentDetailPrototype[]>), 429);
		knownTypes.Add(typeof(List<PersistentDetailPrototype>), 430);
		knownTypes.Add(typeof(PrimitiveContract<PersistentDistanceJoint2D[]>), 431);
		knownTypes.Add(typeof(List<PersistentDistanceJoint2D>), 432);
		knownTypes.Add(typeof(PrimitiveContract<PersistentEdgeCollider2D[]>), 433);
		knownTypes.Add(typeof(List<PersistentEdgeCollider2D>), 434);
		knownTypes.Add(typeof(PrimitiveContract<PersistentEffector2D[]>), 435);
		knownTypes.Add(typeof(List<PersistentEffector2D>), 436);
		knownTypes.Add(typeof(PrimitiveContract<PersistentEventSystem[]>), 437);
		knownTypes.Add(typeof(List<PersistentEventSystem>), 438);
		knownTypes.Add(typeof(PrimitiveContract<PersistentEventTrigger[]>), 439);
		knownTypes.Add(typeof(List<PersistentEventTrigger>), 440);
		knownTypes.Add(typeof(PrimitiveContract<PersistentFixedJoint[]>), 441);
		knownTypes.Add(typeof(List<PersistentFixedJoint>), 442);
		knownTypes.Add(typeof(PrimitiveContract<PersistentFixedJoint2D[]>), 443);
		knownTypes.Add(typeof(List<PersistentFixedJoint2D>), 444);
		knownTypes.Add(typeof(PrimitiveContract<PersistentFlare[]>), 445);
		knownTypes.Add(typeof(List<PersistentFlare>), 446);
		knownTypes.Add(typeof(PrimitiveContract<PersistentFlareLayer[]>), 447);
		knownTypes.Add(typeof(List<PersistentFlareLayer>), 448);
		knownTypes.Add(typeof(PrimitiveContract<PersistentFont[]>), 449);
		knownTypes.Add(typeof(List<PersistentFont>), 450);
		knownTypes.Add(typeof(PrimitiveContract<PersistentFrictionJoint2D[]>), 451);
		knownTypes.Add(typeof(List<PersistentFrictionJoint2D>), 452);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGameObject[]>), 453);
		knownTypes.Add(typeof(List<PersistentGameObject>), 454);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGraphic[]>), 455);
		knownTypes.Add(typeof(List<PersistentGraphic>), 456);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGraphicRaycaster[]>), 457);
		knownTypes.Add(typeof(List<PersistentGraphicRaycaster>), 458);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGraphicsSettings[]>), 459);
		knownTypes.Add(typeof(List<PersistentGraphicsSettings>), 460);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGridLayoutGroup[]>), 461);
		knownTypes.Add(typeof(List<PersistentGridLayoutGroup>), 462);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGUIElement[]>), 463);
		knownTypes.Add(typeof(List<PersistentGUIElement>), 464);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGUILayer[]>), 465);
		knownTypes.Add(typeof(List<PersistentGUILayer>), 466);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGUISkin[]>), 467);
		knownTypes.Add(typeof(List<PersistentGUISkin>), 468);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGUIStyle[]>), 469);
		knownTypes.Add(typeof(List<PersistentGUIStyle>), 470);
		knownTypes.Add(typeof(PrimitiveContract<PersistentGUIStyleState[]>), 471);
		knownTypes.Add(typeof(List<PersistentGUIStyleState>), 472);
		knownTypes.Add(typeof(PrimitiveContract<PersistentHingeJoint[]>), 473);
		knownTypes.Add(typeof(List<PersistentHingeJoint>), 474);
		knownTypes.Add(typeof(PrimitiveContract<PersistentHingeJoint2D[]>), 475);
		knownTypes.Add(typeof(List<PersistentHingeJoint2D>), 476);
		knownTypes.Add(typeof(PrimitiveContract<PersistentHorizontalLayoutGroup[]>), 477);
		knownTypes.Add(typeof(List<PersistentHorizontalLayoutGroup>), 478);
		knownTypes.Add(typeof(PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]>), 479);
		knownTypes.Add(typeof(List<PersistentHorizontalOrVerticalLayoutGroup>), 480);
		knownTypes.Add(typeof(PrimitiveContract<PersistentImage[]>), 481);
		knownTypes.Add(typeof(List<PersistentImage>), 482);
		knownTypes.Add(typeof(PrimitiveContract<PersistentJoint[]>), 483);
		knownTypes.Add(typeof(List<PersistentJoint>), 484);
		knownTypes.Add(typeof(PrimitiveContract<PersistentJoint2D[]>), 485);
		knownTypes.Add(typeof(List<PersistentJoint2D>), 486);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLayoutElement[]>), 487);
		knownTypes.Add(typeof(List<PersistentLayoutElement>), 488);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLayoutGroup[]>), 489);
		knownTypes.Add(typeof(List<PersistentLayoutGroup>), 490);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLensFlare[]>), 491);
		knownTypes.Add(typeof(List<PersistentLensFlare>), 492);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLight[]>), 493);
		knownTypes.Add(typeof(List<PersistentLight>), 494);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLightmapSettings[]>), 495);
		knownTypes.Add(typeof(List<PersistentLightmapSettings>), 496);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLightProbeGroup[]>), 497);
		knownTypes.Add(typeof(List<PersistentLightProbeGroup>), 498);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLightProbeProxyVolume[]>), 499);
		knownTypes.Add(typeof(List<PersistentLightProbeProxyVolume>), 500);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLightProbes[]>), 501);
		knownTypes.Add(typeof(List<PersistentLightProbes>), 502);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLineRenderer[]>), 503);
		knownTypes.Add(typeof(List<PersistentLineRenderer>), 504);
		knownTypes.Add(typeof(PrimitiveContract<PersistentLODGroup[]>), 505);
		knownTypes.Add(typeof(List<PersistentLODGroup>), 506);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMask[]>), 507);
		knownTypes.Add(typeof(List<PersistentMask>), 508);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMeshCollider[]>), 509);
		knownTypes.Add(typeof(List<PersistentMeshCollider>), 510);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMeshFilter[]>), 511);
		knownTypes.Add(typeof(List<PersistentMeshFilter>), 512);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMeshRenderer[]>), 513);
		knownTypes.Add(typeof(List<PersistentMeshRenderer>), 514);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMonoBehaviour[]>), 515);
		knownTypes.Add(typeof(List<PersistentMonoBehaviour>), 516);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMotion[]>), 517);
		knownTypes.Add(typeof(List<PersistentMotion>), 518);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMovieTexture[]>), 519);
		knownTypes.Add(typeof(List<PersistentMovieTexture>), 520);
		knownTypes.Add(typeof(PrimitiveContract<PersistentNavMeshAgent[]>), 521);
		knownTypes.Add(typeof(List<PersistentNavMeshAgent>), 522);
		knownTypes.Add(typeof(PrimitiveContract<PersistentNavMeshData[]>), 523);
		knownTypes.Add(typeof(List<PersistentNavMeshData>), 524);
		knownTypes.Add(typeof(PrimitiveContract<PersistentNavMeshObstacle[]>), 525);
		knownTypes.Add(typeof(List<PersistentNavMeshObstacle>), 526);
		knownTypes.Add(typeof(PrimitiveContract<PersistentNetworkMatch[]>), 527);
		knownTypes.Add(typeof(List<PersistentNetworkMatch>), 528);
		knownTypes.Add(typeof(PrimitiveContract<PersistentNetworkView[]>), 529);
		knownTypes.Add(typeof(List<PersistentNetworkView>), 530);
		knownTypes.Add(typeof(PrimitiveContract<PersistentOcclusionArea[]>), 531);
		knownTypes.Add(typeof(List<PersistentOcclusionArea>), 532);
		knownTypes.Add(typeof(PrimitiveContract<PersistentOcclusionPortal[]>), 533);
		knownTypes.Add(typeof(List<PersistentOcclusionPortal>), 534);
		knownTypes.Add(typeof(PrimitiveContract<PersistentOffMeshLink[]>), 535);
		knownTypes.Add(typeof(List<PersistentOffMeshLink>), 536);
		knownTypes.Add(typeof(PrimitiveContract<PersistentOutline[]>), 537);
		knownTypes.Add(typeof(List<PersistentOutline>), 538);
		knownTypes.Add(typeof(PrimitiveContract<PersistentParticleSystemRenderer[]>), 539);
		knownTypes.Add(typeof(List<PersistentParticleSystemRenderer>), 540);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPhysicMaterial[]>), 541);
		knownTypes.Add(typeof(List<PersistentPhysicMaterial>), 542);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPhysics2DRaycaster[]>), 543);
		knownTypes.Add(typeof(List<PersistentPhysics2DRaycaster>), 544);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPhysicsMaterial2D[]>), 545);
		knownTypes.Add(typeof(List<PersistentPhysicsMaterial2D>), 546);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPhysicsRaycaster[]>), 547);
		knownTypes.Add(typeof(List<PersistentPhysicsRaycaster>), 548);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]>), 549);
		knownTypes.Add(typeof(List<PersistentPhysicsUpdateBehaviour2D>), 550);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPlatformEffector2D[]>), 551);
		knownTypes.Add(typeof(List<PersistentPlatformEffector2D>), 552);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPlayerConnection[]>), 553);
		knownTypes.Add(typeof(List<PersistentPlayerConnection>), 554);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPointEffector2D[]>), 555);
		knownTypes.Add(typeof(List<PersistentPointEffector2D>), 556);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPointerInputModule[]>), 557);
		knownTypes.Add(typeof(List<PersistentPointerInputModule>), 558);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPolygonCollider2D[]>), 559);
		knownTypes.Add(typeof(List<PersistentPolygonCollider2D>), 560);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPositionAsUV1[]>), 561);
		knownTypes.Add(typeof(List<PersistentPositionAsUV1>), 562);
		knownTypes.Add(typeof(PrimitiveContract<PersistentProceduralTexture[]>), 563);
		knownTypes.Add(typeof(List<PersistentProceduralTexture>), 564);
		knownTypes.Add(typeof(PrimitiveContract<PersistentProjector[]>), 565);
		knownTypes.Add(typeof(List<PersistentProjector>), 566);
		knownTypes.Add(typeof(PrimitiveContract<PersistentQualitySettings[]>), 567);
		knownTypes.Add(typeof(List<PersistentQualitySettings>), 568);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRawImage[]>), 569);
		knownTypes.Add(typeof(List<PersistentRawImage>), 570);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRectMask2D[]>), 571);
		knownTypes.Add(typeof(List<PersistentRectMask2D>), 572);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRectTransform[]>), 573);
		knownTypes.Add(typeof(List<PersistentRectTransform>), 574);
		knownTypes.Add(typeof(PrimitiveContract<PersistentReflectionProbe[]>), 575);
		knownTypes.Add(typeof(List<PersistentReflectionProbe>), 576);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRelativeJoint2D[]>), 577);
		knownTypes.Add(typeof(List<PersistentRelativeJoint2D>), 578);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRenderer[]>), 579);
		knownTypes.Add(typeof(List<PersistentRenderer>), 580);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRenderPipelineAsset[]>), 581);
		knownTypes.Add(typeof(List<PersistentRenderPipelineAsset>), 582);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRenderSettings[]>), 583);
		knownTypes.Add(typeof(List<PersistentRenderSettings>), 584);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRenderTexture[]>), 585);
		knownTypes.Add(typeof(List<PersistentRenderTexture>), 586);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRigidbody[]>), 587);
		knownTypes.Add(typeof(List<PersistentRigidbody>), 588);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRigidbody2D[]>), 589);
		knownTypes.Add(typeof(List<PersistentRigidbody2D>), 590);
		knownTypes.Add(typeof(PrimitiveContract<PersistentRuntimeAnimatorController[]>), 591);
		knownTypes.Add(typeof(List<PersistentRuntimeAnimatorController>), 592);
		knownTypes.Add(typeof(PrimitiveContract<PersistentScriptableObject[]>), 593);
		knownTypes.Add(typeof(List<PersistentScriptableObject>), 594);
		knownTypes.Add(typeof(PrimitiveContract<PersistentShader[]>), 595);
		knownTypes.Add(typeof(List<PersistentShader>), 596);
		knownTypes.Add(typeof(PrimitiveContract<PersistentShaderVariantCollection[]>), 597);
		knownTypes.Add(typeof(List<PersistentShaderVariantCollection>), 598);
		knownTypes.Add(typeof(PrimitiveContract<PersistentShadow[]>), 599);
		knownTypes.Add(typeof(List<PersistentShadow>), 600);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSkinnedMeshRenderer[]>), 601);
		knownTypes.Add(typeof(List<PersistentSkinnedMeshRenderer>), 602);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSkybox[]>), 603);
		knownTypes.Add(typeof(List<PersistentSkybox>), 604);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSliderJoint2D[]>), 605);
		knownTypes.Add(typeof(List<PersistentSliderJoint2D>), 606);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSortingGroup[]>), 607);
		knownTypes.Add(typeof(List<PersistentSortingGroup>), 608);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSparseTexture[]>), 609);
		knownTypes.Add(typeof(List<PersistentSparseTexture>), 610);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSphereCollider[]>), 611);
		knownTypes.Add(typeof(List<PersistentSphereCollider>), 612);
		knownTypes.Add(typeof(PersistentSplatPrototype), 613);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSplatPrototype[]>), 614);
		knownTypes.Add(typeof(List<PersistentSplatPrototype>), 615);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSpringJoint[]>), 616);
		knownTypes.Add(typeof(List<PersistentSpringJoint>), 617);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSpringJoint2D[]>), 618);
		knownTypes.Add(typeof(List<PersistentSpringJoint2D>), 619);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSprite[]>), 620);
		knownTypes.Add(typeof(List<PersistentSprite>), 621);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSpriteRenderer[]>), 622);
		knownTypes.Add(typeof(List<PersistentSpriteRenderer>), 623);
		knownTypes.Add(typeof(PrimitiveContract<PersistentStandaloneInputModule[]>), 624);
		knownTypes.Add(typeof(List<PersistentStandaloneInputModule>), 625);
		knownTypes.Add(typeof(PrimitiveContract<PersistentStateMachineBehaviour[]>), 626);
		knownTypes.Add(typeof(List<PersistentStateMachineBehaviour>), 627);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSurfaceEffector2D[]>), 628);
		knownTypes.Add(typeof(List<PersistentSurfaceEffector2D>), 629);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTargetJoint2D[]>), 630);
		knownTypes.Add(typeof(List<PersistentTargetJoint2D>), 631);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTerrain[]>), 632);
		knownTypes.Add(typeof(List<PersistentTerrain>), 633);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTerrainCollider[]>), 634);
		knownTypes.Add(typeof(List<PersistentTerrainCollider>), 635);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTerrainData[]>), 636);
		knownTypes.Add(typeof(List<PersistentTerrainData>), 637);
		knownTypes.Add(typeof(PrimitiveContract<PersistentText[]>), 638);
		knownTypes.Add(typeof(List<PersistentText>), 639);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTextAsset[]>), 640);
		knownTypes.Add(typeof(List<PersistentTextAsset>), 641);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTextMesh[]>), 642);
		knownTypes.Add(typeof(List<PersistentTextMesh>), 643);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTexture2DArray[]>), 644);
		knownTypes.Add(typeof(List<PersistentTexture2DArray>), 645);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTexture3D[]>), 646);
		knownTypes.Add(typeof(List<PersistentTexture3D>), 647);
		knownTypes.Add(typeof(PrimitiveContract<PersistentToggle[]>), 648);
		knownTypes.Add(typeof(List<PersistentToggle>), 649);
		knownTypes.Add(typeof(PrimitiveContract<PersistentToggleGroup[]>), 650);
		knownTypes.Add(typeof(List<PersistentToggleGroup>), 651);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTrailRenderer[]>), 652);
		knownTypes.Add(typeof(List<PersistentTrailRenderer>), 653);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTree[]>), 654);
		knownTypes.Add(typeof(List<PersistentTree>), 655);
		knownTypes.Add(typeof(PersistentTreePrototype), 656);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTreePrototype[]>), 657);
		knownTypes.Add(typeof(List<PersistentTreePrototype>), 658);
		knownTypes.Add(typeof(PrimitiveContract<PersistentUIBehaviour[]>), 659);
		knownTypes.Add(typeof(List<PersistentUIBehaviour>), 660);
		knownTypes.Add(typeof(PrimitiveContract<PersistentVerticalLayoutGroup[]>), 661);
		knownTypes.Add(typeof(List<PersistentVerticalLayoutGroup>), 662);
		knownTypes.Add(typeof(PrimitiveContract<PersistentVideoClip[]>), 663);
		knownTypes.Add(typeof(List<PersistentVideoClip>), 664);
		knownTypes.Add(typeof(PrimitiveContract<PersistentVideoPlayer[]>), 665);
		knownTypes.Add(typeof(List<PersistentVideoPlayer>), 666);
		knownTypes.Add(typeof(PrimitiveContract<PersistentWebCamTexture[]>), 667);
		knownTypes.Add(typeof(List<PersistentWebCamTexture>), 668);
		knownTypes.Add(typeof(PrimitiveContract<PersistentWheelCollider[]>), 669);
		knownTypes.Add(typeof(List<PersistentWheelCollider>), 670);
		knownTypes.Add(typeof(PrimitiveContract<PersistentWheelJoint2D[]>), 671);
		knownTypes.Add(typeof(List<PersistentWheelJoint2D>), 672);
		knownTypes.Add(typeof(PrimitiveContract<PersistentWindZone[]>), 673);
		knownTypes.Add(typeof(List<PersistentWindZone>), 674);
		knownTypes.Add(typeof(PrimitiveContract<PersistentWorldAnchor[]>), 675);
		knownTypes.Add(typeof(List<PersistentWorldAnchor>), 676);
		knownTypes.Add(typeof(GradientAlphaKeySurrogate), 677);
		knownTypes.Add(typeof(PrimitiveContract<GradientAlphaKeySurrogate[]>), 678);
		knownTypes.Add(typeof(List<GradientAlphaKeySurrogate>), 679);
		knownTypes.Add(typeof(GradientColorKeySurrogate), 680);
		knownTypes.Add(typeof(PrimitiveContract<GradientColorKeySurrogate[]>), 681);
		knownTypes.Add(typeof(List<GradientColorKeySurrogate>), 682);
		knownTypes.Add(typeof(LayerMaskSurrogate), 683);
		knownTypes.Add(typeof(PrimitiveContract<LayerMaskSurrogate[]>), 684);
		knownTypes.Add(typeof(List<LayerMaskSurrogate>), 685);
		knownTypes.Add(typeof(RectOffsetSurrogate), 686);
		knownTypes.Add(typeof(PrimitiveContract<RectOffsetSurrogate[]>), 687);
		knownTypes.Add(typeof(List<RectOffsetSurrogate>), 688);
		knownTypes.Add(typeof(AnimationTriggersSurrogate), 689);
		knownTypes.Add(typeof(PrimitiveContract<AnimationTriggersSurrogate[]>), 690);
		knownTypes.Add(typeof(List<AnimationTriggersSurrogate>), 691);
		knownTypes.Add(typeof(ColorBlockSurrogate), 692);
		knownTypes.Add(typeof(PrimitiveContract<ColorBlockSurrogate[]>), 693);
		knownTypes.Add(typeof(List<ColorBlockSurrogate>), 694);
		knownTypes.Add(typeof(NavMeshPathSurrogate), 695);
		knownTypes.Add(typeof(PrimitiveContract<NavMeshPathSurrogate[]>), 696);
		knownTypes.Add(typeof(List<NavMeshPathSurrogate>), 697);
		knownTypes.Add(typeof(ClothSkinningCoefficientSurrogate), 698);
		knownTypes.Add(typeof(PrimitiveContract<ClothSkinningCoefficientSurrogate[]>), 699);
		knownTypes.Add(typeof(List<ClothSkinningCoefficientSurrogate>), 700);
		knownTypes.Add(typeof(BoneWeightSurrogate), 701);
		knownTypes.Add(typeof(PrimitiveContract<BoneWeightSurrogate[]>), 702);
		knownTypes.Add(typeof(List<BoneWeightSurrogate>), 703);
		knownTypes.Add(typeof(TreeInstanceSurrogate), 704);
		knownTypes.Add(typeof(PrimitiveContract<TreeInstanceSurrogate[]>), 705);
		knownTypes.Add(typeof(List<TreeInstanceSurrogate>), 706);
		knownTypes.Add(typeof(CharacterInfoSurrogate), 707);
		knownTypes.Add(typeof(PrimitiveContract<CharacterInfoSurrogate[]>), 708);
		knownTypes.Add(typeof(List<CharacterInfoSurrogate>), 709);
		knownTypes.Add(typeof(Vector3Surrogate), 710);
		knownTypes.Add(typeof(PrimitiveContract<Vector3Surrogate[]>), 711);
		knownTypes.Add(typeof(List<Vector3Surrogate>), 712);
		knownTypes.Add(typeof(ColorSurrogate), 713);
		knownTypes.Add(typeof(PrimitiveContract<ColorSurrogate[]>), 714);
		knownTypes.Add(typeof(List<ColorSurrogate>), 715);
		knownTypes.Add(typeof(RectSurrogate), 716);
		knownTypes.Add(typeof(PrimitiveContract<RectSurrogate[]>), 717);
		knownTypes.Add(typeof(List<RectSurrogate>), 718);
		knownTypes.Add(typeof(Matrix4x4Surrogate), 719);
		knownTypes.Add(typeof(PrimitiveContract<Matrix4x4Surrogate[]>), 720);
		knownTypes.Add(typeof(List<Matrix4x4Surrogate>), 721);
		knownTypes.Add(typeof(SceneSurrogate), 722);
		knownTypes.Add(typeof(PrimitiveContract<SceneSurrogate[]>), 723);
		knownTypes.Add(typeof(List<SceneSurrogate>), 724);
		knownTypes.Add(typeof(BoundsSurrogate), 725);
		knownTypes.Add(typeof(PrimitiveContract<BoundsSurrogate[]>), 726);
		knownTypes.Add(typeof(List<BoundsSurrogate>), 727);
		knownTypes.Add(typeof(Vector4Surrogate), 728);
		knownTypes.Add(typeof(PrimitiveContract<Vector4Surrogate[]>), 729);
		knownTypes.Add(typeof(List<Vector4Surrogate>), 730);
		knownTypes.Add(typeof(NetworkViewIDSurrogate), 731);
		knownTypes.Add(typeof(PrimitiveContract<NetworkViewIDSurrogate[]>), 732);
		knownTypes.Add(typeof(List<NetworkViewIDSurrogate>), 733);
		knownTypes.Add(typeof(NetworkPlayerSurrogate), 734);
		knownTypes.Add(typeof(PrimitiveContract<NetworkPlayerSurrogate[]>), 735);
		knownTypes.Add(typeof(List<NetworkPlayerSurrogate>), 736);
		knownTypes.Add(typeof(Vector2Surrogate), 737);
		knownTypes.Add(typeof(PrimitiveContract<Vector2Surrogate[]>), 738);
		knownTypes.Add(typeof(List<Vector2Surrogate>), 739);
		knownTypes.Add(typeof(RenderBufferSurrogate), 740);
		knownTypes.Add(typeof(PrimitiveContract<RenderBufferSurrogate[]>), 741);
		knownTypes.Add(typeof(List<RenderBufferSurrogate>), 742);
		knownTypes.Add(typeof(QuaternionSurrogate), 743);
		knownTypes.Add(typeof(PrimitiveContract<QuaternionSurrogate[]>), 744);
		knownTypes.Add(typeof(List<QuaternionSurrogate>), 745);
		knownTypes.Add(typeof(JointMotorSurrogate), 746);
		knownTypes.Add(typeof(PrimitiveContract<JointMotorSurrogate[]>), 747);
		knownTypes.Add(typeof(List<JointMotorSurrogate>), 748);
		knownTypes.Add(typeof(JointLimitsSurrogate), 749);
		knownTypes.Add(typeof(PrimitiveContract<JointLimitsSurrogate[]>), 750);
		knownTypes.Add(typeof(List<JointLimitsSurrogate>), 751);
		knownTypes.Add(typeof(JointSpringSurrogate), 752);
		knownTypes.Add(typeof(PrimitiveContract<JointSpringSurrogate[]>), 753);
		knownTypes.Add(typeof(List<JointSpringSurrogate>), 754);
		knownTypes.Add(typeof(JointDriveSurrogate), 755);
		knownTypes.Add(typeof(PrimitiveContract<JointDriveSurrogate[]>), 756);
		knownTypes.Add(typeof(List<JointDriveSurrogate>), 757);
		knownTypes.Add(typeof(SoftJointLimitSpringSurrogate), 758);
		knownTypes.Add(typeof(PrimitiveContract<SoftJointLimitSpringSurrogate[]>), 759);
		knownTypes.Add(typeof(List<SoftJointLimitSpringSurrogate>), 760);
		knownTypes.Add(typeof(SoftJointLimitSurrogate), 761);
		knownTypes.Add(typeof(PrimitiveContract<SoftJointLimitSurrogate[]>), 762);
		knownTypes.Add(typeof(List<SoftJointLimitSurrogate>), 763);
		knownTypes.Add(typeof(JointMotor2DSurrogate), 764);
		knownTypes.Add(typeof(PrimitiveContract<JointMotor2DSurrogate[]>), 765);
		knownTypes.Add(typeof(List<JointMotor2DSurrogate>), 766);
		knownTypes.Add(typeof(JointAngleLimits2DSurrogate), 767);
		knownTypes.Add(typeof(PrimitiveContract<JointAngleLimits2DSurrogate[]>), 768);
		knownTypes.Add(typeof(List<JointAngleLimits2DSurrogate>), 769);
		knownTypes.Add(typeof(JointTranslationLimits2DSurrogate), 770);
		knownTypes.Add(typeof(PrimitiveContract<JointTranslationLimits2DSurrogate[]>), 771);
		knownTypes.Add(typeof(List<JointTranslationLimits2DSurrogate>), 772);
		knownTypes.Add(typeof(JointSuspension2DSurrogate), 773);
		knownTypes.Add(typeof(PrimitiveContract<JointSuspension2DSurrogate[]>), 774);
		knownTypes.Add(typeof(List<JointSuspension2DSurrogate>), 775);
		knownTypes.Add(typeof(WheelFrictionCurveSurrogate), 776);
		knownTypes.Add(typeof(PrimitiveContract<WheelFrictionCurveSurrogate[]>), 777);
		knownTypes.Add(typeof(List<WheelFrictionCurveSurrogate>), 778);
		knownTypes.Add(typeof(OffMeshLinkDataSurrogate), 779);
		knownTypes.Add(typeof(PrimitiveContract<OffMeshLinkDataSurrogate[]>), 780);
		knownTypes.Add(typeof(List<OffMeshLinkDataSurrogate>), 781);
		knownTypes.Add(typeof(PlayableGraphSurrogate), 782);
		knownTypes.Add(typeof(PrimitiveContract<PlayableGraphSurrogate[]>), 783);
		knownTypes.Add(typeof(List<PlayableGraphSurrogate>), 784);
		knownTypes.Add(typeof(Color32Surrogate), 785);
		knownTypes.Add(typeof(PrimitiveContract<Color32Surrogate[]>), 786);
		knownTypes.Add(typeof(List<Color32Surrogate>), 787);
		knownTypes.Add(typeof(PersistentDescriptor), 788);
		knownTypes.Add(typeof(PrimitiveContract<PersistentDescriptor[]>), 789);
		knownTypes.Add(typeof(List<PersistentDescriptor>), 790);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCollisionModule[]>), 791);
		knownTypes.Add(typeof(List<PersistentCollisionModule>), 792);
		knownTypes.Add(typeof(PrimitiveContract<PersistentEmissionModule[]>), 793);
		knownTypes.Add(typeof(List<PersistentEmissionModule>), 794);
		knownTypes.Add(typeof(PrimitiveContract<PersistentParticleSystem[]>), 795);
		knownTypes.Add(typeof(List<PersistentParticleSystem>), 796);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTriggerModule[]>), 797);
		knownTypes.Add(typeof(List<PersistentTriggerModule>), 798);
		knownTypes.Add(typeof(PrimitiveContract<PersistentCloth[]>), 799);
		knownTypes.Add(typeof(List<PersistentCloth>), 800);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMaterial[]>), 801);
		knownTypes.Add(typeof(List<PersistentMaterial>), 802);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMesh[]>), 803);
		knownTypes.Add(typeof(List<PersistentMesh>), 804);
		knownTypes.Add(typeof(PrimitiveContract<PersistentObject[]>), 805);
		knownTypes.Add(typeof(List<PersistentObject>), 806);
		knownTypes.Add(typeof(PersistentArgumentCache), 807);
		knownTypes.Add(typeof(PrimitiveContract<PersistentArgumentCache[]>), 808);
		knownTypes.Add(typeof(List<PersistentArgumentCache>), 809);
		knownTypes.Add(typeof(PersistentPersistentCall), 810);
		knownTypes.Add(typeof(PrimitiveContract<PersistentPersistentCall[]>), 811);
		knownTypes.Add(typeof(List<PersistentPersistentCall>), 812);
		knownTypes.Add(typeof(PersistentUnityEventBase), 813);
		knownTypes.Add(typeof(PrimitiveContract<PersistentUnityEventBase[]>), 814);
		knownTypes.Add(typeof(List<PersistentUnityEventBase>), 815);
		knownTypes.Add(typeof(IntArray), 816);
		knownTypes.Add(typeof(PrimitiveContract<IntArray[]>), 817);
		knownTypes.Add(typeof(List<IntArray>), 818);
		knownTypes.Add(typeof(PrimitiveContract<PrimitiveContract[]>), 819);
		knownTypes.Add(typeof(List<PrimitiveContract>), 820);
		knownTypes.Add(typeof(DataContract), 821);
		knownTypes.Add(typeof(PrimitiveContract<DataContract[]>), 822);
		knownTypes.Add(typeof(List<DataContract>), 823);
		knownTypes.Add(typeof(PrimitiveContract<PersistentScript[]>), 824);
		knownTypes.Add(typeof(List<PersistentScript>), 825);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTexture[]>), 826);
		knownTypes.Add(typeof(List<PersistentTexture>), 827);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTexture2D[]>), 828);
		knownTypes.Add(typeof(List<PersistentTexture2D>), 829);
		knownTypes.Add(typeof(PrimitiveContract<PersistentTransform[]>), 830);
		knownTypes.Add(typeof(List<PersistentTransform>), 831);
		knownTypes.Add(typeof(PrimitiveContract<PersistentButton[]>), 832);
		knownTypes.Add(typeof(List<PersistentButton>), 833);
		knownTypes.Add(typeof(PrimitiveContract<PersistentDropdown[]>), 834);
		knownTypes.Add(typeof(List<PersistentDropdown>), 835);
		knownTypes.Add(typeof(PrimitiveContract<PersistentInputField[]>), 836);
		knownTypes.Add(typeof(List<PersistentInputField>), 837);
		knownTypes.Add(typeof(PrimitiveContract<PersistentMaskableGraphic[]>), 838);
		knownTypes.Add(typeof(List<PersistentMaskableGraphic>), 839);
		knownTypes.Add(typeof(PrimitiveContract<PersistentNavigation[]>), 840);
		knownTypes.Add(typeof(List<PersistentNavigation>), 841);
		knownTypes.Add(typeof(PrimitiveContract<PersistentOptionData[]>), 842);
		knownTypes.Add(typeof(List<PersistentOptionData>), 843);
		knownTypes.Add(typeof(PrimitiveContract<PersistentScrollbar[]>), 844);
		knownTypes.Add(typeof(List<PersistentScrollbar>), 845);
		knownTypes.Add(typeof(PrimitiveContract<PersistentScrollRect[]>), 846);
		knownTypes.Add(typeof(List<PersistentScrollRect>), 847);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSelectable[]>), 848);
		knownTypes.Add(typeof(List<PersistentSelectable>), 849);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSlider[]>), 850);
		knownTypes.Add(typeof(List<PersistentSlider>), 851);
		knownTypes.Add(typeof(PrimitiveContract<PersistentSpriteState[]>), 852);
		knownTypes.Add(typeof(List<PersistentSpriteState>), 853);
		knownTypes.Add(typeof(PersistentScene), 854);
		knownTypes.Add(typeof(PrimitiveContract<PersistentScene[]>), 855);
		knownTypes.Add(typeof(List<PersistentScene>), 856);
		knownTypes.Add(typeof(NilContainer), 857);
		knownTypes.Add(typeof(PrimitiveContract<NilContainer[]>), 858);
		knownTypes.Add(typeof(List<NilContainer>), 859);
		knownTypes.Add(typeof(ProjectItemMeta), 860);
		knownTypes.Add(typeof(PrimitiveContract<ProjectItemMeta[]>), 861);
		knownTypes.Add(typeof(List<ProjectItemMeta>), 862);
		knownTypes.Add(typeof(ProjectItemData), 863);
		knownTypes.Add(typeof(PrimitiveContract<ProjectItemData[]>), 864);
		knownTypes.Add(typeof(List<ProjectItemData>), 865);
		knownTypes.Add(typeof(ProjectMeta), 866);
		knownTypes.Add(typeof(PrimitiveContract<ProjectMeta[]>), 867);
		knownTypes.Add(typeof(List<ProjectMeta>), 868);
		knownTypes.Add(typeof(ProjectData), 869);
		knownTypes.Add(typeof(PrimitiveContract<ProjectData[]>), 870);
		knownTypes.Add(typeof(List<ProjectData>), 871);
		knownTypes.Add(typeof(AssetBundleDescriptor), 872);
		knownTypes.Add(typeof(PrimitiveContract<AssetBundleDescriptor[]>), 873);
		knownTypes.Add(typeof(List<AssetBundleDescriptor>), 874);
		knownTypes.Add(typeof(ProjectItem), 875);
		knownTypes.Add(typeof(PrimitiveContract<ProjectItem[]>), 876);
		knownTypes.Add(typeof(List<ProjectItem>), 877);
		knownTypes.Add(typeof(List<bool>), 878);
		knownTypes.Add(typeof(List<char>), 879);
		knownTypes.Add(typeof(List<byte>), 880);
		knownTypes.Add(typeof(List<short>), 881);
		knownTypes.Add(typeof(List<int>), 882);
		knownTypes.Add(typeof(List<long>), 883);
		knownTypes.Add(typeof(List<ushort>), 884);
		knownTypes.Add(typeof(List<uint>), 885);
		knownTypes.Add(typeof(List<ulong>), 886);
		knownTypes.Add(typeof(List<string>), 887);
		knownTypes.Add(typeof(List<float>), 888);
		knownTypes.Add(typeof(List<double>), 889);
		knownTypes.Add(typeof(List<decimal>), 890);
		knownTypes.Add(typeof(GradientAlphaKey), 891);
		knownTypes.Add(typeof(PrimitiveContract<GradientAlphaKey[]>), 892);
		knownTypes.Add(typeof(List<GradientAlphaKey>), 893);
		knownTypes.Add(typeof(GradientColorKey), 894);
		knownTypes.Add(typeof(PrimitiveContract<GradientColorKey[]>), 895);
		knownTypes.Add(typeof(List<GradientColorKey>), 896);
		knownTypes.Add(typeof(LayerMask), 897);
		knownTypes.Add(typeof(PrimitiveContract<LayerMask[]>), 898);
		knownTypes.Add(typeof(List<LayerMask>), 899);
		knownTypes.Add(typeof(RectOffset), 900);
		knownTypes.Add(typeof(PrimitiveContract<RectOffset[]>), 901);
		knownTypes.Add(typeof(List<RectOffset>), 902);
		knownTypes.Add(typeof(AnimationTriggers), 903);
		knownTypes.Add(typeof(PrimitiveContract<AnimationTriggers[]>), 904);
		knownTypes.Add(typeof(List<AnimationTriggers>), 905);
		knownTypes.Add(typeof(ColorBlock), 906);
		knownTypes.Add(typeof(PrimitiveContract<ColorBlock[]>), 907);
		knownTypes.Add(typeof(List<ColorBlock>), 908);
		knownTypes.Add(typeof(NavMeshPath), 909);
		knownTypes.Add(typeof(PrimitiveContract<NavMeshPath[]>), 910);
		knownTypes.Add(typeof(List<NavMeshPath>), 911);
		knownTypes.Add(typeof(ClothSkinningCoefficient), 912);
		knownTypes.Add(typeof(PrimitiveContract<ClothSkinningCoefficient[]>), 913);
		knownTypes.Add(typeof(List<ClothSkinningCoefficient>), 914);
		knownTypes.Add(typeof(BoneWeight), 915);
		knownTypes.Add(typeof(PrimitiveContract<BoneWeight[]>), 916);
		knownTypes.Add(typeof(List<BoneWeight>), 917);
		knownTypes.Add(typeof(TreeInstance), 918);
		knownTypes.Add(typeof(PrimitiveContract<TreeInstance[]>), 919);
		knownTypes.Add(typeof(List<TreeInstance>), 920);
		knownTypes.Add(typeof(CharacterInfo), 921);
		knownTypes.Add(typeof(PrimitiveContract<CharacterInfo[]>), 922);
		knownTypes.Add(typeof(List<CharacterInfo>), 923);
		knownTypes.Add(typeof(Vector3), 924);
		knownTypes.Add(typeof(List<Vector3>), 925);
		knownTypes.Add(typeof(Color), 926);
		knownTypes.Add(typeof(List<Color>), 927);
		knownTypes.Add(typeof(Rect), 928);
		knownTypes.Add(typeof(PrimitiveContract<Rect[]>), 929);
		knownTypes.Add(typeof(List<Rect>), 930);
		knownTypes.Add(typeof(Matrix4x4), 931);
		knownTypes.Add(typeof(PrimitiveContract<Matrix4x4[]>), 932);
		knownTypes.Add(typeof(List<Matrix4x4>), 933);
		knownTypes.Add(typeof(Scene), 934);
		knownTypes.Add(typeof(PrimitiveContract<Scene[]>), 935);
		knownTypes.Add(typeof(List<Scene>), 936);
		knownTypes.Add(typeof(Bounds), 937);
		knownTypes.Add(typeof(PrimitiveContract<Bounds[]>), 938);
		knownTypes.Add(typeof(List<Bounds>), 939);
		knownTypes.Add(typeof(Vector4), 940);
		knownTypes.Add(typeof(List<Vector4>), 941);
		knownTypes.Add(typeof(Vector2), 942);
		knownTypes.Add(typeof(PrimitiveContract<Vector2[]>), 943);
		knownTypes.Add(typeof(List<Vector2>), 944);
		knownTypes.Add(typeof(RenderBuffer), 945);
		knownTypes.Add(typeof(PrimitiveContract<RenderBuffer[]>), 946);
		knownTypes.Add(typeof(List<RenderBuffer>), 947);
		knownTypes.Add(typeof(Quaternion), 948);
		knownTypes.Add(typeof(PrimitiveContract<Quaternion[]>), 949);
		knownTypes.Add(typeof(List<Quaternion>), 950);
		knownTypes.Add(typeof(JointMotor), 951);
		knownTypes.Add(typeof(PrimitiveContract<JointMotor[]>), 952);
		knownTypes.Add(typeof(List<JointMotor>), 953);
		knownTypes.Add(typeof(JointLimits), 954);
		knownTypes.Add(typeof(PrimitiveContract<JointLimits[]>), 955);
		knownTypes.Add(typeof(List<JointLimits>), 956);
		knownTypes.Add(typeof(JointSpring), 957);
		knownTypes.Add(typeof(PrimitiveContract<JointSpring[]>), 958);
		knownTypes.Add(typeof(List<JointSpring>), 959);
		knownTypes.Add(typeof(JointDrive), 960);
		knownTypes.Add(typeof(PrimitiveContract<JointDrive[]>), 961);
		knownTypes.Add(typeof(List<JointDrive>), 962);
		knownTypes.Add(typeof(SoftJointLimitSpring), 963);
		knownTypes.Add(typeof(PrimitiveContract<SoftJointLimitSpring[]>), 964);
		knownTypes.Add(typeof(List<SoftJointLimitSpring>), 965);
		knownTypes.Add(typeof(SoftJointLimit), 966);
		knownTypes.Add(typeof(PrimitiveContract<SoftJointLimit[]>), 967);
		knownTypes.Add(typeof(List<SoftJointLimit>), 968);
		knownTypes.Add(typeof(JointMotor2D), 969);
		knownTypes.Add(typeof(PrimitiveContract<JointMotor2D[]>), 970);
		knownTypes.Add(typeof(List<JointMotor2D>), 971);
		knownTypes.Add(typeof(JointAngleLimits2D), 972);
		knownTypes.Add(typeof(PrimitiveContract<JointAngleLimits2D[]>), 973);
		knownTypes.Add(typeof(List<JointAngleLimits2D>), 974);
		knownTypes.Add(typeof(JointTranslationLimits2D), 975);
		knownTypes.Add(typeof(PrimitiveContract<JointTranslationLimits2D[]>), 976);
		knownTypes.Add(typeof(List<JointTranslationLimits2D>), 977);
		knownTypes.Add(typeof(JointSuspension2D), 978);
		knownTypes.Add(typeof(PrimitiveContract<JointSuspension2D[]>), 979);
		knownTypes.Add(typeof(List<JointSuspension2D>), 980);
		knownTypes.Add(typeof(WheelFrictionCurve), 981);
		knownTypes.Add(typeof(PrimitiveContract<WheelFrictionCurve[]>), 982);
		knownTypes.Add(typeof(List<WheelFrictionCurve>), 983);
		knownTypes.Add(typeof(OffMeshLinkData), 984);
		knownTypes.Add(typeof(PrimitiveContract<OffMeshLinkData[]>), 985);
		knownTypes.Add(typeof(List<OffMeshLinkData>), 986);
		knownTypes.Add(typeof(PlayableGraph), 987);
		knownTypes.Add(typeof(PrimitiveContract<PlayableGraph[]>), 988);
		knownTypes.Add(typeof(List<PlayableGraph>), 989);
		knownTypes.Add(typeof(Color32), 990);
		knownTypes.Add(typeof(PrimitiveContract<Color32[]>), 991);
		knownTypes.Add(typeof(List<Color32>), 992);
		knownTypes.Add(typeof(ParticleSystemCollisionMode), 993);
		knownTypes.Add(typeof(ParticleSystemCollisionQuality), 994);
		knownTypes.Add(typeof(ParticleSystemCollisionType), 995);
		knownTypes.Add(typeof(ParticleSystemOverlapAction), 996);
		knownTypes.Add(typeof(ScrollRect.ScrollbarVisibility), 997);
		knownTypes.Add(typeof(ScrollRect.MovementType), 998);
		knownTypes.Add(typeof(Selectable.Transition), 999);
		knownTypes.Add(typeof(InputField.CharacterValidation), 1000);
		knownTypes.Add(typeof(InputField.ContentType), 1001);
		knownTypes.Add(typeof(InputField.InputType), 1002);
		knownTypes.Add(typeof(TouchScreenKeyboardType), 1003);
		knownTypes.Add(typeof(InputField.LineType), 1004);
		knownTypes.Add(typeof(Scrollbar.Direction), 1005);
		knownTypes.Add(typeof(Slider.Direction), 1006);
		knownTypes.Add(typeof(RTShaderPropertyType), 1007);
		knownTypes.Add(typeof(TextureDimension), 1008);
		knownTypes.Add(typeof(FilterMode), 1009);
		knownTypes.Add(typeof(TextureWrapMode), 1010);
		knownTypes.Add(typeof(KeyValuePair<string, DataContract>), 1011);
		knownTypes.Add(typeof(Navigation.Mode), 1012);
		knownTypes.Add(typeof(UnityEventCallState), 1013);
		knownTypes.Add(typeof(PersistentListenerMode), 1014);
	}

	private static void Write(PersistentAnimationCurve P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAnimationCurve))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAnimationCurve), P_0.GetType());
		}
		PersistentKeyframe[] keys = P_0.keys;
		if (keys != null)
		{
			PersistentKeyframe[] array = keys;
			foreach (PersistentKeyframe obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
					Write((PersistentData)obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		uint postWrapMode = P_0.postWrapMode;
		if (postWrapMode != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(postWrapMode, P_1);
		}
		uint preWrapMode = P_0.preWrapMode;
		if (preWrapMode != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(preWrapMode, P_1);
		}
	}

	private static PersistentAnimationCurve Read(PersistentAnimationCurve P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAnimationCurve persistentAnimationCurve3 = new PersistentAnimationCurve();
					ProtoReader.NoteObject(persistentAnimationCurve3, P_1);
					P_0 = persistentAnimationCurve3;
				}
				PersistentKeyframe[] keys = P_0.keys;
				List<PersistentKeyframe> list = new List<PersistentKeyframe>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentKeyframe item = (PersistentKeyframe)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentKeyframe[] array = new PersistentKeyframe[(fieldNumber = ((keys != null) ? keys.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					keys.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.keys = array;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAnimationCurve persistentAnimationCurve2 = new PersistentAnimationCurve();
					ProtoReader.NoteObject(persistentAnimationCurve2, P_1);
					P_0 = persistentAnimationCurve2;
				}
				uint postWrapMode = P_1.ReadUInt32();
				P_0.postWrapMode = postWrapMode;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAnimationCurve persistentAnimationCurve4 = new PersistentAnimationCurve();
					ProtoReader.NoteObject(persistentAnimationCurve4, P_1);
					P_0 = persistentAnimationCurve4;
				}
				uint postWrapMode = P_1.ReadUInt32();
				P_0.preWrapMode = postWrapMode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAnimationCurve persistentAnimationCurve = new PersistentAnimationCurve();
					ProtoReader.NoteObject(persistentAnimationCurve, P_1);
					P_0 = persistentAnimationCurve;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAnimationCurve persistentAnimationCurve5 = new PersistentAnimationCurve();
			ProtoReader.NoteObject(persistentAnimationCurve5, P_1);
			P_0 = persistentAnimationCurve5;
		}
		return P_0;
	}

	private static void Write(PersistentData P_0, ProtoWriter P_1)
	{
		PersistentAnimationCurve obj = P_0 as PersistentAnimationCurve;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(500, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentBurst obj2 = P_0 as PersistentBurst;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(501, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentColorBySpeedModule obj3 = P_0 as PersistentColorBySpeedModule;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(502, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentColorOverLifetimeModule obj4 = P_0 as PersistentColorOverLifetimeModule;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(503, WireType.String, P_1);
						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentCustomDataModule obj5 = P_0 as PersistentCustomDataModule;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(504, WireType.String, P_1);
							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentEmitParams obj6 = P_0 as PersistentEmitParams;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(505, WireType.String, P_1);
								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else
							{
								PersistentExternalForcesModule obj7 = P_0 as PersistentExternalForcesModule;
								if (obj7 != null)
								{
									ProtoWriter.WriteFieldHeader(506, WireType.String, P_1);
									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
									Write(obj7, P_1);
									ProtoWriter.EndSubItem(token, P_1);
								}
								else
								{
									PersistentForceOverLifetimeModule obj8 = P_0 as PersistentForceOverLifetimeModule;
									if (obj8 != null)
									{
										ProtoWriter.WriteFieldHeader(507, WireType.String, P_1);
										SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
										Write(obj8, P_1);
										ProtoWriter.EndSubItem(token, P_1);
									}
									else
									{
										PersistentGradient obj9 = P_0 as PersistentGradient;
										if (obj9 != null)
										{
											ProtoWriter.WriteFieldHeader(508, WireType.String, P_1);
											SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
											Write(obj9, P_1);
											ProtoWriter.EndSubItem(token, P_1);
										}
										else
										{
											PersistentInheritVelocityModule obj10 = P_0 as PersistentInheritVelocityModule;
											if (obj10 != null)
											{
												ProtoWriter.WriteFieldHeader(509, WireType.String, P_1);
												SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
												Write(obj10, P_1);
												ProtoWriter.EndSubItem(token, P_1);
											}
											else
											{
												PersistentKeyframe obj11 = P_0 as PersistentKeyframe;
												if (obj11 != null)
												{
													ProtoWriter.WriteFieldHeader(510, WireType.String, P_1);
													SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
													Write(obj11, P_1);
													ProtoWriter.EndSubItem(token, P_1);
												}
												else
												{
													PersistentLightsModule obj12 = P_0 as PersistentLightsModule;
													if (obj12 != null)
													{
														ProtoWriter.WriteFieldHeader(511, WireType.String, P_1);
														SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
														Write(obj12, P_1);
														ProtoWriter.EndSubItem(token, P_1);
													}
													else
													{
														PersistentLimitVelocityOverLifetimeModule obj13 = P_0 as PersistentLimitVelocityOverLifetimeModule;
														if (obj13 != null)
														{
															ProtoWriter.WriteFieldHeader(512, WireType.String, P_1);
															SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
															Write(obj13, P_1);
															ProtoWriter.EndSubItem(token, P_1);
														}
														else
														{
															PersistentMainModule obj14 = P_0 as PersistentMainModule;
															if (obj14 != null)
															{
																ProtoWriter.WriteFieldHeader(513, WireType.String, P_1);
																SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																Write(obj14, P_1);
																ProtoWriter.EndSubItem(token, P_1);
															}
															else
															{
																PersistentMinMaxCurve obj15 = P_0 as PersistentMinMaxCurve;
																if (obj15 != null)
																{
																	ProtoWriter.WriteFieldHeader(514, WireType.String, P_1);
																	SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																	Write(obj15, P_1);
																	ProtoWriter.EndSubItem(token, P_1);
																}
																else
																{
																	PersistentMinMaxGradient obj16 = P_0 as PersistentMinMaxGradient;
																	if (obj16 != null)
																	{
																		ProtoWriter.WriteFieldHeader(515, WireType.String, P_1);
																		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																		Write(obj16, P_1);
																		ProtoWriter.EndSubItem(token, P_1);
																	}
																	else
																	{
																		PersistentNoiseModule obj17 = P_0 as PersistentNoiseModule;
																		if (obj17 != null)
																		{
																			ProtoWriter.WriteFieldHeader(516, WireType.String, P_1);
																			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																			Write(obj17, P_1);
																			ProtoWriter.EndSubItem(token, P_1);
																		}
																		else
																		{
																			PersistentParticle obj18 = P_0 as PersistentParticle;
																			if (obj18 != null)
																			{
																				ProtoWriter.WriteFieldHeader(517, WireType.String, P_1);
																				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																				Write(obj18, P_1);
																				ProtoWriter.EndSubItem(token, P_1);
																			}
																			else
																			{
																				PersistentRotationBySpeedModule obj19 = P_0 as PersistentRotationBySpeedModule;
																				if (obj19 != null)
																				{
																					ProtoWriter.WriteFieldHeader(518, WireType.String, P_1);
																					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																					Write(obj19, P_1);
																					ProtoWriter.EndSubItem(token, P_1);
																				}
																				else
																				{
																					PersistentRotationOverLifetimeModule obj20 = P_0 as PersistentRotationOverLifetimeModule;
																					if (obj20 != null)
																					{
																						ProtoWriter.WriteFieldHeader(519, WireType.String, P_1);
																						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																						Write(obj20, P_1);
																						ProtoWriter.EndSubItem(token, P_1);
																					}
																					else
																					{
																						PersistentShapeModule obj21 = P_0 as PersistentShapeModule;
																						if (obj21 != null)
																						{
																							ProtoWriter.WriteFieldHeader(520, WireType.String, P_1);
																							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																							Write(obj21, P_1);
																							ProtoWriter.EndSubItem(token, P_1);
																						}
																						else
																						{
																							PersistentSizeBySpeedModule obj22 = P_0 as PersistentSizeBySpeedModule;
																							if (obj22 != null)
																							{
																								ProtoWriter.WriteFieldHeader(521, WireType.String, P_1);
																								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																								Write(obj22, P_1);
																								ProtoWriter.EndSubItem(token, P_1);
																							}
																							else
																							{
																								PersistentSizeOverLifetimeModule obj23 = P_0 as PersistentSizeOverLifetimeModule;
																								if (obj23 != null)
																								{
																									ProtoWriter.WriteFieldHeader(522, WireType.String, P_1);
																									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																									Write(obj23, P_1);
																									ProtoWriter.EndSubItem(token, P_1);
																								}
																								else
																								{
																									PersistentSubEmittersModule obj24 = P_0 as PersistentSubEmittersModule;
																									if (obj24 != null)
																									{
																										ProtoWriter.WriteFieldHeader(523, WireType.String, P_1);
																										SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																										Write(obj24, P_1);
																										ProtoWriter.EndSubItem(token, P_1);
																									}
																									else
																									{
																										PersistentTextureSheetAnimationModule obj25 = P_0 as PersistentTextureSheetAnimationModule;
																										if (obj25 != null)
																										{
																											ProtoWriter.WriteFieldHeader(524, WireType.String, P_1);
																											SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																											Write(obj25, P_1);
																											ProtoWriter.EndSubItem(token, P_1);
																										}
																										else
																										{
																											PersistentTrailModule obj26 = P_0 as PersistentTrailModule;
																											if (obj26 != null)
																											{
																												ProtoWriter.WriteFieldHeader(525, WireType.String, P_1);
																												SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																												Write(obj26, P_1);
																												ProtoWriter.EndSubItem(token, P_1);
																											}
																											else
																											{
																												PersistentVelocityOverLifetimeModule obj27 = P_0 as PersistentVelocityOverLifetimeModule;
																												if (obj27 != null)
																												{
																													ProtoWriter.WriteFieldHeader(526, WireType.String, P_1);
																													SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																													Write(obj27, P_1);
																													ProtoWriter.EndSubItem(token, P_1);
																												}
																												else
																												{
																													PersistentGUIStyle obj28 = P_0 as PersistentGUIStyle;
																													if (obj28 != null)
																													{
																														ProtoWriter.WriteFieldHeader(527, WireType.String, P_1);
																														SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																														Write(obj28, P_1);
																														ProtoWriter.EndSubItem(token, P_1);
																													}
																													else
																													{
																														PersistentGUIStyleState obj29 = P_0 as PersistentGUIStyleState;
																														if (obj29 != null)
																														{
																															ProtoWriter.WriteFieldHeader(528, WireType.String, P_1);
																															SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																															Write(obj29, P_1);
																															ProtoWriter.EndSubItem(token, P_1);
																														}
																														else
																														{
																															PersistentCollisionModule obj30 = P_0 as PersistentCollisionModule;
																															if (obj30 != null)
																															{
																																ProtoWriter.WriteFieldHeader(529, WireType.String, P_1);
																																SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																Write(obj30, P_1);
																																ProtoWriter.EndSubItem(token, P_1);
																															}
																															else
																															{
																																PersistentEmissionModule obj31 = P_0 as PersistentEmissionModule;
																																if (obj31 != null)
																																{
																																	ProtoWriter.WriteFieldHeader(530, WireType.String, P_1);
																																	SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																	Write(obj31, P_1);
																																	ProtoWriter.EndSubItem(token, P_1);
																																}
																																else
																																{
																																	PersistentTriggerModule obj32 = P_0 as PersistentTriggerModule;
																																	if (obj32 != null)
																																	{
																																		ProtoWriter.WriteFieldHeader(531, WireType.String, P_1);
																																		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																		Write(obj32, P_1);
																																		ProtoWriter.EndSubItem(token, P_1);
																																	}
																																	else
																																	{
																																		PersistentObject obj33 = P_0 as PersistentObject;
																																		if (obj33 != null)
																																		{
																																			ProtoWriter.WriteFieldHeader(532, WireType.String, P_1);
																																			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																			Write(obj33, P_1);
																																			ProtoWriter.EndSubItem(token, P_1);
																																		}
																																		else
																																		{
																																			PersistentNavigation obj34 = P_0 as PersistentNavigation;
																																			if (obj34 != null)
																																			{
																																				ProtoWriter.WriteFieldHeader(533, WireType.String, P_1);
																																				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																				Write(obj34, P_1);
																																				ProtoWriter.EndSubItem(token, P_1);
																																			}
																																			else
																																			{
																																				PersistentOptionData obj35 = P_0 as PersistentOptionData;
																																				if (obj35 != null)
																																				{
																																					ProtoWriter.WriteFieldHeader(534, WireType.String, P_1);
																																					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																					Write(obj35, P_1);
																																					ProtoWriter.EndSubItem(token, P_1);
																																				}
																																				else
																																				{
																																					PersistentSpriteState obj36 = P_0 as PersistentSpriteState;
																																					if (obj36 != null)
																																					{
																																						ProtoWriter.WriteFieldHeader(535, WireType.String, P_1);
																																						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																						Write(obj36, P_1);
																																						ProtoWriter.EndSubItem(token, P_1);
																																					}
																																					else if (P_0.GetType() != typeof(PersistentData))
																																					{
																																						TypeModel.ThrowUnexpectedSubtype(typeof(PersistentData), P_0.GetType());
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		bool activeSelf = P_0.ActiveSelf;
		if (activeSelf)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(activeSelf, P_1);
		}
		long instanceId = P_0.InstanceId;
		if (instanceId != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(instanceId, P_1);
		}
	}

	private static PersistentData Read(PersistentData P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					TypeModel.ThrowCannotCreateInstance(typeof(PersistentData));
					P_0 = null;
				}
				bool activeSelf = P_1.ReadBoolean();
				P_0.ActiveSelf = activeSelf;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					TypeModel.ThrowCannotCreateInstance(typeof(PersistentData));
					P_0 = null;
				}
				long instanceId = P_1.ReadInt64();
				P_0.InstanceId = instanceId;
				break;
			}
			case 500:
			{
				if (P_0 != null && !(P_0 is PersistentAnimationCurve))
				{
					PersistentData from10 = P_0;
					PersistentAnimationCurve persistentAnimationCurve = new PersistentAnimationCurve();
					ProtoReader.NoteObject(persistentAnimationCurve, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from10, persistentAnimationCurve);
				}
				PersistentAnimationCurve obj10 = (PersistentAnimationCurve)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimationCurve persistentAnimationCurve2 = Read(obj10, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAnimationCurve2;
				break;
			}
			case 501:
			{
				if (P_0 != null && !(P_0 is PersistentBurst))
				{
					PersistentData from36 = P_0;
					PersistentBurst persistentBurst = new PersistentBurst();
					ProtoReader.NoteObject(persistentBurst, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from36, persistentBurst);
				}
				PersistentBurst obj36 = (PersistentBurst)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBurst persistentBurst2 = Read(obj36, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBurst2;
				break;
			}
			case 502:
			{
				if (P_0 != null && !(P_0 is PersistentColorBySpeedModule))
				{
					PersistentData from25 = P_0;
					PersistentColorBySpeedModule persistentColorBySpeedModule = new PersistentColorBySpeedModule();
					ProtoReader.NoteObject(persistentColorBySpeedModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from25, persistentColorBySpeedModule);
				}
				PersistentColorBySpeedModule obj25 = (PersistentColorBySpeedModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentColorBySpeedModule persistentColorBySpeedModule2 = Read(obj25, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentColorBySpeedModule2;
				break;
			}
			case 503:
			{
				if (P_0 != null && !(P_0 is PersistentColorOverLifetimeModule))
				{
					PersistentData from6 = P_0;
					PersistentColorOverLifetimeModule persistentColorOverLifetimeModule = new PersistentColorOverLifetimeModule();
					ProtoReader.NoteObject(persistentColorOverLifetimeModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from6, persistentColorOverLifetimeModule);
				}
				PersistentColorOverLifetimeModule obj6 = (PersistentColorOverLifetimeModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentColorOverLifetimeModule persistentColorOverLifetimeModule2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentColorOverLifetimeModule2;
				break;
			}
			case 504:
			{
				if (P_0 != null && !(P_0 is PersistentCustomDataModule))
				{
					PersistentData from4 = P_0;
					PersistentCustomDataModule persistentCustomDataModule = new PersistentCustomDataModule();
					ProtoReader.NoteObject(persistentCustomDataModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from4, persistentCustomDataModule);
				}
				PersistentCustomDataModule obj4 = (PersistentCustomDataModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCustomDataModule persistentCustomDataModule2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCustomDataModule2;
				break;
			}
			case 505:
			{
				if (P_0 != null && !(P_0 is PersistentEmitParams))
				{
					PersistentData from19 = P_0;
					PersistentEmitParams persistentEmitParams = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from19, persistentEmitParams);
				}
				PersistentEmitParams obj19 = (PersistentEmitParams)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentEmitParams persistentEmitParams2 = Read(obj19, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentEmitParams2;
				break;
			}
			case 506:
			{
				if (P_0 != null && !(P_0 is PersistentExternalForcesModule))
				{
					PersistentData from23 = P_0;
					PersistentExternalForcesModule persistentExternalForcesModule = new PersistentExternalForcesModule();
					ProtoReader.NoteObject(persistentExternalForcesModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from23, persistentExternalForcesModule);
				}
				PersistentExternalForcesModule obj23 = (PersistentExternalForcesModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentExternalForcesModule persistentExternalForcesModule2 = Read(obj23, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentExternalForcesModule2;
				break;
			}
			case 507:
			{
				if (P_0 != null && !(P_0 is PersistentForceOverLifetimeModule))
				{
					PersistentData from34 = P_0;
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from34, persistentForceOverLifetimeModule);
				}
				PersistentForceOverLifetimeModule obj34 = (PersistentForceOverLifetimeModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentForceOverLifetimeModule persistentForceOverLifetimeModule2 = Read(obj34, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentForceOverLifetimeModule2;
				break;
			}
			case 508:
			{
				if (P_0 != null && !(P_0 is PersistentGradient))
				{
					PersistentData from13 = P_0;
					PersistentGradient persistentGradient = new PersistentGradient();
					ProtoReader.NoteObject(persistentGradient, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from13, persistentGradient);
				}
				PersistentGradient obj13 = (PersistentGradient)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGradient persistentGradient2 = Read(obj13, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGradient2;
				break;
			}
			case 509:
			{
				if (P_0 != null && !(P_0 is PersistentInheritVelocityModule))
				{
					PersistentData from8 = P_0;
					PersistentInheritVelocityModule persistentInheritVelocityModule = new PersistentInheritVelocityModule();
					ProtoReader.NoteObject(persistentInheritVelocityModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from8, persistentInheritVelocityModule);
				}
				PersistentInheritVelocityModule obj8 = (PersistentInheritVelocityModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentInheritVelocityModule persistentInheritVelocityModule2 = Read(obj8, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentInheritVelocityModule2;
				break;
			}
			case 510:
			{
				if (P_0 != null && !(P_0 is PersistentKeyframe))
				{
					PersistentData from27 = P_0;
					PersistentKeyframe persistentKeyframe = new PersistentKeyframe();
					ProtoReader.NoteObject(persistentKeyframe, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from27, persistentKeyframe);
				}
				PersistentKeyframe obj27 = (PersistentKeyframe)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentKeyframe persistentKeyframe2 = Read(obj27, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentKeyframe2;
				break;
			}
			case 511:
			{
				if (P_0 != null && !(P_0 is PersistentLightsModule))
				{
					PersistentData from24 = P_0;
					PersistentLightsModule persistentLightsModule = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from24, persistentLightsModule);
				}
				PersistentLightsModule obj24 = (PersistentLightsModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLightsModule persistentLightsModule2 = Read(obj24, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLightsModule2;
				break;
			}
			case 512:
			{
				if (P_0 != null && !(P_0 is PersistentLimitVelocityOverLifetimeModule))
				{
					PersistentData from17 = P_0;
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from17, persistentLimitVelocityOverLifetimeModule);
				}
				PersistentLimitVelocityOverLifetimeModule obj17 = (PersistentLimitVelocityOverLifetimeModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule2 = Read(obj17, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLimitVelocityOverLifetimeModule2;
				break;
			}
			case 513:
			{
				if (P_0 != null && !(P_0 is PersistentMainModule))
				{
					PersistentData from = P_0;
					PersistentMainModule persistentMainModule = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from, persistentMainModule);
				}
				PersistentMainModule obj = (PersistentMainModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMainModule persistentMainModule2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMainModule2;
				break;
			}
			case 514:
			{
				if (P_0 != null && !(P_0 is PersistentMinMaxCurve))
				{
					PersistentData from31 = P_0;
					PersistentMinMaxCurve persistentMinMaxCurve = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from31, persistentMinMaxCurve);
				}
				PersistentMinMaxCurve obj31 = (PersistentMinMaxCurve)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMinMaxCurve persistentMinMaxCurve2 = Read(obj31, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMinMaxCurve2;
				break;
			}
			case 515:
			{
				if (P_0 != null && !(P_0 is PersistentMinMaxGradient))
				{
					PersistentData from32 = P_0;
					PersistentMinMaxGradient persistentMinMaxGradient = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from32, persistentMinMaxGradient);
				}
				PersistentMinMaxGradient obj32 = (PersistentMinMaxGradient)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMinMaxGradient persistentMinMaxGradient2 = Read(obj32, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMinMaxGradient2;
				break;
			}
			case 516:
			{
				if (P_0 != null && !(P_0 is PersistentNoiseModule))
				{
					PersistentData from21 = P_0;
					PersistentNoiseModule persistentNoiseModule = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from21, persistentNoiseModule);
				}
				PersistentNoiseModule obj21 = (PersistentNoiseModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentNoiseModule persistentNoiseModule2 = Read(obj21, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentNoiseModule2;
				break;
			}
			case 517:
			{
				if (P_0 != null && !(P_0 is PersistentParticle))
				{
					PersistentData from12 = P_0;
					PersistentParticle persistentParticle = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from12, persistentParticle);
				}
				PersistentParticle obj12 = (PersistentParticle)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentParticle persistentParticle2 = Read(obj12, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentParticle2;
				break;
			}
			case 518:
			{
				if (P_0 != null && !(P_0 is PersistentRotationBySpeedModule))
				{
					PersistentData from9 = P_0;
					PersistentRotationBySpeedModule persistentRotationBySpeedModule = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from9, persistentRotationBySpeedModule);
				}
				PersistentRotationBySpeedModule obj9 = (PersistentRotationBySpeedModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRotationBySpeedModule persistentRotationBySpeedModule2 = Read(obj9, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRotationBySpeedModule2;
				break;
			}
			case 519:
			{
				if (P_0 != null && !(P_0 is PersistentRotationOverLifetimeModule))
				{
					PersistentData from35 = P_0;
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from35, persistentRotationOverLifetimeModule);
				}
				PersistentRotationOverLifetimeModule obj35 = (PersistentRotationOverLifetimeModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule2 = Read(obj35, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRotationOverLifetimeModule2;
				break;
			}
			case 520:
			{
				if (P_0 != null && !(P_0 is PersistentShapeModule))
				{
					PersistentData from30 = P_0;
					PersistentShapeModule persistentShapeModule = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from30, persistentShapeModule);
				}
				PersistentShapeModule obj30 = (PersistentShapeModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentShapeModule persistentShapeModule2 = Read(obj30, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentShapeModule2;
				break;
			}
			case 521:
			{
				if (P_0 != null && !(P_0 is PersistentSizeBySpeedModule))
				{
					PersistentData from28 = P_0;
					PersistentSizeBySpeedModule persistentSizeBySpeedModule = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from28, persistentSizeBySpeedModule);
				}
				PersistentSizeBySpeedModule obj28 = (PersistentSizeBySpeedModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSizeBySpeedModule persistentSizeBySpeedModule2 = Read(obj28, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSizeBySpeedModule2;
				break;
			}
			case 522:
			{
				if (P_0 != null && !(P_0 is PersistentSizeOverLifetimeModule))
				{
					PersistentData from20 = P_0;
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from20, persistentSizeOverLifetimeModule);
				}
				PersistentSizeOverLifetimeModule obj20 = (PersistentSizeOverLifetimeModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule2 = Read(obj20, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSizeOverLifetimeModule2;
				break;
			}
			case 523:
			{
				if (P_0 != null && !(P_0 is PersistentSubEmittersModule))
				{
					PersistentData from16 = P_0;
					PersistentSubEmittersModule persistentSubEmittersModule = new PersistentSubEmittersModule();
					ProtoReader.NoteObject(persistentSubEmittersModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from16, persistentSubEmittersModule);
				}
				PersistentSubEmittersModule obj16 = (PersistentSubEmittersModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSubEmittersModule persistentSubEmittersModule2 = Read(obj16, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSubEmittersModule2;
				break;
			}
			case 524:
			{
				if (P_0 != null && !(P_0 is PersistentTextureSheetAnimationModule))
				{
					PersistentData from14 = P_0;
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from14, persistentTextureSheetAnimationModule);
				}
				PersistentTextureSheetAnimationModule obj14 = (PersistentTextureSheetAnimationModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule2 = Read(obj14, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTextureSheetAnimationModule2;
				break;
			}
			case 525:
			{
				if (P_0 != null && !(P_0 is PersistentTrailModule))
				{
					PersistentData from5 = P_0;
					PersistentTrailModule persistentTrailModule = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from5, persistentTrailModule);
				}
				PersistentTrailModule obj5 = (PersistentTrailModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTrailModule persistentTrailModule2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTrailModule2;
				break;
			}
			case 526:
			{
				if (P_0 != null && !(P_0 is PersistentVelocityOverLifetimeModule))
				{
					PersistentData from2 = P_0;
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from2, persistentVelocityOverLifetimeModule);
				}
				PersistentVelocityOverLifetimeModule obj2 = (PersistentVelocityOverLifetimeModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentVelocityOverLifetimeModule2;
				break;
			}
			case 527:
			{
				if (P_0 != null && !(P_0 is PersistentGUIStyle))
				{
					PersistentData from33 = P_0;
					PersistentGUIStyle persistentGUIStyle = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from33, persistentGUIStyle);
				}
				PersistentGUIStyle obj33 = (PersistentGUIStyle)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGUIStyle persistentGUIStyle2 = Read(obj33, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGUIStyle2;
				break;
			}
			case 528:
			{
				if (P_0 != null && !(P_0 is PersistentGUIStyleState))
				{
					PersistentData from29 = P_0;
					PersistentGUIStyleState persistentGUIStyleState = new PersistentGUIStyleState();
					ProtoReader.NoteObject(persistentGUIStyleState, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from29, persistentGUIStyleState);
				}
				PersistentGUIStyleState obj29 = (PersistentGUIStyleState)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGUIStyleState persistentGUIStyleState2 = Read(obj29, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGUIStyleState2;
				break;
			}
			case 529:
			{
				if (P_0 != null && !(P_0 is PersistentCollisionModule))
				{
					PersistentData from26 = P_0;
					PersistentCollisionModule persistentCollisionModule = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from26, persistentCollisionModule);
				}
				PersistentCollisionModule obj26 = (PersistentCollisionModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCollisionModule persistentCollisionModule2 = Read(obj26, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCollisionModule2;
				break;
			}
			case 530:
			{
				if (P_0 != null && !(P_0 is PersistentEmissionModule))
				{
					PersistentData from22 = P_0;
					PersistentEmissionModule persistentEmissionModule = new PersistentEmissionModule();
					ProtoReader.NoteObject(persistentEmissionModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from22, persistentEmissionModule);
				}
				PersistentEmissionModule obj22 = (PersistentEmissionModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentEmissionModule persistentEmissionModule2 = Read(obj22, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentEmissionModule2;
				break;
			}
			case 531:
			{
				if (P_0 != null && !(P_0 is PersistentTriggerModule))
				{
					PersistentData from18 = P_0;
					PersistentTriggerModule persistentTriggerModule = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from18, persistentTriggerModule);
				}
				PersistentTriggerModule obj18 = (PersistentTriggerModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTriggerModule persistentTriggerModule2 = Read(obj18, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTriggerModule2;
				break;
			}
			case 532:
			{
				if (P_0 != null && !(P_0 is PersistentObject))
				{
					PersistentData from15 = P_0;
					PersistentObject persistentObject = new PersistentObject();
					ProtoReader.NoteObject(persistentObject, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from15, persistentObject);
				}
				PersistentObject obj15 = (PersistentObject)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentObject persistentObject2 = Read(obj15, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentObject2;
				break;
			}
			case 533:
			{
				if (P_0 != null && !(P_0 is PersistentNavigation))
				{
					PersistentData from11 = P_0;
					PersistentNavigation persistentNavigation = new PersistentNavigation();
					ProtoReader.NoteObject(persistentNavigation, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from11, persistentNavigation);
				}
				PersistentNavigation obj11 = (PersistentNavigation)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentNavigation persistentNavigation2 = Read(obj11, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentNavigation2;
				break;
			}
			case 534:
			{
				if (P_0 != null && !(P_0 is PersistentOptionData))
				{
					PersistentData from7 = P_0;
					PersistentOptionData persistentOptionData = new PersistentOptionData();
					ProtoReader.NoteObject(persistentOptionData, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from7, persistentOptionData);
				}
				PersistentOptionData obj7 = (PersistentOptionData)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentOptionData persistentOptionData2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentOptionData2;
				break;
			}
			case 535:
			{
				if (P_0 != null && !(P_0 is PersistentSpriteState))
				{
					PersistentData from3 = P_0;
					PersistentSpriteState persistentSpriteState = new PersistentSpriteState();
					ProtoReader.NoteObject(persistentSpriteState, P_1);
					P_0 = (PersistentData)ProtoReader.Merge(P_1, from3, persistentSpriteState);
				}
				PersistentSpriteState obj3 = (PersistentSpriteState)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSpriteState persistentSpriteState2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSpriteState2;
				break;
			}
			default:
				if (P_0 == null)
				{
					TypeModel.ThrowCannotCreateInstance(typeof(PersistentData));
					P_0 = null;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			TypeModel.ThrowCannotCreateInstance(typeof(PersistentData));
			P_0 = null;
		}
		return P_0;
	}

	private static void Write(PersistentSpriteState P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSpriteState))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSpriteState), P_0.GetType());
		}
		long disabledSprite = P_0.disabledSprite;
		if (disabledSprite != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(disabledSprite, P_1);
		}
		long highlightedSprite = P_0.highlightedSprite;
		if (highlightedSprite != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(highlightedSprite, P_1);
		}
		long pressedSprite = P_0.pressedSprite;
		if (pressedSprite != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(pressedSprite, P_1);
		}
	}

	private static PersistentSpriteState Read(PersistentSpriteState P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSpriteState persistentSpriteState3 = new PersistentSpriteState();
					ProtoReader.NoteObject(persistentSpriteState3, P_1);
					P_0 = persistentSpriteState3;
				}
				long highlightedSprite = P_1.ReadInt64();
				P_0.disabledSprite = highlightedSprite;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSpriteState persistentSpriteState2 = new PersistentSpriteState();
					ProtoReader.NoteObject(persistentSpriteState2, P_1);
					P_0 = persistentSpriteState2;
				}
				long highlightedSprite = P_1.ReadInt64();
				P_0.highlightedSprite = highlightedSprite;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSpriteState persistentSpriteState4 = new PersistentSpriteState();
					ProtoReader.NoteObject(persistentSpriteState4, P_1);
					P_0 = persistentSpriteState4;
				}
				long highlightedSprite = P_1.ReadInt64();
				P_0.pressedSprite = highlightedSprite;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSpriteState persistentSpriteState = new PersistentSpriteState();
					ProtoReader.NoteObject(persistentSpriteState, P_1);
					P_0 = persistentSpriteState;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSpriteState persistentSpriteState5 = new PersistentSpriteState();
			ProtoReader.NoteObject(persistentSpriteState5, P_1);
			P_0 = persistentSpriteState5;
		}
		return P_0;
	}

	private static void Write(PersistentOptionData P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentOptionData))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentOptionData), P_0.GetType());
		}
		long image = P_0.image;
		if (image != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(image, P_1);
		}
		string text = P_0.text;
		if (text != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			ProtoWriter.WriteString(text, P_1);
		}
	}

	private static PersistentOptionData Read(PersistentOptionData P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentOptionData persistentOptionData2 = new PersistentOptionData();
					ProtoReader.NoteObject(persistentOptionData2, P_1);
					P_0 = persistentOptionData2;
				}
				long image = P_1.ReadInt64();
				P_0.image = image;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentOptionData persistentOptionData3 = new PersistentOptionData();
					ProtoReader.NoteObject(persistentOptionData3, P_1);
					P_0 = persistentOptionData3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.text = text;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentOptionData persistentOptionData = new PersistentOptionData();
					ProtoReader.NoteObject(persistentOptionData, P_1);
					P_0 = persistentOptionData;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentOptionData persistentOptionData4 = new PersistentOptionData();
			ProtoReader.NoteObject(persistentOptionData4, P_1);
			P_0 = persistentOptionData4;
		}
		return P_0;
	}

	private static void Write(PersistentNavigation P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentNavigation))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentNavigation), P_0.GetType());
		}
		Navigation.Mode mode = P_0.mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32((int)mode, P_1);
		}
		long selectOnDown = P_0.selectOnDown;
		if (selectOnDown != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(selectOnDown, P_1);
		}
		long selectOnLeft = P_0.selectOnLeft;
		if (selectOnLeft != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(selectOnLeft, P_1);
		}
		long selectOnRight = P_0.selectOnRight;
		if (selectOnRight != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(selectOnRight, P_1);
		}
		long selectOnUp = P_0.selectOnUp;
		if (selectOnUp != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(selectOnUp, P_1);
		}
	}

	private static PersistentNavigation Read(PersistentNavigation P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentNavigation persistentNavigation6 = new PersistentNavigation();
					ProtoReader.NoteObject(persistentNavigation6, P_1);
					P_0 = persistentNavigation6;
				}
				Navigation.Mode mode = (Navigation.Mode)P_1.ReadInt32();
				P_0.mode = mode;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentNavigation persistentNavigation2 = new PersistentNavigation();
					ProtoReader.NoteObject(persistentNavigation2, P_1);
					P_0 = persistentNavigation2;
				}
				long selectOnDown = P_1.ReadInt64();
				P_0.selectOnDown = selectOnDown;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentNavigation persistentNavigation5 = new PersistentNavigation();
					ProtoReader.NoteObject(persistentNavigation5, P_1);
					P_0 = persistentNavigation5;
				}
				long selectOnDown = P_1.ReadInt64();
				P_0.selectOnLeft = selectOnDown;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentNavigation persistentNavigation3 = new PersistentNavigation();
					ProtoReader.NoteObject(persistentNavigation3, P_1);
					P_0 = persistentNavigation3;
				}
				long selectOnDown = P_1.ReadInt64();
				P_0.selectOnRight = selectOnDown;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentNavigation persistentNavigation4 = new PersistentNavigation();
					ProtoReader.NoteObject(persistentNavigation4, P_1);
					P_0 = persistentNavigation4;
				}
				long selectOnDown = P_1.ReadInt64();
				P_0.selectOnUp = selectOnDown;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentNavigation persistentNavigation = new PersistentNavigation();
					ProtoReader.NoteObject(persistentNavigation, P_1);
					P_0 = persistentNavigation;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentNavigation persistentNavigation7 = new PersistentNavigation();
			ProtoReader.NoteObject(persistentNavigation7, P_1);
			P_0 = persistentNavigation7;
		}
		return P_0;
	}

	private static void Write(PersistentObject P_0, ProtoWriter P_1)
	{
		PersistentAssetBundle obj = P_0 as PersistentAssetBundle;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1159, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentAssetBundleManifest obj2 = P_0 as PersistentAssetBundleManifest;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1160, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentScriptableObject obj3 = P_0 as PersistentScriptableObject;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1161, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentBillboardAsset obj4 = P_0 as PersistentBillboardAsset;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1162, WireType.String, P_1);
						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentComponent obj5 = P_0 as PersistentComponent;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1163, WireType.String, P_1);
							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentComputeShader obj6 = P_0 as PersistentComputeShader;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1164, WireType.String, P_1);
								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else
							{
								PersistentGameObject obj7 = P_0 as PersistentGameObject;
								if (obj7 != null)
								{
									ProtoWriter.WriteFieldHeader(1165, WireType.String, P_1);
									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
									Write(obj7, P_1);
									ProtoWriter.EndSubItem(token, P_1);
								}
								else
								{
									PersistentRenderSettings obj8 = P_0 as PersistentRenderSettings;
									if (obj8 != null)
									{
										ProtoWriter.WriteFieldHeader(1166, WireType.String, P_1);
										SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
										Write(obj8, P_1);
										ProtoWriter.EndSubItem(token, P_1);
									}
									else
									{
										PersistentQualitySettings obj9 = P_0 as PersistentQualitySettings;
										if (obj9 != null)
										{
											ProtoWriter.WriteFieldHeader(1167, WireType.String, P_1);
											SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
											Write(obj9, P_1);
											ProtoWriter.EndSubItem(token, P_1);
										}
										else
										{
											PersistentFlare obj10 = P_0 as PersistentFlare;
											if (obj10 != null)
											{
												ProtoWriter.WriteFieldHeader(1168, WireType.String, P_1);
												SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
												Write(obj10, P_1);
												ProtoWriter.EndSubItem(token, P_1);
											}
											else
											{
												PersistentLightProbes obj11 = P_0 as PersistentLightProbes;
												if (obj11 != null)
												{
													ProtoWriter.WriteFieldHeader(1169, WireType.String, P_1);
													SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
													Write(obj11, P_1);
													ProtoWriter.EndSubItem(token, P_1);
												}
												else
												{
													PersistentLightmapSettings obj12 = P_0 as PersistentLightmapSettings;
													if (obj12 != null)
													{
														ProtoWriter.WriteFieldHeader(1170, WireType.String, P_1);
														SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
														Write(obj12, P_1);
														ProtoWriter.EndSubItem(token, P_1);
													}
													else
													{
														PersistentMesh obj13 = P_0 as PersistentMesh;
														if (obj13 != null)
														{
															ProtoWriter.WriteFieldHeader(1171, WireType.String, P_1);
															SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
															Write(obj13, P_1);
															ProtoWriter.EndSubItem(token, P_1);
														}
														else
														{
															PersistentGraphicsSettings obj14 = P_0 as PersistentGraphicsSettings;
															if (obj14 != null)
															{
																ProtoWriter.WriteFieldHeader(1172, WireType.String, P_1);
																SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																Write(obj14, P_1);
																ProtoWriter.EndSubItem(token, P_1);
															}
															else
															{
																PersistentShader obj15 = P_0 as PersistentShader;
																if (obj15 != null)
																{
																	ProtoWriter.WriteFieldHeader(1173, WireType.String, P_1);
																	SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																	Write(obj15, P_1);
																	ProtoWriter.EndSubItem(token, P_1);
																}
																else
																{
																	PersistentMaterial obj16 = P_0 as PersistentMaterial;
																	if (obj16 != null)
																	{
																		ProtoWriter.WriteFieldHeader(1174, WireType.String, P_1);
																		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																		Write(obj16, P_1);
																		ProtoWriter.EndSubItem(token, P_1);
																	}
																	else
																	{
																		PersistentShaderVariantCollection obj17 = P_0 as PersistentShaderVariantCollection;
																		if (obj17 != null)
																		{
																			ProtoWriter.WriteFieldHeader(1175, WireType.String, P_1);
																			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																			Write(obj17, P_1);
																			ProtoWriter.EndSubItem(token, P_1);
																		}
																		else
																		{
																			PersistentSprite obj18 = P_0 as PersistentSprite;
																			if (obj18 != null)
																			{
																				ProtoWriter.WriteFieldHeader(1176, WireType.String, P_1);
																				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																				Write(obj18, P_1);
																				ProtoWriter.EndSubItem(token, P_1);
																			}
																			else
																			{
																				PersistentTextAsset obj19 = P_0 as PersistentTextAsset;
																				if (obj19 != null)
																				{
																					ProtoWriter.WriteFieldHeader(1177, WireType.String, P_1);
																					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																					Write(obj19, P_1);
																					ProtoWriter.EndSubItem(token, P_1);
																				}
																				else
																				{
																					PersistentTexture obj20 = P_0 as PersistentTexture;
																					if (obj20 != null)
																					{
																						ProtoWriter.WriteFieldHeader(1178, WireType.String, P_1);
																						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																						Write(obj20, P_1);
																						ProtoWriter.EndSubItem(token, P_1);
																					}
																					else
																					{
																						PersistentPhysicMaterial obj21 = P_0 as PersistentPhysicMaterial;
																						if (obj21 != null)
																						{
																							ProtoWriter.WriteFieldHeader(1179, WireType.String, P_1);
																							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																							Write(obj21, P_1);
																							ProtoWriter.EndSubItem(token, P_1);
																						}
																						else
																						{
																							PersistentPhysicsMaterial2D obj22 = P_0 as PersistentPhysicsMaterial2D;
																							if (obj22 != null)
																							{
																								ProtoWriter.WriteFieldHeader(1180, WireType.String, P_1);
																								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																								Write(obj22, P_1);
																								ProtoWriter.EndSubItem(token, P_1);
																							}
																							else
																							{
																								PersistentNavMeshData obj23 = P_0 as PersistentNavMeshData;
																								if (obj23 != null)
																								{
																									ProtoWriter.WriteFieldHeader(1181, WireType.String, P_1);
																									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																									Write(obj23, P_1);
																									ProtoWriter.EndSubItem(token, P_1);
																								}
																								else
																								{
																									PersistentAudioClip obj24 = P_0 as PersistentAudioClip;
																									if (obj24 != null)
																									{
																										ProtoWriter.WriteFieldHeader(1182, WireType.String, P_1);
																										SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																										Write(obj24, P_1);
																										ProtoWriter.EndSubItem(token, P_1);
																									}
																									else
																									{
																										PersistentAudioMixer obj25 = P_0 as PersistentAudioMixer;
																										if (obj25 != null)
																										{
																											ProtoWriter.WriteFieldHeader(1183, WireType.String, P_1);
																											SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																											Write(obj25, P_1);
																											ProtoWriter.EndSubItem(token, P_1);
																										}
																										else
																										{
																											PersistentAudioMixerSnapshot obj26 = P_0 as PersistentAudioMixerSnapshot;
																											if (obj26 != null)
																											{
																												ProtoWriter.WriteFieldHeader(1184, WireType.String, P_1);
																												SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																												Write(obj26, P_1);
																												ProtoWriter.EndSubItem(token, P_1);
																											}
																											else
																											{
																												PersistentAudioMixerGroup obj27 = P_0 as PersistentAudioMixerGroup;
																												if (obj27 != null)
																												{
																													ProtoWriter.WriteFieldHeader(1185, WireType.String, P_1);
																													SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																													Write(obj27, P_1);
																													ProtoWriter.EndSubItem(token, P_1);
																												}
																												else
																												{
																													PersistentRuntimeAnimatorController obj28 = P_0 as PersistentRuntimeAnimatorController;
																													if (obj28 != null)
																													{
																														ProtoWriter.WriteFieldHeader(1186, WireType.String, P_1);
																														SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																														Write(obj28, P_1);
																														ProtoWriter.EndSubItem(token, P_1);
																													}
																													else
																													{
																														PersistentAvatar obj29 = P_0 as PersistentAvatar;
																														if (obj29 != null)
																														{
																															ProtoWriter.WriteFieldHeader(1187, WireType.String, P_1);
																															SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																															Write(obj29, P_1);
																															ProtoWriter.EndSubItem(token, P_1);
																														}
																														else
																														{
																															PersistentAvatarMask obj30 = P_0 as PersistentAvatarMask;
																															if (obj30 != null)
																															{
																																ProtoWriter.WriteFieldHeader(1188, WireType.String, P_1);
																																SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																Write(obj30, P_1);
																																ProtoWriter.EndSubItem(token, P_1);
																															}
																															else
																															{
																																PersistentMotion obj31 = P_0 as PersistentMotion;
																																if (obj31 != null)
																																{
																																	ProtoWriter.WriteFieldHeader(1189, WireType.String, P_1);
																																	SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																	Write(obj31, P_1);
																																	ProtoWriter.EndSubItem(token, P_1);
																																}
																																else
																																{
																																	PersistentTerrainData obj32 = P_0 as PersistentTerrainData;
																																	if (obj32 != null)
																																	{
																																		ProtoWriter.WriteFieldHeader(1190, WireType.String, P_1);
																																		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																		Write(obj32, P_1);
																																		ProtoWriter.EndSubItem(token, P_1);
																																	}
																																	else
																																	{
																																		PersistentFont obj33 = P_0 as PersistentFont;
																																		if (obj33 != null)
																																		{
																																			ProtoWriter.WriteFieldHeader(1191, WireType.String, P_1);
																																			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																			Write(obj33, P_1);
																																			ProtoWriter.EndSubItem(token, P_1);
																																		}
																																		else
																																		{
																																			PersistentVideoClip obj34 = P_0 as PersistentVideoClip;
																																			if (obj34 != null)
																																			{
																																				ProtoWriter.WriteFieldHeader(1192, WireType.String, P_1);
																																				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																				Write(obj34, P_1);
																																				ProtoWriter.EndSubItem(token, P_1);
																																			}
																																			else
																																			{
																																				PersistentScript obj35 = P_0 as PersistentScript;
																																				if (obj35 != null)
																																				{
																																					ProtoWriter.WriteFieldHeader(99999, WireType.String, P_1);
																																					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																					Write(obj35, P_1);
																																					ProtoWriter.EndSubItem(token, P_1);
																																				}
																																				else if (P_0.GetType() != typeof(PersistentObject))
																																				{
																																					TypeModel.ThrowUnexpectedSubtype(typeof(PersistentObject), P_0.GetType());
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		uint hideFlags = P_0.hideFlags;
		if (hideFlags != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(hideFlags, P_1);
		}
		string name = P_0.name;
		if (name != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			ProtoWriter.WriteString(name, P_1);
		}
	}

	private static PersistentObject Read(PersistentObject P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentObject persistentObject2 = new PersistentObject();
					ProtoReader.NoteObject(persistentObject2, P_1);
					P_0 = persistentObject2;
				}
				uint hideFlags = P_1.ReadUInt32();
				P_0.hideFlags = hideFlags;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentObject persistentObject3 = new PersistentObject();
					ProtoReader.NoteObject(persistentObject3, P_1);
					P_0 = persistentObject3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.name = text;
				}
				break;
			}
			case 1159:
			{
				if (P_0 != null && !(P_0 is PersistentAssetBundle))
				{
					PersistentObject from6 = P_0;
					PersistentAssetBundle persistentAssetBundle = new PersistentAssetBundle();
					ProtoReader.NoteObject(persistentAssetBundle, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from6, persistentAssetBundle);
				}
				PersistentAssetBundle obj6 = (PersistentAssetBundle)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAssetBundle persistentAssetBundle2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAssetBundle2;
				break;
			}
			case 1160:
			{
				if (P_0 != null && !(P_0 is PersistentAssetBundleManifest))
				{
					PersistentObject from32 = P_0;
					PersistentAssetBundleManifest persistentAssetBundleManifest = new PersistentAssetBundleManifest();
					ProtoReader.NoteObject(persistentAssetBundleManifest, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from32, persistentAssetBundleManifest);
				}
				PersistentAssetBundleManifest obj32 = (PersistentAssetBundleManifest)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAssetBundleManifest persistentAssetBundleManifest2 = Read(obj32, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAssetBundleManifest2;
				break;
			}
			case 1161:
			{
				if (P_0 != null && !(P_0 is PersistentScriptableObject))
				{
					PersistentObject from21 = P_0;
					PersistentScriptableObject persistentScriptableObject = new PersistentScriptableObject();
					ProtoReader.NoteObject(persistentScriptableObject, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from21, persistentScriptableObject);
				}
				PersistentScriptableObject obj21 = (PersistentScriptableObject)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentScriptableObject persistentScriptableObject2 = Read(obj21, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentScriptableObject2;
				break;
			}
			case 1162:
			{
				if (P_0 != null && !(P_0 is PersistentBillboardAsset))
				{
					PersistentObject from35 = P_0;
					PersistentBillboardAsset persistentBillboardAsset = new PersistentBillboardAsset();
					ProtoReader.NoteObject(persistentBillboardAsset, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from35, persistentBillboardAsset);
				}
				PersistentBillboardAsset obj35 = (PersistentBillboardAsset)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBillboardAsset persistentBillboardAsset2 = Read(obj35, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBillboardAsset2;
				break;
			}
			case 1163:
			{
				if (P_0 != null && !(P_0 is PersistentComponent))
				{
					PersistentObject from2 = P_0;
					PersistentComponent persistentComponent = new PersistentComponent();
					ProtoReader.NoteObject(persistentComponent, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from2, persistentComponent);
				}
				PersistentComponent obj2 = (PersistentComponent)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentComponent persistentComponent2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentComponent2;
				break;
			}
			case 1164:
			{
				if (P_0 != null && !(P_0 is PersistentComputeShader))
				{
					PersistentObject from15 = P_0;
					PersistentComputeShader persistentComputeShader = new PersistentComputeShader();
					ProtoReader.NoteObject(persistentComputeShader, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from15, persistentComputeShader);
				}
				PersistentComputeShader obj15 = (PersistentComputeShader)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentComputeShader persistentComputeShader2 = Read(obj15, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentComputeShader2;
				break;
			}
			case 1165:
			{
				if (P_0 != null && !(P_0 is PersistentGameObject))
				{
					PersistentObject from19 = P_0;
					PersistentGameObject persistentGameObject = new PersistentGameObject();
					ProtoReader.NoteObject(persistentGameObject, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from19, persistentGameObject);
				}
				PersistentGameObject obj19 = (PersistentGameObject)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGameObject persistentGameObject2 = Read(obj19, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGameObject2;
				break;
			}
			case 1166:
			{
				if (P_0 != null && !(P_0 is PersistentRenderSettings))
				{
					PersistentObject from30 = P_0;
					PersistentRenderSettings persistentRenderSettings = new PersistentRenderSettings();
					ProtoReader.NoteObject(persistentRenderSettings, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from30, persistentRenderSettings);
				}
				PersistentRenderSettings obj30 = (PersistentRenderSettings)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRenderSettings persistentRenderSettings2 = Read(obj30, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRenderSettings2;
				break;
			}
			case 1167:
			{
				if (P_0 != null && !(P_0 is PersistentQualitySettings))
				{
					PersistentObject from9 = P_0;
					PersistentQualitySettings persistentQualitySettings = new PersistentQualitySettings();
					ProtoReader.NoteObject(persistentQualitySettings, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from9, persistentQualitySettings);
				}
				PersistentQualitySettings obj9 = (PersistentQualitySettings)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentQualitySettings persistentQualitySettings2 = Read(obj9, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentQualitySettings2;
				break;
			}
			case 1168:
			{
				if (P_0 != null && !(P_0 is PersistentFlare))
				{
					PersistentObject from4 = P_0;
					PersistentFlare persistentFlare = new PersistentFlare();
					ProtoReader.NoteObject(persistentFlare, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from4, persistentFlare);
				}
				PersistentFlare obj4 = (PersistentFlare)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentFlare persistentFlare2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentFlare2;
				break;
			}
			case 1169:
			{
				if (P_0 != null && !(P_0 is PersistentLightProbes))
				{
					PersistentObject from23 = P_0;
					PersistentLightProbes persistentLightProbes = new PersistentLightProbes();
					ProtoReader.NoteObject(persistentLightProbes, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from23, persistentLightProbes);
				}
				PersistentLightProbes obj23 = (PersistentLightProbes)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLightProbes persistentLightProbes2 = Read(obj23, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLightProbes2;
				break;
			}
			case 1170:
			{
				if (P_0 != null && !(P_0 is PersistentLightmapSettings))
				{
					PersistentObject from20 = P_0;
					PersistentLightmapSettings persistentLightmapSettings = new PersistentLightmapSettings();
					ProtoReader.NoteObject(persistentLightmapSettings, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from20, persistentLightmapSettings);
				}
				PersistentLightmapSettings obj20 = (PersistentLightmapSettings)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLightmapSettings persistentLightmapSettings2 = Read(obj20, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLightmapSettings2;
				break;
			}
			case 1171:
			{
				if (P_0 != null && !(P_0 is PersistentMesh))
				{
					PersistentObject from13 = P_0;
					PersistentMesh persistentMesh = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from13, persistentMesh);
				}
				PersistentMesh obj13 = (PersistentMesh)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMesh persistentMesh2 = Read(obj13, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMesh2;
				break;
			}
			case 1172:
			{
				if (P_0 != null && !(P_0 is PersistentGraphicsSettings))
				{
					PersistentObject from34 = P_0;
					PersistentGraphicsSettings persistentGraphicsSettings = new PersistentGraphicsSettings();
					ProtoReader.NoteObject(persistentGraphicsSettings, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from34, persistentGraphicsSettings);
				}
				PersistentGraphicsSettings obj34 = (PersistentGraphicsSettings)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGraphicsSettings persistentGraphicsSettings2 = Read(obj34, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGraphicsSettings2;
				break;
			}
			case 1173:
			{
				if (P_0 != null && !(P_0 is PersistentShader))
				{
					PersistentObject from27 = P_0;
					PersistentShader persistentShader = new PersistentShader();
					ProtoReader.NoteObject(persistentShader, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from27, persistentShader);
				}
				PersistentShader obj27 = (PersistentShader)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentShader persistentShader2 = Read(obj27, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentShader2;
				break;
			}
			case 1174:
			{
				if (P_0 != null && !(P_0 is PersistentMaterial))
				{
					PersistentObject from28 = P_0;
					PersistentMaterial persistentMaterial = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from28, persistentMaterial);
				}
				PersistentMaterial obj28 = (PersistentMaterial)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMaterial persistentMaterial2 = Read(obj28, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMaterial2;
				break;
			}
			case 1175:
			{
				if (P_0 != null && !(P_0 is PersistentShaderVariantCollection))
				{
					PersistentObject from17 = P_0;
					PersistentShaderVariantCollection persistentShaderVariantCollection = new PersistentShaderVariantCollection();
					ProtoReader.NoteObject(persistentShaderVariantCollection, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from17, persistentShaderVariantCollection);
				}
				PersistentShaderVariantCollection obj17 = (PersistentShaderVariantCollection)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentShaderVariantCollection persistentShaderVariantCollection2 = Read(obj17, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentShaderVariantCollection2;
				break;
			}
			case 1176:
			{
				if (P_0 != null && !(P_0 is PersistentSprite))
				{
					PersistentObject from8 = P_0;
					PersistentSprite persistentSprite = new PersistentSprite();
					ProtoReader.NoteObject(persistentSprite, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from8, persistentSprite);
				}
				PersistentSprite obj8 = (PersistentSprite)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSprite persistentSprite2 = Read(obj8, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSprite2;
				break;
			}
			case 1177:
			{
				if (P_0 != null && !(P_0 is PersistentTextAsset))
				{
					PersistentObject from5 = P_0;
					PersistentTextAsset persistentTextAsset = new PersistentTextAsset();
					ProtoReader.NoteObject(persistentTextAsset, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from5, persistentTextAsset);
				}
				PersistentTextAsset obj5 = (PersistentTextAsset)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTextAsset persistentTextAsset2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTextAsset2;
				break;
			}
			case 1178:
			{
				if (P_0 != null && !(P_0 is PersistentTexture))
				{
					PersistentObject from31 = P_0;
					PersistentTexture persistentTexture = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from31, persistentTexture);
				}
				PersistentTexture obj31 = (PersistentTexture)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTexture persistentTexture2 = Read(obj31, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTexture2;
				break;
			}
			case 1179:
			{
				if (P_0 != null && !(P_0 is PersistentPhysicMaterial))
				{
					PersistentObject from26 = P_0;
					PersistentPhysicMaterial persistentPhysicMaterial = new PersistentPhysicMaterial();
					ProtoReader.NoteObject(persistentPhysicMaterial, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from26, persistentPhysicMaterial);
				}
				PersistentPhysicMaterial obj26 = (PersistentPhysicMaterial)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPhysicMaterial persistentPhysicMaterial2 = Read(obj26, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPhysicMaterial2;
				break;
			}
			case 1180:
			{
				if (P_0 != null && !(P_0 is PersistentPhysicsMaterial2D))
				{
					PersistentObject from24 = P_0;
					PersistentPhysicsMaterial2D persistentPhysicsMaterial2D = new PersistentPhysicsMaterial2D();
					ProtoReader.NoteObject(persistentPhysicsMaterial2D, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from24, persistentPhysicsMaterial2D);
				}
				PersistentPhysicsMaterial2D obj24 = (PersistentPhysicsMaterial2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPhysicsMaterial2D persistentPhysicsMaterial2D2 = Read(obj24, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPhysicsMaterial2D2;
				break;
			}
			case 1181:
			{
				if (P_0 != null && !(P_0 is PersistentNavMeshData))
				{
					PersistentObject from16 = P_0;
					PersistentNavMeshData persistentNavMeshData = new PersistentNavMeshData();
					ProtoReader.NoteObject(persistentNavMeshData, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from16, persistentNavMeshData);
				}
				PersistentNavMeshData obj16 = (PersistentNavMeshData)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentNavMeshData persistentNavMeshData2 = Read(obj16, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentNavMeshData2;
				break;
			}
			case 1182:
			{
				if (P_0 != null && !(P_0 is PersistentAudioClip))
				{
					PersistentObject from12 = P_0;
					PersistentAudioClip persistentAudioClip = new PersistentAudioClip();
					ProtoReader.NoteObject(persistentAudioClip, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from12, persistentAudioClip);
				}
				PersistentAudioClip obj12 = (PersistentAudioClip)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioClip persistentAudioClip2 = Read(obj12, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioClip2;
				break;
			}
			case 1183:
			{
				if (P_0 != null && !(P_0 is PersistentAudioMixer))
				{
					PersistentObject from10 = P_0;
					PersistentAudioMixer persistentAudioMixer = new PersistentAudioMixer();
					ProtoReader.NoteObject(persistentAudioMixer, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from10, persistentAudioMixer);
				}
				PersistentAudioMixer obj10 = (PersistentAudioMixer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioMixer persistentAudioMixer2 = Read(obj10, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioMixer2;
				break;
			}
			case 1184:
			{
				if (P_0 != null && !(P_0 is PersistentAudioMixerSnapshot))
				{
					PersistentObject from = P_0;
					PersistentAudioMixerSnapshot persistentAudioMixerSnapshot = new PersistentAudioMixerSnapshot();
					ProtoReader.NoteObject(persistentAudioMixerSnapshot, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from, persistentAudioMixerSnapshot);
				}
				PersistentAudioMixerSnapshot obj = (PersistentAudioMixerSnapshot)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioMixerSnapshot persistentAudioMixerSnapshot2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioMixerSnapshot2;
				break;
			}
			case 1185:
			{
				if (P_0 != null && !(P_0 is PersistentAudioMixerGroup))
				{
					PersistentObject from33 = P_0;
					PersistentAudioMixerGroup persistentAudioMixerGroup = new PersistentAudioMixerGroup();
					ProtoReader.NoteObject(persistentAudioMixerGroup, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from33, persistentAudioMixerGroup);
				}
				PersistentAudioMixerGroup obj33 = (PersistentAudioMixerGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioMixerGroup persistentAudioMixerGroup2 = Read(obj33, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioMixerGroup2;
				break;
			}
			case 1186:
			{
				if (P_0 != null && !(P_0 is PersistentRuntimeAnimatorController))
				{
					PersistentObject from29 = P_0;
					PersistentRuntimeAnimatorController persistentRuntimeAnimatorController = new PersistentRuntimeAnimatorController();
					ProtoReader.NoteObject(persistentRuntimeAnimatorController, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from29, persistentRuntimeAnimatorController);
				}
				PersistentRuntimeAnimatorController obj29 = (PersistentRuntimeAnimatorController)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRuntimeAnimatorController persistentRuntimeAnimatorController2 = Read(obj29, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRuntimeAnimatorController2;
				break;
			}
			case 1187:
			{
				if (P_0 != null && !(P_0 is PersistentAvatar))
				{
					PersistentObject from25 = P_0;
					PersistentAvatar persistentAvatar = new PersistentAvatar();
					ProtoReader.NoteObject(persistentAvatar, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from25, persistentAvatar);
				}
				PersistentAvatar obj25 = (PersistentAvatar)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAvatar persistentAvatar2 = Read(obj25, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAvatar2;
				break;
			}
			case 1188:
			{
				if (P_0 != null && !(P_0 is PersistentAvatarMask))
				{
					PersistentObject from22 = P_0;
					PersistentAvatarMask persistentAvatarMask = new PersistentAvatarMask();
					ProtoReader.NoteObject(persistentAvatarMask, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from22, persistentAvatarMask);
				}
				PersistentAvatarMask obj22 = (PersistentAvatarMask)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAvatarMask persistentAvatarMask2 = Read(obj22, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAvatarMask2;
				break;
			}
			case 1189:
			{
				if (P_0 != null && !(P_0 is PersistentMotion))
				{
					PersistentObject from18 = P_0;
					PersistentMotion persistentMotion = new PersistentMotion();
					ProtoReader.NoteObject(persistentMotion, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from18, persistentMotion);
				}
				PersistentMotion obj18 = (PersistentMotion)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMotion persistentMotion2 = Read(obj18, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMotion2;
				break;
			}
			case 1190:
			{
				if (P_0 != null && !(P_0 is PersistentTerrainData))
				{
					PersistentObject from14 = P_0;
					PersistentTerrainData persistentTerrainData = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from14, persistentTerrainData);
				}
				PersistentTerrainData obj14 = (PersistentTerrainData)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTerrainData persistentTerrainData2 = Read(obj14, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTerrainData2;
				break;
			}
			case 1191:
			{
				if (P_0 != null && !(P_0 is PersistentFont))
				{
					PersistentObject from11 = P_0;
					PersistentFont persistentFont = new PersistentFont();
					ProtoReader.NoteObject(persistentFont, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from11, persistentFont);
				}
				PersistentFont obj11 = (PersistentFont)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentFont persistentFont2 = Read(obj11, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentFont2;
				break;
			}
			case 1192:
			{
				if (P_0 != null && !(P_0 is PersistentVideoClip))
				{
					PersistentObject from7 = P_0;
					PersistentVideoClip persistentVideoClip = new PersistentVideoClip();
					ProtoReader.NoteObject(persistentVideoClip, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from7, persistentVideoClip);
				}
				PersistentVideoClip obj7 = (PersistentVideoClip)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentVideoClip persistentVideoClip2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentVideoClip2;
				break;
			}
			case 99999:
			{
				if (P_0 != null && !(P_0 is PersistentScript))
				{
					PersistentObject from3 = P_0;
					PersistentScript persistentScript = new PersistentScript();
					ProtoReader.NoteObject(persistentScript, P_1);
					P_0 = (PersistentObject)ProtoReader.Merge(P_1, from3, persistentScript);
				}
				PersistentScript obj3 = (PersistentScript)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentScript persistentScript2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentScript2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentObject persistentObject = new PersistentObject();
					ProtoReader.NoteObject(persistentObject, P_1);
					P_0 = persistentObject;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentObject persistentObject4 = new PersistentObject();
			ProtoReader.NoteObject(persistentObject4, P_1);
			P_0 = persistentObject4;
		}
		return P_0;
	}

	private static void Write(PersistentScript P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentScript))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentScript), P_0.GetType());
		}
		string typeName = P_0.TypeName;
		if (typeName != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(typeName, P_1);
		}
		PersistentData baseObjectData = P_0.baseObjectData;
		if (baseObjectData != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(baseObjectData, P_1);
			Write(baseObjectData, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		Dictionary<string, DataContract> fields = P_0.fields;
		if (fields == null)
		{
			return;
		}
		Dictionary<string, DataContract> dictionary = fields;
		foreach (KeyValuePair<string, DataContract> item in dictionary)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static PersistentScript Read(PersistentScript P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentScript persistentScript3 = new PersistentScript();
					ProtoReader.NoteObject(persistentScript3, P_1);
					P_0 = persistentScript3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.TypeName = text;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentScript persistentScript2 = new PersistentScript();
					ProtoReader.NoteObject(persistentScript2, P_1);
					P_0 = persistentScript2;
				}
				PersistentData baseObjectData = P_0.baseObjectData;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentData persistentData = Read(baseObjectData, P_1);
				ProtoReader.EndSubItem(token, P_1);
				PersistentData persistentData2 = persistentData;
				if (persistentData2 != null)
				{
					P_0.baseObjectData = persistentData2;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentScript persistentScript4 = new PersistentScript();
					ProtoReader.NoteObject(persistentScript4, P_1);
					P_0 = persistentScript4;
				}
				Dictionary<string, DataContract> dictionary = P_0.fields;
				Dictionary<string, DataContract> dictionary2 = dictionary;
				if (dictionary == null)
				{
					dictionary = new Dictionary<string, DataContract>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					Dictionary<string, DataContract> dictionary3 = dictionary;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					KeyValuePair<string, DataContract> item = Read(default(KeyValuePair<string, DataContract>), P_1);
					ProtoReader.EndSubItem(token, P_1);
					((ICollection<KeyValuePair<string, DataContract>>)dictionary3).Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				dictionary2 = ((dictionary2 == dictionary) ? null : dictionary);
				if (dictionary2 != null)
				{
					P_0.fields = dictionary2;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentScript persistentScript = new PersistentScript();
					ProtoReader.NoteObject(persistentScript, P_1);
					P_0 = persistentScript;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentScript persistentScript5 = new PersistentScript();
			ProtoReader.NoteObject(persistentScript5, P_1);
			P_0 = persistentScript5;
		}
		return P_0;
	}

	private static void Write(PersistentVideoClip P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentVideoClip))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentVideoClip), P_0.GetType());
		}
	}

	private static PersistentVideoClip Read(PersistentVideoClip P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentVideoClip persistentVideoClip = new PersistentVideoClip();
				ProtoReader.NoteObject(persistentVideoClip, P_1);
				P_0 = persistentVideoClip;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentVideoClip persistentVideoClip2 = new PersistentVideoClip();
			ProtoReader.NoteObject(persistentVideoClip2, P_1);
			P_0 = persistentVideoClip2;
		}
		return P_0;
	}

	private static void Write(PersistentFont P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentFont))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentFont), P_0.GetType());
		}
		CharacterInfo[] characterInfo = P_0.characterInfo;
		if (characterInfo != null)
		{
			CharacterInfo[] array = characterInfo;
			foreach (CharacterInfo characterInfo2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(characterInfo2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		string[] fontNames = P_0.fontNames;
		if (fontNames != null)
		{
			string[] array2 = fontNames;
			foreach (string obj in array2)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
					ProtoWriter.WriteString(obj, P_1);
				}
			}
		}
		long material = P_0.material;
		if (material != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(material, P_1);
		}
	}

	private static PersistentFont Read(PersistentFont P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentFont persistentFont3 = new PersistentFont();
					ProtoReader.NoteObject(persistentFont3, P_1);
					P_0 = persistentFont3;
				}
				CharacterInfo[] characterInfo = P_0.characterInfo;
				List<CharacterInfo> list2 = new List<CharacterInfo>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					CharacterInfo item = Read(default(CharacterInfo), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				CharacterInfo[] array2 = new CharacterInfo[(fieldNumber = ((characterInfo != null) ? characterInfo.Length : 0)) + list2.Count];
				if (fieldNumber != 0)
				{
					characterInfo.CopyTo(array2, 0);
				}
				list2.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.characterInfo = array2;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentFont persistentFont2 = new PersistentFont();
					ProtoReader.NoteObject(persistentFont2, P_1);
					P_0 = persistentFont2;
				}
				string[] fontNames = P_0.fontNames;
				List<string> list = new List<string>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					list.Add(P_1.ReadString());
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				string[] array = new string[(fieldNumber = ((fontNames != null) ? fontNames.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					fontNames.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.fontNames = array;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentFont persistentFont4 = new PersistentFont();
					ProtoReader.NoteObject(persistentFont4, P_1);
					P_0 = persistentFont4;
				}
				long material = P_1.ReadInt64();
				P_0.material = material;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentFont persistentFont = new PersistentFont();
					ProtoReader.NoteObject(persistentFont, P_1);
					P_0 = persistentFont;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentFont persistentFont5 = new PersistentFont();
			ProtoReader.NoteObject(persistentFont5, P_1);
			P_0 = persistentFont5;
		}
		return P_0;
	}

	private static void Write(PersistentTerrainData P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTerrainData))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTerrainData), P_0.GetType());
		}
		int alphamapResolution = P_0.alphamapResolution;
		if (alphamapResolution != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(alphamapResolution, P_1);
		}
		int baseMapResolution = P_0.baseMapResolution;
		if (baseMapResolution != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(baseMapResolution, P_1);
		}
		PersistentDetailPrototype[] detailPrototypes = P_0.detailPrototypes;
		SubItemToken token;
		if (detailPrototypes != null)
		{
			PersistentDetailPrototype[] array = detailPrototypes;
			foreach (PersistentDetailPrototype obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(obj, P_1);
					Write(obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		int heightmapResolution = P_0.heightmapResolution;
		if (heightmapResolution != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(heightmapResolution, P_1);
		}
		Vector3 size = P_0.size;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		PersistentSplatPrototype[] splatPrototypes = P_0.splatPrototypes;
		if (splatPrototypes != null)
		{
			PersistentSplatPrototype[] array2 = splatPrototypes;
			foreach (PersistentSplatPrototype obj2 in array2)
			{
				if (obj2 != null)
				{
					ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(obj2, P_1);
					Write(obj2, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		float thickness = P_0.thickness;
		if (thickness != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(thickness, P_1);
		}
		TreeInstance[] treeInstances = P_0.treeInstances;
		if (treeInstances != null)
		{
			TreeInstance[] array3 = treeInstances;
			foreach (TreeInstance treeInstance in array3)
			{
				ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(treeInstance, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		PersistentTreePrototype[] treePrototypes = P_0.treePrototypes;
		if (treePrototypes != null)
		{
			PersistentTreePrototype[] array4 = treePrototypes;
			foreach (PersistentTreePrototype obj3 in array4)
			{
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(obj3, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		float wavingGrassAmount = P_0.wavingGrassAmount;
		if (wavingGrassAmount != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(wavingGrassAmount, P_1);
		}
		float wavingGrassSpeed = P_0.wavingGrassSpeed;
		if (wavingGrassSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(wavingGrassSpeed, P_1);
		}
		float wavingGrassStrength = P_0.wavingGrassStrength;
		if (wavingGrassStrength != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(wavingGrassStrength, P_1);
		}
		Color wavingGrassTint = P_0.wavingGrassTint;
		ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(wavingGrassTint, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentTerrainData Read(PersistentTerrainData P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData5 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData5, P_1);
					P_0 = persistentTerrainData5;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.alphamapResolution = fieldNumber;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData8 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData8, P_1);
					P_0 = persistentTerrainData8;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.baseMapResolution = fieldNumber;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData3 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData3, P_1);
					P_0 = persistentTerrainData3;
				}
				PersistentDetailPrototype[] detailPrototypes = P_0.detailPrototypes;
				List<PersistentDetailPrototype> list2 = new List<PersistentDetailPrototype>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDetailPrototype item2 = Read((PersistentDetailPrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item2);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentDetailPrototype[] array2 = new PersistentDetailPrototype[(fieldNumber = ((detailPrototypes != null) ? detailPrototypes.Length : 0)) + list2.Count];
				if (fieldNumber != 0)
				{
					detailPrototypes.CopyTo(array2, 0);
				}
				list2.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.detailPrototypes = array2;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData12 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData12, P_1);
					P_0 = persistentTerrainData12;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.heightmapResolution = fieldNumber;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData6 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData6, P_1);
					P_0 = persistentTerrainData6;
				}
				Vector3 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 size2 = vector;
				P_0.size = size2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData14 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData14, P_1);
					P_0 = persistentTerrainData14;
				}
				PersistentSplatPrototype[] splatPrototypes = P_0.splatPrototypes;
				List<PersistentSplatPrototype> list4 = new List<PersistentSplatPrototype>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSplatPrototype item4 = Read((PersistentSplatPrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list4.Add(item4);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSplatPrototype[] array4 = new PersistentSplatPrototype[(fieldNumber = ((splatPrototypes != null) ? splatPrototypes.Length : 0)) + list4.Count];
				if (fieldNumber != 0)
				{
					splatPrototypes.CopyTo(array4, 0);
				}
				list4.CopyTo(array4, fieldNumber);
				array4 = array4;
				if (array4 != null)
				{
					P_0.splatPrototypes = array4;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData11 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData11, P_1);
					P_0 = persistentTerrainData11;
				}
				float wavingGrassStrength = P_1.ReadSingle();
				P_0.thickness = wavingGrassStrength;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData9 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData9, P_1);
					P_0 = persistentTerrainData9;
				}
				TreeInstance[] treeInstances = P_0.treeInstances;
				List<TreeInstance> list3 = new List<TreeInstance>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					TreeInstance item3 = Read(default(TreeInstance), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list3.Add(item3);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				TreeInstance[] array3 = new TreeInstance[(fieldNumber = ((treeInstances != null) ? treeInstances.Length : 0)) + list3.Count];
				if (fieldNumber != 0)
				{
					treeInstances.CopyTo(array3, 0);
				}
				list3.CopyTo(array3, fieldNumber);
				array3 = array3;
				if (array3 != null)
				{
					P_0.treeInstances = array3;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData2 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData2, P_1);
					P_0 = persistentTerrainData2;
				}
				PersistentTreePrototype[] treePrototypes = P_0.treePrototypes;
				List<PersistentTreePrototype> list = new List<PersistentTreePrototype>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTreePrototype item = Read((PersistentTreePrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTreePrototype[] array = new PersistentTreePrototype[(fieldNumber = ((treePrototypes != null) ? treePrototypes.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					treePrototypes.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.treePrototypes = array;
				}
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData13 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData13, P_1);
					P_0 = persistentTerrainData13;
				}
				float wavingGrassStrength = P_1.ReadSingle();
				P_0.wavingGrassAmount = wavingGrassStrength;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData10 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData10, P_1);
					P_0 = persistentTerrainData10;
				}
				float wavingGrassStrength = P_1.ReadSingle();
				P_0.wavingGrassSpeed = wavingGrassStrength;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData7 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData7, P_1);
					P_0 = persistentTerrainData7;
				}
				float wavingGrassStrength = P_1.ReadSingle();
				P_0.wavingGrassStrength = wavingGrassStrength;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData4 = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData4, P_1);
					P_0 = persistentTerrainData4;
				}
				Color wavingGrassTint = P_0.wavingGrassTint;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(wavingGrassTint, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color wavingGrassTint2 = color;
				P_0.wavingGrassTint = wavingGrassTint2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTerrainData persistentTerrainData = new PersistentTerrainData();
					ProtoReader.NoteObject(persistentTerrainData, P_1);
					P_0 = persistentTerrainData;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTerrainData persistentTerrainData15 = new PersistentTerrainData();
			ProtoReader.NoteObject(persistentTerrainData15, P_1);
			P_0 = persistentTerrainData15;
		}
		return P_0;
	}

	private static void Write(PersistentMotion P_0, ProtoWriter P_1)
	{
		PersistentAnimationClip obj = P_0 as PersistentAnimationClip;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1107, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentMotion))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMotion), P_0.GetType());
		}
	}

	private static PersistentMotion Read(PersistentMotion P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1107)
			{
				if (P_0 != null && !(P_0 is PersistentAnimationClip))
				{
					PersistentMotion from = P_0;
					PersistentAnimationClip persistentAnimationClip = new PersistentAnimationClip();
					ProtoReader.NoteObject(persistentAnimationClip, P_1);
					P_0 = (PersistentMotion)ProtoReader.Merge(P_1, from, persistentAnimationClip);
				}
				PersistentAnimationClip obj = (PersistentAnimationClip)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimationClip persistentAnimationClip2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAnimationClip2;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentMotion persistentMotion = new PersistentMotion();
					ProtoReader.NoteObject(persistentMotion, P_1);
					P_0 = persistentMotion;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentMotion persistentMotion2 = new PersistentMotion();
			ProtoReader.NoteObject(persistentMotion2, P_1);
			P_0 = persistentMotion2;
		}
		return P_0;
	}

	private static void Write(PersistentAnimationClip P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAnimationClip))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAnimationClip), P_0.GetType());
		}
		float frameRate = P_0.frameRate;
		if (frameRate != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(frameRate, P_1);
		}
		bool legacy = P_0.legacy;
		if (legacy)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(legacy, P_1);
		}
		Bounds localBounds = P_0.localBounds;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(localBounds, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint wrapMode = P_0.wrapMode;
		if (wrapMode != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(wrapMode, P_1);
		}
	}

	private static PersistentAnimationClip Read(PersistentAnimationClip P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAnimationClip persistentAnimationClip3 = new PersistentAnimationClip();
					ProtoReader.NoteObject(persistentAnimationClip3, P_1);
					P_0 = persistentAnimationClip3;
				}
				float frameRate = P_1.ReadSingle();
				P_0.frameRate = frameRate;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAnimationClip persistentAnimationClip5 = new PersistentAnimationClip();
					ProtoReader.NoteObject(persistentAnimationClip5, P_1);
					P_0 = persistentAnimationClip5;
				}
				bool legacy = P_1.ReadBoolean();
				P_0.legacy = legacy;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAnimationClip persistentAnimationClip2 = new PersistentAnimationClip();
					ProtoReader.NoteObject(persistentAnimationClip2, P_1);
					P_0 = persistentAnimationClip2;
				}
				Bounds localBounds = P_0.localBounds;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Bounds bounds = Read(localBounds, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Bounds localBounds2 = bounds;
				P_0.localBounds = localBounds2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAnimationClip persistentAnimationClip4 = new PersistentAnimationClip();
					ProtoReader.NoteObject(persistentAnimationClip4, P_1);
					P_0 = persistentAnimationClip4;
				}
				uint wrapMode = P_1.ReadUInt32();
				P_0.wrapMode = wrapMode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAnimationClip persistentAnimationClip = new PersistentAnimationClip();
					ProtoReader.NoteObject(persistentAnimationClip, P_1);
					P_0 = persistentAnimationClip;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAnimationClip persistentAnimationClip6 = new PersistentAnimationClip();
			ProtoReader.NoteObject(persistentAnimationClip6, P_1);
			P_0 = persistentAnimationClip6;
		}
		return P_0;
	}

	private static void Write(PersistentAvatarMask P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAvatarMask))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAvatarMask), P_0.GetType());
		}
		int transformCount = P_0.transformCount;
		if (transformCount != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(transformCount, P_1);
		}
	}

	private static PersistentAvatarMask Read(PersistentAvatarMask P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentAvatarMask persistentAvatarMask = new PersistentAvatarMask();
					ProtoReader.NoteObject(persistentAvatarMask, P_1);
					P_0 = persistentAvatarMask;
				}
				int transformCount = P_1.ReadInt32();
				P_0.transformCount = transformCount;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentAvatarMask persistentAvatarMask2 = new PersistentAvatarMask();
					ProtoReader.NoteObject(persistentAvatarMask2, P_1);
					P_0 = persistentAvatarMask2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentAvatarMask persistentAvatarMask3 = new PersistentAvatarMask();
			ProtoReader.NoteObject(persistentAvatarMask3, P_1);
			P_0 = persistentAvatarMask3;
		}
		return P_0;
	}

	private static void Write(PersistentAvatar P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAvatar))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAvatar), P_0.GetType());
		}
	}

	private static PersistentAvatar Read(PersistentAvatar P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentAvatar persistentAvatar = new PersistentAvatar();
				ProtoReader.NoteObject(persistentAvatar, P_1);
				P_0 = persistentAvatar;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentAvatar persistentAvatar2 = new PersistentAvatar();
			ProtoReader.NoteObject(persistentAvatar2, P_1);
			P_0 = persistentAvatar2;
		}
		return P_0;
	}

	private static void Write(PersistentRuntimeAnimatorController P_0, ProtoWriter P_1)
	{
		PersistentAnimatorOverrideController obj = P_0 as PersistentAnimatorOverrideController;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1106, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentRuntimeAnimatorController))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRuntimeAnimatorController), P_0.GetType());
		}
	}

	private static PersistentRuntimeAnimatorController Read(PersistentRuntimeAnimatorController P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1106)
			{
				if (P_0 != null && !(P_0 is PersistentAnimatorOverrideController))
				{
					PersistentRuntimeAnimatorController from = P_0;
					PersistentAnimatorOverrideController persistentAnimatorOverrideController = new PersistentAnimatorOverrideController();
					ProtoReader.NoteObject(persistentAnimatorOverrideController, P_1);
					P_0 = (PersistentRuntimeAnimatorController)ProtoReader.Merge(P_1, from, persistentAnimatorOverrideController);
				}
				PersistentAnimatorOverrideController obj = (PersistentAnimatorOverrideController)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimatorOverrideController persistentAnimatorOverrideController2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAnimatorOverrideController2;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentRuntimeAnimatorController persistentRuntimeAnimatorController = new PersistentRuntimeAnimatorController();
					ProtoReader.NoteObject(persistentRuntimeAnimatorController, P_1);
					P_0 = persistentRuntimeAnimatorController;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentRuntimeAnimatorController persistentRuntimeAnimatorController2 = new PersistentRuntimeAnimatorController();
			ProtoReader.NoteObject(persistentRuntimeAnimatorController2, P_1);
			P_0 = persistentRuntimeAnimatorController2;
		}
		return P_0;
	}

	private static void Write(PersistentAnimatorOverrideController P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAnimatorOverrideController))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAnimatorOverrideController), P_0.GetType());
		}
		long runtimeAnimatorController = P_0.runtimeAnimatorController;
		if (runtimeAnimatorController != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(runtimeAnimatorController, P_1);
		}
	}

	private static PersistentAnimatorOverrideController Read(PersistentAnimatorOverrideController P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentAnimatorOverrideController persistentAnimatorOverrideController = new PersistentAnimatorOverrideController();
					ProtoReader.NoteObject(persistentAnimatorOverrideController, P_1);
					P_0 = persistentAnimatorOverrideController;
				}
				long runtimeAnimatorController = P_1.ReadInt64();
				P_0.runtimeAnimatorController = runtimeAnimatorController;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentAnimatorOverrideController persistentAnimatorOverrideController2 = new PersistentAnimatorOverrideController();
					ProtoReader.NoteObject(persistentAnimatorOverrideController2, P_1);
					P_0 = persistentAnimatorOverrideController2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentAnimatorOverrideController persistentAnimatorOverrideController3 = new PersistentAnimatorOverrideController();
			ProtoReader.NoteObject(persistentAnimatorOverrideController3, P_1);
			P_0 = persistentAnimatorOverrideController3;
		}
		return P_0;
	}

	private static void Write(PersistentAudioMixerGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioMixerGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioMixerGroup), P_0.GetType());
		}
	}

	private static PersistentAudioMixerGroup Read(PersistentAudioMixerGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentAudioMixerGroup persistentAudioMixerGroup = new PersistentAudioMixerGroup();
				ProtoReader.NoteObject(persistentAudioMixerGroup, P_1);
				P_0 = persistentAudioMixerGroup;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentAudioMixerGroup persistentAudioMixerGroup2 = new PersistentAudioMixerGroup();
			ProtoReader.NoteObject(persistentAudioMixerGroup2, P_1);
			P_0 = persistentAudioMixerGroup2;
		}
		return P_0;
	}

	private static void Write(PersistentAudioMixerSnapshot P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioMixerSnapshot))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioMixerSnapshot), P_0.GetType());
		}
	}

	private static PersistentAudioMixerSnapshot Read(PersistentAudioMixerSnapshot P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentAudioMixerSnapshot persistentAudioMixerSnapshot = new PersistentAudioMixerSnapshot();
				ProtoReader.NoteObject(persistentAudioMixerSnapshot, P_1);
				P_0 = persistentAudioMixerSnapshot;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentAudioMixerSnapshot persistentAudioMixerSnapshot2 = new PersistentAudioMixerSnapshot();
			ProtoReader.NoteObject(persistentAudioMixerSnapshot2, P_1);
			P_0 = persistentAudioMixerSnapshot2;
		}
		return P_0;
	}

	private static void Write(PersistentAudioMixer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioMixer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioMixer), P_0.GetType());
		}
		long outputAudioMixerGroup = P_0.outputAudioMixerGroup;
		if (outputAudioMixerGroup != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(outputAudioMixerGroup, P_1);
		}
		uint updateMode = P_0.updateMode;
		if (updateMode != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(updateMode, P_1);
		}
	}

	private static PersistentAudioMixer Read(PersistentAudioMixer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAudioMixer persistentAudioMixer2 = new PersistentAudioMixer();
					ProtoReader.NoteObject(persistentAudioMixer2, P_1);
					P_0 = persistentAudioMixer2;
				}
				long outputAudioMixerGroup = P_1.ReadInt64();
				P_0.outputAudioMixerGroup = outputAudioMixerGroup;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAudioMixer persistentAudioMixer3 = new PersistentAudioMixer();
					ProtoReader.NoteObject(persistentAudioMixer3, P_1);
					P_0 = persistentAudioMixer3;
				}
				uint updateMode = P_1.ReadUInt32();
				P_0.updateMode = updateMode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAudioMixer persistentAudioMixer = new PersistentAudioMixer();
					ProtoReader.NoteObject(persistentAudioMixer, P_1);
					P_0 = persistentAudioMixer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAudioMixer persistentAudioMixer4 = new PersistentAudioMixer();
			ProtoReader.NoteObject(persistentAudioMixer4, P_1);
			P_0 = persistentAudioMixer4;
		}
		return P_0;
	}

	private static void Write(PersistentAudioClip P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioClip))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioClip), P_0.GetType());
		}
	}

	private static PersistentAudioClip Read(PersistentAudioClip P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentAudioClip persistentAudioClip = new PersistentAudioClip();
				ProtoReader.NoteObject(persistentAudioClip, P_1);
				P_0 = persistentAudioClip;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentAudioClip persistentAudioClip2 = new PersistentAudioClip();
			ProtoReader.NoteObject(persistentAudioClip2, P_1);
			P_0 = persistentAudioClip2;
		}
		return P_0;
	}

	private static void Write(PersistentNavMeshData P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentNavMeshData))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentNavMeshData), P_0.GetType());
		}
	}

	private static PersistentNavMeshData Read(PersistentNavMeshData P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentNavMeshData persistentNavMeshData = new PersistentNavMeshData();
				ProtoReader.NoteObject(persistentNavMeshData, P_1);
				P_0 = persistentNavMeshData;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentNavMeshData persistentNavMeshData2 = new PersistentNavMeshData();
			ProtoReader.NoteObject(persistentNavMeshData2, P_1);
			P_0 = persistentNavMeshData2;
		}
		return P_0;
	}

	private static void Write(PersistentPhysicsMaterial2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPhysicsMaterial2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPhysicsMaterial2D), P_0.GetType());
		}
		float bounciness = P_0.bounciness;
		if (bounciness != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounciness, P_1);
		}
		float friction = P_0.friction;
		if (friction != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(friction, P_1);
		}
	}

	private static PersistentPhysicsMaterial2D Read(PersistentPhysicsMaterial2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentPhysicsMaterial2D persistentPhysicsMaterial2D2 = new PersistentPhysicsMaterial2D();
					ProtoReader.NoteObject(persistentPhysicsMaterial2D2, P_1);
					P_0 = persistentPhysicsMaterial2D2;
				}
				float bounciness = P_1.ReadSingle();
				P_0.bounciness = bounciness;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentPhysicsMaterial2D persistentPhysicsMaterial2D3 = new PersistentPhysicsMaterial2D();
					ProtoReader.NoteObject(persistentPhysicsMaterial2D3, P_1);
					P_0 = persistentPhysicsMaterial2D3;
				}
				float bounciness = P_1.ReadSingle();
				P_0.friction = bounciness;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentPhysicsMaterial2D persistentPhysicsMaterial2D = new PersistentPhysicsMaterial2D();
					ProtoReader.NoteObject(persistentPhysicsMaterial2D, P_1);
					P_0 = persistentPhysicsMaterial2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentPhysicsMaterial2D persistentPhysicsMaterial2D4 = new PersistentPhysicsMaterial2D();
			ProtoReader.NoteObject(persistentPhysicsMaterial2D4, P_1);
			P_0 = persistentPhysicsMaterial2D4;
		}
		return P_0;
	}

	private static void Write(PersistentPhysicMaterial P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPhysicMaterial))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPhysicMaterial), P_0.GetType());
		}
		uint bounceCombine = P_0.bounceCombine;
		if (bounceCombine != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(bounceCombine, P_1);
		}
		float bounciness = P_0.bounciness;
		if (bounciness != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounciness, P_1);
		}
		float dynamicFriction = P_0.dynamicFriction;
		if (dynamicFriction != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dynamicFriction, P_1);
		}
		uint frictionCombine = P_0.frictionCombine;
		if (frictionCombine != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(frictionCombine, P_1);
		}
		float staticFriction = P_0.staticFriction;
		if (staticFriction != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(staticFriction, P_1);
		}
	}

	private static PersistentPhysicMaterial Read(PersistentPhysicMaterial P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentPhysicMaterial persistentPhysicMaterial6 = new PersistentPhysicMaterial();
					ProtoReader.NoteObject(persistentPhysicMaterial6, P_1);
					P_0 = persistentPhysicMaterial6;
				}
				uint frictionCombine = P_1.ReadUInt32();
				P_0.bounceCombine = frictionCombine;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentPhysicMaterial persistentPhysicMaterial2 = new PersistentPhysicMaterial();
					ProtoReader.NoteObject(persistentPhysicMaterial2, P_1);
					P_0 = persistentPhysicMaterial2;
				}
				float bounciness = P_1.ReadSingle();
				P_0.bounciness = bounciness;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentPhysicMaterial persistentPhysicMaterial5 = new PersistentPhysicMaterial();
					ProtoReader.NoteObject(persistentPhysicMaterial5, P_1);
					P_0 = persistentPhysicMaterial5;
				}
				float bounciness = P_1.ReadSingle();
				P_0.dynamicFriction = bounciness;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentPhysicMaterial persistentPhysicMaterial3 = new PersistentPhysicMaterial();
					ProtoReader.NoteObject(persistentPhysicMaterial3, P_1);
					P_0 = persistentPhysicMaterial3;
				}
				uint frictionCombine = P_1.ReadUInt32();
				P_0.frictionCombine = frictionCombine;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentPhysicMaterial persistentPhysicMaterial4 = new PersistentPhysicMaterial();
					ProtoReader.NoteObject(persistentPhysicMaterial4, P_1);
					P_0 = persistentPhysicMaterial4;
				}
				float bounciness = P_1.ReadSingle();
				P_0.staticFriction = bounciness;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentPhysicMaterial persistentPhysicMaterial = new PersistentPhysicMaterial();
					ProtoReader.NoteObject(persistentPhysicMaterial, P_1);
					P_0 = persistentPhysicMaterial;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentPhysicMaterial persistentPhysicMaterial7 = new PersistentPhysicMaterial();
			ProtoReader.NoteObject(persistentPhysicMaterial7, P_1);
			P_0 = persistentPhysicMaterial7;
		}
		return P_0;
	}

	private static void Write(PersistentTexture P_0, ProtoWriter P_1)
	{
		PersistentProceduralTexture obj = P_0 as PersistentProceduralTexture;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1074, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentTexture2D obj2 = P_0 as PersistentTexture2D;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1075, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentCubemap obj3 = P_0 as PersistentCubemap;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1076, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentTexture3D obj4 = P_0 as PersistentTexture3D;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1077, WireType.String, P_1);
						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentTexture2DArray obj5 = P_0 as PersistentTexture2DArray;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1078, WireType.String, P_1);
							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentCubemapArray obj6 = P_0 as PersistentCubemapArray;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1079, WireType.String, P_1);
								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else
							{
								PersistentSparseTexture obj7 = P_0 as PersistentSparseTexture;
								if (obj7 != null)
								{
									ProtoWriter.WriteFieldHeader(1080, WireType.String, P_1);
									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
									Write(obj7, P_1);
									ProtoWriter.EndSubItem(token, P_1);
								}
								else
								{
									PersistentRenderTexture obj8 = P_0 as PersistentRenderTexture;
									if (obj8 != null)
									{
										ProtoWriter.WriteFieldHeader(1081, WireType.String, P_1);
										SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
										Write(obj8, P_1);
										ProtoWriter.EndSubItem(token, P_1);
									}
									else
									{
										PersistentMovieTexture obj9 = P_0 as PersistentMovieTexture;
										if (obj9 != null)
										{
											ProtoWriter.WriteFieldHeader(1082, WireType.String, P_1);
											SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
											Write(obj9, P_1);
											ProtoWriter.EndSubItem(token, P_1);
										}
										else
										{
											PersistentWebCamTexture obj10 = P_0 as PersistentWebCamTexture;
											if (obj10 != null)
											{
												ProtoWriter.WriteFieldHeader(1083, WireType.String, P_1);
												SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
												Write(obj10, P_1);
												ProtoWriter.EndSubItem(token, P_1);
											}
											else if (P_0.GetType() != typeof(PersistentTexture))
											{
												TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTexture), P_0.GetType());
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		int anisoLevel = P_0.anisoLevel;
		if (anisoLevel != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(anisoLevel, P_1);
		}
		TextureDimension dimension = P_0.dimension;
		if (dimension != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			TextureDimension textureDimension = dimension;
			switch (textureDimension)
			{
			case TextureDimension.Unknown:
				ProtoWriter.WriteInt32(-1, P_1);
				break;
			case TextureDimension.None:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case TextureDimension.Any:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case TextureDimension.Tex2D:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case TextureDimension.Tex3D:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			case TextureDimension.Cube:
				ProtoWriter.WriteInt32(4, P_1);
				break;
			case TextureDimension.Tex2DArray:
				ProtoWriter.WriteInt32(5, P_1);
				break;
			case TextureDimension.CubeArray:
				ProtoWriter.WriteInt32(6, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, textureDimension);
				break;
			}
		}
		FilterMode filterMode = P_0.filterMode;
		if (filterMode != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			FilterMode filterMode2 = filterMode;
			switch (filterMode2)
			{
			case FilterMode.Point:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case FilterMode.Bilinear:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case FilterMode.Trilinear:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, filterMode2);
				break;
			}
		}
		int height = P_0.height;
		if (height != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(height, P_1);
		}
		float mipMapBias = P_0.mipMapBias;
		if (mipMapBias != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(mipMapBias, P_1);
		}
		int width = P_0.width;
		if (width != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(width, P_1);
		}
		TextureWrapMode wrapMode = P_0.wrapMode;
		if (wrapMode != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			TextureWrapMode textureWrapMode = wrapMode;
			switch (textureWrapMode)
			{
			case TextureWrapMode.Repeat:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case TextureWrapMode.Clamp:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case TextureWrapMode.Mirror:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case TextureWrapMode.MirrorOnce:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, textureWrapMode);
				break;
			}
		}
	}

	private static PersistentTexture Read(PersistentTexture P_0, ProtoReader P_1)
	{
		int num;
		TextureDimension dimension = default(TextureDimension);
		FilterMode filterMode = default(FilterMode);
		TextureWrapMode wrapMode = default(TextureWrapMode);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTexture persistentTexture2 = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture2, P_1);
					P_0 = persistentTexture2;
				}
				int anisoLevel = P_1.ReadInt32();
				P_0.anisoLevel = anisoLevel;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTexture persistentTexture7 = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture7, P_1);
					P_0 = persistentTexture7;
				}
				int anisoLevel = P_1.ReadInt32();
				switch (anisoLevel)
				{
				case -1:
					dimension = TextureDimension.Unknown;
					break;
				case 0:
					dimension = TextureDimension.None;
					break;
				case 1:
					dimension = TextureDimension.Any;
					break;
				case 2:
					dimension = TextureDimension.Tex2D;
					break;
				case 3:
					dimension = TextureDimension.Tex3D;
					break;
				case 4:
					dimension = TextureDimension.Cube;
					break;
				case 5:
					dimension = TextureDimension.Tex2DArray;
					break;
				case 6:
					dimension = TextureDimension.CubeArray;
					break;
				default:
					P_1.ThrowEnumException(typeof(TextureDimension), anisoLevel);
					break;
				}
				dimension = (P_0.dimension = dimension);
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTexture persistentTexture8 = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture8, P_1);
					P_0 = persistentTexture8;
				}
				int anisoLevel = P_1.ReadInt32();
				switch (anisoLevel)
				{
				case 0:
					filterMode = FilterMode.Point;
					break;
				case 1:
					filterMode = FilterMode.Bilinear;
					break;
				case 2:
					filterMode = FilterMode.Trilinear;
					break;
				default:
					P_1.ThrowEnumException(typeof(FilterMode), anisoLevel);
					break;
				}
				filterMode = (P_0.filterMode = filterMode);
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTexture persistentTexture3 = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture3, P_1);
					P_0 = persistentTexture3;
				}
				int anisoLevel = P_1.ReadInt32();
				P_0.height = anisoLevel;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTexture persistentTexture6 = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture6, P_1);
					P_0 = persistentTexture6;
				}
				float mipMapBias = P_1.ReadSingle();
				P_0.mipMapBias = mipMapBias;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTexture persistentTexture4 = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture4, P_1);
					P_0 = persistentTexture4;
				}
				int anisoLevel = P_1.ReadInt32();
				P_0.width = anisoLevel;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentTexture persistentTexture5 = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture5, P_1);
					P_0 = persistentTexture5;
				}
				int anisoLevel = P_1.ReadInt32();
				switch (anisoLevel)
				{
				case 0:
					wrapMode = TextureWrapMode.Repeat;
					break;
				case 1:
					wrapMode = TextureWrapMode.Clamp;
					break;
				case 2:
					wrapMode = TextureWrapMode.Mirror;
					break;
				case 3:
					wrapMode = TextureWrapMode.MirrorOnce;
					break;
				default:
					P_1.ThrowEnumException(typeof(TextureWrapMode), anisoLevel);
					break;
				}
				wrapMode = (P_0.wrapMode = wrapMode);
				break;
			}
			case 1074:
			{
				if (P_0 != null && !(P_0 is PersistentProceduralTexture))
				{
					PersistentTexture from7 = P_0;
					PersistentProceduralTexture persistentProceduralTexture = new PersistentProceduralTexture();
					ProtoReader.NoteObject(persistentProceduralTexture, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from7, persistentProceduralTexture);
				}
				PersistentProceduralTexture obj7 = (PersistentProceduralTexture)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentProceduralTexture persistentProceduralTexture2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentProceduralTexture2;
				break;
			}
			case 1075:
			{
				if (P_0 != null && !(P_0 is PersistentTexture2D))
				{
					PersistentTexture from8 = P_0;
					PersistentTexture2D persistentTexture2D = new PersistentTexture2D();
					ProtoReader.NoteObject(persistentTexture2D, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from8, persistentTexture2D);
				}
				PersistentTexture2D obj8 = (PersistentTexture2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTexture2D persistentTexture2D2 = Read(obj8, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTexture2D2;
				break;
			}
			case 1076:
			{
				if (P_0 != null && !(P_0 is PersistentCubemap))
				{
					PersistentTexture from10 = P_0;
					PersistentCubemap persistentCubemap = new PersistentCubemap();
					ProtoReader.NoteObject(persistentCubemap, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from10, persistentCubemap);
				}
				PersistentCubemap obj10 = (PersistentCubemap)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCubemap persistentCubemap2 = Read(obj10, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCubemap2;
				break;
			}
			case 1077:
			{
				if (P_0 != null && !(P_0 is PersistentTexture3D))
				{
					PersistentTexture from6 = P_0;
					PersistentTexture3D persistentTexture3D = new PersistentTexture3D();
					ProtoReader.NoteObject(persistentTexture3D, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from6, persistentTexture3D);
				}
				PersistentTexture3D obj6 = (PersistentTexture3D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTexture3D persistentTexture3D2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTexture3D2;
				break;
			}
			case 1078:
			{
				if (P_0 != null && !(P_0 is PersistentTexture2DArray))
				{
					PersistentTexture from4 = P_0;
					PersistentTexture2DArray persistentTexture2DArray = new PersistentTexture2DArray();
					ProtoReader.NoteObject(persistentTexture2DArray, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from4, persistentTexture2DArray);
				}
				PersistentTexture2DArray obj4 = (PersistentTexture2DArray)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTexture2DArray persistentTexture2DArray2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTexture2DArray2;
				break;
			}
			case 1079:
			{
				if (P_0 != null && !(P_0 is PersistentCubemapArray))
				{
					PersistentTexture from = P_0;
					PersistentCubemapArray persistentCubemapArray = new PersistentCubemapArray();
					ProtoReader.NoteObject(persistentCubemapArray, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from, persistentCubemapArray);
				}
				PersistentCubemapArray obj = (PersistentCubemapArray)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCubemapArray persistentCubemapArray2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCubemapArray2;
				break;
			}
			case 1080:
			{
				if (P_0 != null && !(P_0 is PersistentSparseTexture))
				{
					PersistentTexture from9 = P_0;
					PersistentSparseTexture persistentSparseTexture = new PersistentSparseTexture();
					ProtoReader.NoteObject(persistentSparseTexture, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from9, persistentSparseTexture);
				}
				PersistentSparseTexture obj9 = (PersistentSparseTexture)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSparseTexture persistentSparseTexture2 = Read(obj9, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSparseTexture2;
				break;
			}
			case 1081:
			{
				if (P_0 != null && !(P_0 is PersistentRenderTexture))
				{
					PersistentTexture from5 = P_0;
					PersistentRenderTexture persistentRenderTexture = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from5, persistentRenderTexture);
				}
				PersistentRenderTexture obj5 = (PersistentRenderTexture)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRenderTexture persistentRenderTexture2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRenderTexture2;
				break;
			}
			case 1082:
			{
				if (P_0 != null && !(P_0 is PersistentMovieTexture))
				{
					PersistentTexture from3 = P_0;
					PersistentMovieTexture persistentMovieTexture = new PersistentMovieTexture();
					ProtoReader.NoteObject(persistentMovieTexture, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from3, persistentMovieTexture);
				}
				PersistentMovieTexture obj3 = (PersistentMovieTexture)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMovieTexture persistentMovieTexture2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMovieTexture2;
				break;
			}
			case 1083:
			{
				if (P_0 != null && !(P_0 is PersistentWebCamTexture))
				{
					PersistentTexture from2 = P_0;
					PersistentWebCamTexture persistentWebCamTexture = new PersistentWebCamTexture();
					ProtoReader.NoteObject(persistentWebCamTexture, P_1);
					P_0 = (PersistentTexture)ProtoReader.Merge(P_1, from2, persistentWebCamTexture);
				}
				PersistentWebCamTexture obj2 = (PersistentWebCamTexture)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentWebCamTexture persistentWebCamTexture2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentWebCamTexture2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTexture persistentTexture = new PersistentTexture();
					ProtoReader.NoteObject(persistentTexture, P_1);
					P_0 = persistentTexture;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTexture persistentTexture9 = new PersistentTexture();
			ProtoReader.NoteObject(persistentTexture9, P_1);
			P_0 = persistentTexture9;
		}
		return P_0;
	}

	private static void Write(PersistentWebCamTexture P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentWebCamTexture))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentWebCamTexture), P_0.GetType());
		}
		string deviceName = P_0.deviceName;
		if (deviceName != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(deviceName, P_1);
		}
		float requestedFPS = P_0.requestedFPS;
		if (requestedFPS != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(requestedFPS, P_1);
		}
		int requestedHeight = P_0.requestedHeight;
		if (requestedHeight != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(requestedHeight, P_1);
		}
		int requestedWidth = P_0.requestedWidth;
		if (requestedWidth != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(requestedWidth, P_1);
		}
	}

	private static PersistentWebCamTexture Read(PersistentWebCamTexture P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentWebCamTexture persistentWebCamTexture3 = new PersistentWebCamTexture();
					ProtoReader.NoteObject(persistentWebCamTexture3, P_1);
					P_0 = persistentWebCamTexture3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.deviceName = text;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentWebCamTexture persistentWebCamTexture5 = new PersistentWebCamTexture();
					ProtoReader.NoteObject(persistentWebCamTexture5, P_1);
					P_0 = persistentWebCamTexture5;
				}
				float requestedFPS = P_1.ReadSingle();
				P_0.requestedFPS = requestedFPS;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentWebCamTexture persistentWebCamTexture2 = new PersistentWebCamTexture();
					ProtoReader.NoteObject(persistentWebCamTexture2, P_1);
					P_0 = persistentWebCamTexture2;
				}
				int requestedHeight = P_1.ReadInt32();
				P_0.requestedHeight = requestedHeight;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentWebCamTexture persistentWebCamTexture4 = new PersistentWebCamTexture();
					ProtoReader.NoteObject(persistentWebCamTexture4, P_1);
					P_0 = persistentWebCamTexture4;
				}
				int requestedHeight = P_1.ReadInt32();
				P_0.requestedWidth = requestedHeight;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentWebCamTexture persistentWebCamTexture = new PersistentWebCamTexture();
					ProtoReader.NoteObject(persistentWebCamTexture, P_1);
					P_0 = persistentWebCamTexture;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentWebCamTexture persistentWebCamTexture6 = new PersistentWebCamTexture();
			ProtoReader.NoteObject(persistentWebCamTexture6, P_1);
			P_0 = persistentWebCamTexture6;
		}
		return P_0;
	}

	private static void Write(PersistentMovieTexture P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMovieTexture))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMovieTexture), P_0.GetType());
		}
		bool loop = P_0.loop;
		if (loop)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(loop, P_1);
		}
	}

	private static PersistentMovieTexture Read(PersistentMovieTexture P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentMovieTexture persistentMovieTexture = new PersistentMovieTexture();
					ProtoReader.NoteObject(persistentMovieTexture, P_1);
					P_0 = persistentMovieTexture;
				}
				bool loop = P_1.ReadBoolean();
				P_0.loop = loop;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentMovieTexture persistentMovieTexture2 = new PersistentMovieTexture();
					ProtoReader.NoteObject(persistentMovieTexture2, P_1);
					P_0 = persistentMovieTexture2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentMovieTexture persistentMovieTexture3 = new PersistentMovieTexture();
			ProtoReader.NoteObject(persistentMovieTexture3, P_1);
			P_0 = persistentMovieTexture3;
		}
		return P_0;
	}

	private static void Write(PersistentRenderTexture P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRenderTexture))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRenderTexture), P_0.GetType());
		}
		int antiAliasing = P_0.antiAliasing;
		if (antiAliasing != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(antiAliasing, P_1);
		}
		bool autoGenerateMips = P_0.autoGenerateMips;
		if (autoGenerateMips)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoGenerateMips, P_1);
		}
		int depth = P_0.depth;
		if (depth != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(depth, P_1);
		}
		bool enableRandomWrite = P_0.enableRandomWrite;
		if (enableRandomWrite)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enableRandomWrite, P_1);
		}
		uint format = P_0.format;
		if (format != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(format, P_1);
		}
		bool isPowerOfTwo = P_0.isPowerOfTwo;
		if (isPowerOfTwo)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isPowerOfTwo, P_1);
		}
		bool useMipMap = P_0.useMipMap;
		if (useMipMap)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useMipMap, P_1);
		}
		int volumeDepth = P_0.volumeDepth;
		if (volumeDepth != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(volumeDepth, P_1);
		}
	}

	private static PersistentRenderTexture Read(PersistentRenderTexture P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture8 = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture8, P_1);
					P_0 = persistentRenderTexture8;
				}
				int volumeDepth = P_1.ReadInt32();
				P_0.antiAliasing = volumeDepth;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture2 = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture2, P_1);
					P_0 = persistentRenderTexture2;
				}
				bool autoGenerateMips = P_1.ReadBoolean();
				P_0.autoGenerateMips = autoGenerateMips;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture9 = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture9, P_1);
					P_0 = persistentRenderTexture9;
				}
				int volumeDepth = P_1.ReadInt32();
				P_0.depth = volumeDepth;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture6 = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture6, P_1);
					P_0 = persistentRenderTexture6;
				}
				bool autoGenerateMips = P_1.ReadBoolean();
				P_0.enableRandomWrite = autoGenerateMips;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture5 = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture5, P_1);
					P_0 = persistentRenderTexture5;
				}
				uint format = P_1.ReadUInt32();
				P_0.format = format;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture3 = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture3, P_1);
					P_0 = persistentRenderTexture3;
				}
				bool autoGenerateMips = P_1.ReadBoolean();
				P_0.isPowerOfTwo = autoGenerateMips;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture7 = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture7, P_1);
					P_0 = persistentRenderTexture7;
				}
				bool autoGenerateMips = P_1.ReadBoolean();
				P_0.useMipMap = autoGenerateMips;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture4 = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture4, P_1);
					P_0 = persistentRenderTexture4;
				}
				int volumeDepth = P_1.ReadInt32();
				P_0.volumeDepth = volumeDepth;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRenderTexture persistentRenderTexture = new PersistentRenderTexture();
					ProtoReader.NoteObject(persistentRenderTexture, P_1);
					P_0 = persistentRenderTexture;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRenderTexture persistentRenderTexture10 = new PersistentRenderTexture();
			ProtoReader.NoteObject(persistentRenderTexture10, P_1);
			P_0 = persistentRenderTexture10;
		}
		return P_0;
	}

	private static void Write(PersistentSparseTexture P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSparseTexture))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSparseTexture), P_0.GetType());
		}
	}

	private static PersistentSparseTexture Read(PersistentSparseTexture P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentSparseTexture persistentSparseTexture = new PersistentSparseTexture();
				ProtoReader.NoteObject(persistentSparseTexture, P_1);
				P_0 = persistentSparseTexture;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentSparseTexture persistentSparseTexture2 = new PersistentSparseTexture();
			ProtoReader.NoteObject(persistentSparseTexture2, P_1);
			P_0 = persistentSparseTexture2;
		}
		return P_0;
	}

	private static void Write(PersistentCubemapArray P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCubemapArray))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCubemapArray), P_0.GetType());
		}
	}

	private static PersistentCubemapArray Read(PersistentCubemapArray P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentCubemapArray persistentCubemapArray = new PersistentCubemapArray();
				ProtoReader.NoteObject(persistentCubemapArray, P_1);
				P_0 = persistentCubemapArray;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentCubemapArray persistentCubemapArray2 = new PersistentCubemapArray();
			ProtoReader.NoteObject(persistentCubemapArray2, P_1);
			P_0 = persistentCubemapArray2;
		}
		return P_0;
	}

	private static void Write(PersistentTexture2DArray P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTexture2DArray))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTexture2DArray), P_0.GetType());
		}
	}

	private static PersistentTexture2DArray Read(PersistentTexture2DArray P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentTexture2DArray persistentTexture2DArray = new PersistentTexture2DArray();
				ProtoReader.NoteObject(persistentTexture2DArray, P_1);
				P_0 = persistentTexture2DArray;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentTexture2DArray persistentTexture2DArray2 = new PersistentTexture2DArray();
			ProtoReader.NoteObject(persistentTexture2DArray2, P_1);
			P_0 = persistentTexture2DArray2;
		}
		return P_0;
	}

	private static void Write(PersistentTexture3D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTexture3D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTexture3D), P_0.GetType());
		}
	}

	private static PersistentTexture3D Read(PersistentTexture3D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentTexture3D persistentTexture3D = new PersistentTexture3D();
				ProtoReader.NoteObject(persistentTexture3D, P_1);
				P_0 = persistentTexture3D;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentTexture3D persistentTexture3D2 = new PersistentTexture3D();
			ProtoReader.NoteObject(persistentTexture3D2, P_1);
			P_0 = persistentTexture3D2;
		}
		return P_0;
	}

	private static void Write(PersistentCubemap P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCubemap))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCubemap), P_0.GetType());
		}
	}

	private static PersistentCubemap Read(PersistentCubemap P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentCubemap persistentCubemap = new PersistentCubemap();
				ProtoReader.NoteObject(persistentCubemap, P_1);
				P_0 = persistentCubemap;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentCubemap persistentCubemap2 = new PersistentCubemap();
			ProtoReader.NoteObject(persistentCubemap2, P_1);
			P_0 = persistentCubemap2;
		}
		return P_0;
	}

	private static void Write(PersistentTexture2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTexture2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTexture2D), P_0.GetType());
		}
	}

	private static PersistentTexture2D Read(PersistentTexture2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentTexture2D persistentTexture2D = new PersistentTexture2D();
				ProtoReader.NoteObject(persistentTexture2D, P_1);
				P_0 = persistentTexture2D;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentTexture2D persistentTexture2D2 = new PersistentTexture2D();
			ProtoReader.NoteObject(persistentTexture2D2, P_1);
			P_0 = persistentTexture2D2;
		}
		return P_0;
	}

	private static void Write(PersistentProceduralTexture P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentProceduralTexture))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentProceduralTexture), P_0.GetType());
		}
	}

	private static PersistentProceduralTexture Read(PersistentProceduralTexture P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentProceduralTexture persistentProceduralTexture = new PersistentProceduralTexture();
				ProtoReader.NoteObject(persistentProceduralTexture, P_1);
				P_0 = persistentProceduralTexture;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentProceduralTexture persistentProceduralTexture2 = new PersistentProceduralTexture();
			ProtoReader.NoteObject(persistentProceduralTexture2, P_1);
			P_0 = persistentProceduralTexture2;
		}
		return P_0;
	}

	private static void Write(PersistentTextAsset P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTextAsset))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTextAsset), P_0.GetType());
		}
	}

	private static PersistentTextAsset Read(PersistentTextAsset P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentTextAsset persistentTextAsset = new PersistentTextAsset();
				ProtoReader.NoteObject(persistentTextAsset, P_1);
				P_0 = persistentTextAsset;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentTextAsset persistentTextAsset2 = new PersistentTextAsset();
			ProtoReader.NoteObject(persistentTextAsset2, P_1);
			P_0 = persistentTextAsset2;
		}
		return P_0;
	}

	private static void Write(PersistentSprite P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSprite))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSprite), P_0.GetType());
		}
	}

	private static PersistentSprite Read(PersistentSprite P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentSprite persistentSprite = new PersistentSprite();
				ProtoReader.NoteObject(persistentSprite, P_1);
				P_0 = persistentSprite;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentSprite persistentSprite2 = new PersistentSprite();
			ProtoReader.NoteObject(persistentSprite2, P_1);
			P_0 = persistentSprite2;
		}
		return P_0;
	}

	private static void Write(PersistentShaderVariantCollection P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentShaderVariantCollection))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentShaderVariantCollection), P_0.GetType());
		}
	}

	private static PersistentShaderVariantCollection Read(PersistentShaderVariantCollection P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentShaderVariantCollection persistentShaderVariantCollection = new PersistentShaderVariantCollection();
				ProtoReader.NoteObject(persistentShaderVariantCollection, P_1);
				P_0 = persistentShaderVariantCollection;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentShaderVariantCollection persistentShaderVariantCollection2 = new PersistentShaderVariantCollection();
			ProtoReader.NoteObject(persistentShaderVariantCollection2, P_1);
			P_0 = persistentShaderVariantCollection2;
		}
		return P_0;
	}

	private static void Write(PersistentMaterial P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMaterial))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMaterial), P_0.GetType());
		}
		Color color = P_0.color;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool enableInstancing = P_0.enableInstancing;
		if (enableInstancing)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enableInstancing, P_1);
		}
		uint globalIlluminationFlags = P_0.globalIlluminationFlags;
		if (globalIlluminationFlags != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(globalIlluminationFlags, P_1);
		}
		string[] keywords = P_0.m_keywords;
		string[] array;
		if (keywords != null)
		{
			array = keywords;
			foreach (string obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
					ProtoWriter.WriteString(obj, P_1);
				}
			}
		}
		string[] propertyNames = P_0.m_propertyNames;
		if (propertyNames != null)
		{
			array = propertyNames;
			foreach (string obj2 in array)
			{
				if (obj2 != null)
				{
					ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
					ProtoWriter.WriteString(obj2, P_1);
				}
			}
		}
		RTShaderPropertyType[] propertyTypes = P_0.m_propertyTypes;
		if (propertyTypes != null)
		{
			RTShaderPropertyType[] array2 = propertyTypes;
			foreach (RTShaderPropertyType num in array2)
			{
				ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
				RTShaderPropertyType rTShaderPropertyType = num;
				switch (rTShaderPropertyType)
				{
				case RTShaderPropertyType.Color:
					ProtoWriter.WriteInt32(0, P_1);
					break;
				case RTShaderPropertyType.Vector:
					ProtoWriter.WriteInt32(1, P_1);
					break;
				case RTShaderPropertyType.Float:
					ProtoWriter.WriteInt32(2, P_1);
					break;
				case RTShaderPropertyType.Range:
					ProtoWriter.WriteInt32(3, P_1);
					break;
				case RTShaderPropertyType.TexEnv:
					ProtoWriter.WriteInt32(4, P_1);
					break;
				case RTShaderPropertyType.Unknown:
					ProtoWriter.WriteInt32(5, P_1);
					break;
				case RTShaderPropertyType.Procedural:
					ProtoWriter.WriteInt32(6, P_1);
					break;
				default:
					ProtoWriter.ThrowEnumException(P_1, rTShaderPropertyType);
					break;
				}
			}
		}
		DataContract[] propertyValues = P_0.m_propertyValues;
		if (propertyValues != null)
		{
			DataContract[] array3 = propertyValues;
			foreach (DataContract obj3 in array3)
			{
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(obj3, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		long mainTexture = P_0.mainTexture;
		if (mainTexture != 0L)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(mainTexture, P_1);
		}
		Vector2 mainTextureOffset = P_0.mainTextureOffset;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(mainTextureOffset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 mainTextureScale = P_0.mainTextureScale;
		ProtoWriter.WriteFieldHeader(10, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(mainTextureScale, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		int renderQueue = P_0.renderQueue;
		if (renderQueue != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(renderQueue, P_1);
		}
		long shader = P_0.shader;
		if (shader != 0L)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(shader, P_1);
		}
		string[] shaderKeywords = P_0.shaderKeywords;
		if (shaderKeywords == null)
		{
			return;
		}
		array = shaderKeywords;
		foreach (string obj4 in array)
		{
			if (obj4 != null)
			{
				ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
				ProtoWriter.WriteString(obj4, P_1);
			}
		}
	}

	private static PersistentMaterial Read(PersistentMaterial P_0, ProtoReader P_1)
	{
		int num;
		RTShaderPropertyType item2 = default(RTShaderPropertyType);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial10 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial10, P_1);
					P_0 = persistentMaterial10;
				}
				Color color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				P_0.color = color3;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial8 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial8, P_1);
					P_0 = persistentMaterial8;
				}
				bool enableInstancing = P_1.ReadBoolean();
				P_0.enableInstancing = enableInstancing;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial2 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial2, P_1);
					P_0 = persistentMaterial2;
				}
				uint globalIlluminationFlags = P_1.ReadUInt32();
				P_0.globalIlluminationFlags = globalIlluminationFlags;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial12 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial12, P_1);
					P_0 = persistentMaterial12;
				}
				string[] shaderKeywords = P_0.m_keywords;
				List<string> list = new List<string>();
				int fieldNumber2 = P_1.FieldNumber;
				do
				{
					list.Add(P_1.ReadString());
				}
				while (P_1.TryReadFieldHeader(fieldNumber2));
				string[] array5 = shaderKeywords;
				string[] array2 = new string[(fieldNumber2 = ((array5 != null) ? array5.Length : 0)) + list.Count];
				if (fieldNumber2 != 0)
				{
					shaderKeywords.CopyTo(array2, 0);
				}
				list.CopyTo(array2, fieldNumber2);
				array2 = array2;
				if (array2 != null)
				{
					P_0.m_keywords = array2;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial14 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial14, P_1);
					P_0 = persistentMaterial14;
				}
				string[] array2 = P_0.m_propertyNames;
				List<string> list = new List<string>();
				int fieldNumber2 = P_1.FieldNumber;
				do
				{
					list.Add(P_1.ReadString());
				}
				while (P_1.TryReadFieldHeader(fieldNumber2));
				string[] array6 = array2;
				string[] shaderKeywords = new string[(fieldNumber2 = ((array6 != null) ? array6.Length : 0)) + list.Count];
				if (fieldNumber2 != 0)
				{
					array2.CopyTo(shaderKeywords, 0);
				}
				list.CopyTo(shaderKeywords, fieldNumber2);
				shaderKeywords = shaderKeywords;
				if (shaderKeywords != null)
				{
					P_0.m_propertyNames = shaderKeywords;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial9 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial9, P_1);
					P_0 = persistentMaterial9;
				}
				RTShaderPropertyType[] propertyTypes = P_0.m_propertyTypes;
				List<RTShaderPropertyType> list3 = new List<RTShaderPropertyType>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber2 = P_1.FieldNumber;
					do
					{
						fieldNumber = P_1.ReadInt32();
						switch (fieldNumber)
						{
						case 0:
							item2 = RTShaderPropertyType.Color;
							break;
						case 1:
							item2 = RTShaderPropertyType.Vector;
							break;
						case 2:
							item2 = RTShaderPropertyType.Float;
							break;
						case 3:
							item2 = RTShaderPropertyType.Range;
							break;
						case 4:
							item2 = RTShaderPropertyType.TexEnv;
							break;
						case 5:
							item2 = RTShaderPropertyType.Unknown;
							break;
						case 6:
							item2 = RTShaderPropertyType.Procedural;
							break;
						default:
							P_1.ThrowEnumException(typeof(RTShaderPropertyType), fieldNumber);
							break;
						}
						list3.Add(item2);
					}
					while (P_1.TryReadFieldHeader(fieldNumber2));
				}
				else
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						fieldNumber = P_1.ReadInt32();
						switch (fieldNumber)
						{
						case 0:
							item2 = RTShaderPropertyType.Color;
							break;
						case 1:
							item2 = RTShaderPropertyType.Vector;
							break;
						case 2:
							item2 = RTShaderPropertyType.Float;
							break;
						case 3:
							item2 = RTShaderPropertyType.Range;
							break;
						case 4:
							item2 = RTShaderPropertyType.TexEnv;
							break;
						case 5:
							item2 = RTShaderPropertyType.Unknown;
							break;
						case 6:
							item2 = RTShaderPropertyType.Procedural;
							break;
						default:
							P_1.ThrowEnumException(typeof(RTShaderPropertyType), fieldNumber);
							break;
						}
						list3.Add(item2);
					}
					ProtoReader.EndSubItem(token2, P_1);
				}
				RTShaderPropertyType[] array4 = new RTShaderPropertyType[(fieldNumber = ((propertyTypes != null) ? propertyTypes.Length : 0)) + list3.Count];
				if (fieldNumber != 0)
				{
					propertyTypes.CopyTo(array4, 0);
				}
				list3.CopyTo(array4, fieldNumber);
				array4 = array4;
				if (array4 != null)
				{
					P_0.m_propertyTypes = array4;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial7 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial7, P_1);
					P_0 = persistentMaterial7;
				}
				DataContract[] propertyValues = P_0.m_propertyValues;
				List<DataContract> list2 = new List<DataContract>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					DataContract item = Read((DataContract)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				DataContract[] array3 = new DataContract[(fieldNumber = ((propertyValues != null) ? propertyValues.Length : 0)) + list2.Count];
				if (fieldNumber != 0)
				{
					propertyValues.CopyTo(array3, 0);
				}
				list2.CopyTo(array3, fieldNumber);
				array3 = array3;
				if (array3 != null)
				{
					P_0.m_propertyValues = array3;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial6 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial6, P_1);
					P_0 = persistentMaterial6;
				}
				long shader = P_1.ReadInt64();
				P_0.mainTexture = shader;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial13 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial13, P_1);
					P_0 = persistentMaterial13;
				}
				Vector2 mainTextureOffset = P_0.mainTextureOffset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(mainTextureOffset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 mainTextureScale2 = vector2;
				P_0.mainTextureOffset = mainTextureScale2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial11 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial11, P_1);
					P_0 = persistentMaterial11;
				}
				Vector2 mainTextureScale = P_0.mainTextureScale;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(mainTextureScale, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 mainTextureScale2 = vector;
				P_0.mainTextureScale = mainTextureScale2;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial5 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial5, P_1);
					P_0 = persistentMaterial5;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.renderQueue = fieldNumber;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial3 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial3, P_1);
					P_0 = persistentMaterial3;
				}
				long shader = P_1.ReadInt64();
				P_0.shader = shader;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial4 = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial4, P_1);
					P_0 = persistentMaterial4;
				}
				string[] shaderKeywords = P_0.shaderKeywords;
				List<string> list = new List<string>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					list.Add(P_1.ReadString());
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				string[] array = shaderKeywords;
				string[] array2 = new string[(fieldNumber = ((array != null) ? array.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					shaderKeywords.CopyTo(array2, 0);
				}
				list.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.shaderKeywords = array2;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentMaterial persistentMaterial = new PersistentMaterial();
					ProtoReader.NoteObject(persistentMaterial, P_1);
					P_0 = persistentMaterial;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentMaterial persistentMaterial15 = new PersistentMaterial();
			ProtoReader.NoteObject(persistentMaterial15, P_1);
			P_0 = persistentMaterial15;
		}
		return P_0;
	}

	private static void Write(PersistentShader P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentShader))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentShader), P_0.GetType());
		}
		int maximumLOD = P_0.maximumLOD;
		if (maximumLOD != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(maximumLOD, P_1);
		}
	}

	private static PersistentShader Read(PersistentShader P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentShader persistentShader = new PersistentShader();
					ProtoReader.NoteObject(persistentShader, P_1);
					P_0 = persistentShader;
				}
				int maximumLOD = P_1.ReadInt32();
				P_0.maximumLOD = maximumLOD;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentShader persistentShader2 = new PersistentShader();
					ProtoReader.NoteObject(persistentShader2, P_1);
					P_0 = persistentShader2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentShader persistentShader3 = new PersistentShader();
			ProtoReader.NoteObject(persistentShader3, P_1);
			P_0 = persistentShader3;
		}
		return P_0;
	}

	private static void Write(PersistentGraphicsSettings P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGraphicsSettings))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGraphicsSettings), P_0.GetType());
		}
	}

	private static PersistentGraphicsSettings Read(PersistentGraphicsSettings P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentGraphicsSettings persistentGraphicsSettings = new PersistentGraphicsSettings();
				ProtoReader.NoteObject(persistentGraphicsSettings, P_1);
				P_0 = persistentGraphicsSettings;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentGraphicsSettings persistentGraphicsSettings2 = new PersistentGraphicsSettings();
			ProtoReader.NoteObject(persistentGraphicsSettings2, P_1);
			P_0 = persistentGraphicsSettings2;
		}
		return P_0;
	}

	private static void Write(PersistentMesh P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMesh))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMesh), P_0.GetType());
		}
		Matrix4x4[] bindposes = P_0.bindposes;
		SubItemToken token;
		if (bindposes != null)
		{
			Matrix4x4[] array = bindposes;
			foreach (Matrix4x4 matrix4x in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(matrix4x, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		BoneWeight[] boneWeights = P_0.boneWeights;
		if (boneWeights != null)
		{
			BoneWeight[] array2 = boneWeights;
			foreach (BoneWeight boneWeight in array2)
			{
				ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(boneWeight, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		Bounds bounds = P_0.bounds;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(bounds, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color[] colors = P_0.colors;
		if (colors != null)
		{
			Color[] array3 = colors;
			foreach (Color color in array3)
			{
				ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(color, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		IntArray[] tris = P_0.m_tris;
		if (tris != null)
		{
			IntArray[] array4 = tris;
			foreach (IntArray obj in array4)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(obj, P_1);
					Write(obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		Vector3[] normals = P_0.normals;
		if (normals != null)
		{
			Vector3[] array5 = normals;
			foreach (Vector3 vector in array5)
			{
				ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		int subMeshCount = P_0.subMeshCount;
		if (subMeshCount != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(subMeshCount, P_1);
		}
		Vector4[] tangents = P_0.tangents;
		if (tangents != null)
		{
			Vector4[] array6 = tangents;
			foreach (Vector4 vector2 in array6)
			{
				ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		int[] triangles = P_0.triangles;
		if (triangles != null)
		{
			int[] array7 = triangles;
			foreach (int value in array7)
			{
				ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
				ProtoWriter.WriteInt32(value, P_1);
			}
		}
		Vector2[] uv = P_0.uv;
		if (uv != null)
		{
			Vector2[] array8 = uv;
			foreach (Vector2 vector3 in array8)
			{
				ProtoWriter.WriteFieldHeader(10, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector3, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		Vector2[] uv2 = P_0.uv2;
		if (uv2 != null)
		{
			Vector2[] array8 = uv2;
			foreach (Vector2 vector4 in array8)
			{
				ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector4, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		Vector2[] uv3 = P_0.uv3;
		if (uv3 != null)
		{
			Vector2[] array8 = uv3;
			foreach (Vector2 vector5 in array8)
			{
				ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector5, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		Vector2[] uv4 = P_0.uv4;
		if (uv4 != null)
		{
			Vector2[] array8 = uv4;
			foreach (Vector2 vector6 in array8)
			{
				ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector6, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		Vector3[] vertices = P_0.vertices;
		if (vertices != null)
		{
			Vector3[] array5 = vertices;
			foreach (Vector3 vector7 in array5)
			{
				ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector7, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PersistentMesh Read(PersistentMesh P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh10 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh10, P_1);
					P_0 = persistentMesh10;
				}
				Matrix4x4[] bindposes = P_0.bindposes;
				List<Matrix4x4> list9 = new List<Matrix4x4>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Matrix4x4 item7 = Read(default(Matrix4x4), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list9.Add(item7);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Matrix4x4[] array9 = new Matrix4x4[(fieldNumber = ((bindposes != null) ? bindposes.Length : 0)) + list9.Count];
				if (fieldNumber != 0)
				{
					bindposes.CopyTo(array9, 0);
				}
				list9.CopyTo(array9, fieldNumber);
				array9 = array9;
				if (array9 != null)
				{
					P_0.bindposes = array9;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh5 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh5, P_1);
					P_0 = persistentMesh5;
				}
				BoneWeight[] boneWeights = P_0.boneWeights;
				List<BoneWeight> list5 = new List<BoneWeight>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					BoneWeight item3 = Read(default(BoneWeight), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list5.Add(item3);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				BoneWeight[] array5 = new BoneWeight[(fieldNumber = ((boneWeights != null) ? boneWeights.Length : 0)) + list5.Count];
				if (fieldNumber != 0)
				{
					boneWeights.CopyTo(array5, 0);
				}
				list5.CopyTo(array5, fieldNumber);
				array5 = array5;
				if (array5 != null)
				{
					P_0.boneWeights = array5;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh11 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh11, P_1);
					P_0 = persistentMesh11;
				}
				Bounds bounds = P_0.bounds;
				SubItemToken token2 = ProtoReader.StartSubItem(P_1);
				Bounds bounds2 = Read(bounds, P_1);
				ProtoReader.EndSubItem(token2, P_1);
				Bounds bounds3 = bounds2;
				P_0.bounds = bounds3;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh3 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh3, P_1);
					P_0 = persistentMesh3;
				}
				Color[] colors = P_0.colors;
				List<Color> list2 = new List<Color>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Color item = Read(default(Color), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Color[] array2 = new Color[(fieldNumber = ((colors != null) ? colors.Length : 0)) + list2.Count];
				if (fieldNumber != 0)
				{
					colors.CopyTo(array2, 0);
				}
				list2.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.colors = array2;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh7 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh7, P_1);
					P_0 = persistentMesh7;
				}
				IntArray[] tris = P_0.m_tris;
				List<IntArray> list6 = new List<IntArray>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					IntArray item4 = Read((IntArray)null, P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list6.Add(item4);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				IntArray[] array6 = new IntArray[(fieldNumber = ((tris != null) ? tris.Length : 0)) + list6.Count];
				if (fieldNumber != 0)
				{
					tris.CopyTo(array6, 0);
				}
				list6.CopyTo(array6, fieldNumber);
				array6 = array6;
				if (array6 != null)
				{
					P_0.m_tris = array6;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh8 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh8, P_1);
					P_0 = persistentMesh8;
				}
				Vector3[] array4 = P_0.normals;
				List<Vector3> list3 = new List<Vector3>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector3> list7 = list3;
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Vector3 item5 = Read(default(Vector3), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list7.Add(item5);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector3[] array7 = array4;
				Vector3[] vertices = new Vector3[(fieldNumber = ((array7 != null) ? array7.Length : 0)) + list3.Count];
				if (fieldNumber != 0)
				{
					array4.CopyTo(vertices, 0);
				}
				list3.CopyTo(vertices, fieldNumber);
				vertices = vertices;
				if (vertices != null)
				{
					P_0.normals = vertices;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh6 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh6, P_1);
					P_0 = persistentMesh6;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.subMeshCount = fieldNumber;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh9 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh9, P_1);
					P_0 = persistentMesh9;
				}
				Vector4[] tangents = P_0.tangents;
				List<Vector4> list8 = new List<Vector4>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Vector4 item6 = Read(default(Vector4), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list8.Add(item6);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector4[] array8 = new Vector4[(fieldNumber = ((tangents != null) ? tangents.Length : 0)) + list8.Count];
				if (fieldNumber != 0)
				{
					tangents.CopyTo(array8, 0);
				}
				list8.CopyTo(array8, fieldNumber);
				array8 = array8;
				if (array8 != null)
				{
					P_0.tangents = array8;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh2 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh2, P_1);
					P_0 = persistentMesh2;
				}
				int[] triangles = P_0.triangles;
				List<int> list = new List<int>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt32());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt32());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				int[] array = new int[(fieldNumber = ((triangles != null) ? triangles.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					triangles.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.triangles = array;
				}
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh14 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh14, P_1);
					P_0 = persistentMesh14;
				}
				Vector2[] uv = P_0.uv;
				List<Vector2> list10 = new List<Vector2>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector2> list13 = list10;
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Vector2 item10 = Read(default(Vector2), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list13.Add(item10);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector2[] array13 = uv;
				Vector2[] array11 = new Vector2[(fieldNumber = ((array13 != null) ? array13.Length : 0)) + list10.Count];
				if (fieldNumber != 0)
				{
					uv.CopyTo(array11, 0);
				}
				list10.CopyTo(array11, fieldNumber);
				array11 = array11;
				if (array11 != null)
				{
					P_0.uv = array11;
				}
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh13 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh13, P_1);
					P_0 = persistentMesh13;
				}
				Vector2[] array11 = P_0.uv2;
				List<Vector2> list10 = new List<Vector2>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector2> list12 = list10;
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Vector2 item9 = Read(default(Vector2), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list12.Add(item9);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector2[] array12 = array11;
				Vector2[] uv = new Vector2[(fieldNumber = ((array12 != null) ? array12.Length : 0)) + list10.Count];
				if (fieldNumber != 0)
				{
					array11.CopyTo(uv, 0);
				}
				list10.CopyTo(uv, fieldNumber);
				uv = uv;
				if (uv != null)
				{
					P_0.uv2 = uv;
				}
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh12 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh12, P_1);
					P_0 = persistentMesh12;
				}
				Vector2[] uv = P_0.uv3;
				List<Vector2> list10 = new List<Vector2>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector2> list11 = list10;
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Vector2 item8 = Read(default(Vector2), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list11.Add(item8);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector2[] array10 = uv;
				Vector2[] array11 = new Vector2[(fieldNumber = ((array10 != null) ? array10.Length : 0)) + list10.Count];
				if (fieldNumber != 0)
				{
					uv.CopyTo(array11, 0);
				}
				list10.CopyTo(array11, fieldNumber);
				array11 = array11;
				if (array11 != null)
				{
					P_0.uv3 = array11;
				}
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh15 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh15, P_1);
					P_0 = persistentMesh15;
				}
				Vector2[] array11 = P_0.uv4;
				List<Vector2> list10 = new List<Vector2>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector2> list14 = list10;
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Vector2 item11 = Read(default(Vector2), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list14.Add(item11);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector2[] array14 = array11;
				Vector2[] uv = new Vector2[(fieldNumber = ((array14 != null) ? array14.Length : 0)) + list10.Count];
				if (fieldNumber != 0)
				{
					array11.CopyTo(uv, 0);
				}
				list10.CopyTo(uv, fieldNumber);
				uv = uv;
				if (uv != null)
				{
					P_0.uv4 = uv;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentMesh persistentMesh4 = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh4, P_1);
					P_0 = persistentMesh4;
				}
				Vector3[] vertices = P_0.vertices;
				List<Vector3> list3 = new List<Vector3>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector3> list4 = list3;
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					Vector3 item2 = Read(default(Vector3), P_1);
					ProtoReader.EndSubItem(token2, P_1);
					list4.Add(item2);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector3[] array3 = vertices;
				Vector3[] array4 = new Vector3[(fieldNumber = ((array3 != null) ? array3.Length : 0)) + list3.Count];
				if (fieldNumber != 0)
				{
					vertices.CopyTo(array4, 0);
				}
				list3.CopyTo(array4, fieldNumber);
				array4 = array4;
				if (array4 != null)
				{
					P_0.vertices = array4;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentMesh persistentMesh = new PersistentMesh();
					ProtoReader.NoteObject(persistentMesh, P_1);
					P_0 = persistentMesh;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentMesh persistentMesh16 = new PersistentMesh();
			ProtoReader.NoteObject(persistentMesh16, P_1);
			P_0 = persistentMesh16;
		}
		return P_0;
	}

	private static void Write(PersistentLightmapSettings P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLightmapSettings))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLightmapSettings), P_0.GetType());
		}
	}

	private static PersistentLightmapSettings Read(PersistentLightmapSettings P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentLightmapSettings persistentLightmapSettings = new PersistentLightmapSettings();
				ProtoReader.NoteObject(persistentLightmapSettings, P_1);
				P_0 = persistentLightmapSettings;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentLightmapSettings persistentLightmapSettings2 = new PersistentLightmapSettings();
			ProtoReader.NoteObject(persistentLightmapSettings2, P_1);
			P_0 = persistentLightmapSettings2;
		}
		return P_0;
	}

	private static void Write(PersistentLightProbes P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLightProbes))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLightProbes), P_0.GetType());
		}
	}

	private static PersistentLightProbes Read(PersistentLightProbes P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentLightProbes persistentLightProbes = new PersistentLightProbes();
				ProtoReader.NoteObject(persistentLightProbes, P_1);
				P_0 = persistentLightProbes;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentLightProbes persistentLightProbes2 = new PersistentLightProbes();
			ProtoReader.NoteObject(persistentLightProbes2, P_1);
			P_0 = persistentLightProbes2;
		}
		return P_0;
	}

	private static void Write(PersistentFlare P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentFlare))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentFlare), P_0.GetType());
		}
	}

	private static PersistentFlare Read(PersistentFlare P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentFlare persistentFlare = new PersistentFlare();
				ProtoReader.NoteObject(persistentFlare, P_1);
				P_0 = persistentFlare;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentFlare persistentFlare2 = new PersistentFlare();
			ProtoReader.NoteObject(persistentFlare2, P_1);
			P_0 = persistentFlare2;
		}
		return P_0;
	}

	private static void Write(PersistentQualitySettings P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentQualitySettings))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentQualitySettings), P_0.GetType());
		}
	}

	private static PersistentQualitySettings Read(PersistentQualitySettings P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentQualitySettings persistentQualitySettings = new PersistentQualitySettings();
				ProtoReader.NoteObject(persistentQualitySettings, P_1);
				P_0 = persistentQualitySettings;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentQualitySettings persistentQualitySettings2 = new PersistentQualitySettings();
			ProtoReader.NoteObject(persistentQualitySettings2, P_1);
			P_0 = persistentQualitySettings2;
		}
		return P_0;
	}

	private static void Write(PersistentRenderSettings P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRenderSettings))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRenderSettings), P_0.GetType());
		}
	}

	private static PersistentRenderSettings Read(PersistentRenderSettings P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentRenderSettings persistentRenderSettings = new PersistentRenderSettings();
				ProtoReader.NoteObject(persistentRenderSettings, P_1);
				P_0 = persistentRenderSettings;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentRenderSettings persistentRenderSettings2 = new PersistentRenderSettings();
			ProtoReader.NoteObject(persistentRenderSettings2, P_1);
			P_0 = persistentRenderSettings2;
		}
		return P_0;
	}

	private static void Write(PersistentGameObject P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGameObject))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGameObject), P_0.GetType());
		}
		bool isStatic = P_0.isStatic;
		if (isStatic)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isStatic, P_1);
		}
		int layer = P_0.layer;
		if (layer != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(layer, P_1);
		}
		string tag = P_0.tag;
		if (tag != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			ProtoWriter.WriteString(tag, P_1);
		}
	}

	private static PersistentGameObject Read(PersistentGameObject P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentGameObject persistentGameObject2 = new PersistentGameObject();
					ProtoReader.NoteObject(persistentGameObject2, P_1);
					P_0 = persistentGameObject2;
				}
				bool isStatic = P_1.ReadBoolean();
				P_0.isStatic = isStatic;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentGameObject persistentGameObject3 = new PersistentGameObject();
					ProtoReader.NoteObject(persistentGameObject3, P_1);
					P_0 = persistentGameObject3;
				}
				int layer = P_1.ReadInt32();
				P_0.layer = layer;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentGameObject persistentGameObject4 = new PersistentGameObject();
					ProtoReader.NoteObject(persistentGameObject4, P_1);
					P_0 = persistentGameObject4;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.tag = text;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentGameObject persistentGameObject = new PersistentGameObject();
					ProtoReader.NoteObject(persistentGameObject, P_1);
					P_0 = persistentGameObject;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentGameObject persistentGameObject5 = new PersistentGameObject();
			ProtoReader.NoteObject(persistentGameObject5, P_1);
			P_0 = persistentGameObject5;
		}
		return P_0;
	}

	private static void Write(PersistentComputeShader P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentComputeShader))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentComputeShader), P_0.GetType());
		}
	}

	private static PersistentComputeShader Read(PersistentComputeShader P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentComputeShader persistentComputeShader = new PersistentComputeShader();
				ProtoReader.NoteObject(persistentComputeShader, P_1);
				P_0 = persistentComputeShader;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentComputeShader persistentComputeShader2 = new PersistentComputeShader();
			ProtoReader.NoteObject(persistentComputeShader2, P_1);
			P_0 = persistentComputeShader2;
		}
		return P_0;
	}

	private static void Write(PersistentComponent P_0, ProtoWriter P_1)
	{
		PersistentBehaviour obj = P_0 as PersistentBehaviour;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1041, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentOcclusionArea obj2 = P_0 as PersistentOcclusionArea;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1042, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentOcclusionPortal obj3 = P_0 as PersistentOcclusionPortal;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1043, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentMeshFilter obj4 = P_0 as PersistentMeshFilter;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1044, WireType.String, P_1);
						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentRenderer obj5 = P_0 as PersistentRenderer;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1045, WireType.String, P_1);
							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentLODGroup obj6 = P_0 as PersistentLODGroup;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1046, WireType.String, P_1);
								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else
							{
								PersistentWindZone obj7 = P_0 as PersistentWindZone;
								if (obj7 != null)
								{
									ProtoWriter.WriteFieldHeader(1047, WireType.String, P_1);
									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
									Write(obj7, P_1);
									ProtoWriter.EndSubItem(token, P_1);
								}
								else
								{
									PersistentTransform obj8 = P_0 as PersistentTransform;
									if (obj8 != null)
									{
										ProtoWriter.WriteFieldHeader(1048, WireType.String, P_1);
										SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
										Write(obj8, P_1);
										ProtoWriter.EndSubItem(token, P_1);
									}
									else
									{
										PersistentParticleSystem obj9 = P_0 as PersistentParticleSystem;
										if (obj9 != null)
										{
											ProtoWriter.WriteFieldHeader(1049, WireType.String, P_1);
											SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
											Write(obj9, P_1);
											ProtoWriter.EndSubItem(token, P_1);
										}
										else
										{
											PersistentRigidbody obj10 = P_0 as PersistentRigidbody;
											if (obj10 != null)
											{
												ProtoWriter.WriteFieldHeader(1050, WireType.String, P_1);
												SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
												Write(obj10, P_1);
												ProtoWriter.EndSubItem(token, P_1);
											}
											else
											{
												PersistentJoint obj11 = P_0 as PersistentJoint;
												if (obj11 != null)
												{
													ProtoWriter.WriteFieldHeader(1051, WireType.String, P_1);
													SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
													Write(obj11, P_1);
													ProtoWriter.EndSubItem(token, P_1);
												}
												else
												{
													PersistentCollider obj12 = P_0 as PersistentCollider;
													if (obj12 != null)
													{
														ProtoWriter.WriteFieldHeader(1052, WireType.String, P_1);
														SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
														Write(obj12, P_1);
														ProtoWriter.EndSubItem(token, P_1);
													}
													else
													{
														PersistentRigidbody2D obj13 = P_0 as PersistentRigidbody2D;
														if (obj13 != null)
														{
															ProtoWriter.WriteFieldHeader(1053, WireType.String, P_1);
															SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
															Write(obj13, P_1);
															ProtoWriter.EndSubItem(token, P_1);
														}
														else
														{
															PersistentCloth obj14 = P_0 as PersistentCloth;
															if (obj14 != null)
															{
																ProtoWriter.WriteFieldHeader(1054, WireType.String, P_1);
																SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																Write(obj14, P_1);
																ProtoWriter.EndSubItem(token, P_1);
															}
															else
															{
																PersistentTree obj15 = P_0 as PersistentTree;
																if (obj15 != null)
																{
																	ProtoWriter.WriteFieldHeader(1055, WireType.String, P_1);
																	SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																	Write(obj15, P_1);
																	ProtoWriter.EndSubItem(token, P_1);
																}
																else
																{
																	PersistentTextMesh obj16 = P_0 as PersistentTextMesh;
																	if (obj16 != null)
																	{
																		ProtoWriter.WriteFieldHeader(1056, WireType.String, P_1);
																		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																		Write(obj16, P_1);
																		ProtoWriter.EndSubItem(token, P_1);
																	}
																	else
																	{
																		PersistentCanvasGroup obj17 = P_0 as PersistentCanvasGroup;
																		if (obj17 != null)
																		{
																			ProtoWriter.WriteFieldHeader(1057, WireType.String, P_1);
																			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																			Write(obj17, P_1);
																			ProtoWriter.EndSubItem(token, P_1);
																		}
																		else
																		{
																			PersistentCanvasRenderer obj18 = P_0 as PersistentCanvasRenderer;
																			if (obj18 != null)
																			{
																				ProtoWriter.WriteFieldHeader(1058, WireType.String, P_1);
																				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																				Write(obj18, P_1);
																				ProtoWriter.EndSubItem(token, P_1);
																			}
																			else
																			{
																				PersistentWorldAnchor obj19 = P_0 as PersistentWorldAnchor;
																				if (obj19 != null)
																				{
																					ProtoWriter.WriteFieldHeader(1059, WireType.String, P_1);
																					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																					Write(obj19, P_1);
																					ProtoWriter.EndSubItem(token, P_1);
																				}
																				else if (P_0.GetType() != typeof(PersistentComponent))
																				{
																					TypeModel.ThrowUnexpectedSubtype(typeof(PersistentComponent), P_0.GetType());
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		string tag = P_0.tag;
		if (tag != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(tag, P_1);
		}
	}

	private static PersistentComponent Read(PersistentComponent P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentComponent persistentComponent2 = new PersistentComponent();
					ProtoReader.NoteObject(persistentComponent2, P_1);
					P_0 = persistentComponent2;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.tag = text;
				}
				break;
			}
			case 1041:
			{
				if (P_0 != null && !(P_0 is PersistentBehaviour))
				{
					PersistentComponent from12 = P_0;
					PersistentBehaviour persistentBehaviour = new PersistentBehaviour();
					ProtoReader.NoteObject(persistentBehaviour, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from12, persistentBehaviour);
				}
				PersistentBehaviour obj12 = (PersistentBehaviour)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBehaviour persistentBehaviour2 = Read(obj12, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBehaviour2;
				break;
			}
			case 1042:
			{
				if (P_0 != null && !(P_0 is PersistentOcclusionArea))
				{
					PersistentComponent from2 = P_0;
					PersistentOcclusionArea persistentOcclusionArea = new PersistentOcclusionArea();
					ProtoReader.NoteObject(persistentOcclusionArea, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from2, persistentOcclusionArea);
				}
				PersistentOcclusionArea obj2 = (PersistentOcclusionArea)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentOcclusionArea persistentOcclusionArea2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentOcclusionArea2;
				break;
			}
			case 1043:
			{
				if (P_0 != null && !(P_0 is PersistentOcclusionPortal))
				{
					PersistentComponent from16 = P_0;
					PersistentOcclusionPortal persistentOcclusionPortal = new PersistentOcclusionPortal();
					ProtoReader.NoteObject(persistentOcclusionPortal, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from16, persistentOcclusionPortal);
				}
				PersistentOcclusionPortal obj16 = (PersistentOcclusionPortal)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentOcclusionPortal persistentOcclusionPortal2 = Read(obj16, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentOcclusionPortal2;
				break;
			}
			case 1044:
			{
				if (P_0 != null && !(P_0 is PersistentMeshFilter))
				{
					PersistentComponent from9 = P_0;
					PersistentMeshFilter persistentMeshFilter = new PersistentMeshFilter();
					ProtoReader.NoteObject(persistentMeshFilter, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from9, persistentMeshFilter);
				}
				PersistentMeshFilter obj9 = (PersistentMeshFilter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMeshFilter persistentMeshFilter2 = Read(obj9, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMeshFilter2;
				break;
			}
			case 1045:
			{
				if (P_0 != null && !(P_0 is PersistentRenderer))
				{
					PersistentComponent from17 = P_0;
					PersistentRenderer persistentRenderer = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from17, persistentRenderer);
				}
				PersistentRenderer obj17 = (PersistentRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRenderer persistentRenderer2 = Read(obj17, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRenderer2;
				break;
			}
			case 1046:
			{
				if (P_0 != null && !(P_0 is PersistentLODGroup))
				{
					PersistentComponent from18 = P_0;
					PersistentLODGroup persistentLODGroup = new PersistentLODGroup();
					ProtoReader.NoteObject(persistentLODGroup, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from18, persistentLODGroup);
				}
				PersistentLODGroup obj18 = (PersistentLODGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLODGroup persistentLODGroup2 = Read(obj18, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLODGroup2;
				break;
			}
			case 1047:
			{
				if (P_0 != null && !(P_0 is PersistentWindZone))
				{
					PersistentComponent from5 = P_0;
					PersistentWindZone persistentWindZone = new PersistentWindZone();
					ProtoReader.NoteObject(persistentWindZone, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from5, persistentWindZone);
				}
				PersistentWindZone obj5 = (PersistentWindZone)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentWindZone persistentWindZone2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentWindZone2;
				break;
			}
			case 1048:
			{
				if (P_0 != null && !(P_0 is PersistentTransform))
				{
					PersistentComponent from10 = P_0;
					PersistentTransform persistentTransform = new PersistentTransform();
					ProtoReader.NoteObject(persistentTransform, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from10, persistentTransform);
				}
				PersistentTransform obj10 = (PersistentTransform)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTransform persistentTransform2 = Read(obj10, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTransform2;
				break;
			}
			case 1049:
			{
				if (P_0 != null && !(P_0 is PersistentParticleSystem))
				{
					PersistentComponent from14 = P_0;
					PersistentParticleSystem persistentParticleSystem = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from14, persistentParticleSystem);
				}
				PersistentParticleSystem obj14 = (PersistentParticleSystem)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentParticleSystem persistentParticleSystem2 = Read(obj14, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentParticleSystem2;
				break;
			}
			case 1050:
			{
				if (P_0 != null && !(P_0 is PersistentRigidbody))
				{
					PersistentComponent from4 = P_0;
					PersistentRigidbody persistentRigidbody = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from4, persistentRigidbody);
				}
				PersistentRigidbody obj4 = (PersistentRigidbody)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRigidbody persistentRigidbody2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRigidbody2;
				break;
			}
			case 1051:
			{
				if (P_0 != null && !(P_0 is PersistentJoint))
				{
					PersistentComponent from = P_0;
					PersistentJoint persistentJoint = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from, persistentJoint);
				}
				PersistentJoint obj = (PersistentJoint)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentJoint persistentJoint2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentJoint2;
				break;
			}
			case 1052:
			{
				if (P_0 != null && !(P_0 is PersistentCollider))
				{
					PersistentComponent from13 = P_0;
					PersistentCollider persistentCollider = new PersistentCollider();
					ProtoReader.NoteObject(persistentCollider, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from13, persistentCollider);
				}
				PersistentCollider obj13 = (PersistentCollider)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCollider persistentCollider2 = Read(obj13, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCollider2;
				break;
			}
			case 1053:
			{
				if (P_0 != null && !(P_0 is PersistentRigidbody2D))
				{
					PersistentComponent from8 = P_0;
					PersistentRigidbody2D persistentRigidbody2D = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from8, persistentRigidbody2D);
				}
				PersistentRigidbody2D obj8 = (PersistentRigidbody2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRigidbody2D persistentRigidbody2D2 = Read(obj8, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRigidbody2D2;
				break;
			}
			case 1054:
			{
				if (P_0 != null && !(P_0 is PersistentCloth))
				{
					PersistentComponent from6 = P_0;
					PersistentCloth persistentCloth = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from6, persistentCloth);
				}
				PersistentCloth obj6 = (PersistentCloth)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCloth persistentCloth2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCloth2;
				break;
			}
			case 1055:
			{
				if (P_0 != null && !(P_0 is PersistentTree))
				{
					PersistentComponent from19 = P_0;
					PersistentTree persistentTree = new PersistentTree();
					ProtoReader.NoteObject(persistentTree, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from19, persistentTree);
				}
				PersistentTree obj19 = (PersistentTree)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTree persistentTree2 = Read(obj19, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTree2;
				break;
			}
			case 1056:
			{
				if (P_0 != null && !(P_0 is PersistentTextMesh))
				{
					PersistentComponent from15 = P_0;
					PersistentTextMesh persistentTextMesh = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from15, persistentTextMesh);
				}
				PersistentTextMesh obj15 = (PersistentTextMesh)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTextMesh persistentTextMesh2 = Read(obj15, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTextMesh2;
				break;
			}
			case 1057:
			{
				if (P_0 != null && !(P_0 is PersistentCanvasGroup))
				{
					PersistentComponent from11 = P_0;
					PersistentCanvasGroup persistentCanvasGroup = new PersistentCanvasGroup();
					ProtoReader.NoteObject(persistentCanvasGroup, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from11, persistentCanvasGroup);
				}
				PersistentCanvasGroup obj11 = (PersistentCanvasGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCanvasGroup persistentCanvasGroup2 = Read(obj11, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCanvasGroup2;
				break;
			}
			case 1058:
			{
				if (P_0 != null && !(P_0 is PersistentCanvasRenderer))
				{
					PersistentComponent from7 = P_0;
					PersistentCanvasRenderer persistentCanvasRenderer = new PersistentCanvasRenderer();
					ProtoReader.NoteObject(persistentCanvasRenderer, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from7, persistentCanvasRenderer);
				}
				PersistentCanvasRenderer obj7 = (PersistentCanvasRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCanvasRenderer persistentCanvasRenderer2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCanvasRenderer2;
				break;
			}
			case 1059:
			{
				if (P_0 != null && !(P_0 is PersistentWorldAnchor))
				{
					PersistentComponent from3 = P_0;
					PersistentWorldAnchor persistentWorldAnchor = new PersistentWorldAnchor();
					ProtoReader.NoteObject(persistentWorldAnchor, P_1);
					P_0 = (PersistentComponent)ProtoReader.Merge(P_1, from3, persistentWorldAnchor);
				}
				PersistentWorldAnchor obj3 = (PersistentWorldAnchor)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentWorldAnchor persistentWorldAnchor2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentWorldAnchor2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentComponent persistentComponent = new PersistentComponent();
					ProtoReader.NoteObject(persistentComponent, P_1);
					P_0 = persistentComponent;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentComponent persistentComponent3 = new PersistentComponent();
			ProtoReader.NoteObject(persistentComponent3, P_1);
			P_0 = persistentComponent3;
		}
		return P_0;
	}

	private static void Write(PersistentWorldAnchor P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentWorldAnchor))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentWorldAnchor), P_0.GetType());
		}
	}

	private static PersistentWorldAnchor Read(PersistentWorldAnchor P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentWorldAnchor persistentWorldAnchor = new PersistentWorldAnchor();
				ProtoReader.NoteObject(persistentWorldAnchor, P_1);
				P_0 = persistentWorldAnchor;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentWorldAnchor persistentWorldAnchor2 = new PersistentWorldAnchor();
			ProtoReader.NoteObject(persistentWorldAnchor2, P_1);
			P_0 = persistentWorldAnchor2;
		}
		return P_0;
	}

	private static void Write(PersistentCanvasRenderer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCanvasRenderer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCanvasRenderer), P_0.GetType());
		}
		bool cull = P_0.cull;
		if (cull)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(cull, P_1);
		}
		bool hasPopInstruction = P_0.hasPopInstruction;
		if (hasPopInstruction)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(hasPopInstruction, P_1);
		}
		int materialCount = P_0.materialCount;
		if (materialCount != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(materialCount, P_1);
		}
		int popMaterialCount = P_0.popMaterialCount;
		if (popMaterialCount != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(popMaterialCount, P_1);
		}
	}

	private static PersistentCanvasRenderer Read(PersistentCanvasRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCanvasRenderer persistentCanvasRenderer3 = new PersistentCanvasRenderer();
					ProtoReader.NoteObject(persistentCanvasRenderer3, P_1);
					P_0 = persistentCanvasRenderer3;
				}
				bool cull = P_1.ReadBoolean();
				P_0.cull = cull;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCanvasRenderer persistentCanvasRenderer5 = new PersistentCanvasRenderer();
					ProtoReader.NoteObject(persistentCanvasRenderer5, P_1);
					P_0 = persistentCanvasRenderer5;
				}
				bool cull = P_1.ReadBoolean();
				P_0.hasPopInstruction = cull;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCanvasRenderer persistentCanvasRenderer2 = new PersistentCanvasRenderer();
					ProtoReader.NoteObject(persistentCanvasRenderer2, P_1);
					P_0 = persistentCanvasRenderer2;
				}
				int materialCount = P_1.ReadInt32();
				P_0.materialCount = materialCount;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCanvasRenderer persistentCanvasRenderer4 = new PersistentCanvasRenderer();
					ProtoReader.NoteObject(persistentCanvasRenderer4, P_1);
					P_0 = persistentCanvasRenderer4;
				}
				int materialCount = P_1.ReadInt32();
				P_0.popMaterialCount = materialCount;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCanvasRenderer persistentCanvasRenderer = new PersistentCanvasRenderer();
					ProtoReader.NoteObject(persistentCanvasRenderer, P_1);
					P_0 = persistentCanvasRenderer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCanvasRenderer persistentCanvasRenderer6 = new PersistentCanvasRenderer();
			ProtoReader.NoteObject(persistentCanvasRenderer6, P_1);
			P_0 = persistentCanvasRenderer6;
		}
		return P_0;
	}

	private static void Write(PersistentCanvasGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCanvasGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCanvasGroup), P_0.GetType());
		}
		float alpha = P_0.alpha;
		if (alpha != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(alpha, P_1);
		}
		bool blocksRaycasts = P_0.blocksRaycasts;
		if (blocksRaycasts)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(blocksRaycasts, P_1);
		}
		bool ignoreParentGroups = P_0.ignoreParentGroups;
		if (ignoreParentGroups)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(ignoreParentGroups, P_1);
		}
		bool interactable = P_0.interactable;
		if (interactable)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(interactable, P_1);
		}
	}

	private static PersistentCanvasGroup Read(PersistentCanvasGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCanvasGroup persistentCanvasGroup3 = new PersistentCanvasGroup();
					ProtoReader.NoteObject(persistentCanvasGroup3, P_1);
					P_0 = persistentCanvasGroup3;
				}
				float alpha = P_1.ReadSingle();
				P_0.alpha = alpha;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCanvasGroup persistentCanvasGroup5 = new PersistentCanvasGroup();
					ProtoReader.NoteObject(persistentCanvasGroup5, P_1);
					P_0 = persistentCanvasGroup5;
				}
				bool ignoreParentGroups = P_1.ReadBoolean();
				P_0.blocksRaycasts = ignoreParentGroups;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCanvasGroup persistentCanvasGroup2 = new PersistentCanvasGroup();
					ProtoReader.NoteObject(persistentCanvasGroup2, P_1);
					P_0 = persistentCanvasGroup2;
				}
				bool ignoreParentGroups = P_1.ReadBoolean();
				P_0.ignoreParentGroups = ignoreParentGroups;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCanvasGroup persistentCanvasGroup4 = new PersistentCanvasGroup();
					ProtoReader.NoteObject(persistentCanvasGroup4, P_1);
					P_0 = persistentCanvasGroup4;
				}
				bool ignoreParentGroups = P_1.ReadBoolean();
				P_0.interactable = ignoreParentGroups;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCanvasGroup persistentCanvasGroup = new PersistentCanvasGroup();
					ProtoReader.NoteObject(persistentCanvasGroup, P_1);
					P_0 = persistentCanvasGroup;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCanvasGroup persistentCanvasGroup6 = new PersistentCanvasGroup();
			ProtoReader.NoteObject(persistentCanvasGroup6, P_1);
			P_0 = persistentCanvasGroup6;
		}
		return P_0;
	}

	private static void Write(PersistentTextMesh P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTextMesh))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTextMesh), P_0.GetType());
		}
		uint alignment = P_0.alignment;
		if (alignment != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(alignment, P_1);
		}
		uint anchor = P_0.anchor;
		if (anchor != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(anchor, P_1);
		}
		float characterSize = P_0.characterSize;
		if (characterSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(characterSize, P_1);
		}
		Color color = P_0.color;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long font = P_0.font;
		if (font != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(font, P_1);
		}
		int fontSize = P_0.fontSize;
		if (fontSize != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(fontSize, P_1);
		}
		uint fontStyle = P_0.fontStyle;
		if (fontStyle != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(fontStyle, P_1);
		}
		float lineSpacing = P_0.lineSpacing;
		if (lineSpacing != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(lineSpacing, P_1);
		}
		float offsetZ = P_0.offsetZ;
		if (offsetZ != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(offsetZ, P_1);
		}
		bool richText = P_0.richText;
		if (richText)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(richText, P_1);
		}
		float tabSize = P_0.tabSize;
		if (tabSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(tabSize, P_1);
		}
		string text = P_0.text;
		if (text != null)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
			ProtoWriter.WriteString(text, P_1);
		}
	}

	private static PersistentTextMesh Read(PersistentTextMesh P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh13 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh13, P_1);
					P_0 = persistentTextMesh13;
				}
				uint anchor = P_1.ReadUInt32();
				P_0.alignment = anchor;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh2 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh2, P_1);
					P_0 = persistentTextMesh2;
				}
				uint anchor = P_1.ReadUInt32();
				P_0.anchor = anchor;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh12 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh12, P_1);
					P_0 = persistentTextMesh12;
				}
				float offsetZ = P_1.ReadSingle();
				P_0.characterSize = offsetZ;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh10 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh10, P_1);
					P_0 = persistentTextMesh10;
				}
				Color color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				P_0.color = color3;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh7 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh7, P_1);
					P_0 = persistentTextMesh7;
				}
				long font = P_1.ReadInt64();
				P_0.font = font;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh6 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh6, P_1);
					P_0 = persistentTextMesh6;
				}
				int fontSize = P_1.ReadInt32();
				P_0.fontSize = fontSize;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh9 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh9, P_1);
					P_0 = persistentTextMesh9;
				}
				uint anchor = P_1.ReadUInt32();
				P_0.fontStyle = anchor;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh5 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh5, P_1);
					P_0 = persistentTextMesh5;
				}
				float offsetZ = P_1.ReadSingle();
				P_0.lineSpacing = offsetZ;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh3 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh3, P_1);
					P_0 = persistentTextMesh3;
				}
				float offsetZ = P_1.ReadSingle();
				P_0.offsetZ = offsetZ;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh11 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh11, P_1);
					P_0 = persistentTextMesh11;
				}
				bool richText = P_1.ReadBoolean();
				P_0.richText = richText;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh8 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh8, P_1);
					P_0 = persistentTextMesh8;
				}
				float offsetZ = P_1.ReadSingle();
				P_0.tabSize = offsetZ;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh4 = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh4, P_1);
					P_0 = persistentTextMesh4;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.text = text;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTextMesh persistentTextMesh = new PersistentTextMesh();
					ProtoReader.NoteObject(persistentTextMesh, P_1);
					P_0 = persistentTextMesh;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTextMesh persistentTextMesh14 = new PersistentTextMesh();
			ProtoReader.NoteObject(persistentTextMesh14, P_1);
			P_0 = persistentTextMesh14;
		}
		return P_0;
	}

	private static void Write(PersistentTree P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTree))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTree), P_0.GetType());
		}
		long data = P_0.data;
		if (data != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(data, P_1);
		}
	}

	private static PersistentTree Read(PersistentTree P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentTree persistentTree = new PersistentTree();
					ProtoReader.NoteObject(persistentTree, P_1);
					P_0 = persistentTree;
				}
				long data = P_1.ReadInt64();
				P_0.data = data;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentTree persistentTree2 = new PersistentTree();
					ProtoReader.NoteObject(persistentTree2, P_1);
					P_0 = persistentTree2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentTree persistentTree3 = new PersistentTree();
			ProtoReader.NoteObject(persistentTree3, P_1);
			P_0 = persistentTree3;
		}
		return P_0;
	}

	private static void Write(PersistentCloth P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCloth))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCloth), P_0.GetType());
		}
		float bendingStiffness = P_0.bendingStiffness;
		if (bendingStiffness != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bendingStiffness, P_1);
		}
		long[] capsuleColliders = P_0.capsuleColliders;
		if (capsuleColliders != null)
		{
			long[] array = capsuleColliders;
			foreach (long value in array)
			{
				ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
				ProtoWriter.WriteInt64(value, P_1);
			}
		}
		ClothSkinningCoefficient[] coefficients = P_0.coefficients;
		SubItemToken token;
		if (coefficients != null)
		{
			ClothSkinningCoefficient[] array2 = coefficients;
			foreach (ClothSkinningCoefficient clothSkinningCoefficient in array2)
			{
				ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(clothSkinningCoefficient, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		float collisionMassScale = P_0.collisionMassScale;
		if (collisionMassScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(collisionMassScale, P_1);
		}
		float damping = P_0.damping;
		if (damping != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(damping, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		Vector3 externalAcceleration = P_0.externalAcceleration;
		ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(externalAcceleration, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float friction = P_0.friction;
		if (friction != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(friction, P_1);
		}
		Vector3 randomAcceleration = P_0.randomAcceleration;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(randomAcceleration, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float sleepThreshold = P_0.sleepThreshold;
		if (sleepThreshold != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(sleepThreshold, P_1);
		}
		bool solverFrequency = P_0.solverFrequency;
		if (solverFrequency)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(solverFrequency, P_1);
		}
		float stretchingStiffness = P_0.stretchingStiffness;
		if (stretchingStiffness != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(stretchingStiffness, P_1);
		}
		float useContinuousCollision = P_0.useContinuousCollision;
		if (useContinuousCollision != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(useContinuousCollision, P_1);
		}
		bool useGravity = P_0.useGravity;
		if (useGravity)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useGravity, P_1);
		}
		float useVirtualParticles = P_0.useVirtualParticles;
		if (useVirtualParticles != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(useVirtualParticles, P_1);
		}
		float worldAccelerationScale = P_0.worldAccelerationScale;
		if (worldAccelerationScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(worldAccelerationScale, P_1);
		}
		float worldVelocityScale = P_0.worldVelocityScale;
		if (worldVelocityScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(worldVelocityScale, P_1);
		}
	}

	private static PersistentCloth Read(PersistentCloth P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth15 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth15, P_1);
					P_0 = persistentCloth15;
				}
				float damping = P_1.ReadSingle();
				P_0.bendingStiffness = damping;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth18 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth18, P_1);
					P_0 = persistentCloth18;
				}
				long[] capsuleColliders = P_0.capsuleColliders;
				List<long> list2 = new List<long>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list2.Add(P_1.ReadInt64());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list2.Add(P_1.ReadInt64());
					}
					ProtoReader.EndSubItem(token2, P_1);
				}
				long[] array2 = new long[(fieldNumber = ((capsuleColliders != null) ? capsuleColliders.Length : 0)) + list2.Count];
				if (fieldNumber != 0)
				{
					capsuleColliders.CopyTo(array2, 0);
				}
				list2.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.capsuleColliders = array2;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth11 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth11, P_1);
					P_0 = persistentCloth11;
				}
				ClothSkinningCoefficient[] coefficients = P_0.coefficients;
				List<ClothSkinningCoefficient> list = new List<ClothSkinningCoefficient>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ClothSkinningCoefficient item = Read(default(ClothSkinningCoefficient), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ClothSkinningCoefficient[] array = new ClothSkinningCoefficient[(fieldNumber = ((coefficients != null) ? coefficients.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					coefficients.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.coefficients = array;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth8 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth8, P_1);
					P_0 = persistentCloth8;
				}
				float damping = P_1.ReadSingle();
				P_0.collisionMassScale = damping;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth2 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth2, P_1);
					P_0 = persistentCloth2;
				}
				float damping = P_1.ReadSingle();
				P_0.damping = damping;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth17 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth17, P_1);
					P_0 = persistentCloth17;
				}
				bool solverFrequency = P_1.ReadBoolean();
				P_0.enabled = solverFrequency;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth9 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth9, P_1);
					P_0 = persistentCloth9;
				}
				Vector3 externalAcceleration = P_0.externalAcceleration;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(externalAcceleration, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 externalAcceleration2 = vector;
				P_0.externalAcceleration = externalAcceleration2;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth6 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth6, P_1);
					P_0 = persistentCloth6;
				}
				float damping = P_1.ReadSingle();
				P_0.friction = damping;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth14 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth14, P_1);
					P_0 = persistentCloth14;
				}
				Vector3 randomAcceleration = P_0.randomAcceleration;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(randomAcceleration, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 externalAcceleration2 = vector2;
				P_0.randomAcceleration = externalAcceleration2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth12 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth12, P_1);
					P_0 = persistentCloth12;
				}
				float damping = P_1.ReadSingle();
				P_0.sleepThreshold = damping;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth5 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth5, P_1);
					P_0 = persistentCloth5;
				}
				bool solverFrequency = P_1.ReadBoolean();
				P_0.solverFrequency = solverFrequency;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth3 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth3, P_1);
					P_0 = persistentCloth3;
				}
				float damping = P_1.ReadSingle();
				P_0.stretchingStiffness = damping;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth16 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth16, P_1);
					P_0 = persistentCloth16;
				}
				float damping = P_1.ReadSingle();
				P_0.useContinuousCollision = damping;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth13 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth13, P_1);
					P_0 = persistentCloth13;
				}
				bool solverFrequency = P_1.ReadBoolean();
				P_0.useGravity = solverFrequency;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth10 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth10, P_1);
					P_0 = persistentCloth10;
				}
				float damping = P_1.ReadSingle();
				P_0.useVirtualParticles = damping;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth7 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth7, P_1);
					P_0 = persistentCloth7;
				}
				float damping = P_1.ReadSingle();
				P_0.worldAccelerationScale = damping;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentCloth persistentCloth4 = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth4, P_1);
					P_0 = persistentCloth4;
				}
				float damping = P_1.ReadSingle();
				P_0.worldVelocityScale = damping;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCloth persistentCloth = new PersistentCloth();
					ProtoReader.NoteObject(persistentCloth, P_1);
					P_0 = persistentCloth;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCloth persistentCloth19 = new PersistentCloth();
			ProtoReader.NoteObject(persistentCloth19, P_1);
			P_0 = persistentCloth19;
		}
		return P_0;
	}

	private static void Write(PersistentRigidbody2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRigidbody2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRigidbody2D), P_0.GetType());
		}
		float angularDrag = P_0.angularDrag;
		if (angularDrag != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularDrag, P_1);
		}
		float angularVelocity = P_0.angularVelocity;
		if (angularVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularVelocity, P_1);
		}
		uint bodyType = P_0.bodyType;
		if (bodyType != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(bodyType, P_1);
		}
		Vector2 centerOfMass = P_0.centerOfMass;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(centerOfMass, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint collisionDetectionMode = P_0.collisionDetectionMode;
		if (collisionDetectionMode != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(collisionDetectionMode, P_1);
		}
		uint constraints = P_0.constraints;
		if (constraints != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(constraints, P_1);
		}
		float drag = P_0.drag;
		if (drag != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(drag, P_1);
		}
		bool freezeRotation = P_0.freezeRotation;
		if (freezeRotation)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(freezeRotation, P_1);
		}
		float gravityScale = P_0.gravityScale;
		if (gravityScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(gravityScale, P_1);
		}
		float inertia = P_0.inertia;
		if (inertia != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(inertia, P_1);
		}
		uint interpolation = P_0.interpolation;
		if (interpolation != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(interpolation, P_1);
		}
		bool isKinematic = P_0.isKinematic;
		if (isKinematic)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isKinematic, P_1);
		}
		float mass = P_0.mass;
		if (mass != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(mass, P_1);
		}
		Vector2 position = P_0.position;
		ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(position, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float rotation = P_0.rotation;
		if (rotation != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rotation, P_1);
		}
		long sharedMaterial = P_0.sharedMaterial;
		if (sharedMaterial != 0L)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sharedMaterial, P_1);
		}
		bool simulated = P_0.simulated;
		if (simulated)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(simulated, P_1);
		}
		uint sleepMode = P_0.sleepMode;
		if (sleepMode != 0)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(sleepMode, P_1);
		}
		bool useAutoMass = P_0.useAutoMass;
		if (useAutoMass)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useAutoMass, P_1);
		}
		bool useFullKinematicContacts = P_0.useFullKinematicContacts;
		if (useFullKinematicContacts)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useFullKinematicContacts, P_1);
		}
		Vector2 velocity = P_0.velocity;
		ProtoWriter.WriteFieldHeader(21, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(velocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentRigidbody2D Read(PersistentRigidbody2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D9 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D9, P_1);
					P_0 = persistentRigidbody2D9;
				}
				float inertia = P_1.ReadSingle();
				P_0.angularDrag = inertia;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D11 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D11, P_1);
					P_0 = persistentRigidbody2D11;
				}
				float inertia = P_1.ReadSingle();
				P_0.angularVelocity = inertia;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D3 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D3, P_1);
					P_0 = persistentRigidbody2D3;
				}
				uint bodyType = P_1.ReadUInt32();
				P_0.bodyType = bodyType;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D20 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D20, P_1);
					P_0 = persistentRigidbody2D20;
				}
				Vector2 centerOfMass = P_0.centerOfMass;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector3 = Read(centerOfMass, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 velocity2 = vector3;
				P_0.centerOfMass = velocity2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D14 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D14, P_1);
					P_0 = persistentRigidbody2D14;
				}
				uint bodyType = P_1.ReadUInt32();
				P_0.collisionDetectionMode = bodyType;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D12 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D12, P_1);
					P_0 = persistentRigidbody2D12;
				}
				uint bodyType = P_1.ReadUInt32();
				P_0.constraints = bodyType;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D21 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D21, P_1);
					P_0 = persistentRigidbody2D21;
				}
				float inertia = P_1.ReadSingle();
				P_0.drag = inertia;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D18 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D18, P_1);
					P_0 = persistentRigidbody2D18;
				}
				bool useFullKinematicContacts = P_1.ReadBoolean();
				P_0.freezeRotation = useFullKinematicContacts;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D5 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D5, P_1);
					P_0 = persistentRigidbody2D5;
				}
				float inertia = P_1.ReadSingle();
				P_0.gravityScale = inertia;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D2 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D2, P_1);
					P_0 = persistentRigidbody2D2;
				}
				float inertia = P_1.ReadSingle();
				P_0.inertia = inertia;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D17 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D17, P_1);
					P_0 = persistentRigidbody2D17;
				}
				uint bodyType = P_1.ReadUInt32();
				P_0.interpolation = bodyType;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D15 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D15, P_1);
					P_0 = persistentRigidbody2D15;
				}
				bool useFullKinematicContacts = P_1.ReadBoolean();
				P_0.isKinematic = useFullKinematicContacts;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D8 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D8, P_1);
					P_0 = persistentRigidbody2D8;
				}
				float inertia = P_1.ReadSingle();
				P_0.mass = inertia;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D6 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D6, P_1);
					P_0 = persistentRigidbody2D6;
				}
				Vector2 position = P_0.position;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(position, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 velocity2 = vector2;
				P_0.position = velocity2;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D22 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D22, P_1);
					P_0 = persistentRigidbody2D22;
				}
				float inertia = P_1.ReadSingle();
				P_0.rotation = inertia;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D19 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D19, P_1);
					P_0 = persistentRigidbody2D19;
				}
				long sharedMaterial = P_1.ReadInt64();
				P_0.sharedMaterial = sharedMaterial;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D16 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D16, P_1);
					P_0 = persistentRigidbody2D16;
				}
				bool useFullKinematicContacts = P_1.ReadBoolean();
				P_0.simulated = useFullKinematicContacts;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D13 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D13, P_1);
					P_0 = persistentRigidbody2D13;
				}
				uint bodyType = P_1.ReadUInt32();
				P_0.sleepMode = bodyType;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D10 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D10, P_1);
					P_0 = persistentRigidbody2D10;
				}
				bool useFullKinematicContacts = P_1.ReadBoolean();
				P_0.useAutoMass = useFullKinematicContacts;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D7 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D7, P_1);
					P_0 = persistentRigidbody2D7;
				}
				bool useFullKinematicContacts = P_1.ReadBoolean();
				P_0.useFullKinematicContacts = useFullKinematicContacts;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D4 = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D4, P_1);
					P_0 = persistentRigidbody2D4;
				}
				Vector2 velocity = P_0.velocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(velocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 velocity2 = vector;
				P_0.velocity = velocity2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRigidbody2D persistentRigidbody2D = new PersistentRigidbody2D();
					ProtoReader.NoteObject(persistentRigidbody2D, P_1);
					P_0 = persistentRigidbody2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRigidbody2D persistentRigidbody2D23 = new PersistentRigidbody2D();
			ProtoReader.NoteObject(persistentRigidbody2D23, P_1);
			P_0 = persistentRigidbody2D23;
		}
		return P_0;
	}

	private static void Write(PersistentCollider P_0, ProtoWriter P_1)
	{
		PersistentBoxCollider obj = P_0 as PersistentBoxCollider;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1077, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentSphereCollider obj2 = P_0 as PersistentSphereCollider;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1078, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentMeshCollider obj3 = P_0 as PersistentMeshCollider;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1079, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentCapsuleCollider obj4 = P_0 as PersistentCapsuleCollider;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1080, WireType.String, P_1);
						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentCharacterController obj5 = P_0 as PersistentCharacterController;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1081, WireType.String, P_1);
							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentWheelCollider obj6 = P_0 as PersistentWheelCollider;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1082, WireType.String, P_1);
								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else
							{
								PersistentTerrainCollider obj7 = P_0 as PersistentTerrainCollider;
								if (obj7 != null)
								{
									ProtoWriter.WriteFieldHeader(1083, WireType.String, P_1);
									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
									Write(obj7, P_1);
									ProtoWriter.EndSubItem(token, P_1);
								}
								else if (P_0.GetType() != typeof(PersistentCollider))
								{
									TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCollider), P_0.GetType());
								}
							}
						}
					}
				}
			}
		}
		float contactOffset = P_0.contactOffset;
		if (contactOffset != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(contactOffset, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		bool isTrigger = P_0.isTrigger;
		if (isTrigger)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isTrigger, P_1);
		}
		long sharedMaterial = P_0.sharedMaterial;
		if (sharedMaterial != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sharedMaterial, P_1);
		}
	}

	private static PersistentCollider Read(PersistentCollider P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCollider persistentCollider3 = new PersistentCollider();
					ProtoReader.NoteObject(persistentCollider3, P_1);
					P_0 = persistentCollider3;
				}
				float contactOffset = P_1.ReadSingle();
				P_0.contactOffset = contactOffset;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCollider persistentCollider4 = new PersistentCollider();
					ProtoReader.NoteObject(persistentCollider4, P_1);
					P_0 = persistentCollider4;
				}
				bool isTrigger = P_1.ReadBoolean();
				P_0.enabled = isTrigger;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCollider persistentCollider2 = new PersistentCollider();
					ProtoReader.NoteObject(persistentCollider2, P_1);
					P_0 = persistentCollider2;
				}
				bool isTrigger = P_1.ReadBoolean();
				P_0.isTrigger = isTrigger;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCollider persistentCollider5 = new PersistentCollider();
					ProtoReader.NoteObject(persistentCollider5, P_1);
					P_0 = persistentCollider5;
				}
				long sharedMaterial = P_1.ReadInt64();
				P_0.sharedMaterial = sharedMaterial;
				break;
			}
			case 1077:
			{
				if (P_0 != null && !(P_0 is PersistentBoxCollider))
				{
					PersistentCollider from3 = P_0;
					PersistentBoxCollider persistentBoxCollider = new PersistentBoxCollider();
					ProtoReader.NoteObject(persistentBoxCollider, P_1);
					P_0 = (PersistentCollider)ProtoReader.Merge(P_1, from3, persistentBoxCollider);
				}
				PersistentBoxCollider obj3 = (PersistentBoxCollider)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBoxCollider persistentBoxCollider2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBoxCollider2;
				break;
			}
			case 1078:
			{
				if (P_0 != null && !(P_0 is PersistentSphereCollider))
				{
					PersistentCollider from5 = P_0;
					PersistentSphereCollider persistentSphereCollider = new PersistentSphereCollider();
					ProtoReader.NoteObject(persistentSphereCollider, P_1);
					P_0 = (PersistentCollider)ProtoReader.Merge(P_1, from5, persistentSphereCollider);
				}
				PersistentSphereCollider obj5 = (PersistentSphereCollider)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSphereCollider persistentSphereCollider2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSphereCollider2;
				break;
			}
			case 1079:
			{
				if (P_0 != null && !(P_0 is PersistentMeshCollider))
				{
					PersistentCollider from6 = P_0;
					PersistentMeshCollider persistentMeshCollider = new PersistentMeshCollider();
					ProtoReader.NoteObject(persistentMeshCollider, P_1);
					P_0 = (PersistentCollider)ProtoReader.Merge(P_1, from6, persistentMeshCollider);
				}
				PersistentMeshCollider obj6 = (PersistentMeshCollider)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMeshCollider persistentMeshCollider2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMeshCollider2;
				break;
			}
			case 1080:
			{
				if (P_0 != null && !(P_0 is PersistentCapsuleCollider))
				{
					PersistentCollider from2 = P_0;
					PersistentCapsuleCollider persistentCapsuleCollider = new PersistentCapsuleCollider();
					ProtoReader.NoteObject(persistentCapsuleCollider, P_1);
					P_0 = (PersistentCollider)ProtoReader.Merge(P_1, from2, persistentCapsuleCollider);
				}
				PersistentCapsuleCollider obj2 = (PersistentCapsuleCollider)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCapsuleCollider persistentCapsuleCollider2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCapsuleCollider2;
				break;
			}
			case 1081:
			{
				if (P_0 != null && !(P_0 is PersistentCharacterController))
				{
					PersistentCollider from7 = P_0;
					PersistentCharacterController persistentCharacterController = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController, P_1);
					P_0 = (PersistentCollider)ProtoReader.Merge(P_1, from7, persistentCharacterController);
				}
				PersistentCharacterController obj7 = (PersistentCharacterController)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCharacterController persistentCharacterController2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCharacterController2;
				break;
			}
			case 1082:
			{
				if (P_0 != null && !(P_0 is PersistentWheelCollider))
				{
					PersistentCollider from4 = P_0;
					PersistentWheelCollider persistentWheelCollider = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider, P_1);
					P_0 = (PersistentCollider)ProtoReader.Merge(P_1, from4, persistentWheelCollider);
				}
				PersistentWheelCollider obj4 = (PersistentWheelCollider)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentWheelCollider persistentWheelCollider2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentWheelCollider2;
				break;
			}
			case 1083:
			{
				if (P_0 != null && !(P_0 is PersistentTerrainCollider))
				{
					PersistentCollider from = P_0;
					PersistentTerrainCollider persistentTerrainCollider = new PersistentTerrainCollider();
					ProtoReader.NoteObject(persistentTerrainCollider, P_1);
					P_0 = (PersistentCollider)ProtoReader.Merge(P_1, from, persistentTerrainCollider);
				}
				PersistentTerrainCollider obj = (PersistentTerrainCollider)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTerrainCollider persistentTerrainCollider2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTerrainCollider2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCollider persistentCollider = new PersistentCollider();
					ProtoReader.NoteObject(persistentCollider, P_1);
					P_0 = persistentCollider;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCollider persistentCollider6 = new PersistentCollider();
			ProtoReader.NoteObject(persistentCollider6, P_1);
			P_0 = persistentCollider6;
		}
		return P_0;
	}

	private static void Write(PersistentTerrainCollider P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTerrainCollider))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTerrainCollider), P_0.GetType());
		}
		long terrainData = P_0.terrainData;
		if (terrainData != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(terrainData, P_1);
		}
	}

	private static PersistentTerrainCollider Read(PersistentTerrainCollider P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentTerrainCollider persistentTerrainCollider = new PersistentTerrainCollider();
					ProtoReader.NoteObject(persistentTerrainCollider, P_1);
					P_0 = persistentTerrainCollider;
				}
				long terrainData = P_1.ReadInt64();
				P_0.terrainData = terrainData;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentTerrainCollider persistentTerrainCollider2 = new PersistentTerrainCollider();
					ProtoReader.NoteObject(persistentTerrainCollider2, P_1);
					P_0 = persistentTerrainCollider2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentTerrainCollider persistentTerrainCollider3 = new PersistentTerrainCollider();
			ProtoReader.NoteObject(persistentTerrainCollider3, P_1);
			P_0 = persistentTerrainCollider3;
		}
		return P_0;
	}

	private static void Write(PersistentWheelCollider P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentWheelCollider))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentWheelCollider), P_0.GetType());
		}
		float brakeTorque = P_0.brakeTorque;
		if (brakeTorque != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(brakeTorque, P_1);
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float forceAppPointDistance = P_0.forceAppPointDistance;
		if (forceAppPointDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(forceAppPointDistance, P_1);
		}
		WheelFrictionCurve forwardFriction = P_0.forwardFriction;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(forwardFriction, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float mass = P_0.mass;
		if (mass != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(mass, P_1);
		}
		float motorTorque = P_0.motorTorque;
		if (motorTorque != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(motorTorque, P_1);
		}
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
		WheelFrictionCurve sidewaysFriction = P_0.sidewaysFriction;
		ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(sidewaysFriction, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float steerAngle = P_0.steerAngle;
		if (steerAngle != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(steerAngle, P_1);
		}
		float suspensionDistance = P_0.suspensionDistance;
		if (suspensionDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(suspensionDistance, P_1);
		}
		JointSpring suspensionSpring = P_0.suspensionSpring;
		ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(suspensionSpring, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float wheelDampingRate = P_0.wheelDampingRate;
		if (wheelDampingRate != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(wheelDampingRate, P_1);
		}
	}

	private static PersistentWheelCollider Read(PersistentWheelCollider P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider12 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider12, P_1);
					P_0 = persistentWheelCollider12;
				}
				float motorTorque = P_1.ReadSingle();
				P_0.brakeTorque = motorTorque;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider3 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider3, P_1);
					P_0 = persistentWheelCollider3;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 center2 = vector;
				P_0.center = center2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider11 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider11, P_1);
					P_0 = persistentWheelCollider11;
				}
				float motorTorque = P_1.ReadSingle();
				P_0.forceAppPointDistance = motorTorque;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider9 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider9, P_1);
					P_0 = persistentWheelCollider9;
				}
				WheelFrictionCurve forwardFriction = P_0.forwardFriction;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				WheelFrictionCurve wheelFrictionCurve2 = Read(forwardFriction, P_1);
				ProtoReader.EndSubItem(token, P_1);
				WheelFrictionCurve sidewaysFriction2 = wheelFrictionCurve2;
				P_0.forwardFriction = sidewaysFriction2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider5 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider5, P_1);
					P_0 = persistentWheelCollider5;
				}
				float motorTorque = P_1.ReadSingle();
				P_0.mass = motorTorque;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider2 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider2, P_1);
					P_0 = persistentWheelCollider2;
				}
				float motorTorque = P_1.ReadSingle();
				P_0.motorTorque = motorTorque;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider8 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider8, P_1);
					P_0 = persistentWheelCollider8;
				}
				float motorTorque = P_1.ReadSingle();
				P_0.radius = motorTorque;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider6 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider6, P_1);
					P_0 = persistentWheelCollider6;
				}
				WheelFrictionCurve sidewaysFriction = P_0.sidewaysFriction;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				WheelFrictionCurve wheelFrictionCurve = Read(sidewaysFriction, P_1);
				ProtoReader.EndSubItem(token, P_1);
				WheelFrictionCurve sidewaysFriction2 = wheelFrictionCurve;
				P_0.sidewaysFriction = sidewaysFriction2;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider13 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider13, P_1);
					P_0 = persistentWheelCollider13;
				}
				float motorTorque = P_1.ReadSingle();
				P_0.steerAngle = motorTorque;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider10 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider10, P_1);
					P_0 = persistentWheelCollider10;
				}
				float motorTorque = P_1.ReadSingle();
				P_0.suspensionDistance = motorTorque;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider7 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider7, P_1);
					P_0 = persistentWheelCollider7;
				}
				JointSpring suspensionSpring = P_0.suspensionSpring;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointSpring jointSpring = Read(suspensionSpring, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointSpring suspensionSpring2 = jointSpring;
				P_0.suspensionSpring = suspensionSpring2;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider4 = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider4, P_1);
					P_0 = persistentWheelCollider4;
				}
				float motorTorque = P_1.ReadSingle();
				P_0.wheelDampingRate = motorTorque;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentWheelCollider persistentWheelCollider = new PersistentWheelCollider();
					ProtoReader.NoteObject(persistentWheelCollider, P_1);
					P_0 = persistentWheelCollider;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentWheelCollider persistentWheelCollider14 = new PersistentWheelCollider();
			ProtoReader.NoteObject(persistentWheelCollider14, P_1);
			P_0 = persistentWheelCollider14;
		}
		return P_0;
	}

	private static void Write(PersistentCharacterController P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCharacterController))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCharacterController), P_0.GetType());
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool detectCollisions = P_0.detectCollisions;
		if (detectCollisions)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(detectCollisions, P_1);
		}
		bool enableOverlapRecovery = P_0.enableOverlapRecovery;
		if (enableOverlapRecovery)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enableOverlapRecovery, P_1);
		}
		float height = P_0.height;
		if (height != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(height, P_1);
		}
		float minMoveDistance = P_0.minMoveDistance;
		if (minMoveDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minMoveDistance, P_1);
		}
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
		float skinWidth = P_0.skinWidth;
		if (skinWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(skinWidth, P_1);
		}
		float slopeLimit = P_0.slopeLimit;
		if (slopeLimit != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(slopeLimit, P_1);
		}
		float stepOffset = P_0.stepOffset;
		if (stepOffset != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(stepOffset, P_1);
		}
	}

	private static PersistentCharacterController Read(PersistentCharacterController P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController3 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController3, P_1);
					P_0 = persistentCharacterController3;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 center2 = vector;
				P_0.center = center2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController5 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController5, P_1);
					P_0 = persistentCharacterController5;
				}
				bool enableOverlapRecovery = P_1.ReadBoolean();
				P_0.detectCollisions = enableOverlapRecovery;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController2 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController2, P_1);
					P_0 = persistentCharacterController2;
				}
				bool enableOverlapRecovery = P_1.ReadBoolean();
				P_0.enableOverlapRecovery = enableOverlapRecovery;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController9 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController9, P_1);
					P_0 = persistentCharacterController9;
				}
				float stepOffset = P_1.ReadSingle();
				P_0.height = stepOffset;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController8 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController8, P_1);
					P_0 = persistentCharacterController8;
				}
				float stepOffset = P_1.ReadSingle();
				P_0.minMoveDistance = stepOffset;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController6 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController6, P_1);
					P_0 = persistentCharacterController6;
				}
				float stepOffset = P_1.ReadSingle();
				P_0.radius = stepOffset;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController10 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController10, P_1);
					P_0 = persistentCharacterController10;
				}
				float stepOffset = P_1.ReadSingle();
				P_0.skinWidth = stepOffset;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController7 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController7, P_1);
					P_0 = persistentCharacterController7;
				}
				float stepOffset = P_1.ReadSingle();
				P_0.slopeLimit = stepOffset;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController4 = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController4, P_1);
					P_0 = persistentCharacterController4;
				}
				float stepOffset = P_1.ReadSingle();
				P_0.stepOffset = stepOffset;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCharacterController persistentCharacterController = new PersistentCharacterController();
					ProtoReader.NoteObject(persistentCharacterController, P_1);
					P_0 = persistentCharacterController;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCharacterController persistentCharacterController11 = new PersistentCharacterController();
			ProtoReader.NoteObject(persistentCharacterController11, P_1);
			P_0 = persistentCharacterController11;
		}
		return P_0;
	}

	private static void Write(PersistentCapsuleCollider P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCapsuleCollider))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCapsuleCollider), P_0.GetType());
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		int direction = P_0.direction;
		if (direction != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(direction, P_1);
		}
		float height = P_0.height;
		if (height != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(height, P_1);
		}
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
	}

	private static PersistentCapsuleCollider Read(PersistentCapsuleCollider P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCapsuleCollider persistentCapsuleCollider3 = new PersistentCapsuleCollider();
					ProtoReader.NoteObject(persistentCapsuleCollider3, P_1);
					P_0 = persistentCapsuleCollider3;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 center2 = vector;
				P_0.center = center2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCapsuleCollider persistentCapsuleCollider5 = new PersistentCapsuleCollider();
					ProtoReader.NoteObject(persistentCapsuleCollider5, P_1);
					P_0 = persistentCapsuleCollider5;
				}
				int direction = P_1.ReadInt32();
				P_0.direction = direction;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCapsuleCollider persistentCapsuleCollider2 = new PersistentCapsuleCollider();
					ProtoReader.NoteObject(persistentCapsuleCollider2, P_1);
					P_0 = persistentCapsuleCollider2;
				}
				float height = P_1.ReadSingle();
				P_0.height = height;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCapsuleCollider persistentCapsuleCollider4 = new PersistentCapsuleCollider();
					ProtoReader.NoteObject(persistentCapsuleCollider4, P_1);
					P_0 = persistentCapsuleCollider4;
				}
				float height = P_1.ReadSingle();
				P_0.radius = height;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCapsuleCollider persistentCapsuleCollider = new PersistentCapsuleCollider();
					ProtoReader.NoteObject(persistentCapsuleCollider, P_1);
					P_0 = persistentCapsuleCollider;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCapsuleCollider persistentCapsuleCollider6 = new PersistentCapsuleCollider();
			ProtoReader.NoteObject(persistentCapsuleCollider6, P_1);
			P_0 = persistentCapsuleCollider6;
		}
		return P_0;
	}

	private static void Write(PersistentMeshCollider P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMeshCollider))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMeshCollider), P_0.GetType());
		}
		bool convex = P_0.convex;
		if (convex)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(convex, P_1);
		}
		bool inflateMesh = P_0.inflateMesh;
		if (inflateMesh)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(inflateMesh, P_1);
		}
		long sharedMesh = P_0.sharedMesh;
		if (sharedMesh != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sharedMesh, P_1);
		}
		float skinWidth = P_0.skinWidth;
		if (skinWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(skinWidth, P_1);
		}
	}

	private static PersistentMeshCollider Read(PersistentMeshCollider P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentMeshCollider persistentMeshCollider3 = new PersistentMeshCollider();
					ProtoReader.NoteObject(persistentMeshCollider3, P_1);
					P_0 = persistentMeshCollider3;
				}
				bool convex = P_1.ReadBoolean();
				P_0.convex = convex;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentMeshCollider persistentMeshCollider5 = new PersistentMeshCollider();
					ProtoReader.NoteObject(persistentMeshCollider5, P_1);
					P_0 = persistentMeshCollider5;
				}
				bool convex = P_1.ReadBoolean();
				P_0.inflateMesh = convex;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentMeshCollider persistentMeshCollider2 = new PersistentMeshCollider();
					ProtoReader.NoteObject(persistentMeshCollider2, P_1);
					P_0 = persistentMeshCollider2;
				}
				long sharedMesh = P_1.ReadInt64();
				P_0.sharedMesh = sharedMesh;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentMeshCollider persistentMeshCollider4 = new PersistentMeshCollider();
					ProtoReader.NoteObject(persistentMeshCollider4, P_1);
					P_0 = persistentMeshCollider4;
				}
				float skinWidth = P_1.ReadSingle();
				P_0.skinWidth = skinWidth;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentMeshCollider persistentMeshCollider = new PersistentMeshCollider();
					ProtoReader.NoteObject(persistentMeshCollider, P_1);
					P_0 = persistentMeshCollider;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentMeshCollider persistentMeshCollider6 = new PersistentMeshCollider();
			ProtoReader.NoteObject(persistentMeshCollider6, P_1);
			P_0 = persistentMeshCollider6;
		}
		return P_0;
	}

	private static void Write(PersistentSphereCollider P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSphereCollider))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSphereCollider), P_0.GetType());
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
	}

	private static PersistentSphereCollider Read(PersistentSphereCollider P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSphereCollider persistentSphereCollider2 = new PersistentSphereCollider();
					ProtoReader.NoteObject(persistentSphereCollider2, P_1);
					P_0 = persistentSphereCollider2;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 center2 = vector;
				P_0.center = center2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSphereCollider persistentSphereCollider3 = new PersistentSphereCollider();
					ProtoReader.NoteObject(persistentSphereCollider3, P_1);
					P_0 = persistentSphereCollider3;
				}
				float radius = P_1.ReadSingle();
				P_0.radius = radius;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSphereCollider persistentSphereCollider = new PersistentSphereCollider();
					ProtoReader.NoteObject(persistentSphereCollider, P_1);
					P_0 = persistentSphereCollider;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSphereCollider persistentSphereCollider4 = new PersistentSphereCollider();
			ProtoReader.NoteObject(persistentSphereCollider4, P_1);
			P_0 = persistentSphereCollider4;
		}
		return P_0;
	}

	private static void Write(PersistentBoxCollider P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentBoxCollider))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBoxCollider), P_0.GetType());
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 size = P_0.size;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentBoxCollider Read(PersistentBoxCollider P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentBoxCollider persistentBoxCollider2 = new PersistentBoxCollider();
					ProtoReader.NoteObject(persistentBoxCollider2, P_1);
					P_0 = persistentBoxCollider2;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 center2 = vector;
				P_0.center = center2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentBoxCollider persistentBoxCollider3 = new PersistentBoxCollider();
					ProtoReader.NoteObject(persistentBoxCollider3, P_1);
					P_0 = persistentBoxCollider3;
				}
				Vector3 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 center2 = vector2;
				P_0.size = center2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBoxCollider persistentBoxCollider = new PersistentBoxCollider();
					ProtoReader.NoteObject(persistentBoxCollider, P_1);
					P_0 = persistentBoxCollider;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBoxCollider persistentBoxCollider4 = new PersistentBoxCollider();
			ProtoReader.NoteObject(persistentBoxCollider4, P_1);
			P_0 = persistentBoxCollider4;
		}
		return P_0;
	}

	private static void Write(PersistentJoint P_0, ProtoWriter P_1)
	{
		PersistentHingeJoint obj = P_0 as PersistentHingeJoint;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1072, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentSpringJoint obj2 = P_0 as PersistentSpringJoint;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1073, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentFixedJoint obj3 = P_0 as PersistentFixedJoint;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1074, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentCharacterJoint obj4 = P_0 as PersistentCharacterJoint;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1075, WireType.String, P_1);
						token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentConfigurableJoint obj5 = P_0 as PersistentConfigurableJoint;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1076, WireType.String, P_1);
							token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else if (P_0.GetType() != typeof(PersistentJoint))
						{
							TypeModel.ThrowUnexpectedSubtype(typeof(PersistentJoint), P_0.GetType());
						}
					}
				}
			}
		}
		Vector3 anchor = P_0.anchor;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(anchor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool autoConfigureConnectedAnchor = P_0.autoConfigureConnectedAnchor;
		if (autoConfigureConnectedAnchor)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoConfigureConnectedAnchor, P_1);
		}
		Vector3 axis = P_0.axis;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(axis, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float breakForce = P_0.breakForce;
		if (breakForce != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(breakForce, P_1);
		}
		float breakTorque = P_0.breakTorque;
		if (breakTorque != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(breakTorque, P_1);
		}
		Vector3 connectedAnchor = P_0.connectedAnchor;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(connectedAnchor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long connectedBody = P_0.connectedBody;
		if (connectedBody != 0L)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(connectedBody, P_1);
		}
		bool enableCollision = P_0.enableCollision;
		if (enableCollision)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enableCollision, P_1);
		}
		bool enablePreprocessing = P_0.enablePreprocessing;
		if (enablePreprocessing)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enablePreprocessing, P_1);
		}
	}

	private static PersistentJoint Read(PersistentJoint P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint7 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint7, P_1);
					P_0 = persistentJoint7;
				}
				Vector3 anchor = P_0.anchor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(anchor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 axis2 = vector2;
				P_0.anchor = axis2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint8 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint8, P_1);
					P_0 = persistentJoint8;
				}
				bool enableCollision = P_1.ReadBoolean();
				P_0.autoConfigureConnectedAnchor = enableCollision;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint5 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint5, P_1);
					P_0 = persistentJoint5;
				}
				Vector3 axis = P_0.axis;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(axis, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 axis2 = vector;
				P_0.axis = axis2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint4 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint4, P_1);
					P_0 = persistentJoint4;
				}
				float breakTorque = P_1.ReadSingle();
				P_0.breakForce = breakTorque;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint2 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint2, P_1);
					P_0 = persistentJoint2;
				}
				float breakTorque = P_1.ReadSingle();
				P_0.breakTorque = breakTorque;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint9 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint9, P_1);
					P_0 = persistentJoint9;
				}
				Vector3 connectedAnchor = P_0.connectedAnchor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(connectedAnchor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 axis2 = vector3;
				P_0.connectedAnchor = axis2;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint6 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint6, P_1);
					P_0 = persistentJoint6;
				}
				long connectedBody = P_1.ReadInt64();
				P_0.connectedBody = connectedBody;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint3 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint3, P_1);
					P_0 = persistentJoint3;
				}
				bool enableCollision = P_1.ReadBoolean();
				P_0.enableCollision = enableCollision;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentJoint persistentJoint10 = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint10, P_1);
					P_0 = persistentJoint10;
				}
				bool enableCollision = P_1.ReadBoolean();
				P_0.enablePreprocessing = enableCollision;
				break;
			}
			case 1072:
			{
				if (P_0 != null && !(P_0 is PersistentHingeJoint))
				{
					PersistentJoint from3 = P_0;
					PersistentHingeJoint persistentHingeJoint = new PersistentHingeJoint();
					ProtoReader.NoteObject(persistentHingeJoint, P_1);
					P_0 = (PersistentJoint)ProtoReader.Merge(P_1, from3, persistentHingeJoint);
				}
				PersistentHingeJoint obj3 = (PersistentHingeJoint)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentHingeJoint persistentHingeJoint2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentHingeJoint2;
				break;
			}
			case 1073:
			{
				if (P_0 != null && !(P_0 is PersistentSpringJoint))
				{
					PersistentJoint from = P_0;
					PersistentSpringJoint persistentSpringJoint = new PersistentSpringJoint();
					ProtoReader.NoteObject(persistentSpringJoint, P_1);
					P_0 = (PersistentJoint)ProtoReader.Merge(P_1, from, persistentSpringJoint);
				}
				PersistentSpringJoint obj = (PersistentSpringJoint)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSpringJoint persistentSpringJoint2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSpringJoint2;
				break;
			}
			case 1074:
			{
				if (P_0 != null && !(P_0 is PersistentFixedJoint))
				{
					PersistentJoint from5 = P_0;
					PersistentFixedJoint persistentFixedJoint = new PersistentFixedJoint();
					ProtoReader.NoteObject(persistentFixedJoint, P_1);
					P_0 = (PersistentJoint)ProtoReader.Merge(P_1, from5, persistentFixedJoint);
				}
				PersistentFixedJoint obj5 = (PersistentFixedJoint)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentFixedJoint persistentFixedJoint2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentFixedJoint2;
				break;
			}
			case 1075:
			{
				if (P_0 != null && !(P_0 is PersistentCharacterJoint))
				{
					PersistentJoint from4 = P_0;
					PersistentCharacterJoint persistentCharacterJoint = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint, P_1);
					P_0 = (PersistentJoint)ProtoReader.Merge(P_1, from4, persistentCharacterJoint);
				}
				PersistentCharacterJoint obj4 = (PersistentCharacterJoint)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCharacterJoint persistentCharacterJoint2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCharacterJoint2;
				break;
			}
			case 1076:
			{
				if (P_0 != null && !(P_0 is PersistentConfigurableJoint))
				{
					PersistentJoint from2 = P_0;
					PersistentConfigurableJoint persistentConfigurableJoint = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint, P_1);
					P_0 = (PersistentJoint)ProtoReader.Merge(P_1, from2, persistentConfigurableJoint);
				}
				PersistentConfigurableJoint obj2 = (PersistentConfigurableJoint)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentConfigurableJoint persistentConfigurableJoint2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentConfigurableJoint2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentJoint persistentJoint = new PersistentJoint();
					ProtoReader.NoteObject(persistentJoint, P_1);
					P_0 = persistentJoint;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentJoint persistentJoint11 = new PersistentJoint();
			ProtoReader.NoteObject(persistentJoint11, P_1);
			P_0 = persistentJoint11;
		}
		return P_0;
	}

	private static void Write(PersistentConfigurableJoint P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentConfigurableJoint))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentConfigurableJoint), P_0.GetType());
		}
		JointDrive angularXDrive = P_0.angularXDrive;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularXDrive, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimitSpring angularXLimitSpring = P_0.angularXLimitSpring;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularXLimitSpring, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint angularXMotion = P_0.angularXMotion;
		if (angularXMotion != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(angularXMotion, P_1);
		}
		SoftJointLimit angularYLimit = P_0.angularYLimit;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularYLimit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint angularYMotion = P_0.angularYMotion;
		if (angularYMotion != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(angularYMotion, P_1);
		}
		JointDrive angularYZDrive = P_0.angularYZDrive;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularYZDrive, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimitSpring angularYZLimitSpring = P_0.angularYZLimitSpring;
		ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularYZLimitSpring, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimit angularZLimit = P_0.angularZLimit;
		ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularZLimit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint angularZMotion = P_0.angularZMotion;
		if (angularZMotion != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(angularZMotion, P_1);
		}
		bool configuredInWorldSpace = P_0.configuredInWorldSpace;
		if (configuredInWorldSpace)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(configuredInWorldSpace, P_1);
		}
		SoftJointLimit highAngularXLimit = P_0.highAngularXLimit;
		ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(highAngularXLimit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimit linearLimit = P_0.linearLimit;
		ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(linearLimit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimitSpring linearLimitSpring = P_0.linearLimitSpring;
		ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(linearLimitSpring, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimit lowAngularXLimit = P_0.lowAngularXLimit;
		ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(lowAngularXLimit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float projectionAngle = P_0.projectionAngle;
		if (projectionAngle != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(projectionAngle, P_1);
		}
		float projectionDistance = P_0.projectionDistance;
		if (projectionDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(projectionDistance, P_1);
		}
		uint projectionMode = P_0.projectionMode;
		if (projectionMode != 0)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(projectionMode, P_1);
		}
		uint rotationDriveMode = P_0.rotationDriveMode;
		if (rotationDriveMode != 0)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(rotationDriveMode, P_1);
		}
		Vector3 secondaryAxis = P_0.secondaryAxis;
		ProtoWriter.WriteFieldHeader(19, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(secondaryAxis, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		JointDrive slerpDrive = P_0.slerpDrive;
		ProtoWriter.WriteFieldHeader(20, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(slerpDrive, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool swapBodies = P_0.swapBodies;
		if (swapBodies)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(swapBodies, P_1);
		}
		Vector3 targetAngularVelocity = P_0.targetAngularVelocity;
		ProtoWriter.WriteFieldHeader(22, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(targetAngularVelocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 targetPosition = P_0.targetPosition;
		ProtoWriter.WriteFieldHeader(23, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(targetPosition, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Quaternion targetRotation = P_0.targetRotation;
		ProtoWriter.WriteFieldHeader(24, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(targetRotation, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 targetVelocity = P_0.targetVelocity;
		ProtoWriter.WriteFieldHeader(25, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(targetVelocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		JointDrive xDrive = P_0.xDrive;
		ProtoWriter.WriteFieldHeader(26, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(xDrive, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint xMotion = P_0.xMotion;
		if (xMotion != 0)
		{
			ProtoWriter.WriteFieldHeader(27, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(xMotion, P_1);
		}
		JointDrive yDrive = P_0.yDrive;
		ProtoWriter.WriteFieldHeader(28, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(yDrive, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint yMotion = P_0.yMotion;
		if (yMotion != 0)
		{
			ProtoWriter.WriteFieldHeader(29, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(yMotion, P_1);
		}
		JointDrive zDrive = P_0.zDrive;
		ProtoWriter.WriteFieldHeader(30, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(zDrive, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint zMotion = P_0.zMotion;
		if (zMotion != 0)
		{
			ProtoWriter.WriteFieldHeader(31, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(zMotion, P_1);
		}
	}

	private static PersistentConfigurableJoint Read(PersistentConfigurableJoint P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint12 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint12, P_1);
					P_0 = persistentConfigurableJoint12;
				}
				JointDrive angularXDrive = P_0.angularXDrive;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointDrive jointDrive3 = Read(angularXDrive, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointDrive zDrive2 = jointDrive3;
				P_0.angularXDrive = zDrive2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint15 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint15, P_1);
					P_0 = persistentConfigurableJoint15;
				}
				SoftJointLimitSpring angularXLimitSpring = P_0.angularXLimitSpring;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimitSpring softJointLimitSpring2 = Read(angularXLimitSpring, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimitSpring linearLimitSpring2 = softJointLimitSpring2;
				P_0.angularXLimitSpring = linearLimitSpring2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint3 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint3, P_1);
					P_0 = persistentConfigurableJoint3;
				}
				uint angularXMotion = P_1.ReadUInt32();
				P_0.angularXMotion = angularXMotion;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint26 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint26, P_1);
					P_0 = persistentConfigurableJoint26;
				}
				SoftJointLimit angularYLimit = P_0.angularYLimit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit5 = Read(angularYLimit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit lowAngularXLimit2 = softJointLimit5;
				P_0.angularYLimit = lowAngularXLimit2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint17 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint17, P_1);
					P_0 = persistentConfigurableJoint17;
				}
				uint angularXMotion = P_1.ReadUInt32();
				P_0.angularYMotion = angularXMotion;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint14 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint14, P_1);
					P_0 = persistentConfigurableJoint14;
				}
				JointDrive angularYZDrive = P_0.angularYZDrive;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointDrive jointDrive5 = Read(angularYZDrive, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointDrive zDrive2 = jointDrive5;
				P_0.angularYZDrive = zDrive2;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint30 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint30, P_1);
					P_0 = persistentConfigurableJoint30;
				}
				SoftJointLimitSpring angularYZLimitSpring = P_0.angularYZLimitSpring;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimitSpring softJointLimitSpring3 = Read(angularYZLimitSpring, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimitSpring linearLimitSpring2 = softJointLimitSpring3;
				P_0.angularYZLimitSpring = linearLimitSpring2;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint23 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint23, P_1);
					P_0 = persistentConfigurableJoint23;
				}
				SoftJointLimit angularZLimit = P_0.angularZLimit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit3 = Read(angularZLimit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit lowAngularXLimit2 = softJointLimit3;
				P_0.angularZLimit = lowAngularXLimit2;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint6 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint6, P_1);
					P_0 = persistentConfigurableJoint6;
				}
				uint angularXMotion = P_1.ReadUInt32();
				P_0.angularZMotion = angularXMotion;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint32 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint32, P_1);
					P_0 = persistentConfigurableJoint32;
				}
				bool swapBodies = P_1.ReadBoolean();
				P_0.configuredInWorldSpace = swapBodies;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint24 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint24, P_1);
					P_0 = persistentConfigurableJoint24;
				}
				SoftJointLimit highAngularXLimit = P_0.highAngularXLimit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit4 = Read(highAngularXLimit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit lowAngularXLimit2 = softJointLimit4;
				P_0.highAngularXLimit = lowAngularXLimit2;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint21 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint21, P_1);
					P_0 = persistentConfigurableJoint21;
				}
				SoftJointLimit linearLimit = P_0.linearLimit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit2 = Read(linearLimit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit lowAngularXLimit2 = softJointLimit2;
				P_0.linearLimit = lowAngularXLimit2;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint8 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint8, P_1);
					P_0 = persistentConfigurableJoint8;
				}
				SoftJointLimitSpring linearLimitSpring = P_0.linearLimitSpring;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimitSpring softJointLimitSpring = Read(linearLimitSpring, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimitSpring linearLimitSpring2 = softJointLimitSpring;
				P_0.linearLimitSpring = linearLimitSpring2;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint5 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint5, P_1);
					P_0 = persistentConfigurableJoint5;
				}
				SoftJointLimit lowAngularXLimit = P_0.lowAngularXLimit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit = Read(lowAngularXLimit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit lowAngularXLimit2 = softJointLimit;
				P_0.lowAngularXLimit = lowAngularXLimit2;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint29 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint29, P_1);
					P_0 = persistentConfigurableJoint29;
				}
				float projectionDistance = P_1.ReadSingle();
				P_0.projectionAngle = projectionDistance;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint27 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint27, P_1);
					P_0 = persistentConfigurableJoint27;
				}
				float projectionDistance = P_1.ReadSingle();
				P_0.projectionDistance = projectionDistance;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint20 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint20, P_1);
					P_0 = persistentConfigurableJoint20;
				}
				uint angularXMotion = P_1.ReadUInt32();
				P_0.projectionMode = angularXMotion;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint18 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint18, P_1);
					P_0 = persistentConfigurableJoint18;
				}
				uint angularXMotion = P_1.ReadUInt32();
				P_0.rotationDriveMode = angularXMotion;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint11 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint11, P_1);
					P_0 = persistentConfigurableJoint11;
				}
				Vector3 secondaryAxis = P_0.secondaryAxis;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(secondaryAxis, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 secondaryAxis2 = vector;
				P_0.secondaryAxis = secondaryAxis2;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint9 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint9, P_1);
					P_0 = persistentConfigurableJoint9;
				}
				JointDrive slerpDrive = P_0.slerpDrive;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointDrive jointDrive2 = Read(slerpDrive, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointDrive zDrive2 = jointDrive2;
				P_0.slerpDrive = zDrive2;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint2 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint2, P_1);
					P_0 = persistentConfigurableJoint2;
				}
				bool swapBodies = P_1.ReadBoolean();
				P_0.swapBodies = swapBodies;
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint31 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint31, P_1);
					P_0 = persistentConfigurableJoint31;
				}
				Vector3 targetAngularVelocity = P_0.targetAngularVelocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector4 = Read(targetAngularVelocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 secondaryAxis2 = vector4;
				P_0.targetAngularVelocity = secondaryAxis2;
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint28 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint28, P_1);
					P_0 = persistentConfigurableJoint28;
				}
				Vector3 targetPosition = P_0.targetPosition;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(targetPosition, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 secondaryAxis2 = vector3;
				P_0.targetPosition = secondaryAxis2;
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint25 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint25, P_1);
					P_0 = persistentConfigurableJoint25;
				}
				Quaternion targetRotation = P_0.targetRotation;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Quaternion quaternion = Read(targetRotation, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Quaternion targetRotation2 = quaternion;
				P_0.targetRotation = targetRotation2;
				break;
			}
			case 25:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint22 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint22, P_1);
					P_0 = persistentConfigurableJoint22;
				}
				Vector3 targetVelocity = P_0.targetVelocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(targetVelocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 secondaryAxis2 = vector2;
				P_0.targetVelocity = secondaryAxis2;
				break;
			}
			case 26:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint19 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint19, P_1);
					P_0 = persistentConfigurableJoint19;
				}
				JointDrive xDrive = P_0.xDrive;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointDrive jointDrive6 = Read(xDrive, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointDrive zDrive2 = jointDrive6;
				P_0.xDrive = zDrive2;
				break;
			}
			case 27:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint16 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint16, P_1);
					P_0 = persistentConfigurableJoint16;
				}
				uint angularXMotion = P_1.ReadUInt32();
				P_0.xMotion = angularXMotion;
				break;
			}
			case 28:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint13 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint13, P_1);
					P_0 = persistentConfigurableJoint13;
				}
				JointDrive yDrive = P_0.yDrive;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointDrive jointDrive4 = Read(yDrive, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointDrive zDrive2 = jointDrive4;
				P_0.yDrive = zDrive2;
				break;
			}
			case 29:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint10 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint10, P_1);
					P_0 = persistentConfigurableJoint10;
				}
				uint angularXMotion = P_1.ReadUInt32();
				P_0.yMotion = angularXMotion;
				break;
			}
			case 30:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint7 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint7, P_1);
					P_0 = persistentConfigurableJoint7;
				}
				JointDrive zDrive = P_0.zDrive;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointDrive jointDrive = Read(zDrive, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointDrive zDrive2 = jointDrive;
				P_0.zDrive = zDrive2;
				break;
			}
			case 31:
			{
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint4 = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint4, P_1);
					P_0 = persistentConfigurableJoint4;
				}
				uint angularXMotion = P_1.ReadUInt32();
				P_0.zMotion = angularXMotion;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentConfigurableJoint persistentConfigurableJoint = new PersistentConfigurableJoint();
					ProtoReader.NoteObject(persistentConfigurableJoint, P_1);
					P_0 = persistentConfigurableJoint;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentConfigurableJoint persistentConfigurableJoint33 = new PersistentConfigurableJoint();
			ProtoReader.NoteObject(persistentConfigurableJoint33, P_1);
			P_0 = persistentConfigurableJoint33;
		}
		return P_0;
	}

	private static void Write(PersistentCharacterJoint P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCharacterJoint))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCharacterJoint), P_0.GetType());
		}
		bool enableProjection = P_0.enableProjection;
		if (enableProjection)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enableProjection, P_1);
		}
		SoftJointLimit highTwistLimit = P_0.highTwistLimit;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(highTwistLimit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimit lowTwistLimit = P_0.lowTwistLimit;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(lowTwistLimit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float projectionAngle = P_0.projectionAngle;
		if (projectionAngle != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(projectionAngle, P_1);
		}
		float projectionDistance = P_0.projectionDistance;
		if (projectionDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(projectionDistance, P_1);
		}
		SoftJointLimit swing1Limit = P_0.swing1Limit;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(swing1Limit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimit swing2Limit = P_0.swing2Limit;
		ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(swing2Limit, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 swingAxis = P_0.swingAxis;
		ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(swingAxis, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimitSpring swingLimitSpring = P_0.swingLimitSpring;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(swingLimitSpring, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		SoftJointLimitSpring twistLimitSpring = P_0.twistLimitSpring;
		ProtoWriter.WriteFieldHeader(10, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(twistLimitSpring, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentCharacterJoint Read(PersistentCharacterJoint P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint6 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint6, P_1);
					P_0 = persistentCharacterJoint6;
				}
				bool enableProjection = P_1.ReadBoolean();
				P_0.enableProjection = enableProjection;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint8 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint8, P_1);
					P_0 = persistentCharacterJoint8;
				}
				SoftJointLimit highTwistLimit = P_0.highTwistLimit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit3 = Read(highTwistLimit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit swing2Limit2 = softJointLimit3;
				P_0.highTwistLimit = swing2Limit2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint5 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint5, P_1);
					P_0 = persistentCharacterJoint5;
				}
				SoftJointLimit lowTwistLimit = P_0.lowTwistLimit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit2 = Read(lowTwistLimit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit swing2Limit2 = softJointLimit2;
				P_0.lowTwistLimit = swing2Limit2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint3 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint3, P_1);
					P_0 = persistentCharacterJoint3;
				}
				float projectionAngle = P_1.ReadSingle();
				P_0.projectionAngle = projectionAngle;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint11 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint11, P_1);
					P_0 = persistentCharacterJoint11;
				}
				float projectionAngle = P_1.ReadSingle();
				P_0.projectionDistance = projectionAngle;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint9 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint9, P_1);
					P_0 = persistentCharacterJoint9;
				}
				SoftJointLimit swing1Limit = P_0.swing1Limit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit4 = Read(swing1Limit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit swing2Limit2 = softJointLimit4;
				P_0.swing1Limit = swing2Limit2;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint2 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint2, P_1);
					P_0 = persistentCharacterJoint2;
				}
				SoftJointLimit swing2Limit = P_0.swing2Limit;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimit softJointLimit = Read(swing2Limit, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimit swing2Limit2 = softJointLimit;
				P_0.swing2Limit = swing2Limit2;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint10 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint10, P_1);
					P_0 = persistentCharacterJoint10;
				}
				Vector3 swingAxis = P_0.swingAxis;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(swingAxis, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 swingAxis2 = vector;
				P_0.swingAxis = swingAxis2;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint7 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint7, P_1);
					P_0 = persistentCharacterJoint7;
				}
				SoftJointLimitSpring swingLimitSpring = P_0.swingLimitSpring;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimitSpring softJointLimitSpring2 = Read(swingLimitSpring, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimitSpring twistLimitSpring2 = softJointLimitSpring2;
				P_0.swingLimitSpring = twistLimitSpring2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint4 = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint4, P_1);
					P_0 = persistentCharacterJoint4;
				}
				SoftJointLimitSpring twistLimitSpring = P_0.twistLimitSpring;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				SoftJointLimitSpring softJointLimitSpring = Read(twistLimitSpring, P_1);
				ProtoReader.EndSubItem(token, P_1);
				SoftJointLimitSpring twistLimitSpring2 = softJointLimitSpring;
				P_0.twistLimitSpring = twistLimitSpring2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCharacterJoint persistentCharacterJoint = new PersistentCharacterJoint();
					ProtoReader.NoteObject(persistentCharacterJoint, P_1);
					P_0 = persistentCharacterJoint;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCharacterJoint persistentCharacterJoint12 = new PersistentCharacterJoint();
			ProtoReader.NoteObject(persistentCharacterJoint12, P_1);
			P_0 = persistentCharacterJoint12;
		}
		return P_0;
	}

	private static void Write(PersistentFixedJoint P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentFixedJoint))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentFixedJoint), P_0.GetType());
		}
	}

	private static PersistentFixedJoint Read(PersistentFixedJoint P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentFixedJoint persistentFixedJoint = new PersistentFixedJoint();
				ProtoReader.NoteObject(persistentFixedJoint, P_1);
				P_0 = persistentFixedJoint;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentFixedJoint persistentFixedJoint2 = new PersistentFixedJoint();
			ProtoReader.NoteObject(persistentFixedJoint2, P_1);
			P_0 = persistentFixedJoint2;
		}
		return P_0;
	}

	private static void Write(PersistentSpringJoint P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSpringJoint))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSpringJoint), P_0.GetType());
		}
		float damper = P_0.damper;
		if (damper != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(damper, P_1);
		}
		float maxDistance = P_0.maxDistance;
		if (maxDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxDistance, P_1);
		}
		float minDistance = P_0.minDistance;
		if (minDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minDistance, P_1);
		}
		float spring = P_0.spring;
		if (spring != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spring, P_1);
		}
		float tolerance = P_0.tolerance;
		if (tolerance != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(tolerance, P_1);
		}
	}

	private static PersistentSpringJoint Read(PersistentSpringJoint P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint persistentSpringJoint6 = new PersistentSpringJoint();
					ProtoReader.NoteObject(persistentSpringJoint6, P_1);
					P_0 = persistentSpringJoint6;
				}
				float maxDistance = P_1.ReadSingle();
				P_0.damper = maxDistance;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint persistentSpringJoint2 = new PersistentSpringJoint();
					ProtoReader.NoteObject(persistentSpringJoint2, P_1);
					P_0 = persistentSpringJoint2;
				}
				float maxDistance = P_1.ReadSingle();
				P_0.maxDistance = maxDistance;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint persistentSpringJoint5 = new PersistentSpringJoint();
					ProtoReader.NoteObject(persistentSpringJoint5, P_1);
					P_0 = persistentSpringJoint5;
				}
				float maxDistance = P_1.ReadSingle();
				P_0.minDistance = maxDistance;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint persistentSpringJoint3 = new PersistentSpringJoint();
					ProtoReader.NoteObject(persistentSpringJoint3, P_1);
					P_0 = persistentSpringJoint3;
				}
				float maxDistance = P_1.ReadSingle();
				P_0.spring = maxDistance;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint persistentSpringJoint4 = new PersistentSpringJoint();
					ProtoReader.NoteObject(persistentSpringJoint4, P_1);
					P_0 = persistentSpringJoint4;
				}
				float maxDistance = P_1.ReadSingle();
				P_0.tolerance = maxDistance;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSpringJoint persistentSpringJoint = new PersistentSpringJoint();
					ProtoReader.NoteObject(persistentSpringJoint, P_1);
					P_0 = persistentSpringJoint;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSpringJoint persistentSpringJoint7 = new PersistentSpringJoint();
			ProtoReader.NoteObject(persistentSpringJoint7, P_1);
			P_0 = persistentSpringJoint7;
		}
		return P_0;
	}

	private static void Write(PersistentHingeJoint P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentHingeJoint))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentHingeJoint), P_0.GetType());
		}
		JointLimits limits = P_0.limits;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(limits, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		JointMotor motor = P_0.motor;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(motor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		JointSpring spring = P_0.spring;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(spring, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool useLimits = P_0.useLimits;
		if (useLimits)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useLimits, P_1);
		}
		bool useMotor = P_0.useMotor;
		if (useMotor)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useMotor, P_1);
		}
		bool useSpring = P_0.useSpring;
		if (useSpring)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useSpring, P_1);
		}
	}

	private static PersistentHingeJoint Read(PersistentHingeJoint P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint persistentHingeJoint2 = new PersistentHingeJoint();
					ProtoReader.NoteObject(persistentHingeJoint2, P_1);
					P_0 = persistentHingeJoint2;
				}
				JointLimits limits = P_0.limits;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointLimits jointLimits = Read(limits, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointLimits limits2 = jointLimits;
				P_0.limits = limits2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint persistentHingeJoint5 = new PersistentHingeJoint();
					ProtoReader.NoteObject(persistentHingeJoint5, P_1);
					P_0 = persistentHingeJoint5;
				}
				JointMotor motor = P_0.motor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointMotor jointMotor = Read(motor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointMotor motor2 = jointMotor;
				P_0.motor = motor2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint persistentHingeJoint3 = new PersistentHingeJoint();
					ProtoReader.NoteObject(persistentHingeJoint3, P_1);
					P_0 = persistentHingeJoint3;
				}
				JointSpring spring = P_0.spring;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointSpring jointSpring = Read(spring, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointSpring spring2 = jointSpring;
				P_0.spring = spring2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint persistentHingeJoint6 = new PersistentHingeJoint();
					ProtoReader.NoteObject(persistentHingeJoint6, P_1);
					P_0 = persistentHingeJoint6;
				}
				bool useSpring = P_1.ReadBoolean();
				P_0.useLimits = useSpring;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint persistentHingeJoint7 = new PersistentHingeJoint();
					ProtoReader.NoteObject(persistentHingeJoint7, P_1);
					P_0 = persistentHingeJoint7;
				}
				bool useSpring = P_1.ReadBoolean();
				P_0.useMotor = useSpring;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint persistentHingeJoint4 = new PersistentHingeJoint();
					ProtoReader.NoteObject(persistentHingeJoint4, P_1);
					P_0 = persistentHingeJoint4;
				}
				bool useSpring = P_1.ReadBoolean();
				P_0.useSpring = useSpring;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentHingeJoint persistentHingeJoint = new PersistentHingeJoint();
					ProtoReader.NoteObject(persistentHingeJoint, P_1);
					P_0 = persistentHingeJoint;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentHingeJoint persistentHingeJoint8 = new PersistentHingeJoint();
			ProtoReader.NoteObject(persistentHingeJoint8, P_1);
			P_0 = persistentHingeJoint8;
		}
		return P_0;
	}

	private static void Write(PersistentRigidbody P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRigidbody))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRigidbody), P_0.GetType());
		}
		float angularDrag = P_0.angularDrag;
		if (angularDrag != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularDrag, P_1);
		}
		Vector3 angularVelocity = P_0.angularVelocity;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularVelocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 centerOfMass = P_0.centerOfMass;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(centerOfMass, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint collisionDetectionMode = P_0.collisionDetectionMode;
		if (collisionDetectionMode != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(collisionDetectionMode, P_1);
		}
		uint constraints = P_0.constraints;
		if (constraints != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(constraints, P_1);
		}
		bool detectCollisions = P_0.detectCollisions;
		if (detectCollisions)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(detectCollisions, P_1);
		}
		float drag = P_0.drag;
		if (drag != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(drag, P_1);
		}
		bool freezeRotation = P_0.freezeRotation;
		if (freezeRotation)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(freezeRotation, P_1);
		}
		uint interpolation = P_0.interpolation;
		if (interpolation != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(interpolation, P_1);
		}
		bool isKinematic = P_0.isKinematic;
		if (isKinematic)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isKinematic, P_1);
		}
		float mass = P_0.mass;
		if (mass != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(mass, P_1);
		}
		float maxAngularVelocity = P_0.maxAngularVelocity;
		if (maxAngularVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxAngularVelocity, P_1);
		}
		float maxDepenetrationVelocity = P_0.maxDepenetrationVelocity;
		if (maxDepenetrationVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxDepenetrationVelocity, P_1);
		}
		Vector3 position = P_0.position;
		ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(position, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Quaternion rotation = P_0.rotation;
		ProtoWriter.WriteFieldHeader(15, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(rotation, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float sleepThreshold = P_0.sleepThreshold;
		if (sleepThreshold != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(sleepThreshold, P_1);
		}
		int solverIterations = P_0.solverIterations;
		if (solverIterations != 0)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(solverIterations, P_1);
		}
		int solverVelocityIterations = P_0.solverVelocityIterations;
		if (solverVelocityIterations != 0)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(solverVelocityIterations, P_1);
		}
		bool useGravity = P_0.useGravity;
		if (useGravity)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useGravity, P_1);
		}
		Vector3 velocity = P_0.velocity;
		ProtoWriter.WriteFieldHeader(20, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(velocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentRigidbody Read(PersistentRigidbody P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody6 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody6, P_1);
					P_0 = persistentRigidbody6;
				}
				float maxDepenetrationVelocity = P_1.ReadSingle();
				P_0.angularDrag = maxDepenetrationVelocity;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody8 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody8, P_1);
					P_0 = persistentRigidbody8;
				}
				Vector3 angularVelocity = P_0.angularVelocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(angularVelocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 position2 = vector3;
				P_0.angularVelocity = position2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody20 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody20, P_1);
					P_0 = persistentRigidbody20;
				}
				Vector3 centerOfMass = P_0.centerOfMass;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector4 = Read(centerOfMass, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 position2 = vector4;
				P_0.centerOfMass = position2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody17 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody17, P_1);
					P_0 = persistentRigidbody17;
				}
				uint interpolation = P_1.ReadUInt32();
				P_0.collisionDetectionMode = interpolation;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody11 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody11, P_1);
					P_0 = persistentRigidbody11;
				}
				uint interpolation = P_1.ReadUInt32();
				P_0.constraints = interpolation;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody9 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody9, P_1);
					P_0 = persistentRigidbody9;
				}
				bool useGravity = P_1.ReadBoolean();
				P_0.detectCollisions = useGravity;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody18 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody18, P_1);
					P_0 = persistentRigidbody18;
				}
				float maxDepenetrationVelocity = P_1.ReadSingle();
				P_0.drag = maxDepenetrationVelocity;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody15 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody15, P_1);
					P_0 = persistentRigidbody15;
				}
				bool useGravity = P_1.ReadBoolean();
				P_0.freezeRotation = useGravity;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody2 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody2, P_1);
					P_0 = persistentRigidbody2;
				}
				uint interpolation = P_1.ReadUInt32();
				P_0.interpolation = interpolation;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody21 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody21, P_1);
					P_0 = persistentRigidbody21;
				}
				bool useGravity = P_1.ReadBoolean();
				P_0.isKinematic = useGravity;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody14 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody14, P_1);
					P_0 = persistentRigidbody14;
				}
				float maxDepenetrationVelocity = P_1.ReadSingle();
				P_0.mass = maxDepenetrationVelocity;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody12 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody12, P_1);
					P_0 = persistentRigidbody12;
				}
				float maxDepenetrationVelocity = P_1.ReadSingle();
				P_0.maxAngularVelocity = maxDepenetrationVelocity;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody5 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody5, P_1);
					P_0 = persistentRigidbody5;
				}
				float maxDepenetrationVelocity = P_1.ReadSingle();
				P_0.maxDepenetrationVelocity = maxDepenetrationVelocity;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody3 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody3, P_1);
					P_0 = persistentRigidbody3;
				}
				Vector3 position = P_0.position;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(position, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 position2 = vector;
				P_0.position = position2;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody19 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody19, P_1);
					P_0 = persistentRigidbody19;
				}
				Quaternion rotation = P_0.rotation;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Quaternion quaternion = Read(rotation, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Quaternion rotation2 = quaternion;
				P_0.rotation = rotation2;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody16 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody16, P_1);
					P_0 = persistentRigidbody16;
				}
				float maxDepenetrationVelocity = P_1.ReadSingle();
				P_0.sleepThreshold = maxDepenetrationVelocity;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody13 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody13, P_1);
					P_0 = persistentRigidbody13;
				}
				int solverVelocityIterations = P_1.ReadInt32();
				P_0.solverIterations = solverVelocityIterations;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody10 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody10, P_1);
					P_0 = persistentRigidbody10;
				}
				int solverVelocityIterations = P_1.ReadInt32();
				P_0.solverVelocityIterations = solverVelocityIterations;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody7 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody7, P_1);
					P_0 = persistentRigidbody7;
				}
				bool useGravity = P_1.ReadBoolean();
				P_0.useGravity = useGravity;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody4 = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody4, P_1);
					P_0 = persistentRigidbody4;
				}
				Vector3 velocity = P_0.velocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(velocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 position2 = vector2;
				P_0.velocity = position2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRigidbody persistentRigidbody = new PersistentRigidbody();
					ProtoReader.NoteObject(persistentRigidbody, P_1);
					P_0 = persistentRigidbody;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRigidbody persistentRigidbody22 = new PersistentRigidbody();
			ProtoReader.NoteObject(persistentRigidbody22, P_1);
			P_0 = persistentRigidbody22;
		}
		return P_0;
	}

	private static void Write(PersistentParticleSystem P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentParticleSystem))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentParticleSystem), P_0.GetType());
		}
		PersistentCollisionModule collision = P_0.collision;
		if (collision != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(collision, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentColorBySpeedModule colorBySpeed = P_0.colorBySpeed;
		if (colorBySpeed != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			BclHelpers.WriteNetObject(colorBySpeed, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentColorOverLifetimeModule colorOverLifetime = P_0.colorOverLifetime;
		if (colorOverLifetime != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(colorOverLifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentEmissionModule emission = P_0.emission;
		if (emission != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			BclHelpers.WriteNetObject(emission, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentExternalForcesModule externalForces = P_0.externalForces;
		if (externalForces != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(externalForces, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentForceOverLifetimeModule forceOverLifetime = P_0.forceOverLifetime;
		if (forceOverLifetime != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(forceOverLifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentInheritVelocityModule inheritVelocity = P_0.inheritVelocity;
		if (inheritVelocity != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			BclHelpers.WriteNetObject(inheritVelocity, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentLightsModule lights = P_0.lights;
		if (lights != null)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
			BclHelpers.WriteNetObject(lights, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentLimitVelocityOverLifetimeModule limitVelocityOverLifetime = P_0.limitVelocityOverLifetime;
		if (limitVelocityOverLifetime != null)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
			BclHelpers.WriteNetObject(limitVelocityOverLifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentMainModule main = P_0.main;
		if (main != null)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.String, P_1);
			BclHelpers.WriteNetObject(main, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentNoiseModule noise = P_0.noise;
		if (noise != null)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
			BclHelpers.WriteNetObject(noise, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		uint randomSeed = P_0.randomSeed;
		if (randomSeed != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(randomSeed, P_1);
		}
		PersistentRotationBySpeedModule rotationBySpeed = P_0.rotationBySpeed;
		if (rotationBySpeed != null)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
			BclHelpers.WriteNetObject(rotationBySpeed, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentRotationOverLifetimeModule rotationOverLifetime = P_0.rotationOverLifetime;
		if (rotationOverLifetime != null)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
			BclHelpers.WriteNetObject(rotationOverLifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentShapeModule shape = P_0.shape;
		if (shape != null)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.String, P_1);
			BclHelpers.WriteNetObject(shape, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentSizeBySpeedModule sizeBySpeed = P_0.sizeBySpeed;
		if (sizeBySpeed != null)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.String, P_1);
			BclHelpers.WriteNetObject(sizeBySpeed, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentSizeOverLifetimeModule sizeOverLifetime = P_0.sizeOverLifetime;
		if (sizeOverLifetime != null)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.String, P_1);
			BclHelpers.WriteNetObject(sizeOverLifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentSubEmittersModule subEmitters = P_0.subEmitters;
		if (subEmitters != null)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.String, P_1);
			BclHelpers.WriteNetObject(subEmitters, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentTextureSheetAnimationModule textureSheetAnimation = P_0.textureSheetAnimation;
		if (textureSheetAnimation != null)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.String, P_1);
			BclHelpers.WriteNetObject(textureSheetAnimation, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float time = P_0.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
		PersistentTrailModule trails = P_0.trails;
		if (trails != null)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.String, P_1);
			BclHelpers.WriteNetObject(trails, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentTriggerModule trigger = P_0.trigger;
		if (trigger != null)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.String, P_1);
			BclHelpers.WriteNetObject(trigger, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		bool useAutoRandomSeed = P_0.useAutoRandomSeed;
		if (useAutoRandomSeed)
		{
			ProtoWriter.WriteFieldHeader(23, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useAutoRandomSeed, P_1);
		}
		PersistentVelocityOverLifetimeModule velocityOverLifetime = P_0.velocityOverLifetime;
		if (velocityOverLifetime != null)
		{
			ProtoWriter.WriteFieldHeader(24, WireType.String, P_1);
			BclHelpers.WriteNetObject(velocityOverLifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
	}

	private static PersistentParticleSystem Read(PersistentParticleSystem P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem6 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem6, P_1);
					P_0 = persistentParticleSystem6;
				}
				PersistentCollisionModule persistentCollisionModule = (PersistentCollisionModule)BclHelpers.ReadNetObject(P_0.collision, P_1, 258, typeof(PersistentCollisionModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentCollisionModule != null)
				{
					P_0.collision = persistentCollisionModule;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem2 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem2, P_1);
					P_0 = persistentParticleSystem2;
				}
				PersistentColorBySpeedModule persistentColorBySpeedModule = (PersistentColorBySpeedModule)BclHelpers.ReadNetObject(P_0.colorBySpeed, P_1, 258, typeof(PersistentColorBySpeedModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentColorBySpeedModule != null)
				{
					P_0.colorBySpeed = persistentColorBySpeedModule;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem24 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem24, P_1);
					P_0 = persistentParticleSystem24;
				}
				PersistentColorOverLifetimeModule persistentColorOverLifetimeModule = (PersistentColorOverLifetimeModule)BclHelpers.ReadNetObject(P_0.colorOverLifetime, P_1, 258, typeof(PersistentColorOverLifetimeModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentColorOverLifetimeModule != null)
				{
					P_0.colorOverLifetime = persistentColorOverLifetimeModule;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem16 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem16, P_1);
					P_0 = persistentParticleSystem16;
				}
				PersistentEmissionModule persistentEmissionModule = (PersistentEmissionModule)BclHelpers.ReadNetObject(P_0.emission, P_1, 258, typeof(PersistentEmissionModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentEmissionModule != null)
				{
					P_0.emission = persistentEmissionModule;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem14 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem14, P_1);
					P_0 = persistentParticleSystem14;
				}
				PersistentExternalForcesModule persistentExternalForcesModule = (PersistentExternalForcesModule)BclHelpers.ReadNetObject(P_0.externalForces, P_1, 258, typeof(PersistentExternalForcesModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentExternalForcesModule != null)
				{
					P_0.externalForces = persistentExternalForcesModule;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem10 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem10, P_1);
					P_0 = persistentParticleSystem10;
				}
				PersistentForceOverLifetimeModule persistentForceOverLifetimeModule = (PersistentForceOverLifetimeModule)BclHelpers.ReadNetObject(P_0.forceOverLifetime, P_1, 258, typeof(PersistentForceOverLifetimeModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentForceOverLifetimeModule != null)
				{
					P_0.forceOverLifetime = persistentForceOverLifetimeModule;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem9 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem9, P_1);
					P_0 = persistentParticleSystem9;
				}
				PersistentInheritVelocityModule persistentInheritVelocityModule = (PersistentInheritVelocityModule)BclHelpers.ReadNetObject(P_0.inheritVelocity, P_1, 258, typeof(PersistentInheritVelocityModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentInheritVelocityModule != null)
				{
					P_0.inheritVelocity = persistentInheritVelocityModule;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem21 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem21, P_1);
					P_0 = persistentParticleSystem21;
				}
				PersistentLightsModule persistentLightsModule = (PersistentLightsModule)BclHelpers.ReadNetObject(P_0.lights, P_1, 258, typeof(PersistentLightsModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentLightsModule != null)
				{
					P_0.lights = persistentLightsModule;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem13 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem13, P_1);
					P_0 = persistentParticleSystem13;
				}
				PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule = (PersistentLimitVelocityOverLifetimeModule)BclHelpers.ReadNetObject(P_0.limitVelocityOverLifetime, P_1, 258, typeof(PersistentLimitVelocityOverLifetimeModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentLimitVelocityOverLifetimeModule != null)
				{
					P_0.limitVelocityOverLifetime = persistentLimitVelocityOverLifetimeModule;
				}
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem25 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem25, P_1);
					P_0 = persistentParticleSystem25;
				}
				PersistentMainModule persistentMainModule = (PersistentMainModule)BclHelpers.ReadNetObject(P_0.main, P_1, 258, typeof(PersistentMainModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMainModule != null)
				{
					P_0.main = persistentMainModule;
				}
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem20 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem20, P_1);
					P_0 = persistentParticleSystem20;
				}
				PersistentNoiseModule persistentNoiseModule = (PersistentNoiseModule)BclHelpers.ReadNetObject(P_0.noise, P_1, 258, typeof(PersistentNoiseModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentNoiseModule != null)
				{
					P_0.noise = persistentNoiseModule;
				}
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem17 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem17, P_1);
					P_0 = persistentParticleSystem17;
				}
				uint randomSeed = P_1.ReadUInt32();
				P_0.randomSeed = randomSeed;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem5 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem5, P_1);
					P_0 = persistentParticleSystem5;
				}
				PersistentRotationBySpeedModule persistentRotationBySpeedModule = (PersistentRotationBySpeedModule)BclHelpers.ReadNetObject(P_0.rotationBySpeed, P_1, 258, typeof(PersistentRotationBySpeedModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentRotationBySpeedModule != null)
				{
					P_0.rotationBySpeed = persistentRotationBySpeedModule;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem23 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem23, P_1);
					P_0 = persistentParticleSystem23;
				}
				PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule = (PersistentRotationOverLifetimeModule)BclHelpers.ReadNetObject(P_0.rotationOverLifetime, P_1, 258, typeof(PersistentRotationOverLifetimeModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentRotationOverLifetimeModule != null)
				{
					P_0.rotationOverLifetime = persistentRotationOverLifetimeModule;
				}
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem18 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem18, P_1);
					P_0 = persistentParticleSystem18;
				}
				PersistentShapeModule persistentShapeModule = (PersistentShapeModule)BclHelpers.ReadNetObject(P_0.shape, P_1, 258, typeof(PersistentShapeModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentShapeModule != null)
				{
					P_0.shape = persistentShapeModule;
				}
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem12 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem12, P_1);
					P_0 = persistentParticleSystem12;
				}
				PersistentSizeBySpeedModule persistentSizeBySpeedModule = (PersistentSizeBySpeedModule)BclHelpers.ReadNetObject(P_0.sizeBySpeed, P_1, 258, typeof(PersistentSizeBySpeedModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentSizeBySpeedModule != null)
				{
					P_0.sizeBySpeed = persistentSizeBySpeedModule;
				}
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem7 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem7, P_1);
					P_0 = persistentParticleSystem7;
				}
				PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule = (PersistentSizeOverLifetimeModule)BclHelpers.ReadNetObject(P_0.sizeOverLifetime, P_1, 258, typeof(PersistentSizeOverLifetimeModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentSizeOverLifetimeModule != null)
				{
					P_0.sizeOverLifetime = persistentSizeOverLifetimeModule;
				}
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem3 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem3, P_1);
					P_0 = persistentParticleSystem3;
				}
				PersistentSubEmittersModule persistentSubEmittersModule = (PersistentSubEmittersModule)BclHelpers.ReadNetObject(P_0.subEmitters, P_1, 258, typeof(PersistentSubEmittersModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentSubEmittersModule != null)
				{
					P_0.subEmitters = persistentSubEmittersModule;
				}
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem22 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem22, P_1);
					P_0 = persistentParticleSystem22;
				}
				PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule = (PersistentTextureSheetAnimationModule)BclHelpers.ReadNetObject(P_0.textureSheetAnimation, P_1, 258, typeof(PersistentTextureSheetAnimationModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentTextureSheetAnimationModule != null)
				{
					P_0.textureSheetAnimation = persistentTextureSheetAnimationModule;
				}
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem19 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem19, P_1);
					P_0 = persistentParticleSystem19;
				}
				float time = P_1.ReadSingle();
				P_0.time = time;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem15 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem15, P_1);
					P_0 = persistentParticleSystem15;
				}
				PersistentTrailModule persistentTrailModule = (PersistentTrailModule)BclHelpers.ReadNetObject(P_0.trails, P_1, 258, typeof(PersistentTrailModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentTrailModule != null)
				{
					P_0.trails = persistentTrailModule;
				}
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem11 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem11, P_1);
					P_0 = persistentParticleSystem11;
				}
				PersistentTriggerModule persistentTriggerModule = (PersistentTriggerModule)BclHelpers.ReadNetObject(P_0.trigger, P_1, 258, typeof(PersistentTriggerModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentTriggerModule != null)
				{
					P_0.trigger = persistentTriggerModule;
				}
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem8 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem8, P_1);
					P_0 = persistentParticleSystem8;
				}
				bool useAutoRandomSeed = P_1.ReadBoolean();
				P_0.useAutoRandomSeed = useAutoRandomSeed;
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem4 = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem4, P_1);
					P_0 = persistentParticleSystem4;
				}
				PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule = (PersistentVelocityOverLifetimeModule)BclHelpers.ReadNetObject(P_0.velocityOverLifetime, P_1, 258, typeof(PersistentVelocityOverLifetimeModule), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentVelocityOverLifetimeModule != null)
				{
					P_0.velocityOverLifetime = persistentVelocityOverLifetimeModule;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentParticleSystem persistentParticleSystem = new PersistentParticleSystem();
					ProtoReader.NoteObject(persistentParticleSystem, P_1);
					P_0 = persistentParticleSystem;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentParticleSystem persistentParticleSystem26 = new PersistentParticleSystem();
			ProtoReader.NoteObject(persistentParticleSystem26, P_1);
			P_0 = persistentParticleSystem26;
		}
		return P_0;
	}

	private static void Write(PersistentTransform P_0, ProtoWriter P_1)
	{
		PersistentRectTransform obj = P_0 as PersistentRectTransform;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1084, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentTransform))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTransform), P_0.GetType());
		}
		int hierarchyCapacity = P_0.hierarchyCapacity;
		if (hierarchyCapacity != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(hierarchyCapacity, P_1);
		}
		Vector3 localScale = P_0.localScale;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(localScale, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long parent = P_0.parent;
		if (parent != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(parent, P_1);
		}
		Vector3 position = P_0.position;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(position, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Quaternion rotation = P_0.rotation;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(rotation, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentTransform Read(PersistentTransform P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTransform persistentTransform6 = new PersistentTransform();
					ProtoReader.NoteObject(persistentTransform6, P_1);
					P_0 = persistentTransform6;
				}
				int hierarchyCapacity = P_1.ReadInt32();
				P_0.hierarchyCapacity = hierarchyCapacity;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTransform persistentTransform5 = new PersistentTransform();
					ProtoReader.NoteObject(persistentTransform5, P_1);
					P_0 = persistentTransform5;
				}
				Vector3 localScale = P_0.localScale;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(localScale, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 position2 = vector2;
				P_0.localScale = position2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTransform persistentTransform2 = new PersistentTransform();
					ProtoReader.NoteObject(persistentTransform2, P_1);
					P_0 = persistentTransform2;
				}
				long parent = P_1.ReadInt64();
				P_0.parent = parent;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTransform persistentTransform4 = new PersistentTransform();
					ProtoReader.NoteObject(persistentTransform4, P_1);
					P_0 = persistentTransform4;
				}
				Vector3 position = P_0.position;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(position, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 position2 = vector;
				P_0.position = position2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTransform persistentTransform3 = new PersistentTransform();
					ProtoReader.NoteObject(persistentTransform3, P_1);
					P_0 = persistentTransform3;
				}
				Quaternion rotation = P_0.rotation;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Quaternion quaternion = Read(rotation, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Quaternion rotation2 = quaternion;
				P_0.rotation = rotation2;
				break;
			}
			case 1084:
			{
				if (P_0 != null && !(P_0 is PersistentRectTransform))
				{
					PersistentTransform from = P_0;
					PersistentRectTransform persistentRectTransform = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform, P_1);
					P_0 = (PersistentTransform)ProtoReader.Merge(P_1, from, persistentRectTransform);
				}
				PersistentRectTransform obj = (PersistentRectTransform)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRectTransform persistentRectTransform2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRectTransform2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTransform persistentTransform = new PersistentTransform();
					ProtoReader.NoteObject(persistentTransform, P_1);
					P_0 = persistentTransform;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTransform persistentTransform7 = new PersistentTransform();
			ProtoReader.NoteObject(persistentTransform7, P_1);
			P_0 = persistentTransform7;
		}
		return P_0;
	}

	private static void Write(PersistentRectTransform P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRectTransform))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRectTransform), P_0.GetType());
		}
		Vector2 anchorMax = P_0.anchorMax;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(anchorMax, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 anchorMin = P_0.anchorMin;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(anchorMin, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 anchoredPosition = P_0.anchoredPosition;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(anchoredPosition, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 anchoredPosition3D = P_0.anchoredPosition3D;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(anchoredPosition3D, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 offsetMax = P_0.offsetMax;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(offsetMax, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 offsetMin = P_0.offsetMin;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(offsetMin, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 pivot = P_0.pivot;
		ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(pivot, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 sizeDelta = P_0.sizeDelta;
		ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(sizeDelta, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentRectTransform Read(PersistentRectTransform P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform8 = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform8, P_1);
					P_0 = persistentRectTransform8;
				}
				Vector2 anchorMax = P_0.anchorMax;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector7 = Read(anchorMax, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchorMin2 = vector7;
				P_0.anchorMax = anchorMin2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform2 = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform2, P_1);
					P_0 = persistentRectTransform2;
				}
				Vector2 anchorMin = P_0.anchorMin;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(anchorMin, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchorMin2 = vector;
				P_0.anchorMin = anchorMin2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform9 = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform9, P_1);
					P_0 = persistentRectTransform9;
				}
				Vector2 anchoredPosition = P_0.anchoredPosition;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector8 = Read(anchoredPosition, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchorMin2 = vector8;
				P_0.anchoredPosition = anchorMin2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform6 = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform6, P_1);
					P_0 = persistentRectTransform6;
				}
				Vector3 anchoredPosition3D = P_0.anchoredPosition3D;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector5 = Read(anchoredPosition3D, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 anchoredPosition3D2 = vector5;
				P_0.anchoredPosition3D = anchoredPosition3D2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform5 = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform5, P_1);
					P_0 = persistentRectTransform5;
				}
				Vector2 offsetMax = P_0.offsetMax;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector4 = Read(offsetMax, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchorMin2 = vector4;
				P_0.offsetMax = anchorMin2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform3 = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform3, P_1);
					P_0 = persistentRectTransform3;
				}
				Vector2 offsetMin = P_0.offsetMin;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(offsetMin, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchorMin2 = vector2;
				P_0.offsetMin = anchorMin2;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform7 = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform7, P_1);
					P_0 = persistentRectTransform7;
				}
				Vector2 pivot = P_0.pivot;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector6 = Read(pivot, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchorMin2 = vector6;
				P_0.pivot = anchorMin2;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform4 = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform4, P_1);
					P_0 = persistentRectTransform4;
				}
				Vector2 sizeDelta = P_0.sizeDelta;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector3 = Read(sizeDelta, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchorMin2 = vector3;
				P_0.sizeDelta = anchorMin2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRectTransform persistentRectTransform = new PersistentRectTransform();
					ProtoReader.NoteObject(persistentRectTransform, P_1);
					P_0 = persistentRectTransform;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRectTransform persistentRectTransform10 = new PersistentRectTransform();
			ProtoReader.NoteObject(persistentRectTransform10, P_1);
			P_0 = persistentRectTransform10;
		}
		return P_0;
	}

	private static void Write(PersistentWindZone P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentWindZone))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentWindZone), P_0.GetType());
		}
		uint mode = P_0.mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(mode, P_1);
		}
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
		float windMain = P_0.windMain;
		if (windMain != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(windMain, P_1);
		}
		float windPulseFrequency = P_0.windPulseFrequency;
		if (windPulseFrequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(windPulseFrequency, P_1);
		}
		float windPulseMagnitude = P_0.windPulseMagnitude;
		if (windPulseMagnitude != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(windPulseMagnitude, P_1);
		}
		float windTurbulence = P_0.windTurbulence;
		if (windTurbulence != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(windTurbulence, P_1);
		}
	}

	private static PersistentWindZone Read(PersistentWindZone P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentWindZone persistentWindZone2 = new PersistentWindZone();
					ProtoReader.NoteObject(persistentWindZone2, P_1);
					P_0 = persistentWindZone2;
				}
				uint mode = P_1.ReadUInt32();
				P_0.mode = mode;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentWindZone persistentWindZone5 = new PersistentWindZone();
					ProtoReader.NoteObject(persistentWindZone5, P_1);
					P_0 = persistentWindZone5;
				}
				float windMain = P_1.ReadSingle();
				P_0.radius = windMain;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentWindZone persistentWindZone3 = new PersistentWindZone();
					ProtoReader.NoteObject(persistentWindZone3, P_1);
					P_0 = persistentWindZone3;
				}
				float windMain = P_1.ReadSingle();
				P_0.windMain = windMain;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentWindZone persistentWindZone6 = new PersistentWindZone();
					ProtoReader.NoteObject(persistentWindZone6, P_1);
					P_0 = persistentWindZone6;
				}
				float windMain = P_1.ReadSingle();
				P_0.windPulseFrequency = windMain;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentWindZone persistentWindZone7 = new PersistentWindZone();
					ProtoReader.NoteObject(persistentWindZone7, P_1);
					P_0 = persistentWindZone7;
				}
				float windMain = P_1.ReadSingle();
				P_0.windPulseMagnitude = windMain;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentWindZone persistentWindZone4 = new PersistentWindZone();
					ProtoReader.NoteObject(persistentWindZone4, P_1);
					P_0 = persistentWindZone4;
				}
				float windMain = P_1.ReadSingle();
				P_0.windTurbulence = windMain;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentWindZone persistentWindZone = new PersistentWindZone();
					ProtoReader.NoteObject(persistentWindZone, P_1);
					P_0 = persistentWindZone;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentWindZone persistentWindZone8 = new PersistentWindZone();
			ProtoReader.NoteObject(persistentWindZone8, P_1);
			P_0 = persistentWindZone8;
		}
		return P_0;
	}

	private static void Write(PersistentLODGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLODGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLODGroup), P_0.GetType());
		}
		bool animateCrossFading = P_0.animateCrossFading;
		if (animateCrossFading)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(animateCrossFading, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		uint fadeMode = P_0.fadeMode;
		if (fadeMode != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(fadeMode, P_1);
		}
		Vector3 localReferencePoint = P_0.localReferencePoint;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(localReferencePoint, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float size = P_0.size;
		if (size != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(size, P_1);
		}
	}

	private static PersistentLODGroup Read(PersistentLODGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLODGroup persistentLODGroup6 = new PersistentLODGroup();
					ProtoReader.NoteObject(persistentLODGroup6, P_1);
					P_0 = persistentLODGroup6;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.animateCrossFading = enabled;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLODGroup persistentLODGroup2 = new PersistentLODGroup();
					ProtoReader.NoteObject(persistentLODGroup2, P_1);
					P_0 = persistentLODGroup2;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentLODGroup persistentLODGroup5 = new PersistentLODGroup();
					ProtoReader.NoteObject(persistentLODGroup5, P_1);
					P_0 = persistentLODGroup5;
				}
				uint fadeMode = P_1.ReadUInt32();
				P_0.fadeMode = fadeMode;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentLODGroup persistentLODGroup3 = new PersistentLODGroup();
					ProtoReader.NoteObject(persistentLODGroup3, P_1);
					P_0 = persistentLODGroup3;
				}
				Vector3 localReferencePoint = P_0.localReferencePoint;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(localReferencePoint, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 localReferencePoint2 = vector;
				P_0.localReferencePoint = localReferencePoint2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentLODGroup persistentLODGroup4 = new PersistentLODGroup();
					ProtoReader.NoteObject(persistentLODGroup4, P_1);
					P_0 = persistentLODGroup4;
				}
				float size = P_1.ReadSingle();
				P_0.size = size;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLODGroup persistentLODGroup = new PersistentLODGroup();
					ProtoReader.NoteObject(persistentLODGroup, P_1);
					P_0 = persistentLODGroup;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLODGroup persistentLODGroup7 = new PersistentLODGroup();
			ProtoReader.NoteObject(persistentLODGroup7, P_1);
			P_0 = persistentLODGroup7;
		}
		return P_0;
	}

	private static void Write(PersistentRenderer P_0, ProtoWriter P_1)
	{
		PersistentBillboardRenderer obj = P_0 as PersistentBillboardRenderer;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1060, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentSkinnedMeshRenderer obj2 = P_0 as PersistentSkinnedMeshRenderer;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1061, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentTrailRenderer obj3 = P_0 as PersistentTrailRenderer;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1062, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentLineRenderer obj4 = P_0 as PersistentLineRenderer;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1063, WireType.String, P_1);
						token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentMeshRenderer obj5 = P_0 as PersistentMeshRenderer;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1064, WireType.String, P_1);
							token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentSpriteRenderer obj6 = P_0 as PersistentSpriteRenderer;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1065, WireType.String, P_1);
								token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else
							{
								PersistentParticleSystemRenderer obj7 = P_0 as PersistentParticleSystemRenderer;
								if (obj7 != null)
								{
									ProtoWriter.WriteFieldHeader(1066, WireType.String, P_1);
									token = ProtoWriter.StartSubItem(null, P_1);
									Write(obj7, P_1);
									ProtoWriter.EndSubItem(token, P_1);
								}
								else if (P_0.GetType() != typeof(PersistentRenderer))
								{
									TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRenderer), P_0.GetType());
								}
							}
						}
					}
				}
			}
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		long lightProbeProxyVolumeOverride = P_0.lightProbeProxyVolumeOverride;
		if (lightProbeProxyVolumeOverride != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(lightProbeProxyVolumeOverride, P_1);
		}
		uint lightProbeUsage = P_0.lightProbeUsage;
		if (lightProbeUsage != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(lightProbeUsage, P_1);
		}
		int lightmapIndex = P_0.lightmapIndex;
		if (lightmapIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(lightmapIndex, P_1);
		}
		Vector4 lightmapScaleOffset = P_0.lightmapScaleOffset;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(lightmapScaleOffset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint motionVectorGenerationMode = P_0.motionVectorGenerationMode;
		if (motionVectorGenerationMode != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(motionVectorGenerationMode, P_1);
		}
		long probeAnchor = P_0.probeAnchor;
		if (probeAnchor != 0L)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(probeAnchor, P_1);
		}
		int realtimeLightmapIndex = P_0.realtimeLightmapIndex;
		if (realtimeLightmapIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(realtimeLightmapIndex, P_1);
		}
		Vector4 realtimeLightmapScaleOffset = P_0.realtimeLightmapScaleOffset;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(realtimeLightmapScaleOffset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool receiveShadows = P_0.receiveShadows;
		if (receiveShadows)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(receiveShadows, P_1);
		}
		uint reflectionProbeUsage = P_0.reflectionProbeUsage;
		if (reflectionProbeUsage != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(reflectionProbeUsage, P_1);
		}
		uint shadowCastingMode = P_0.shadowCastingMode;
		if (shadowCastingMode != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(shadowCastingMode, P_1);
		}
		long sharedMaterial = P_0.sharedMaterial;
		if (sharedMaterial != 0L)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sharedMaterial, P_1);
		}
		long[] sharedMaterials = P_0.sharedMaterials;
		if (sharedMaterials != null)
		{
			long[] array = sharedMaterials;
			foreach (long value in array)
			{
				ProtoWriter.WriteFieldHeader(14, WireType.Variant, P_1);
				ProtoWriter.WriteInt64(value, P_1);
			}
		}
		int sortingLayerID = P_0.sortingLayerID;
		if (sortingLayerID != 0)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(sortingLayerID, P_1);
		}
		string sortingLayerName = P_0.sortingLayerName;
		if (sortingLayerName != null)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.String, P_1);
			ProtoWriter.WriteString(sortingLayerName, P_1);
		}
		int sortingOrder = P_0.sortingOrder;
		if (sortingOrder != 0)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(sortingOrder, P_1);
		}
	}

	private static PersistentRenderer Read(PersistentRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer15 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer15, P_1);
					P_0 = persistentRenderer15;
				}
				bool receiveShadows = P_1.ReadBoolean();
				P_0.enabled = receiveShadows;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer3 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer3, P_1);
					P_0 = persistentRenderer3;
				}
				long sharedMaterial = P_1.ReadInt64();
				P_0.lightProbeProxyVolumeOverride = sharedMaterial;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer17 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer17, P_1);
					P_0 = persistentRenderer17;
				}
				uint shadowCastingMode = P_1.ReadUInt32();
				P_0.lightProbeUsage = shadowCastingMode;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer14 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer14, P_1);
					P_0 = persistentRenderer14;
				}
				int realtimeLightmapIndex = P_1.ReadInt32();
				P_0.lightmapIndex = realtimeLightmapIndex;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer8 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer8, P_1);
					P_0 = persistentRenderer8;
				}
				Vector4 lightmapScaleOffset = P_0.lightmapScaleOffset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector4 vector = Read(lightmapScaleOffset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector4 lightmapScaleOffset2 = vector;
				P_0.lightmapScaleOffset = lightmapScaleOffset2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer7 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer7, P_1);
					P_0 = persistentRenderer7;
				}
				uint shadowCastingMode = P_1.ReadUInt32();
				P_0.motionVectorGenerationMode = shadowCastingMode;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer12 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer12, P_1);
					P_0 = persistentRenderer12;
				}
				long sharedMaterial = P_1.ReadInt64();
				P_0.probeAnchor = sharedMaterial;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer5 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer5, P_1);
					P_0 = persistentRenderer5;
				}
				int realtimeLightmapIndex = P_1.ReadInt32();
				P_0.realtimeLightmapIndex = realtimeLightmapIndex;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer18 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer18, P_1);
					P_0 = persistentRenderer18;
				}
				Vector4 realtimeLightmapScaleOffset = P_0.realtimeLightmapScaleOffset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector4 vector2 = Read(realtimeLightmapScaleOffset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector4 lightmapScaleOffset2 = vector2;
				P_0.realtimeLightmapScaleOffset = lightmapScaleOffset2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer10 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer10, P_1);
					P_0 = persistentRenderer10;
				}
				bool receiveShadows = P_1.ReadBoolean();
				P_0.receiveShadows = receiveShadows;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer11 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer11, P_1);
					P_0 = persistentRenderer11;
				}
				uint shadowCastingMode = P_1.ReadUInt32();
				P_0.reflectionProbeUsage = shadowCastingMode;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer4 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer4, P_1);
					P_0 = persistentRenderer4;
				}
				uint shadowCastingMode = P_1.ReadUInt32();
				P_0.shadowCastingMode = shadowCastingMode;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer2 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer2, P_1);
					P_0 = persistentRenderer2;
				}
				long sharedMaterial = P_1.ReadInt64();
				P_0.sharedMaterial = sharedMaterial;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer16 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer16, P_1);
					P_0 = persistentRenderer16;
				}
				long[] sharedMaterials = P_0.sharedMaterials;
				List<long> list = new List<long>();
				int realtimeLightmapIndex;
				if (P_1.WireType != WireType.String)
				{
					realtimeLightmapIndex = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt64());
					}
					while (P_1.TryReadFieldHeader(realtimeLightmapIndex));
				}
				else
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt64());
					}
					ProtoReader.EndSubItem(token2, P_1);
				}
				long[] array = new long[(realtimeLightmapIndex = ((sharedMaterials != null) ? sharedMaterials.Length : 0)) + list.Count];
				if (realtimeLightmapIndex != 0)
				{
					sharedMaterials.CopyTo(array, 0);
				}
				list.CopyTo(array, realtimeLightmapIndex);
				array = array;
				if (array != null)
				{
					P_0.sharedMaterials = array;
				}
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer13 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer13, P_1);
					P_0 = persistentRenderer13;
				}
				int realtimeLightmapIndex = P_1.ReadInt32();
				P_0.sortingLayerID = realtimeLightmapIndex;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer9 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer9, P_1);
					P_0 = persistentRenderer9;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.sortingLayerName = text;
				}
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer6 = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer6, P_1);
					P_0 = persistentRenderer6;
				}
				int realtimeLightmapIndex = P_1.ReadInt32();
				P_0.sortingOrder = realtimeLightmapIndex;
				break;
			}
			case 1060:
			{
				if (P_0 != null && !(P_0 is PersistentBillboardRenderer))
				{
					PersistentRenderer from2 = P_0;
					PersistentBillboardRenderer persistentBillboardRenderer = new PersistentBillboardRenderer();
					ProtoReader.NoteObject(persistentBillboardRenderer, P_1);
					P_0 = (PersistentRenderer)ProtoReader.Merge(P_1, from2, persistentBillboardRenderer);
				}
				PersistentBillboardRenderer obj2 = (PersistentBillboardRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBillboardRenderer persistentBillboardRenderer2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBillboardRenderer2;
				break;
			}
			case 1061:
			{
				if (P_0 != null && !(P_0 is PersistentSkinnedMeshRenderer))
				{
					PersistentRenderer from7 = P_0;
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer, P_1);
					P_0 = (PersistentRenderer)ProtoReader.Merge(P_1, from7, persistentSkinnedMeshRenderer);
				}
				PersistentSkinnedMeshRenderer obj7 = (PersistentSkinnedMeshRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSkinnedMeshRenderer2;
				break;
			}
			case 1062:
			{
				if (P_0 != null && !(P_0 is PersistentTrailRenderer))
				{
					PersistentRenderer from6 = P_0;
					PersistentTrailRenderer persistentTrailRenderer = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer, P_1);
					P_0 = (PersistentRenderer)ProtoReader.Merge(P_1, from6, persistentTrailRenderer);
				}
				PersistentTrailRenderer obj6 = (PersistentTrailRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTrailRenderer persistentTrailRenderer2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTrailRenderer2;
				break;
			}
			case 1063:
			{
				if (P_0 != null && !(P_0 is PersistentLineRenderer))
				{
					PersistentRenderer from5 = P_0;
					PersistentLineRenderer persistentLineRenderer = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer, P_1);
					P_0 = (PersistentRenderer)ProtoReader.Merge(P_1, from5, persistentLineRenderer);
				}
				PersistentLineRenderer obj5 = (PersistentLineRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLineRenderer persistentLineRenderer2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLineRenderer2;
				break;
			}
			case 1064:
			{
				if (P_0 != null && !(P_0 is PersistentMeshRenderer))
				{
					PersistentRenderer from4 = P_0;
					PersistentMeshRenderer persistentMeshRenderer = new PersistentMeshRenderer();
					ProtoReader.NoteObject(persistentMeshRenderer, P_1);
					P_0 = (PersistentRenderer)ProtoReader.Merge(P_1, from4, persistentMeshRenderer);
				}
				PersistentMeshRenderer obj4 = (PersistentMeshRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMeshRenderer persistentMeshRenderer2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMeshRenderer2;
				break;
			}
			case 1065:
			{
				if (P_0 != null && !(P_0 is PersistentSpriteRenderer))
				{
					PersistentRenderer from3 = P_0;
					PersistentSpriteRenderer persistentSpriteRenderer = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer, P_1);
					P_0 = (PersistentRenderer)ProtoReader.Merge(P_1, from3, persistentSpriteRenderer);
				}
				PersistentSpriteRenderer obj3 = (PersistentSpriteRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSpriteRenderer persistentSpriteRenderer2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSpriteRenderer2;
				break;
			}
			case 1066:
			{
				if (P_0 != null && !(P_0 is PersistentParticleSystemRenderer))
				{
					PersistentRenderer from = P_0;
					PersistentParticleSystemRenderer persistentParticleSystemRenderer = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer, P_1);
					P_0 = (PersistentRenderer)ProtoReader.Merge(P_1, from, persistentParticleSystemRenderer);
				}
				PersistentParticleSystemRenderer obj = (PersistentParticleSystemRenderer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentParticleSystemRenderer persistentParticleSystemRenderer2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentParticleSystemRenderer2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRenderer persistentRenderer = new PersistentRenderer();
					ProtoReader.NoteObject(persistentRenderer, P_1);
					P_0 = persistentRenderer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRenderer persistentRenderer19 = new PersistentRenderer();
			ProtoReader.NoteObject(persistentRenderer19, P_1);
			P_0 = persistentRenderer19;
		}
		return P_0;
	}

	private static void Write(PersistentParticleSystemRenderer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentParticleSystemRenderer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentParticleSystemRenderer), P_0.GetType());
		}
		uint alignment = P_0.alignment;
		if (alignment != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(alignment, P_1);
		}
		float cameraVelocityScale = P_0.cameraVelocityScale;
		if (cameraVelocityScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(cameraVelocityScale, P_1);
		}
		float lengthScale = P_0.lengthScale;
		if (lengthScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(lengthScale, P_1);
		}
		float maxParticleSize = P_0.maxParticleSize;
		if (maxParticleSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxParticleSize, P_1);
		}
		long mesh = P_0.mesh;
		if (mesh != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(mesh, P_1);
		}
		float minParticleSize = P_0.minParticleSize;
		if (minParticleSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minParticleSize, P_1);
		}
		float normalDirection = P_0.normalDirection;
		if (normalDirection != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(normalDirection, P_1);
		}
		Vector3 pivot = P_0.pivot;
		ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(pivot, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint renderMode = P_0.renderMode;
		if (renderMode != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(renderMode, P_1);
		}
		uint sortMode = P_0.sortMode;
		if (sortMode != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(sortMode, P_1);
		}
		float sortingFudge = P_0.sortingFudge;
		if (sortingFudge != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(sortingFudge, P_1);
		}
		long trailMaterial = P_0.trailMaterial;
		if (trailMaterial != 0L)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(trailMaterial, P_1);
		}
		float velocityScale = P_0.velocityScale;
		if (velocityScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(velocityScale, P_1);
		}
	}

	private static PersistentParticleSystemRenderer Read(PersistentParticleSystemRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer3 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer3, P_1);
					P_0 = persistentParticleSystemRenderer3;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.alignment = renderMode;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer6 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer6, P_1);
					P_0 = persistentParticleSystemRenderer6;
				}
				float velocityScale = P_1.ReadSingle();
				P_0.cameraVelocityScale = velocityScale;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer14 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer14, P_1);
					P_0 = persistentParticleSystemRenderer14;
				}
				float velocityScale = P_1.ReadSingle();
				P_0.lengthScale = velocityScale;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer12 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer12, P_1);
					P_0 = persistentParticleSystemRenderer12;
				}
				float velocityScale = P_1.ReadSingle();
				P_0.maxParticleSize = velocityScale;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer8 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer8, P_1);
					P_0 = persistentParticleSystemRenderer8;
				}
				long trailMaterial = P_1.ReadInt64();
				P_0.mesh = trailMaterial;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer5 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer5, P_1);
					P_0 = persistentParticleSystemRenderer5;
				}
				float velocityScale = P_1.ReadSingle();
				P_0.minParticleSize = velocityScale;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer11 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer11, P_1);
					P_0 = persistentParticleSystemRenderer11;
				}
				float velocityScale = P_1.ReadSingle();
				P_0.normalDirection = velocityScale;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer9 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer9, P_1);
					P_0 = persistentParticleSystemRenderer9;
				}
				Vector3 pivot = P_0.pivot;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(pivot, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 pivot2 = vector;
				P_0.pivot = pivot2;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer2 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer2, P_1);
					P_0 = persistentParticleSystemRenderer2;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.renderMode = renderMode;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer13 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer13, P_1);
					P_0 = persistentParticleSystemRenderer13;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.sortMode = renderMode;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer10 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer10, P_1);
					P_0 = persistentParticleSystemRenderer10;
				}
				float velocityScale = P_1.ReadSingle();
				P_0.sortingFudge = velocityScale;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer7 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer7, P_1);
					P_0 = persistentParticleSystemRenderer7;
				}
				long trailMaterial = P_1.ReadInt64();
				P_0.trailMaterial = trailMaterial;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer4 = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer4, P_1);
					P_0 = persistentParticleSystemRenderer4;
				}
				float velocityScale = P_1.ReadSingle();
				P_0.velocityScale = velocityScale;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentParticleSystemRenderer persistentParticleSystemRenderer = new PersistentParticleSystemRenderer();
					ProtoReader.NoteObject(persistentParticleSystemRenderer, P_1);
					P_0 = persistentParticleSystemRenderer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentParticleSystemRenderer persistentParticleSystemRenderer15 = new PersistentParticleSystemRenderer();
			ProtoReader.NoteObject(persistentParticleSystemRenderer15, P_1);
			P_0 = persistentParticleSystemRenderer15;
		}
		return P_0;
	}

	private static void Write(PersistentSpriteRenderer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSpriteRenderer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSpriteRenderer), P_0.GetType());
		}
		float adaptiveModeThreshold = P_0.adaptiveModeThreshold;
		if (adaptiveModeThreshold != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(adaptiveModeThreshold, P_1);
		}
		Color color = P_0.color;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint drawMode = P_0.drawMode;
		if (drawMode != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(drawMode, P_1);
		}
		bool flipX = P_0.flipX;
		if (flipX)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(flipX, P_1);
		}
		bool flipY = P_0.flipY;
		if (flipY)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(flipY, P_1);
		}
		Vector2 size = P_0.size;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long sprite = P_0.sprite;
		if (sprite != 0L)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sprite, P_1);
		}
		uint tileMode = P_0.tileMode;
		if (tileMode != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(tileMode, P_1);
		}
	}

	private static PersistentSpriteRenderer Read(PersistentSpriteRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer8 = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer8, P_1);
					P_0 = persistentSpriteRenderer8;
				}
				float adaptiveModeThreshold = P_1.ReadSingle();
				P_0.adaptiveModeThreshold = adaptiveModeThreshold;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer2 = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer2, P_1);
					P_0 = persistentSpriteRenderer2;
				}
				Color color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				P_0.color = color3;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer9 = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer9, P_1);
					P_0 = persistentSpriteRenderer9;
				}
				uint tileMode = P_1.ReadUInt32();
				P_0.drawMode = tileMode;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer6 = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer6, P_1);
					P_0 = persistentSpriteRenderer6;
				}
				bool flipY = P_1.ReadBoolean();
				P_0.flipX = flipY;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer5 = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer5, P_1);
					P_0 = persistentSpriteRenderer5;
				}
				bool flipY = P_1.ReadBoolean();
				P_0.flipY = flipY;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer3 = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer3, P_1);
					P_0 = persistentSpriteRenderer3;
				}
				Vector2 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 size2 = vector;
				P_0.size = size2;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer7 = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer7, P_1);
					P_0 = persistentSpriteRenderer7;
				}
				long sprite = P_1.ReadInt64();
				P_0.sprite = sprite;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer4 = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer4, P_1);
					P_0 = persistentSpriteRenderer4;
				}
				uint tileMode = P_1.ReadUInt32();
				P_0.tileMode = tileMode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSpriteRenderer persistentSpriteRenderer = new PersistentSpriteRenderer();
					ProtoReader.NoteObject(persistentSpriteRenderer, P_1);
					P_0 = persistentSpriteRenderer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSpriteRenderer persistentSpriteRenderer10 = new PersistentSpriteRenderer();
			ProtoReader.NoteObject(persistentSpriteRenderer10, P_1);
			P_0 = persistentSpriteRenderer10;
		}
		return P_0;
	}

	private static void Write(PersistentMeshRenderer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMeshRenderer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMeshRenderer), P_0.GetType());
		}
		long additionalVertexStreams = P_0.additionalVertexStreams;
		if (additionalVertexStreams != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(additionalVertexStreams, P_1);
		}
	}

	private static PersistentMeshRenderer Read(PersistentMeshRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentMeshRenderer persistentMeshRenderer = new PersistentMeshRenderer();
					ProtoReader.NoteObject(persistentMeshRenderer, P_1);
					P_0 = persistentMeshRenderer;
				}
				long additionalVertexStreams = P_1.ReadInt64();
				P_0.additionalVertexStreams = additionalVertexStreams;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentMeshRenderer persistentMeshRenderer2 = new PersistentMeshRenderer();
					ProtoReader.NoteObject(persistentMeshRenderer2, P_1);
					P_0 = persistentMeshRenderer2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentMeshRenderer persistentMeshRenderer3 = new PersistentMeshRenderer();
			ProtoReader.NoteObject(persistentMeshRenderer3, P_1);
			P_0 = persistentMeshRenderer3;
		}
		return P_0;
	}

	private static void Write(PersistentLineRenderer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLineRenderer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLineRenderer), P_0.GetType());
		}
		uint alignment = P_0.alignment;
		if (alignment != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(alignment, P_1);
		}
		PersistentGradient colorGradient = P_0.colorGradient;
		if (colorGradient != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			BclHelpers.WriteNetObject(colorGradient, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		Color endColor = P_0.endColor;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(endColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float endWidth = P_0.endWidth;
		if (endWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(endWidth, P_1);
		}
		bool loop = P_0.loop;
		if (loop)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(loop, P_1);
		}
		int numCapVertices = P_0.numCapVertices;
		if (numCapVertices != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(numCapVertices, P_1);
		}
		int numCornerVertices = P_0.numCornerVertices;
		if (numCornerVertices != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(numCornerVertices, P_1);
		}
		int positionCount = P_0.positionCount;
		if (positionCount != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(positionCount, P_1);
		}
		Color startColor = P_0.startColor;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(startColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float startWidth = P_0.startWidth;
		if (startWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startWidth, P_1);
		}
		uint textureMode = P_0.textureMode;
		if (textureMode != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(textureMode, P_1);
		}
		bool useWorldSpace = P_0.useWorldSpace;
		if (useWorldSpace)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useWorldSpace, P_1);
		}
		PersistentAnimationCurve widthCurve = P_0.widthCurve;
		if (widthCurve != null)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(widthCurve, P_1);
			Write((PersistentData)widthCurve, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		float widthMultiplier = P_0.widthMultiplier;
		if (widthMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(widthMultiplier, P_1);
		}
	}

	private static PersistentLineRenderer Read(PersistentLineRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer5 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer5, P_1);
					P_0 = persistentLineRenderer5;
				}
				uint alignment = P_1.ReadUInt32();
				P_0.alignment = alignment;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer8 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer8, P_1);
					P_0 = persistentLineRenderer8;
				}
				PersistentGradient persistentGradient = (PersistentGradient)BclHelpers.ReadNetObject(P_0.colorGradient, P_1, 258, typeof(PersistentGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGradient != null)
				{
					P_0.colorGradient = persistentGradient;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer6 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer6, P_1);
					P_0 = persistentLineRenderer6;
				}
				Color endColor = P_0.endColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(endColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color endColor2 = color;
				P_0.endColor = endColor2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer3 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer3, P_1);
					P_0 = persistentLineRenderer3;
				}
				float startWidth = P_1.ReadSingle();
				P_0.endWidth = startWidth;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer12 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer12, P_1);
					P_0 = persistentLineRenderer12;
				}
				bool useWorldSpace = P_1.ReadBoolean();
				P_0.loop = useWorldSpace;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer10 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer10, P_1);
					P_0 = persistentLineRenderer10;
				}
				int numCapVertices = P_1.ReadInt32();
				P_0.numCapVertices = numCapVertices;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer15 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer15, P_1);
					P_0 = persistentLineRenderer15;
				}
				int numCapVertices = P_1.ReadInt32();
				P_0.numCornerVertices = numCapVertices;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer13 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer13, P_1);
					P_0 = persistentLineRenderer13;
				}
				int numCapVertices = P_1.ReadInt32();
				P_0.positionCount = numCapVertices;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer9 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer9, P_1);
					P_0 = persistentLineRenderer9;
				}
				Color startColor = P_0.startColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(startColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color endColor2 = color2;
				P_0.startColor = endColor2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer2 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer2, P_1);
					P_0 = persistentLineRenderer2;
				}
				float startWidth = P_1.ReadSingle();
				P_0.startWidth = startWidth;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer14 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer14, P_1);
					P_0 = persistentLineRenderer14;
				}
				uint alignment = P_1.ReadUInt32();
				P_0.textureMode = alignment;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer11 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer11, P_1);
					P_0 = persistentLineRenderer11;
				}
				bool useWorldSpace = P_1.ReadBoolean();
				P_0.useWorldSpace = useWorldSpace;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer7 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer7, P_1);
					P_0 = persistentLineRenderer7;
				}
				PersistentAnimationCurve widthCurve = P_0.widthCurve;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimationCurve obj = (PersistentAnimationCurve)Read((PersistentData)widthCurve, P_1);
				ProtoReader.EndSubItem(token, P_1);
				PersistentAnimationCurve persistentAnimationCurve = obj;
				if (persistentAnimationCurve != null)
				{
					P_0.widthCurve = persistentAnimationCurve;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer4 = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer4, P_1);
					P_0 = persistentLineRenderer4;
				}
				float startWidth = P_1.ReadSingle();
				P_0.widthMultiplier = startWidth;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLineRenderer persistentLineRenderer = new PersistentLineRenderer();
					ProtoReader.NoteObject(persistentLineRenderer, P_1);
					P_0 = persistentLineRenderer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLineRenderer persistentLineRenderer16 = new PersistentLineRenderer();
			ProtoReader.NoteObject(persistentLineRenderer16, P_1);
			P_0 = persistentLineRenderer16;
		}
		return P_0;
	}

	private static void Write(PersistentTrailRenderer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTrailRenderer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTrailRenderer), P_0.GetType());
		}
		uint alignment = P_0.alignment;
		if (alignment != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(alignment, P_1);
		}
		bool autodestruct = P_0.autodestruct;
		if (autodestruct)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autodestruct, P_1);
		}
		PersistentGradient colorGradient = P_0.colorGradient;
		if (colorGradient != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(colorGradient, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		Color endColor = P_0.endColor;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(endColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float endWidth = P_0.endWidth;
		if (endWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(endWidth, P_1);
		}
		float minVertexDistance = P_0.minVertexDistance;
		if (minVertexDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minVertexDistance, P_1);
		}
		int numCapVertices = P_0.numCapVertices;
		if (numCapVertices != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(numCapVertices, P_1);
		}
		int numCornerVertices = P_0.numCornerVertices;
		if (numCornerVertices != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(numCornerVertices, P_1);
		}
		Color startColor = P_0.startColor;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(startColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float startWidth = P_0.startWidth;
		if (startWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startWidth, P_1);
		}
		uint textureMode = P_0.textureMode;
		if (textureMode != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(textureMode, P_1);
		}
		float time = P_0.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
		PersistentAnimationCurve widthCurve = P_0.widthCurve;
		if (widthCurve != null)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(widthCurve, P_1);
			Write((PersistentData)widthCurve, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		float widthMultiplier = P_0.widthMultiplier;
		if (widthMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(widthMultiplier, P_1);
		}
	}

	private static PersistentTrailRenderer Read(PersistentTrailRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer8 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer8, P_1);
					P_0 = persistentTrailRenderer8;
				}
				uint alignment = P_1.ReadUInt32();
				P_0.alignment = alignment;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer5 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer5, P_1);
					P_0 = persistentTrailRenderer5;
				}
				bool autodestruct = P_1.ReadBoolean();
				P_0.autodestruct = autodestruct;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer6 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer6, P_1);
					P_0 = persistentTrailRenderer6;
				}
				PersistentGradient persistentGradient = (PersistentGradient)BclHelpers.ReadNetObject(P_0.colorGradient, P_1, 258, typeof(PersistentGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGradient != null)
				{
					P_0.colorGradient = persistentGradient;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer3 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer3, P_1);
					P_0 = persistentTrailRenderer3;
				}
				Color endColor = P_0.endColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(endColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color endColor2 = color;
				P_0.endColor = endColor2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer12 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer12, P_1);
					P_0 = persistentTrailRenderer12;
				}
				float startWidth = P_1.ReadSingle();
				P_0.endWidth = startWidth;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer10 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer10, P_1);
					P_0 = persistentTrailRenderer10;
				}
				float startWidth = P_1.ReadSingle();
				P_0.minVertexDistance = startWidth;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer15 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer15, P_1);
					P_0 = persistentTrailRenderer15;
				}
				int numCornerVertices = P_1.ReadInt32();
				P_0.numCapVertices = numCornerVertices;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer13 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer13, P_1);
					P_0 = persistentTrailRenderer13;
				}
				int numCornerVertices = P_1.ReadInt32();
				P_0.numCornerVertices = numCornerVertices;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer9 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer9, P_1);
					P_0 = persistentTrailRenderer9;
				}
				Color startColor = P_0.startColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(startColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color endColor2 = color2;
				P_0.startColor = endColor2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer2 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer2, P_1);
					P_0 = persistentTrailRenderer2;
				}
				float startWidth = P_1.ReadSingle();
				P_0.startWidth = startWidth;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer14 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer14, P_1);
					P_0 = persistentTrailRenderer14;
				}
				uint alignment = P_1.ReadUInt32();
				P_0.textureMode = alignment;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer11 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer11, P_1);
					P_0 = persistentTrailRenderer11;
				}
				float startWidth = P_1.ReadSingle();
				P_0.time = startWidth;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer7 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer7, P_1);
					P_0 = persistentTrailRenderer7;
				}
				PersistentAnimationCurve widthCurve = P_0.widthCurve;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimationCurve obj = (PersistentAnimationCurve)Read((PersistentData)widthCurve, P_1);
				ProtoReader.EndSubItem(token, P_1);
				PersistentAnimationCurve persistentAnimationCurve = obj;
				if (persistentAnimationCurve != null)
				{
					P_0.widthCurve = persistentAnimationCurve;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer4 = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer4, P_1);
					P_0 = persistentTrailRenderer4;
				}
				float startWidth = P_1.ReadSingle();
				P_0.widthMultiplier = startWidth;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTrailRenderer persistentTrailRenderer = new PersistentTrailRenderer();
					ProtoReader.NoteObject(persistentTrailRenderer, P_1);
					P_0 = persistentTrailRenderer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTrailRenderer persistentTrailRenderer16 = new PersistentTrailRenderer();
			ProtoReader.NoteObject(persistentTrailRenderer16, P_1);
			P_0 = persistentTrailRenderer16;
		}
		return P_0;
	}

	private static void Write(PersistentSkinnedMeshRenderer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSkinnedMeshRenderer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSkinnedMeshRenderer), P_0.GetType());
		}
		long[] bones = P_0.bones;
		if (bones != null)
		{
			long[] array = bones;
			foreach (long value in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteInt64(value, P_1);
			}
		}
		Bounds localBounds = P_0.localBounds;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(localBounds, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint quality = P_0.quality;
		if (quality != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(quality, P_1);
		}
		long rootBone = P_0.rootBone;
		if (rootBone != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(rootBone, P_1);
		}
		long sharedMesh = P_0.sharedMesh;
		if (sharedMesh != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sharedMesh, P_1);
		}
		bool skinnedMotionVectors = P_0.skinnedMotionVectors;
		if (skinnedMotionVectors)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(skinnedMotionVectors, P_1);
		}
		bool updateWhenOffscreen = P_0.updateWhenOffscreen;
		if (updateWhenOffscreen)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(updateWhenOffscreen, P_1);
		}
	}

	private static PersistentSkinnedMeshRenderer Read(PersistentSkinnedMeshRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer5 = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer5, P_1);
					P_0 = persistentSkinnedMeshRenderer5;
				}
				long[] bones = P_0.bones;
				List<long> list = new List<long>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt64());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt64());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				long[] array = new long[(fieldNumber = ((bones != null) ? bones.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					bones.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.bones = array;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer8 = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer8, P_1);
					P_0 = persistentSkinnedMeshRenderer8;
				}
				Bounds localBounds = P_0.localBounds;
				SubItemToken token2 = ProtoReader.StartSubItem(P_1);
				Bounds bounds = Read(localBounds, P_1);
				ProtoReader.EndSubItem(token2, P_1);
				Bounds localBounds2 = bounds;
				P_0.localBounds = localBounds2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer6 = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer6, P_1);
					P_0 = persistentSkinnedMeshRenderer6;
				}
				uint quality = P_1.ReadUInt32();
				P_0.quality = quality;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer3 = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer3, P_1);
					P_0 = persistentSkinnedMeshRenderer3;
				}
				long sharedMesh = P_1.ReadInt64();
				P_0.rootBone = sharedMesh;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer2 = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer2, P_1);
					P_0 = persistentSkinnedMeshRenderer2;
				}
				long sharedMesh = P_1.ReadInt64();
				P_0.sharedMesh = sharedMesh;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer7 = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer7, P_1);
					P_0 = persistentSkinnedMeshRenderer7;
				}
				bool updateWhenOffscreen = P_1.ReadBoolean();
				P_0.skinnedMotionVectors = updateWhenOffscreen;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer4 = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer4, P_1);
					P_0 = persistentSkinnedMeshRenderer4;
				}
				bool updateWhenOffscreen = P_1.ReadBoolean();
				P_0.updateWhenOffscreen = updateWhenOffscreen;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer = new PersistentSkinnedMeshRenderer();
					ProtoReader.NoteObject(persistentSkinnedMeshRenderer, P_1);
					P_0 = persistentSkinnedMeshRenderer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSkinnedMeshRenderer persistentSkinnedMeshRenderer9 = new PersistentSkinnedMeshRenderer();
			ProtoReader.NoteObject(persistentSkinnedMeshRenderer9, P_1);
			P_0 = persistentSkinnedMeshRenderer9;
		}
		return P_0;
	}

	private static void Write(PersistentBillboardRenderer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentBillboardRenderer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBillboardRenderer), P_0.GetType());
		}
		long billboard = P_0.billboard;
		if (billboard != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(billboard, P_1);
		}
	}

	private static PersistentBillboardRenderer Read(PersistentBillboardRenderer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentBillboardRenderer persistentBillboardRenderer = new PersistentBillboardRenderer();
					ProtoReader.NoteObject(persistentBillboardRenderer, P_1);
					P_0 = persistentBillboardRenderer;
				}
				long billboard = P_1.ReadInt64();
				P_0.billboard = billboard;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentBillboardRenderer persistentBillboardRenderer2 = new PersistentBillboardRenderer();
					ProtoReader.NoteObject(persistentBillboardRenderer2, P_1);
					P_0 = persistentBillboardRenderer2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentBillboardRenderer persistentBillboardRenderer3 = new PersistentBillboardRenderer();
			ProtoReader.NoteObject(persistentBillboardRenderer3, P_1);
			P_0 = persistentBillboardRenderer3;
		}
		return P_0;
	}

	private static void Write(PersistentMeshFilter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMeshFilter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMeshFilter), P_0.GetType());
		}
		long sharedMesh = P_0.sharedMesh;
		if (sharedMesh != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sharedMesh, P_1);
		}
	}

	private static PersistentMeshFilter Read(PersistentMeshFilter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentMeshFilter persistentMeshFilter = new PersistentMeshFilter();
					ProtoReader.NoteObject(persistentMeshFilter, P_1);
					P_0 = persistentMeshFilter;
				}
				long sharedMesh = P_1.ReadInt64();
				P_0.sharedMesh = sharedMesh;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentMeshFilter persistentMeshFilter2 = new PersistentMeshFilter();
					ProtoReader.NoteObject(persistentMeshFilter2, P_1);
					P_0 = persistentMeshFilter2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentMeshFilter persistentMeshFilter3 = new PersistentMeshFilter();
			ProtoReader.NoteObject(persistentMeshFilter3, P_1);
			P_0 = persistentMeshFilter3;
		}
		return P_0;
	}

	private static void Write(PersistentOcclusionPortal P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentOcclusionPortal))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentOcclusionPortal), P_0.GetType());
		}
		bool open = P_0.open;
		if (open)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(open, P_1);
		}
	}

	private static PersistentOcclusionPortal Read(PersistentOcclusionPortal P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentOcclusionPortal persistentOcclusionPortal = new PersistentOcclusionPortal();
					ProtoReader.NoteObject(persistentOcclusionPortal, P_1);
					P_0 = persistentOcclusionPortal;
				}
				bool open = P_1.ReadBoolean();
				P_0.open = open;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentOcclusionPortal persistentOcclusionPortal2 = new PersistentOcclusionPortal();
					ProtoReader.NoteObject(persistentOcclusionPortal2, P_1);
					P_0 = persistentOcclusionPortal2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentOcclusionPortal persistentOcclusionPortal3 = new PersistentOcclusionPortal();
			ProtoReader.NoteObject(persistentOcclusionPortal3, P_1);
			P_0 = persistentOcclusionPortal3;
		}
		return P_0;
	}

	private static void Write(PersistentOcclusionArea P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentOcclusionArea))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentOcclusionArea), P_0.GetType());
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 size = P_0.size;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentOcclusionArea Read(PersistentOcclusionArea P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentOcclusionArea persistentOcclusionArea2 = new PersistentOcclusionArea();
					ProtoReader.NoteObject(persistentOcclusionArea2, P_1);
					P_0 = persistentOcclusionArea2;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 center2 = vector;
				P_0.center = center2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentOcclusionArea persistentOcclusionArea3 = new PersistentOcclusionArea();
					ProtoReader.NoteObject(persistentOcclusionArea3, P_1);
					P_0 = persistentOcclusionArea3;
				}
				Vector3 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 center2 = vector2;
				P_0.size = center2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentOcclusionArea persistentOcclusionArea = new PersistentOcclusionArea();
					ProtoReader.NoteObject(persistentOcclusionArea, P_1);
					P_0 = persistentOcclusionArea;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentOcclusionArea persistentOcclusionArea4 = new PersistentOcclusionArea();
			ProtoReader.NoteObject(persistentOcclusionArea4, P_1);
			P_0 = persistentOcclusionArea4;
		}
		return P_0;
	}

	private static void Write(PersistentBehaviour P_0, ProtoWriter P_1)
	{
		PersistentCamera obj = P_0 as PersistentCamera;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1004, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentFlareLayer obj2 = P_0 as PersistentFlareLayer;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1005, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentLensFlare obj3 = P_0 as PersistentLensFlare;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1006, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentProjector obj4 = P_0 as PersistentProjector;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1007, WireType.String, P_1);
						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentSkybox obj5 = P_0 as PersistentSkybox;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1008, WireType.String, P_1);
							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentGUIElement obj6 = P_0 as PersistentGUIElement;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1009, WireType.String, P_1);
								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else
							{
								PersistentGUILayer obj7 = P_0 as PersistentGUILayer;
								if (obj7 != null)
								{
									ProtoWriter.WriteFieldHeader(1010, WireType.String, P_1);
									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
									Write(obj7, P_1);
									ProtoWriter.EndSubItem(token, P_1);
								}
								else
								{
									PersistentLight obj8 = P_0 as PersistentLight;
									if (obj8 != null)
									{
										ProtoWriter.WriteFieldHeader(1011, WireType.String, P_1);
										SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
										Write(obj8, P_1);
										ProtoWriter.EndSubItem(token, P_1);
									}
									else
									{
										PersistentLightProbeGroup obj9 = P_0 as PersistentLightProbeGroup;
										if (obj9 != null)
										{
											ProtoWriter.WriteFieldHeader(1012, WireType.String, P_1);
											SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
											Write(obj9, P_1);
											ProtoWriter.EndSubItem(token, P_1);
										}
										else
										{
											PersistentLightProbeProxyVolume obj10 = P_0 as PersistentLightProbeProxyVolume;
											if (obj10 != null)
											{
												ProtoWriter.WriteFieldHeader(1013, WireType.String, P_1);
												SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
												Write(obj10, P_1);
												ProtoWriter.EndSubItem(token, P_1);
											}
											else
											{
												PersistentMonoBehaviour obj11 = P_0 as PersistentMonoBehaviour;
												if (obj11 != null)
												{
													ProtoWriter.WriteFieldHeader(1014, WireType.String, P_1);
													SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
													Write(obj11, P_1);
													ProtoWriter.EndSubItem(token, P_1);
												}
												else
												{
													PersistentNetworkView obj12 = P_0 as PersistentNetworkView;
													if (obj12 != null)
													{
														ProtoWriter.WriteFieldHeader(1015, WireType.String, P_1);
														SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
														Write(obj12, P_1);
														ProtoWriter.EndSubItem(token, P_1);
													}
													else
													{
														PersistentReflectionProbe obj13 = P_0 as PersistentReflectionProbe;
														if (obj13 != null)
														{
															ProtoWriter.WriteFieldHeader(1016, WireType.String, P_1);
															SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
															Write(obj13, P_1);
															ProtoWriter.EndSubItem(token, P_1);
														}
														else
														{
															PersistentSortingGroup obj14 = P_0 as PersistentSortingGroup;
															if (obj14 != null)
															{
																ProtoWriter.WriteFieldHeader(1017, WireType.String, P_1);
																SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																Write(obj14, P_1);
																ProtoWriter.EndSubItem(token, P_1);
															}
															else
															{
																PersistentConstantForce obj15 = P_0 as PersistentConstantForce;
																if (obj15 != null)
																{
																	ProtoWriter.WriteFieldHeader(1018, WireType.String, P_1);
																	SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																	Write(obj15, P_1);
																	ProtoWriter.EndSubItem(token, P_1);
																}
																else
																{
																	PersistentJoint2D obj16 = P_0 as PersistentJoint2D;
																	if (obj16 != null)
																	{
																		ProtoWriter.WriteFieldHeader(1019, WireType.String, P_1);
																		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																		Write(obj16, P_1);
																		ProtoWriter.EndSubItem(token, P_1);
																	}
																	else
																	{
																		PersistentCollider2D obj17 = P_0 as PersistentCollider2D;
																		if (obj17 != null)
																		{
																			ProtoWriter.WriteFieldHeader(1020, WireType.String, P_1);
																			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																			Write(obj17, P_1);
																			ProtoWriter.EndSubItem(token, P_1);
																		}
																		else
																		{
																			PersistentPhysicsUpdateBehaviour2D obj18 = P_0 as PersistentPhysicsUpdateBehaviour2D;
																			if (obj18 != null)
																			{
																				ProtoWriter.WriteFieldHeader(1021, WireType.String, P_1);
																				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																				Write(obj18, P_1);
																				ProtoWriter.EndSubItem(token, P_1);
																			}
																			else
																			{
																				PersistentEffector2D obj19 = P_0 as PersistentEffector2D;
																				if (obj19 != null)
																				{
																					ProtoWriter.WriteFieldHeader(1022, WireType.String, P_1);
																					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																					Write(obj19, P_1);
																					ProtoWriter.EndSubItem(token, P_1);
																				}
																				else
																				{
																					PersistentNavMeshAgent obj20 = P_0 as PersistentNavMeshAgent;
																					if (obj20 != null)
																					{
																						ProtoWriter.WriteFieldHeader(1023, WireType.String, P_1);
																						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																						Write(obj20, P_1);
																						ProtoWriter.EndSubItem(token, P_1);
																					}
																					else
																					{
																						PersistentNavMeshObstacle obj21 = P_0 as PersistentNavMeshObstacle;
																						if (obj21 != null)
																						{
																							ProtoWriter.WriteFieldHeader(1024, WireType.String, P_1);
																							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																							Write(obj21, P_1);
																							ProtoWriter.EndSubItem(token, P_1);
																						}
																						else
																						{
																							PersistentOffMeshLink obj22 = P_0 as PersistentOffMeshLink;
																							if (obj22 != null)
																							{
																								ProtoWriter.WriteFieldHeader(1025, WireType.String, P_1);
																								SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																								Write(obj22, P_1);
																								ProtoWriter.EndSubItem(token, P_1);
																							}
																							else
																							{
																								PersistentAudioSource obj23 = P_0 as PersistentAudioSource;
																								if (obj23 != null)
																								{
																									ProtoWriter.WriteFieldHeader(1026, WireType.String, P_1);
																									SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																									Write(obj23, P_1);
																									ProtoWriter.EndSubItem(token, P_1);
																								}
																								else
																								{
																									PersistentAudioLowPassFilter obj24 = P_0 as PersistentAudioLowPassFilter;
																									if (obj24 != null)
																									{
																										ProtoWriter.WriteFieldHeader(1027, WireType.String, P_1);
																										SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																										Write(obj24, P_1);
																										ProtoWriter.EndSubItem(token, P_1);
																									}
																									else
																									{
																										PersistentAudioHighPassFilter obj25 = P_0 as PersistentAudioHighPassFilter;
																										if (obj25 != null)
																										{
																											ProtoWriter.WriteFieldHeader(1028, WireType.String, P_1);
																											SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																											Write(obj25, P_1);
																											ProtoWriter.EndSubItem(token, P_1);
																										}
																										else
																										{
																											PersistentAudioReverbFilter obj26 = P_0 as PersistentAudioReverbFilter;
																											if (obj26 != null)
																											{
																												ProtoWriter.WriteFieldHeader(1029, WireType.String, P_1);
																												SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																												Write(obj26, P_1);
																												ProtoWriter.EndSubItem(token, P_1);
																											}
																											else
																											{
																												PersistentAudioBehaviour obj27 = P_0 as PersistentAudioBehaviour;
																												if (obj27 != null)
																												{
																													ProtoWriter.WriteFieldHeader(1030, WireType.String, P_1);
																													SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																													Write(obj27, P_1);
																													ProtoWriter.EndSubItem(token, P_1);
																												}
																												else
																												{
																													PersistentAudioListener obj28 = P_0 as PersistentAudioListener;
																													if (obj28 != null)
																													{
																														ProtoWriter.WriteFieldHeader(1031, WireType.String, P_1);
																														SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																														Write(obj28, P_1);
																														ProtoWriter.EndSubItem(token, P_1);
																													}
																													else
																													{
																														PersistentAudioReverbZone obj29 = P_0 as PersistentAudioReverbZone;
																														if (obj29 != null)
																														{
																															ProtoWriter.WriteFieldHeader(1032, WireType.String, P_1);
																															SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																															Write(obj29, P_1);
																															ProtoWriter.EndSubItem(token, P_1);
																														}
																														else
																														{
																															PersistentAudioDistortionFilter obj30 = P_0 as PersistentAudioDistortionFilter;
																															if (obj30 != null)
																															{
																																ProtoWriter.WriteFieldHeader(1033, WireType.String, P_1);
																																SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																Write(obj30, P_1);
																																ProtoWriter.EndSubItem(token, P_1);
																															}
																															else
																															{
																																PersistentAudioEchoFilter obj31 = P_0 as PersistentAudioEchoFilter;
																																if (obj31 != null)
																																{
																																	ProtoWriter.WriteFieldHeader(1034, WireType.String, P_1);
																																	SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																	Write(obj31, P_1);
																																	ProtoWriter.EndSubItem(token, P_1);
																																}
																																else
																																{
																																	PersistentAudioChorusFilter obj32 = P_0 as PersistentAudioChorusFilter;
																																	if (obj32 != null)
																																	{
																																		ProtoWriter.WriteFieldHeader(1035, WireType.String, P_1);
																																		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																		Write(obj32, P_1);
																																		ProtoWriter.EndSubItem(token, P_1);
																																	}
																																	else
																																	{
																																		PersistentAnimator obj33 = P_0 as PersistentAnimator;
																																		if (obj33 != null)
																																		{
																																			ProtoWriter.WriteFieldHeader(1036, WireType.String, P_1);
																																			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																			Write(obj33, P_1);
																																			ProtoWriter.EndSubItem(token, P_1);
																																		}
																																		else
																																		{
																																			PersistentAnimation obj34 = P_0 as PersistentAnimation;
																																			if (obj34 != null)
																																			{
																																				ProtoWriter.WriteFieldHeader(1037, WireType.String, P_1);
																																				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																				Write(obj34, P_1);
																																				ProtoWriter.EndSubItem(token, P_1);
																																			}
																																			else
																																			{
																																				PersistentTerrain obj35 = P_0 as PersistentTerrain;
																																				if (obj35 != null)
																																				{
																																					ProtoWriter.WriteFieldHeader(1038, WireType.String, P_1);
																																					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																					Write(obj35, P_1);
																																					ProtoWriter.EndSubItem(token, P_1);
																																				}
																																				else
																																				{
																																					PersistentCanvas obj36 = P_0 as PersistentCanvas;
																																					if (obj36 != null)
																																					{
																																						ProtoWriter.WriteFieldHeader(1039, WireType.String, P_1);
																																						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																						Write(obj36, P_1);
																																						ProtoWriter.EndSubItem(token, P_1);
																																					}
																																					else
																																					{
																																						PersistentVideoPlayer obj37 = P_0 as PersistentVideoPlayer;
																																						if (obj37 != null)
																																						{
																																							ProtoWriter.WriteFieldHeader(1040, WireType.String, P_1);
																																							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
																																							Write(obj37, P_1);
																																							ProtoWriter.EndSubItem(token, P_1);
																																						}
																																						else if (P_0.GetType() != typeof(PersistentBehaviour))
																																						{
																																							TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBehaviour), P_0.GetType());
																																						}
																																					}
																																				}
																																			}
																																		}
																																	}
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
	}

	private static PersistentBehaviour Read(PersistentBehaviour P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentBehaviour persistentBehaviour2 = new PersistentBehaviour();
					ProtoReader.NoteObject(persistentBehaviour2, P_1);
					P_0 = persistentBehaviour2;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 1004:
			{
				if (P_0 != null && !(P_0 is PersistentCamera))
				{
					PersistentBehaviour from27 = P_0;
					PersistentCamera persistentCamera = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from27, persistentCamera);
				}
				PersistentCamera obj27 = (PersistentCamera)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCamera persistentCamera2 = Read(obj27, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCamera2;
				break;
			}
			case 1005:
			{
				if (P_0 != null && !(P_0 is PersistentFlareLayer))
				{
					PersistentBehaviour from10 = P_0;
					PersistentFlareLayer persistentFlareLayer = new PersistentFlareLayer();
					ProtoReader.NoteObject(persistentFlareLayer, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from10, persistentFlareLayer);
				}
				PersistentFlareLayer obj10 = (PersistentFlareLayer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentFlareLayer persistentFlareLayer2 = Read(obj10, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentFlareLayer2;
				break;
			}
			case 1006:
			{
				if (P_0 != null && !(P_0 is PersistentLensFlare))
				{
					PersistentBehaviour from37 = P_0;
					PersistentLensFlare persistentLensFlare = new PersistentLensFlare();
					ProtoReader.NoteObject(persistentLensFlare, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from37, persistentLensFlare);
				}
				PersistentLensFlare obj37 = (PersistentLensFlare)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLensFlare persistentLensFlare2 = Read(obj37, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLensFlare2;
				break;
			}
			case 1007:
			{
				if (P_0 != null && !(P_0 is PersistentProjector))
				{
					PersistentBehaviour from25 = P_0;
					PersistentProjector persistentProjector = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from25, persistentProjector);
				}
				PersistentProjector obj25 = (PersistentProjector)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentProjector persistentProjector2 = Read(obj25, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentProjector2;
				break;
			}
			case 1008:
			{
				if (P_0 != null && !(P_0 is PersistentSkybox))
				{
					PersistentBehaviour from6 = P_0;
					PersistentSkybox persistentSkybox = new PersistentSkybox();
					ProtoReader.NoteObject(persistentSkybox, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from6, persistentSkybox);
				}
				PersistentSkybox obj6 = (PersistentSkybox)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSkybox persistentSkybox2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSkybox2;
				break;
			}
			case 1009:
			{
				if (P_0 != null && !(P_0 is PersistentGUIElement))
				{
					PersistentBehaviour from4 = P_0;
					PersistentGUIElement persistentGUIElement = new PersistentGUIElement();
					ProtoReader.NoteObject(persistentGUIElement, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from4, persistentGUIElement);
				}
				PersistentGUIElement obj4 = (PersistentGUIElement)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGUIElement persistentGUIElement2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGUIElement2;
				break;
			}
			case 1010:
			{
				if (P_0 != null && !(P_0 is PersistentGUILayer))
				{
					PersistentBehaviour from19 = P_0;
					PersistentGUILayer persistentGUILayer = new PersistentGUILayer();
					ProtoReader.NoteObject(persistentGUILayer, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from19, persistentGUILayer);
				}
				PersistentGUILayer obj19 = (PersistentGUILayer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGUILayer persistentGUILayer2 = Read(obj19, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGUILayer2;
				break;
			}
			case 1011:
			{
				if (P_0 != null && !(P_0 is PersistentLight))
				{
					PersistentBehaviour from23 = P_0;
					PersistentLight persistentLight = new PersistentLight();
					ProtoReader.NoteObject(persistentLight, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from23, persistentLight);
				}
				PersistentLight obj23 = (PersistentLight)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLight persistentLight2 = Read(obj23, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLight2;
				break;
			}
			case 1012:
			{
				if (P_0 != null && !(P_0 is PersistentLightProbeGroup))
				{
					PersistentBehaviour from35 = P_0;
					PersistentLightProbeGroup persistentLightProbeGroup = new PersistentLightProbeGroup();
					ProtoReader.NoteObject(persistentLightProbeGroup, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from35, persistentLightProbeGroup);
				}
				PersistentLightProbeGroup obj35 = (PersistentLightProbeGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLightProbeGroup persistentLightProbeGroup2 = Read(obj35, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLightProbeGroup2;
				break;
			}
			case 1013:
			{
				if (P_0 != null && !(P_0 is PersistentLightProbeProxyVolume))
				{
					PersistentBehaviour from13 = P_0;
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from13, persistentLightProbeProxyVolume);
				}
				PersistentLightProbeProxyVolume obj13 = (PersistentLightProbeProxyVolume)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLightProbeProxyVolume persistentLightProbeProxyVolume2 = Read(obj13, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLightProbeProxyVolume2;
				break;
			}
			case 1014:
			{
				if (P_0 != null && !(P_0 is PersistentMonoBehaviour))
				{
					PersistentBehaviour from8 = P_0;
					PersistentMonoBehaviour persistentMonoBehaviour = new PersistentMonoBehaviour();
					ProtoReader.NoteObject(persistentMonoBehaviour, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from8, persistentMonoBehaviour);
				}
				PersistentMonoBehaviour obj8 = (PersistentMonoBehaviour)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMonoBehaviour persistentMonoBehaviour2 = Read(obj8, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMonoBehaviour2;
				break;
			}
			case 1015:
			{
				if (P_0 != null && !(P_0 is PersistentNetworkView))
				{
					PersistentBehaviour from28 = P_0;
					PersistentNetworkView persistentNetworkView = new PersistentNetworkView();
					ProtoReader.NoteObject(persistentNetworkView, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from28, persistentNetworkView);
				}
				PersistentNetworkView obj28 = (PersistentNetworkView)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentNetworkView persistentNetworkView2 = Read(obj28, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentNetworkView2;
				break;
			}
			case 1016:
			{
				if (P_0 != null && !(P_0 is PersistentReflectionProbe))
				{
					PersistentBehaviour from24 = P_0;
					PersistentReflectionProbe persistentReflectionProbe = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from24, persistentReflectionProbe);
				}
				PersistentReflectionProbe obj24 = (PersistentReflectionProbe)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentReflectionProbe persistentReflectionProbe2 = Read(obj24, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentReflectionProbe2;
				break;
			}
			case 1017:
			{
				if (P_0 != null && !(P_0 is PersistentSortingGroup))
				{
					PersistentBehaviour from17 = P_0;
					PersistentSortingGroup persistentSortingGroup = new PersistentSortingGroup();
					ProtoReader.NoteObject(persistentSortingGroup, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from17, persistentSortingGroup);
				}
				PersistentSortingGroup obj17 = (PersistentSortingGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSortingGroup persistentSortingGroup2 = Read(obj17, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSortingGroup2;
				break;
			}
			case 1018:
			{
				if (P_0 != null && !(P_0 is PersistentConstantForce))
				{
					PersistentBehaviour from = P_0;
					PersistentConstantForce persistentConstantForce = new PersistentConstantForce();
					ProtoReader.NoteObject(persistentConstantForce, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from, persistentConstantForce);
				}
				PersistentConstantForce obj = (PersistentConstantForce)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentConstantForce persistentConstantForce2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentConstantForce2;
				break;
			}
			case 1019:
			{
				if (P_0 != null && !(P_0 is PersistentJoint2D))
				{
					PersistentBehaviour from32 = P_0;
					PersistentJoint2D persistentJoint2D = new PersistentJoint2D();
					ProtoReader.NoteObject(persistentJoint2D, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from32, persistentJoint2D);
				}
				PersistentJoint2D obj32 = (PersistentJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentJoint2D persistentJoint2D2 = Read(obj32, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentJoint2D2;
				break;
			}
			case 1020:
			{
				if (P_0 != null && !(P_0 is PersistentCollider2D))
				{
					PersistentBehaviour from33 = P_0;
					PersistentCollider2D persistentCollider2D = new PersistentCollider2D();
					ProtoReader.NoteObject(persistentCollider2D, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from33, persistentCollider2D);
				}
				PersistentCollider2D obj33 = (PersistentCollider2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCollider2D persistentCollider2D2 = Read(obj33, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCollider2D2;
				break;
			}
			case 1021:
			{
				if (P_0 != null && !(P_0 is PersistentPhysicsUpdateBehaviour2D))
				{
					PersistentBehaviour from21 = P_0;
					PersistentPhysicsUpdateBehaviour2D persistentPhysicsUpdateBehaviour2D = new PersistentPhysicsUpdateBehaviour2D();
					ProtoReader.NoteObject(persistentPhysicsUpdateBehaviour2D, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from21, persistentPhysicsUpdateBehaviour2D);
				}
				PersistentPhysicsUpdateBehaviour2D obj21 = (PersistentPhysicsUpdateBehaviour2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPhysicsUpdateBehaviour2D persistentPhysicsUpdateBehaviour2D2 = Read(obj21, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPhysicsUpdateBehaviour2D2;
				break;
			}
			case 1022:
			{
				if (P_0 != null && !(P_0 is PersistentEffector2D))
				{
					PersistentBehaviour from12 = P_0;
					PersistentEffector2D persistentEffector2D = new PersistentEffector2D();
					ProtoReader.NoteObject(persistentEffector2D, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from12, persistentEffector2D);
				}
				PersistentEffector2D obj12 = (PersistentEffector2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentEffector2D persistentEffector2D2 = Read(obj12, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentEffector2D2;
				break;
			}
			case 1023:
			{
				if (P_0 != null && !(P_0 is PersistentNavMeshAgent))
				{
					PersistentBehaviour from9 = P_0;
					PersistentNavMeshAgent persistentNavMeshAgent = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from9, persistentNavMeshAgent);
				}
				PersistentNavMeshAgent obj9 = (PersistentNavMeshAgent)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentNavMeshAgent persistentNavMeshAgent2 = Read(obj9, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentNavMeshAgent2;
				break;
			}
			case 1024:
			{
				if (P_0 != null && !(P_0 is PersistentNavMeshObstacle))
				{
					PersistentBehaviour from36 = P_0;
					PersistentNavMeshObstacle persistentNavMeshObstacle = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from36, persistentNavMeshObstacle);
				}
				PersistentNavMeshObstacle obj36 = (PersistentNavMeshObstacle)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentNavMeshObstacle persistentNavMeshObstacle2 = Read(obj36, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentNavMeshObstacle2;
				break;
			}
			case 1025:
			{
				if (P_0 != null && !(P_0 is PersistentOffMeshLink))
				{
					PersistentBehaviour from31 = P_0;
					PersistentOffMeshLink persistentOffMeshLink = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from31, persistentOffMeshLink);
				}
				PersistentOffMeshLink obj31 = (PersistentOffMeshLink)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentOffMeshLink persistentOffMeshLink2 = Read(obj31, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentOffMeshLink2;
				break;
			}
			case 1026:
			{
				if (P_0 != null && !(P_0 is PersistentAudioSource))
				{
					PersistentBehaviour from29 = P_0;
					PersistentAudioSource persistentAudioSource = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from29, persistentAudioSource);
				}
				PersistentAudioSource obj29 = (PersistentAudioSource)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioSource persistentAudioSource2 = Read(obj29, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioSource2;
				break;
			}
			case 1027:
			{
				if (P_0 != null && !(P_0 is PersistentAudioLowPassFilter))
				{
					PersistentBehaviour from20 = P_0;
					PersistentAudioLowPassFilter persistentAudioLowPassFilter = new PersistentAudioLowPassFilter();
					ProtoReader.NoteObject(persistentAudioLowPassFilter, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from20, persistentAudioLowPassFilter);
				}
				PersistentAudioLowPassFilter obj20 = (PersistentAudioLowPassFilter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioLowPassFilter persistentAudioLowPassFilter2 = Read(obj20, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioLowPassFilter2;
				break;
			}
			case 1028:
			{
				if (P_0 != null && !(P_0 is PersistentAudioHighPassFilter))
				{
					PersistentBehaviour from16 = P_0;
					PersistentAudioHighPassFilter persistentAudioHighPassFilter = new PersistentAudioHighPassFilter();
					ProtoReader.NoteObject(persistentAudioHighPassFilter, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from16, persistentAudioHighPassFilter);
				}
				PersistentAudioHighPassFilter obj16 = (PersistentAudioHighPassFilter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioHighPassFilter persistentAudioHighPassFilter2 = Read(obj16, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioHighPassFilter2;
				break;
			}
			case 1029:
			{
				if (P_0 != null && !(P_0 is PersistentAudioReverbFilter))
				{
					PersistentBehaviour from14 = P_0;
					PersistentAudioReverbFilter persistentAudioReverbFilter = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from14, persistentAudioReverbFilter);
				}
				PersistentAudioReverbFilter obj14 = (PersistentAudioReverbFilter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioReverbFilter persistentAudioReverbFilter2 = Read(obj14, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioReverbFilter2;
				break;
			}
			case 1030:
			{
				if (P_0 != null && !(P_0 is PersistentAudioBehaviour))
				{
					PersistentBehaviour from5 = P_0;
					PersistentAudioBehaviour persistentAudioBehaviour = new PersistentAudioBehaviour();
					ProtoReader.NoteObject(persistentAudioBehaviour, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from5, persistentAudioBehaviour);
				}
				PersistentAudioBehaviour obj5 = (PersistentAudioBehaviour)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioBehaviour persistentAudioBehaviour2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioBehaviour2;
				break;
			}
			case 1031:
			{
				if (P_0 != null && !(P_0 is PersistentAudioListener))
				{
					PersistentBehaviour from2 = P_0;
					PersistentAudioListener persistentAudioListener = new PersistentAudioListener();
					ProtoReader.NoteObject(persistentAudioListener, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from2, persistentAudioListener);
				}
				PersistentAudioListener obj2 = (PersistentAudioListener)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioListener persistentAudioListener2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioListener2;
				break;
			}
			case 1032:
			{
				if (P_0 != null && !(P_0 is PersistentAudioReverbZone))
				{
					PersistentBehaviour from34 = P_0;
					PersistentAudioReverbZone persistentAudioReverbZone = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from34, persistentAudioReverbZone);
				}
				PersistentAudioReverbZone obj34 = (PersistentAudioReverbZone)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioReverbZone persistentAudioReverbZone2 = Read(obj34, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioReverbZone2;
				break;
			}
			case 1033:
			{
				if (P_0 != null && !(P_0 is PersistentAudioDistortionFilter))
				{
					PersistentBehaviour from30 = P_0;
					PersistentAudioDistortionFilter persistentAudioDistortionFilter = new PersistentAudioDistortionFilter();
					ProtoReader.NoteObject(persistentAudioDistortionFilter, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from30, persistentAudioDistortionFilter);
				}
				PersistentAudioDistortionFilter obj30 = (PersistentAudioDistortionFilter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioDistortionFilter persistentAudioDistortionFilter2 = Read(obj30, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioDistortionFilter2;
				break;
			}
			case 1034:
			{
				if (P_0 != null && !(P_0 is PersistentAudioEchoFilter))
				{
					PersistentBehaviour from26 = P_0;
					PersistentAudioEchoFilter persistentAudioEchoFilter = new PersistentAudioEchoFilter();
					ProtoReader.NoteObject(persistentAudioEchoFilter, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from26, persistentAudioEchoFilter);
				}
				PersistentAudioEchoFilter obj26 = (PersistentAudioEchoFilter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioEchoFilter persistentAudioEchoFilter2 = Read(obj26, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioEchoFilter2;
				break;
			}
			case 1035:
			{
				if (P_0 != null && !(P_0 is PersistentAudioChorusFilter))
				{
					PersistentBehaviour from22 = P_0;
					PersistentAudioChorusFilter persistentAudioChorusFilter = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from22, persistentAudioChorusFilter);
				}
				PersistentAudioChorusFilter obj22 = (PersistentAudioChorusFilter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAudioChorusFilter persistentAudioChorusFilter2 = Read(obj22, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAudioChorusFilter2;
				break;
			}
			case 1036:
			{
				if (P_0 != null && !(P_0 is PersistentAnimator))
				{
					PersistentBehaviour from18 = P_0;
					PersistentAnimator persistentAnimator = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from18, persistentAnimator);
				}
				PersistentAnimator obj18 = (PersistentAnimator)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimator persistentAnimator2 = Read(obj18, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAnimator2;
				break;
			}
			case 1037:
			{
				if (P_0 != null && !(P_0 is PersistentAnimation))
				{
					PersistentBehaviour from15 = P_0;
					PersistentAnimation persistentAnimation = new PersistentAnimation();
					ProtoReader.NoteObject(persistentAnimation, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from15, persistentAnimation);
				}
				PersistentAnimation obj15 = (PersistentAnimation)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimation persistentAnimation2 = Read(obj15, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAnimation2;
				break;
			}
			case 1038:
			{
				if (P_0 != null && !(P_0 is PersistentTerrain))
				{
					PersistentBehaviour from11 = P_0;
					PersistentTerrain persistentTerrain = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from11, persistentTerrain);
				}
				PersistentTerrain obj11 = (PersistentTerrain)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTerrain persistentTerrain2 = Read(obj11, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTerrain2;
				break;
			}
			case 1039:
			{
				if (P_0 != null && !(P_0 is PersistentCanvas))
				{
					PersistentBehaviour from7 = P_0;
					PersistentCanvas persistentCanvas = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from7, persistentCanvas);
				}
				PersistentCanvas obj7 = (PersistentCanvas)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCanvas persistentCanvas2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCanvas2;
				break;
			}
			case 1040:
			{
				if (P_0 != null && !(P_0 is PersistentVideoPlayer))
				{
					PersistentBehaviour from3 = P_0;
					PersistentVideoPlayer persistentVideoPlayer = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer, P_1);
					P_0 = (PersistentBehaviour)ProtoReader.Merge(P_1, from3, persistentVideoPlayer);
				}
				PersistentVideoPlayer obj3 = (PersistentVideoPlayer)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentVideoPlayer persistentVideoPlayer2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentVideoPlayer2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBehaviour persistentBehaviour = new PersistentBehaviour();
					ProtoReader.NoteObject(persistentBehaviour, P_1);
					P_0 = persistentBehaviour;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBehaviour persistentBehaviour3 = new PersistentBehaviour();
			ProtoReader.NoteObject(persistentBehaviour3, P_1);
			P_0 = persistentBehaviour3;
		}
		return P_0;
	}

	private static void Write(PersistentVideoPlayer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentVideoPlayer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentVideoPlayer), P_0.GetType());
		}
		uint aspectRatio = P_0.aspectRatio;
		if (aspectRatio != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(aspectRatio, P_1);
		}
		uint audioOutputMode = P_0.audioOutputMode;
		if (audioOutputMode != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(audioOutputMode, P_1);
		}
		long clip = P_0.clip;
		if (clip != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(clip, P_1);
		}
		ushort controlledAudioTrackCount = P_0.controlledAudioTrackCount;
		if (controlledAudioTrackCount != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteUInt16(controlledAudioTrackCount, P_1);
		}
		long frame = P_0.frame;
		if (frame != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(frame, P_1);
		}
		bool isLooping = P_0.isLooping;
		if (isLooping)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isLooping, P_1);
		}
		bool playOnAwake = P_0.playOnAwake;
		if (playOnAwake)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(playOnAwake, P_1);
		}
		float playbackSpeed = P_0.playbackSpeed;
		if (playbackSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(playbackSpeed, P_1);
		}
		uint renderMode = P_0.renderMode;
		if (renderMode != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(renderMode, P_1);
		}
		bool sendFrameReadyEvents = P_0.sendFrameReadyEvents;
		if (sendFrameReadyEvents)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(sendFrameReadyEvents, P_1);
		}
		bool skipOnDrop = P_0.skipOnDrop;
		if (skipOnDrop)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(skipOnDrop, P_1);
		}
		uint source = P_0.source;
		if (source != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(source, P_1);
		}
		long targetCamera = P_0.targetCamera;
		if (targetCamera != 0L)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(targetCamera, P_1);
		}
		float targetCameraAlpha = P_0.targetCameraAlpha;
		if (targetCameraAlpha != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(targetCameraAlpha, P_1);
		}
		string targetMaterialProperty = P_0.targetMaterialProperty;
		if (targetMaterialProperty != null)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.String, P_1);
			ProtoWriter.WriteString(targetMaterialProperty, P_1);
		}
		long targetMaterialRenderer = P_0.targetMaterialRenderer;
		if (targetMaterialRenderer != 0L)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(targetMaterialRenderer, P_1);
		}
		long targetTexture = P_0.targetTexture;
		if (targetTexture != 0L)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(targetTexture, P_1);
		}
		double time = P_0.time;
		if (time != 0.0)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Fixed64, P_1);
			ProtoWriter.WriteDouble(time, P_1);
		}
		uint timeSource = P_0.timeSource;
		if (timeSource != 0)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(timeSource, P_1);
		}
		string url = P_0.url;
		if (url != null)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.String, P_1);
			ProtoWriter.WriteString(url, P_1);
		}
		bool waitForFirstFrame = P_0.waitForFirstFrame;
		if (waitForFirstFrame)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(waitForFirstFrame, P_1);
		}
	}

	private static PersistentVideoPlayer Read(PersistentVideoPlayer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer10 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer10, P_1);
					P_0 = persistentVideoPlayer10;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.aspectRatio = renderMode;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer16 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer16, P_1);
					P_0 = persistentVideoPlayer16;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.audioOutputMode = renderMode;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer5 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer5, P_1);
					P_0 = persistentVideoPlayer5;
				}
				long clip = P_1.ReadInt64();
				P_0.clip = clip;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer6 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer6, P_1);
					P_0 = persistentVideoPlayer6;
				}
				ushort controlledAudioTrackCount = P_1.ReadUInt16();
				P_0.controlledAudioTrackCount = controlledAudioTrackCount;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer19 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer19, P_1);
					P_0 = persistentVideoPlayer19;
				}
				long clip = P_1.ReadInt64();
				P_0.frame = clip;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer12 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer12, P_1);
					P_0 = persistentVideoPlayer12;
				}
				bool sendFrameReadyEvents = P_1.ReadBoolean();
				P_0.isLooping = sendFrameReadyEvents;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer21 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer21, P_1);
					P_0 = persistentVideoPlayer21;
				}
				bool sendFrameReadyEvents = P_1.ReadBoolean();
				P_0.playOnAwake = sendFrameReadyEvents;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer18 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer18, P_1);
					P_0 = persistentVideoPlayer18;
				}
				float targetCameraAlpha = P_1.ReadSingle();
				P_0.playbackSpeed = targetCameraAlpha;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer8 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer8, P_1);
					P_0 = persistentVideoPlayer8;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.renderMode = renderMode;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer2 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer2, P_1);
					P_0 = persistentVideoPlayer2;
				}
				bool sendFrameReadyEvents = P_1.ReadBoolean();
				P_0.sendFrameReadyEvents = sendFrameReadyEvents;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer22 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer22, P_1);
					P_0 = persistentVideoPlayer22;
				}
				bool sendFrameReadyEvents = P_1.ReadBoolean();
				P_0.skipOnDrop = sendFrameReadyEvents;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer15 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer15, P_1);
					P_0 = persistentVideoPlayer15;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.source = renderMode;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer13 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer13, P_1);
					P_0 = persistentVideoPlayer13;
				}
				long clip = P_1.ReadInt64();
				P_0.targetCamera = clip;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer9 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer9, P_1);
					P_0 = persistentVideoPlayer9;
				}
				float targetCameraAlpha = P_1.ReadSingle();
				P_0.targetCameraAlpha = targetCameraAlpha;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer3 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer3, P_1);
					P_0 = persistentVideoPlayer3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.targetMaterialProperty = text;
				}
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer20 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer20, P_1);
					P_0 = persistentVideoPlayer20;
				}
				long clip = P_1.ReadInt64();
				P_0.targetMaterialRenderer = clip;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer17 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer17, P_1);
					P_0 = persistentVideoPlayer17;
				}
				long clip = P_1.ReadInt64();
				P_0.targetTexture = clip;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer14 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer14, P_1);
					P_0 = persistentVideoPlayer14;
				}
				double time = P_1.ReadDouble();
				P_0.time = time;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer11 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer11, P_1);
					P_0 = persistentVideoPlayer11;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.timeSource = renderMode;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer7 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer7, P_1);
					P_0 = persistentVideoPlayer7;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.url = text;
				}
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer4 = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer4, P_1);
					P_0 = persistentVideoPlayer4;
				}
				bool sendFrameReadyEvents = P_1.ReadBoolean();
				P_0.waitForFirstFrame = sendFrameReadyEvents;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentVideoPlayer persistentVideoPlayer = new PersistentVideoPlayer();
					ProtoReader.NoteObject(persistentVideoPlayer, P_1);
					P_0 = persistentVideoPlayer;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentVideoPlayer persistentVideoPlayer23 = new PersistentVideoPlayer();
			ProtoReader.NoteObject(persistentVideoPlayer23, P_1);
			P_0 = persistentVideoPlayer23;
		}
		return P_0;
	}

	private static void Write(PersistentCanvas P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCanvas))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCanvas), P_0.GetType());
		}
		uint additionalShaderChannels = P_0.additionalShaderChannels;
		if (additionalShaderChannels != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(additionalShaderChannels, P_1);
		}
		float normalizedSortingGridSize = P_0.normalizedSortingGridSize;
		if (normalizedSortingGridSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(normalizedSortingGridSize, P_1);
		}
		bool overridePixelPerfect = P_0.overridePixelPerfect;
		if (overridePixelPerfect)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(overridePixelPerfect, P_1);
		}
		bool overrideSorting = P_0.overrideSorting;
		if (overrideSorting)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(overrideSorting, P_1);
		}
		bool pixelPerfect = P_0.pixelPerfect;
		if (pixelPerfect)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(pixelPerfect, P_1);
		}
		float planeDistance = P_0.planeDistance;
		if (planeDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(planeDistance, P_1);
		}
		float referencePixelsPerUnit = P_0.referencePixelsPerUnit;
		if (referencePixelsPerUnit != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(referencePixelsPerUnit, P_1);
		}
		uint renderMode = P_0.renderMode;
		if (renderMode != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(renderMode, P_1);
		}
		float scaleFactor = P_0.scaleFactor;
		if (scaleFactor != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(scaleFactor, P_1);
		}
		int sortingLayerID = P_0.sortingLayerID;
		if (sortingLayerID != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(sortingLayerID, P_1);
		}
		string sortingLayerName = P_0.sortingLayerName;
		if (sortingLayerName != null)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
			ProtoWriter.WriteString(sortingLayerName, P_1);
		}
		int sortingOrder = P_0.sortingOrder;
		if (sortingOrder != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(sortingOrder, P_1);
		}
		int targetDisplay = P_0.targetDisplay;
		if (targetDisplay != 0)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(targetDisplay, P_1);
		}
		long worldCamera = P_0.worldCamera;
		if (worldCamera != 0L)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(worldCamera, P_1);
		}
	}

	private static PersistentCanvas Read(PersistentCanvas P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas5 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas5, P_1);
					P_0 = persistentCanvas5;
				}
				uint additionalShaderChannels = P_1.ReadUInt32();
				P_0.additionalShaderChannels = additionalShaderChannels;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas8 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas8, P_1);
					P_0 = persistentCanvas8;
				}
				float referencePixelsPerUnit = P_1.ReadSingle();
				P_0.normalizedSortingGridSize = referencePixelsPerUnit;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas6 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas6, P_1);
					P_0 = persistentCanvas6;
				}
				bool overridePixelPerfect = P_1.ReadBoolean();
				P_0.overridePixelPerfect = overridePixelPerfect;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas14 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas14, P_1);
					P_0 = persistentCanvas14;
				}
				bool overridePixelPerfect = P_1.ReadBoolean();
				P_0.overrideSorting = overridePixelPerfect;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas15 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas15, P_1);
					P_0 = persistentCanvas15;
				}
				bool overridePixelPerfect = P_1.ReadBoolean();
				P_0.pixelPerfect = overridePixelPerfect;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas12 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas12, P_1);
					P_0 = persistentCanvas12;
				}
				float referencePixelsPerUnit = P_1.ReadSingle();
				P_0.planeDistance = referencePixelsPerUnit;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas3 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas3, P_1);
					P_0 = persistentCanvas3;
				}
				float referencePixelsPerUnit = P_1.ReadSingle();
				P_0.referencePixelsPerUnit = referencePixelsPerUnit;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas11 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas11, P_1);
					P_0 = persistentCanvas11;
				}
				uint additionalShaderChannels = P_1.ReadUInt32();
				P_0.renderMode = additionalShaderChannels;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas9 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas9, P_1);
					P_0 = persistentCanvas9;
				}
				float referencePixelsPerUnit = P_1.ReadSingle();
				P_0.scaleFactor = referencePixelsPerUnit;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas2 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas2, P_1);
					P_0 = persistentCanvas2;
				}
				int sortingLayerID = P_1.ReadInt32();
				P_0.sortingLayerID = sortingLayerID;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas13 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas13, P_1);
					P_0 = persistentCanvas13;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.sortingLayerName = text;
				}
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas10 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas10, P_1);
					P_0 = persistentCanvas10;
				}
				int sortingLayerID = P_1.ReadInt32();
				P_0.sortingOrder = sortingLayerID;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas7 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas7, P_1);
					P_0 = persistentCanvas7;
				}
				int sortingLayerID = P_1.ReadInt32();
				P_0.targetDisplay = sortingLayerID;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas4 = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas4, P_1);
					P_0 = persistentCanvas4;
				}
				long worldCamera = P_1.ReadInt64();
				P_0.worldCamera = worldCamera;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCanvas persistentCanvas = new PersistentCanvas();
					ProtoReader.NoteObject(persistentCanvas, P_1);
					P_0 = persistentCanvas;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCanvas persistentCanvas16 = new PersistentCanvas();
			ProtoReader.NoteObject(persistentCanvas16, P_1);
			P_0 = persistentCanvas16;
		}
		return P_0;
	}

	private static void Write(PersistentTerrain P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTerrain))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTerrain), P_0.GetType());
		}
		float basemapDistance = P_0.basemapDistance;
		if (basemapDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(basemapDistance, P_1);
		}
		bool castShadows = P_0.castShadows;
		if (castShadows)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(castShadows, P_1);
		}
		bool collectDetailPatches = P_0.collectDetailPatches;
		if (collectDetailPatches)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(collectDetailPatches, P_1);
		}
		float detailObjectDensity = P_0.detailObjectDensity;
		if (detailObjectDensity != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(detailObjectDensity, P_1);
		}
		float detailObjectDistance = P_0.detailObjectDistance;
		if (detailObjectDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(detailObjectDistance, P_1);
		}
		bool drawHeightmap = P_0.drawHeightmap;
		if (drawHeightmap)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(drawHeightmap, P_1);
		}
		bool drawTreesAndFoliage = P_0.drawTreesAndFoliage;
		if (drawTreesAndFoliage)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(drawTreesAndFoliage, P_1);
		}
		uint editorRenderFlags = P_0.editorRenderFlags;
		if (editorRenderFlags != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(editorRenderFlags, P_1);
		}
		int heightmapMaximumLOD = P_0.heightmapMaximumLOD;
		if (heightmapMaximumLOD != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(heightmapMaximumLOD, P_1);
		}
		float heightmapPixelError = P_0.heightmapPixelError;
		if (heightmapPixelError != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(heightmapPixelError, P_1);
		}
		float legacyShininess = P_0.legacyShininess;
		if (legacyShininess != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(legacyShininess, P_1);
		}
		Color legacySpecular = P_0.legacySpecular;
		ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(legacySpecular, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		int lightmapIndex = P_0.lightmapIndex;
		if (lightmapIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(lightmapIndex, P_1);
		}
		Vector4 lightmapScaleOffset = P_0.lightmapScaleOffset;
		ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(lightmapScaleOffset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long materialTemplate = P_0.materialTemplate;
		if (materialTemplate != 0L)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(materialTemplate, P_1);
		}
		uint materialType = P_0.materialType;
		if (materialType != 0)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(materialType, P_1);
		}
		int realtimeLightmapIndex = P_0.realtimeLightmapIndex;
		if (realtimeLightmapIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(realtimeLightmapIndex, P_1);
		}
		Vector4 realtimeLightmapScaleOffset = P_0.realtimeLightmapScaleOffset;
		ProtoWriter.WriteFieldHeader(18, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(realtimeLightmapScaleOffset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint reflectionProbeUsage = P_0.reflectionProbeUsage;
		if (reflectionProbeUsage != 0)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(reflectionProbeUsage, P_1);
		}
		long terrainData = P_0.terrainData;
		if (terrainData != 0L)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(terrainData, P_1);
		}
		float treeBillboardDistance = P_0.treeBillboardDistance;
		if (treeBillboardDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(treeBillboardDistance, P_1);
		}
		float treeCrossFadeLength = P_0.treeCrossFadeLength;
		if (treeCrossFadeLength != 0f)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(treeCrossFadeLength, P_1);
		}
		float treeDistance = P_0.treeDistance;
		if (treeDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(23, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(treeDistance, P_1);
		}
		float treeLODBiasMultiplier = P_0.treeLODBiasMultiplier;
		if (treeLODBiasMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(24, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(treeLODBiasMultiplier, P_1);
		}
		int treeMaximumFullLODCount = P_0.treeMaximumFullLODCount;
		if (treeMaximumFullLODCount != 0)
		{
			ProtoWriter.WriteFieldHeader(25, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(treeMaximumFullLODCount, P_1);
		}
	}

	private static PersistentTerrain Read(PersistentTerrain P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain21 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain21, P_1);
					P_0 = persistentTerrain21;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.basemapDistance = legacyShininess;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain23 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain23, P_1);
					P_0 = persistentTerrain23;
				}
				bool drawTreesAndFoliage = P_1.ReadBoolean();
				P_0.castShadows = drawTreesAndFoliage;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain15 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain15, P_1);
					P_0 = persistentTerrain15;
				}
				bool drawTreesAndFoliage = P_1.ReadBoolean();
				P_0.collectDetailPatches = drawTreesAndFoliage;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain8 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain8, P_1);
					P_0 = persistentTerrain8;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.detailObjectDensity = legacyShininess;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain26 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain26, P_1);
					P_0 = persistentTerrain26;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.detailObjectDistance = legacyShininess;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain24 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain24, P_1);
					P_0 = persistentTerrain24;
				}
				bool drawTreesAndFoliage = P_1.ReadBoolean();
				P_0.drawHeightmap = drawTreesAndFoliage;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain12 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain12, P_1);
					P_0 = persistentTerrain12;
				}
				bool drawTreesAndFoliage = P_1.ReadBoolean();
				P_0.drawTreesAndFoliage = drawTreesAndFoliage;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain5 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain5, P_1);
					P_0 = persistentTerrain5;
				}
				uint editorRenderFlags = P_1.ReadUInt32();
				P_0.editorRenderFlags = editorRenderFlags;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain17 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain17, P_1);
					P_0 = persistentTerrain17;
				}
				int realtimeLightmapIndex = P_1.ReadInt32();
				P_0.heightmapMaximumLOD = realtimeLightmapIndex;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain14 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain14, P_1);
					P_0 = persistentTerrain14;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.heightmapPixelError = legacyShininess;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain6 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain6, P_1);
					P_0 = persistentTerrain6;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.legacyShininess = legacyShininess;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain3 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain3, P_1);
					P_0 = persistentTerrain3;
				}
				Color legacySpecular = P_0.legacySpecular;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(legacySpecular, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color legacySpecular2 = color;
				P_0.legacySpecular = legacySpecular2;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain20 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain20, P_1);
					P_0 = persistentTerrain20;
				}
				int realtimeLightmapIndex = P_1.ReadInt32();
				P_0.lightmapIndex = realtimeLightmapIndex;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain18 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain18, P_1);
					P_0 = persistentTerrain18;
				}
				Vector4 lightmapScaleOffset = P_0.lightmapScaleOffset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector4 vector = Read(lightmapScaleOffset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector4 lightmapScaleOffset2 = vector;
				P_0.lightmapScaleOffset = lightmapScaleOffset2;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain11 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain11, P_1);
					P_0 = persistentTerrain11;
				}
				long materialTemplate = P_1.ReadInt64();
				P_0.materialTemplate = materialTemplate;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain9 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain9, P_1);
					P_0 = persistentTerrain9;
				}
				uint editorRenderFlags = P_1.ReadUInt32();
				P_0.materialType = editorRenderFlags;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain2 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain2, P_1);
					P_0 = persistentTerrain2;
				}
				int realtimeLightmapIndex = P_1.ReadInt32();
				P_0.realtimeLightmapIndex = realtimeLightmapIndex;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain25 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain25, P_1);
					P_0 = persistentTerrain25;
				}
				Vector4 realtimeLightmapScaleOffset = P_0.realtimeLightmapScaleOffset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector4 vector2 = Read(realtimeLightmapScaleOffset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector4 lightmapScaleOffset2 = vector2;
				P_0.realtimeLightmapScaleOffset = lightmapScaleOffset2;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain22 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain22, P_1);
					P_0 = persistentTerrain22;
				}
				uint editorRenderFlags = P_1.ReadUInt32();
				P_0.reflectionProbeUsage = editorRenderFlags;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain19 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain19, P_1);
					P_0 = persistentTerrain19;
				}
				long materialTemplate = P_1.ReadInt64();
				P_0.terrainData = materialTemplate;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain16 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain16, P_1);
					P_0 = persistentTerrain16;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.treeBillboardDistance = legacyShininess;
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain13 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain13, P_1);
					P_0 = persistentTerrain13;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.treeCrossFadeLength = legacyShininess;
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain10 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain10, P_1);
					P_0 = persistentTerrain10;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.treeDistance = legacyShininess;
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain7 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain7, P_1);
					P_0 = persistentTerrain7;
				}
				float legacyShininess = P_1.ReadSingle();
				P_0.treeLODBiasMultiplier = legacyShininess;
				break;
			}
			case 25:
			{
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain4 = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain4, P_1);
					P_0 = persistentTerrain4;
				}
				int realtimeLightmapIndex = P_1.ReadInt32();
				P_0.treeMaximumFullLODCount = realtimeLightmapIndex;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTerrain persistentTerrain = new PersistentTerrain();
					ProtoReader.NoteObject(persistentTerrain, P_1);
					P_0 = persistentTerrain;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTerrain persistentTerrain27 = new PersistentTerrain();
			ProtoReader.NoteObject(persistentTerrain27, P_1);
			P_0 = persistentTerrain27;
		}
		return P_0;
	}

	private static void Write(PersistentAnimation P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAnimation))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAnimation), P_0.GetType());
		}
		bool animatePhysics = P_0.animatePhysics;
		if (animatePhysics)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(animatePhysics, P_1);
		}
		long clip = P_0.clip;
		if (clip != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(clip, P_1);
		}
		uint cullingType = P_0.cullingType;
		if (cullingType != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(cullingType, P_1);
		}
		Bounds localBounds = P_0.localBounds;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(localBounds, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool playAutomatically = P_0.playAutomatically;
		if (playAutomatically)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(playAutomatically, P_1);
		}
		uint wrapMode = P_0.wrapMode;
		if (wrapMode != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(wrapMode, P_1);
		}
	}

	private static PersistentAnimation Read(PersistentAnimation P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAnimation persistentAnimation2 = new PersistentAnimation();
					ProtoReader.NoteObject(persistentAnimation2, P_1);
					P_0 = persistentAnimation2;
				}
				bool animatePhysics = P_1.ReadBoolean();
				P_0.animatePhysics = animatePhysics;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAnimation persistentAnimation5 = new PersistentAnimation();
					ProtoReader.NoteObject(persistentAnimation5, P_1);
					P_0 = persistentAnimation5;
				}
				long clip = P_1.ReadInt64();
				P_0.clip = clip;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAnimation persistentAnimation3 = new PersistentAnimation();
					ProtoReader.NoteObject(persistentAnimation3, P_1);
					P_0 = persistentAnimation3;
				}
				uint cullingType = P_1.ReadUInt32();
				P_0.cullingType = cullingType;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAnimation persistentAnimation6 = new PersistentAnimation();
					ProtoReader.NoteObject(persistentAnimation6, P_1);
					P_0 = persistentAnimation6;
				}
				Bounds localBounds = P_0.localBounds;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Bounds bounds = Read(localBounds, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Bounds localBounds2 = bounds;
				P_0.localBounds = localBounds2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentAnimation persistentAnimation7 = new PersistentAnimation();
					ProtoReader.NoteObject(persistentAnimation7, P_1);
					P_0 = persistentAnimation7;
				}
				bool animatePhysics = P_1.ReadBoolean();
				P_0.playAutomatically = animatePhysics;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentAnimation persistentAnimation4 = new PersistentAnimation();
					ProtoReader.NoteObject(persistentAnimation4, P_1);
					P_0 = persistentAnimation4;
				}
				uint cullingType = P_1.ReadUInt32();
				P_0.wrapMode = cullingType;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAnimation persistentAnimation = new PersistentAnimation();
					ProtoReader.NoteObject(persistentAnimation, P_1);
					P_0 = persistentAnimation;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAnimation persistentAnimation8 = new PersistentAnimation();
			ProtoReader.NoteObject(persistentAnimation8, P_1);
			P_0 = persistentAnimation8;
		}
		return P_0;
	}

	private static void Write(PersistentAnimator P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAnimator))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAnimator), P_0.GetType());
		}
		bool applyRootMotion = P_0.applyRootMotion;
		if (applyRootMotion)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(applyRootMotion, P_1);
		}
		long avatar = P_0.avatar;
		if (avatar != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(avatar, P_1);
		}
		uint cullingMode = P_0.cullingMode;
		if (cullingMode != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(cullingMode, P_1);
		}
		float feetPivotActive = P_0.feetPivotActive;
		if (feetPivotActive != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(feetPivotActive, P_1);
		}
		bool fireEvents = P_0.fireEvents;
		if (fireEvents)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(fireEvents, P_1);
		}
		bool layersAffectMassCenter = P_0.layersAffectMassCenter;
		if (layersAffectMassCenter)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(layersAffectMassCenter, P_1);
		}
		bool linearVelocityBlending = P_0.linearVelocityBlending;
		if (linearVelocityBlending)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(linearVelocityBlending, P_1);
		}
		bool logWarnings = P_0.logWarnings;
		if (logWarnings)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(logWarnings, P_1);
		}
		float recorderStartTime = P_0.recorderStartTime;
		if (recorderStartTime != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(recorderStartTime, P_1);
		}
		float recorderStopTime = P_0.recorderStopTime;
		if (recorderStopTime != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(recorderStopTime, P_1);
		}
		Vector3 rootPosition = P_0.rootPosition;
		ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(rootPosition, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Quaternion rootRotation = P_0.rootRotation;
		ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(rootRotation, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long runtimeAnimatorController = P_0.runtimeAnimatorController;
		if (runtimeAnimatorController != 0L)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(runtimeAnimatorController, P_1);
		}
		float speed = P_0.speed;
		if (speed != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(speed, P_1);
		}
		bool stabilizeFeet = P_0.stabilizeFeet;
		if (stabilizeFeet)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(stabilizeFeet, P_1);
		}
		uint updateMode = P_0.updateMode;
		if (updateMode != 0)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(updateMode, P_1);
		}
	}

	private static PersistentAnimator Read(PersistentAnimator P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator12 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator12, P_1);
					P_0 = persistentAnimator12;
				}
				bool logWarnings = P_1.ReadBoolean();
				P_0.applyRootMotion = logWarnings;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator15 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator15, P_1);
					P_0 = persistentAnimator15;
				}
				long runtimeAnimatorController = P_1.ReadInt64();
				P_0.avatar = runtimeAnimatorController;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator8 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator8, P_1);
					P_0 = persistentAnimator8;
				}
				uint updateMode = P_1.ReadUInt32();
				P_0.cullingMode = updateMode;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator5 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator5, P_1);
					P_0 = persistentAnimator5;
				}
				float feetPivotActive = P_1.ReadSingle();
				P_0.feetPivotActive = feetPivotActive;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator17 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator17, P_1);
					P_0 = persistentAnimator17;
				}
				bool logWarnings = P_1.ReadBoolean();
				P_0.fireEvents = logWarnings;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator14 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator14, P_1);
					P_0 = persistentAnimator14;
				}
				bool logWarnings = P_1.ReadBoolean();
				P_0.layersAffectMassCenter = logWarnings;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator6 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator6, P_1);
					P_0 = persistentAnimator6;
				}
				bool logWarnings = P_1.ReadBoolean();
				P_0.linearVelocityBlending = logWarnings;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator3 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator3, P_1);
					P_0 = persistentAnimator3;
				}
				bool logWarnings = P_1.ReadBoolean();
				P_0.logWarnings = logWarnings;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator11 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator11, P_1);
					P_0 = persistentAnimator11;
				}
				float feetPivotActive = P_1.ReadSingle();
				P_0.recorderStartTime = feetPivotActive;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator9 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator9, P_1);
					P_0 = persistentAnimator9;
				}
				float feetPivotActive = P_1.ReadSingle();
				P_0.recorderStopTime = feetPivotActive;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator2 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator2, P_1);
					P_0 = persistentAnimator2;
				}
				Vector3 rootPosition = P_0.rootPosition;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(rootPosition, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 rootPosition2 = vector;
				P_0.rootPosition = rootPosition2;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator16 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator16, P_1);
					P_0 = persistentAnimator16;
				}
				Quaternion rootRotation = P_0.rootRotation;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Quaternion quaternion = Read(rootRotation, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Quaternion rootRotation2 = quaternion;
				P_0.rootRotation = rootRotation2;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator13 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator13, P_1);
					P_0 = persistentAnimator13;
				}
				long runtimeAnimatorController = P_1.ReadInt64();
				P_0.runtimeAnimatorController = runtimeAnimatorController;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator10 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator10, P_1);
					P_0 = persistentAnimator10;
				}
				float feetPivotActive = P_1.ReadSingle();
				P_0.speed = feetPivotActive;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator7 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator7, P_1);
					P_0 = persistentAnimator7;
				}
				bool logWarnings = P_1.ReadBoolean();
				P_0.stabilizeFeet = logWarnings;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator4 = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator4, P_1);
					P_0 = persistentAnimator4;
				}
				uint updateMode = P_1.ReadUInt32();
				P_0.updateMode = updateMode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAnimator persistentAnimator = new PersistentAnimator();
					ProtoReader.NoteObject(persistentAnimator, P_1);
					P_0 = persistentAnimator;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAnimator persistentAnimator18 = new PersistentAnimator();
			ProtoReader.NoteObject(persistentAnimator18, P_1);
			P_0 = persistentAnimator18;
		}
		return P_0;
	}

	private static void Write(PersistentAudioChorusFilter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioChorusFilter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioChorusFilter), P_0.GetType());
		}
		float delay = P_0.delay;
		if (delay != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(delay, P_1);
		}
		float depth = P_0.depth;
		if (depth != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(depth, P_1);
		}
		float dryMix = P_0.dryMix;
		if (dryMix != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dryMix, P_1);
		}
		float rate = P_0.rate;
		if (rate != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rate, P_1);
		}
		float wetMix = P_0.wetMix1;
		if (wetMix != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(wetMix, P_1);
		}
		float wetMix2 = P_0.wetMix2;
		if (wetMix2 != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(wetMix2, P_1);
		}
		float wetMix3 = P_0.wetMix3;
		if (wetMix3 != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(wetMix3, P_1);
		}
	}

	private static PersistentAudioChorusFilter Read(PersistentAudioChorusFilter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAudioChorusFilter persistentAudioChorusFilter5 = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter5, P_1);
					P_0 = persistentAudioChorusFilter5;
				}
				float wetMix = P_1.ReadSingle();
				P_0.delay = wetMix;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAudioChorusFilter persistentAudioChorusFilter8 = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter8, P_1);
					P_0 = persistentAudioChorusFilter8;
				}
				float wetMix = P_1.ReadSingle();
				P_0.depth = wetMix;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAudioChorusFilter persistentAudioChorusFilter6 = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter6, P_1);
					P_0 = persistentAudioChorusFilter6;
				}
				float wetMix = P_1.ReadSingle();
				P_0.dryMix = wetMix;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAudioChorusFilter persistentAudioChorusFilter3 = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter3, P_1);
					P_0 = persistentAudioChorusFilter3;
				}
				float wetMix = P_1.ReadSingle();
				P_0.rate = wetMix;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentAudioChorusFilter persistentAudioChorusFilter2 = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter2, P_1);
					P_0 = persistentAudioChorusFilter2;
				}
				float wetMix = P_1.ReadSingle();
				P_0.wetMix1 = wetMix;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentAudioChorusFilter persistentAudioChorusFilter7 = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter7, P_1);
					P_0 = persistentAudioChorusFilter7;
				}
				float wetMix = P_1.ReadSingle();
				P_0.wetMix2 = wetMix;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentAudioChorusFilter persistentAudioChorusFilter4 = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter4, P_1);
					P_0 = persistentAudioChorusFilter4;
				}
				float wetMix = P_1.ReadSingle();
				P_0.wetMix3 = wetMix;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAudioChorusFilter persistentAudioChorusFilter = new PersistentAudioChorusFilter();
					ProtoReader.NoteObject(persistentAudioChorusFilter, P_1);
					P_0 = persistentAudioChorusFilter;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAudioChorusFilter persistentAudioChorusFilter9 = new PersistentAudioChorusFilter();
			ProtoReader.NoteObject(persistentAudioChorusFilter9, P_1);
			P_0 = persistentAudioChorusFilter9;
		}
		return P_0;
	}

	private static void Write(PersistentAudioEchoFilter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioEchoFilter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioEchoFilter), P_0.GetType());
		}
		float decayRatio = P_0.decayRatio;
		if (decayRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(decayRatio, P_1);
		}
		float delay = P_0.delay;
		if (delay != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(delay, P_1);
		}
		float dryMix = P_0.dryMix;
		if (dryMix != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dryMix, P_1);
		}
		float wetMix = P_0.wetMix;
		if (wetMix != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(wetMix, P_1);
		}
	}

	private static PersistentAudioEchoFilter Read(PersistentAudioEchoFilter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAudioEchoFilter persistentAudioEchoFilter3 = new PersistentAudioEchoFilter();
					ProtoReader.NoteObject(persistentAudioEchoFilter3, P_1);
					P_0 = persistentAudioEchoFilter3;
				}
				float dryMix = P_1.ReadSingle();
				P_0.decayRatio = dryMix;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAudioEchoFilter persistentAudioEchoFilter5 = new PersistentAudioEchoFilter();
					ProtoReader.NoteObject(persistentAudioEchoFilter5, P_1);
					P_0 = persistentAudioEchoFilter5;
				}
				float dryMix = P_1.ReadSingle();
				P_0.delay = dryMix;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAudioEchoFilter persistentAudioEchoFilter2 = new PersistentAudioEchoFilter();
					ProtoReader.NoteObject(persistentAudioEchoFilter2, P_1);
					P_0 = persistentAudioEchoFilter2;
				}
				float dryMix = P_1.ReadSingle();
				P_0.dryMix = dryMix;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAudioEchoFilter persistentAudioEchoFilter4 = new PersistentAudioEchoFilter();
					ProtoReader.NoteObject(persistentAudioEchoFilter4, P_1);
					P_0 = persistentAudioEchoFilter4;
				}
				float dryMix = P_1.ReadSingle();
				P_0.wetMix = dryMix;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAudioEchoFilter persistentAudioEchoFilter = new PersistentAudioEchoFilter();
					ProtoReader.NoteObject(persistentAudioEchoFilter, P_1);
					P_0 = persistentAudioEchoFilter;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAudioEchoFilter persistentAudioEchoFilter6 = new PersistentAudioEchoFilter();
			ProtoReader.NoteObject(persistentAudioEchoFilter6, P_1);
			P_0 = persistentAudioEchoFilter6;
		}
		return P_0;
	}

	private static void Write(PersistentAudioDistortionFilter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioDistortionFilter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioDistortionFilter), P_0.GetType());
		}
		float distortionLevel = P_0.distortionLevel;
		if (distortionLevel != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(distortionLevel, P_1);
		}
	}

	private static PersistentAudioDistortionFilter Read(PersistentAudioDistortionFilter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentAudioDistortionFilter persistentAudioDistortionFilter = new PersistentAudioDistortionFilter();
					ProtoReader.NoteObject(persistentAudioDistortionFilter, P_1);
					P_0 = persistentAudioDistortionFilter;
				}
				float distortionLevel = P_1.ReadSingle();
				P_0.distortionLevel = distortionLevel;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentAudioDistortionFilter persistentAudioDistortionFilter2 = new PersistentAudioDistortionFilter();
					ProtoReader.NoteObject(persistentAudioDistortionFilter2, P_1);
					P_0 = persistentAudioDistortionFilter2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentAudioDistortionFilter persistentAudioDistortionFilter3 = new PersistentAudioDistortionFilter();
			ProtoReader.NoteObject(persistentAudioDistortionFilter3, P_1);
			P_0 = persistentAudioDistortionFilter3;
		}
		return P_0;
	}

	private static void Write(PersistentAudioReverbZone P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioReverbZone))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioReverbZone), P_0.GetType());
		}
		float hFReference = P_0.HFReference;
		if (hFReference != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(hFReference, P_1);
		}
		float lFReference = P_0.LFReference;
		if (lFReference != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(lFReference, P_1);
		}
		float decayHFRatio = P_0.decayHFRatio;
		if (decayHFRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(decayHFRatio, P_1);
		}
		float decayTime = P_0.decayTime;
		if (decayTime != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(decayTime, P_1);
		}
		float density = P_0.density;
		if (density != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(density, P_1);
		}
		float diffusion = P_0.diffusion;
		if (diffusion != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(diffusion, P_1);
		}
		float maxDistance = P_0.maxDistance;
		if (maxDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxDistance, P_1);
		}
		float minDistance = P_0.minDistance;
		if (minDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minDistance, P_1);
		}
		int reflections = P_0.reflections;
		if (reflections != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(reflections, P_1);
		}
		float reflectionsDelay = P_0.reflectionsDelay;
		if (reflectionsDelay != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(reflectionsDelay, P_1);
		}
		int reverb = P_0.reverb;
		if (reverb != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(reverb, P_1);
		}
		float reverbDelay = P_0.reverbDelay;
		if (reverbDelay != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(reverbDelay, P_1);
		}
		uint reverbPreset = P_0.reverbPreset;
		if (reverbPreset != 0)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(reverbPreset, P_1);
		}
		int room = P_0.room;
		if (room != 0)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(room, P_1);
		}
		int roomHF = P_0.roomHF;
		if (roomHF != 0)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(roomHF, P_1);
		}
		int roomLF = P_0.roomLF;
		if (roomLF != 0)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(roomLF, P_1);
		}
	}

	private static PersistentAudioReverbZone Read(PersistentAudioReverbZone P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone12 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone12, P_1);
					P_0 = persistentAudioReverbZone12;
				}
				float minDistance = P_1.ReadSingle();
				P_0.HFReference = minDistance;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone15 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone15, P_1);
					P_0 = persistentAudioReverbZone15;
				}
				float minDistance = P_1.ReadSingle();
				P_0.LFReference = minDistance;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone8 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone8, P_1);
					P_0 = persistentAudioReverbZone8;
				}
				float minDistance = P_1.ReadSingle();
				P_0.decayHFRatio = minDistance;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone5 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone5, P_1);
					P_0 = persistentAudioReverbZone5;
				}
				float minDistance = P_1.ReadSingle();
				P_0.decayTime = minDistance;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone17 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone17, P_1);
					P_0 = persistentAudioReverbZone17;
				}
				float minDistance = P_1.ReadSingle();
				P_0.density = minDistance;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone14 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone14, P_1);
					P_0 = persistentAudioReverbZone14;
				}
				float minDistance = P_1.ReadSingle();
				P_0.diffusion = minDistance;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone6 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone6, P_1);
					P_0 = persistentAudioReverbZone6;
				}
				float minDistance = P_1.ReadSingle();
				P_0.maxDistance = minDistance;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone3 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone3, P_1);
					P_0 = persistentAudioReverbZone3;
				}
				float minDistance = P_1.ReadSingle();
				P_0.minDistance = minDistance;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone11 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone11, P_1);
					P_0 = persistentAudioReverbZone11;
				}
				int reverb = P_1.ReadInt32();
				P_0.reflections = reverb;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone9 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone9, P_1);
					P_0 = persistentAudioReverbZone9;
				}
				float minDistance = P_1.ReadSingle();
				P_0.reflectionsDelay = minDistance;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone2 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone2, P_1);
					P_0 = persistentAudioReverbZone2;
				}
				int reverb = P_1.ReadInt32();
				P_0.reverb = reverb;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone16 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone16, P_1);
					P_0 = persistentAudioReverbZone16;
				}
				float minDistance = P_1.ReadSingle();
				P_0.reverbDelay = minDistance;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone13 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone13, P_1);
					P_0 = persistentAudioReverbZone13;
				}
				uint reverbPreset = P_1.ReadUInt32();
				P_0.reverbPreset = reverbPreset;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone10 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone10, P_1);
					P_0 = persistentAudioReverbZone10;
				}
				int reverb = P_1.ReadInt32();
				P_0.room = reverb;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone7 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone7, P_1);
					P_0 = persistentAudioReverbZone7;
				}
				int reverb = P_1.ReadInt32();
				P_0.roomHF = reverb;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone4 = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone4, P_1);
					P_0 = persistentAudioReverbZone4;
				}
				int reverb = P_1.ReadInt32();
				P_0.roomLF = reverb;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAudioReverbZone persistentAudioReverbZone = new PersistentAudioReverbZone();
					ProtoReader.NoteObject(persistentAudioReverbZone, P_1);
					P_0 = persistentAudioReverbZone;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAudioReverbZone persistentAudioReverbZone18 = new PersistentAudioReverbZone();
			ProtoReader.NoteObject(persistentAudioReverbZone18, P_1);
			P_0 = persistentAudioReverbZone18;
		}
		return P_0;
	}

	private static void Write(PersistentAudioListener P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioListener))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioListener), P_0.GetType());
		}
		uint velocityUpdateMode = P_0.velocityUpdateMode;
		if (velocityUpdateMode != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(velocityUpdateMode, P_1);
		}
	}

	private static PersistentAudioListener Read(PersistentAudioListener P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentAudioListener persistentAudioListener = new PersistentAudioListener();
					ProtoReader.NoteObject(persistentAudioListener, P_1);
					P_0 = persistentAudioListener;
				}
				uint velocityUpdateMode = P_1.ReadUInt32();
				P_0.velocityUpdateMode = velocityUpdateMode;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentAudioListener persistentAudioListener2 = new PersistentAudioListener();
					ProtoReader.NoteObject(persistentAudioListener2, P_1);
					P_0 = persistentAudioListener2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentAudioListener persistentAudioListener3 = new PersistentAudioListener();
			ProtoReader.NoteObject(persistentAudioListener3, P_1);
			P_0 = persistentAudioListener3;
		}
		return P_0;
	}

	private static void Write(PersistentAudioBehaviour P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioBehaviour))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioBehaviour), P_0.GetType());
		}
	}

	private static PersistentAudioBehaviour Read(PersistentAudioBehaviour P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentAudioBehaviour persistentAudioBehaviour = new PersistentAudioBehaviour();
				ProtoReader.NoteObject(persistentAudioBehaviour, P_1);
				P_0 = persistentAudioBehaviour;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentAudioBehaviour persistentAudioBehaviour2 = new PersistentAudioBehaviour();
			ProtoReader.NoteObject(persistentAudioBehaviour2, P_1);
			P_0 = persistentAudioBehaviour2;
		}
		return P_0;
	}

	private static void Write(PersistentAudioReverbFilter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioReverbFilter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioReverbFilter), P_0.GetType());
		}
		float decayHFRatio = P_0.decayHFRatio;
		if (decayHFRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(decayHFRatio, P_1);
		}
		float decayTime = P_0.decayTime;
		if (decayTime != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(decayTime, P_1);
		}
		float density = P_0.density;
		if (density != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(density, P_1);
		}
		float diffusion = P_0.diffusion;
		if (diffusion != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(diffusion, P_1);
		}
		float dryLevel = P_0.dryLevel;
		if (dryLevel != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dryLevel, P_1);
		}
		float hfReference = P_0.hfReference;
		if (hfReference != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(hfReference, P_1);
		}
		float lfReference = P_0.lfReference;
		if (lfReference != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(lfReference, P_1);
		}
		float reflectionsDelay = P_0.reflectionsDelay;
		if (reflectionsDelay != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(reflectionsDelay, P_1);
		}
		float reflectionsLevel = P_0.reflectionsLevel;
		if (reflectionsLevel != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(reflectionsLevel, P_1);
		}
		float reverbDelay = P_0.reverbDelay;
		if (reverbDelay != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(reverbDelay, P_1);
		}
		float reverbLevel = P_0.reverbLevel;
		if (reverbLevel != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(reverbLevel, P_1);
		}
		uint reverbPreset = P_0.reverbPreset;
		if (reverbPreset != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(reverbPreset, P_1);
		}
		float room = P_0.room;
		if (room != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(room, P_1);
		}
		float roomHF = P_0.roomHF;
		if (roomHF != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(roomHF, P_1);
		}
		float roomLF = P_0.roomLF;
		if (roomLF != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(roomLF, P_1);
		}
	}

	private static PersistentAudioReverbFilter Read(PersistentAudioReverbFilter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter9 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter9, P_1);
					P_0 = persistentAudioReverbFilter9;
				}
				float diffusion = P_1.ReadSingle();
				P_0.decayHFRatio = diffusion;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter12 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter12, P_1);
					P_0 = persistentAudioReverbFilter12;
				}
				float diffusion = P_1.ReadSingle();
				P_0.decayTime = diffusion;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter5 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter5, P_1);
					P_0 = persistentAudioReverbFilter5;
				}
				float diffusion = P_1.ReadSingle();
				P_0.density = diffusion;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter2 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter2, P_1);
					P_0 = persistentAudioReverbFilter2;
				}
				float diffusion = P_1.ReadSingle();
				P_0.diffusion = diffusion;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter14 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter14, P_1);
					P_0 = persistentAudioReverbFilter14;
				}
				float diffusion = P_1.ReadSingle();
				P_0.dryLevel = diffusion;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter11 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter11, P_1);
					P_0 = persistentAudioReverbFilter11;
				}
				float diffusion = P_1.ReadSingle();
				P_0.hfReference = diffusion;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter3 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter3, P_1);
					P_0 = persistentAudioReverbFilter3;
				}
				float diffusion = P_1.ReadSingle();
				P_0.lfReference = diffusion;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter15 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter15, P_1);
					P_0 = persistentAudioReverbFilter15;
				}
				float diffusion = P_1.ReadSingle();
				P_0.reflectionsDelay = diffusion;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter8 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter8, P_1);
					P_0 = persistentAudioReverbFilter8;
				}
				float diffusion = P_1.ReadSingle();
				P_0.reflectionsLevel = diffusion;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter6 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter6, P_1);
					P_0 = persistentAudioReverbFilter6;
				}
				float diffusion = P_1.ReadSingle();
				P_0.reverbDelay = diffusion;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter16 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter16, P_1);
					P_0 = persistentAudioReverbFilter16;
				}
				float diffusion = P_1.ReadSingle();
				P_0.reverbLevel = diffusion;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter13 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter13, P_1);
					P_0 = persistentAudioReverbFilter13;
				}
				uint reverbPreset = P_1.ReadUInt32();
				P_0.reverbPreset = reverbPreset;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter10 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter10, P_1);
					P_0 = persistentAudioReverbFilter10;
				}
				float diffusion = P_1.ReadSingle();
				P_0.room = diffusion;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter7 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter7, P_1);
					P_0 = persistentAudioReverbFilter7;
				}
				float diffusion = P_1.ReadSingle();
				P_0.roomHF = diffusion;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter4 = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter4, P_1);
					P_0 = persistentAudioReverbFilter4;
				}
				float diffusion = P_1.ReadSingle();
				P_0.roomLF = diffusion;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAudioReverbFilter persistentAudioReverbFilter = new PersistentAudioReverbFilter();
					ProtoReader.NoteObject(persistentAudioReverbFilter, P_1);
					P_0 = persistentAudioReverbFilter;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAudioReverbFilter persistentAudioReverbFilter17 = new PersistentAudioReverbFilter();
			ProtoReader.NoteObject(persistentAudioReverbFilter17, P_1);
			P_0 = persistentAudioReverbFilter17;
		}
		return P_0;
	}

	private static void Write(PersistentAudioHighPassFilter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioHighPassFilter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioHighPassFilter), P_0.GetType());
		}
		float cutoffFrequency = P_0.cutoffFrequency;
		if (cutoffFrequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(cutoffFrequency, P_1);
		}
		float highpassResonanceQ = P_0.highpassResonanceQ;
		if (highpassResonanceQ != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(highpassResonanceQ, P_1);
		}
	}

	private static PersistentAudioHighPassFilter Read(PersistentAudioHighPassFilter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAudioHighPassFilter persistentAudioHighPassFilter2 = new PersistentAudioHighPassFilter();
					ProtoReader.NoteObject(persistentAudioHighPassFilter2, P_1);
					P_0 = persistentAudioHighPassFilter2;
				}
				float cutoffFrequency = P_1.ReadSingle();
				P_0.cutoffFrequency = cutoffFrequency;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAudioHighPassFilter persistentAudioHighPassFilter3 = new PersistentAudioHighPassFilter();
					ProtoReader.NoteObject(persistentAudioHighPassFilter3, P_1);
					P_0 = persistentAudioHighPassFilter3;
				}
				float cutoffFrequency = P_1.ReadSingle();
				P_0.highpassResonanceQ = cutoffFrequency;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAudioHighPassFilter persistentAudioHighPassFilter = new PersistentAudioHighPassFilter();
					ProtoReader.NoteObject(persistentAudioHighPassFilter, P_1);
					P_0 = persistentAudioHighPassFilter;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAudioHighPassFilter persistentAudioHighPassFilter4 = new PersistentAudioHighPassFilter();
			ProtoReader.NoteObject(persistentAudioHighPassFilter4, P_1);
			P_0 = persistentAudioHighPassFilter4;
		}
		return P_0;
	}

	private static void Write(PersistentAudioLowPassFilter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioLowPassFilter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioLowPassFilter), P_0.GetType());
		}
		PersistentAnimationCurve customCutoffCurve = P_0.customCutoffCurve;
		if (customCutoffCurve != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(customCutoffCurve, P_1);
			Write((PersistentData)customCutoffCurve, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		float cutoffFrequency = P_0.cutoffFrequency;
		if (cutoffFrequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(cutoffFrequency, P_1);
		}
		float lowpassResonanceQ = P_0.lowpassResonanceQ;
		if (lowpassResonanceQ != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(lowpassResonanceQ, P_1);
		}
	}

	private static PersistentAudioLowPassFilter Read(PersistentAudioLowPassFilter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAudioLowPassFilter persistentAudioLowPassFilter3 = new PersistentAudioLowPassFilter();
					ProtoReader.NoteObject(persistentAudioLowPassFilter3, P_1);
					P_0 = persistentAudioLowPassFilter3;
				}
				PersistentAnimationCurve customCutoffCurve = P_0.customCutoffCurve;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimationCurve obj = (PersistentAnimationCurve)Read((PersistentData)customCutoffCurve, P_1);
				ProtoReader.EndSubItem(token, P_1);
				PersistentAnimationCurve persistentAnimationCurve = obj;
				if (persistentAnimationCurve != null)
				{
					P_0.customCutoffCurve = persistentAnimationCurve;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAudioLowPassFilter persistentAudioLowPassFilter2 = new PersistentAudioLowPassFilter();
					ProtoReader.NoteObject(persistentAudioLowPassFilter2, P_1);
					P_0 = persistentAudioLowPassFilter2;
				}
				float cutoffFrequency = P_1.ReadSingle();
				P_0.cutoffFrequency = cutoffFrequency;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAudioLowPassFilter persistentAudioLowPassFilter4 = new PersistentAudioLowPassFilter();
					ProtoReader.NoteObject(persistentAudioLowPassFilter4, P_1);
					P_0 = persistentAudioLowPassFilter4;
				}
				float cutoffFrequency = P_1.ReadSingle();
				P_0.lowpassResonanceQ = cutoffFrequency;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAudioLowPassFilter persistentAudioLowPassFilter = new PersistentAudioLowPassFilter();
					ProtoReader.NoteObject(persistentAudioLowPassFilter, P_1);
					P_0 = persistentAudioLowPassFilter;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAudioLowPassFilter persistentAudioLowPassFilter5 = new PersistentAudioLowPassFilter();
			ProtoReader.NoteObject(persistentAudioLowPassFilter5, P_1);
			P_0 = persistentAudioLowPassFilter5;
		}
		return P_0;
	}

	private static void Write(PersistentAudioSource P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAudioSource))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAudioSource), P_0.GetType());
		}
		bool bypassEffects = P_0.bypassEffects;
		if (bypassEffects)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(bypassEffects, P_1);
		}
		bool bypassListenerEffects = P_0.bypassListenerEffects;
		if (bypassListenerEffects)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(bypassListenerEffects, P_1);
		}
		bool bypassReverbZones = P_0.bypassReverbZones;
		if (bypassReverbZones)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(bypassReverbZones, P_1);
		}
		long clip = P_0.clip;
		if (clip != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(clip, P_1);
		}
		float dopplerLevel = P_0.dopplerLevel;
		if (dopplerLevel != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dopplerLevel, P_1);
		}
		bool ignoreListenerPause = P_0.ignoreListenerPause;
		if (ignoreListenerPause)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(ignoreListenerPause, P_1);
		}
		bool ignoreListenerVolume = P_0.ignoreListenerVolume;
		if (ignoreListenerVolume)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(ignoreListenerVolume, P_1);
		}
		bool loop = P_0.loop;
		if (loop)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(loop, P_1);
		}
		float maxDistance = P_0.maxDistance;
		if (maxDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxDistance, P_1);
		}
		float minDistance = P_0.minDistance;
		if (minDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minDistance, P_1);
		}
		bool mute = P_0.mute;
		if (mute)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(mute, P_1);
		}
		long outputAudioMixerGroup = P_0.outputAudioMixerGroup;
		if (outputAudioMixerGroup != 0L)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(outputAudioMixerGroup, P_1);
		}
		float panStereo = P_0.panStereo;
		if (panStereo != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(panStereo, P_1);
		}
		float pitch = P_0.pitch;
		if (pitch != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(pitch, P_1);
		}
		bool playOnAwake = P_0.playOnAwake;
		if (playOnAwake)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(playOnAwake, P_1);
		}
		int priority = P_0.priority;
		if (priority != 0)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(priority, P_1);
		}
		float reverbZoneMix = P_0.reverbZoneMix;
		if (reverbZoneMix != 0f)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(reverbZoneMix, P_1);
		}
		uint rolloffMode = P_0.rolloffMode;
		if (rolloffMode != 0)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(rolloffMode, P_1);
		}
		float spatialBlend = P_0.spatialBlend;
		if (spatialBlend != 0f)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spatialBlend, P_1);
		}
		bool spatialize = P_0.spatialize;
		if (spatialize)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(spatialize, P_1);
		}
		bool spatializePostEffects = P_0.spatializePostEffects;
		if (spatializePostEffects)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(spatializePostEffects, P_1);
		}
		float spread = P_0.spread;
		if (spread != 0f)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spread, P_1);
		}
		float time = P_0.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(23, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
		int timeSamples = P_0.timeSamples;
		if (timeSamples != 0)
		{
			ProtoWriter.WriteFieldHeader(24, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(timeSamples, P_1);
		}
		uint velocityUpdateMode = P_0.velocityUpdateMode;
		if (velocityUpdateMode != 0)
		{
			ProtoWriter.WriteFieldHeader(25, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(velocityUpdateMode, P_1);
		}
		float volume = P_0.volume;
		if (volume != 0f)
		{
			ProtoWriter.WriteFieldHeader(26, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(volume, P_1);
		}
	}

	private static PersistentAudioSource Read(PersistentAudioSource P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource24 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource24, P_1);
					P_0 = persistentAudioSource24;
				}
				bool loop = P_1.ReadBoolean();
				P_0.bypassEffects = loop;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource26 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource26, P_1);
					P_0 = persistentAudioSource26;
				}
				bool loop = P_1.ReadBoolean();
				P_0.bypassListenerEffects = loop;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource18 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource18, P_1);
					P_0 = persistentAudioSource18;
				}
				bool loop = P_1.ReadBoolean();
				P_0.bypassReverbZones = loop;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource11 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource11, P_1);
					P_0 = persistentAudioSource11;
				}
				long outputAudioMixerGroup = P_1.ReadInt64();
				P_0.clip = outputAudioMixerGroup;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource2 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource2, P_1);
					P_0 = persistentAudioSource2;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.dopplerLevel = dopplerLevel;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource27 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource27, P_1);
					P_0 = persistentAudioSource27;
				}
				bool loop = P_1.ReadBoolean();
				P_0.ignoreListenerPause = loop;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource15 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource15, P_1);
					P_0 = persistentAudioSource15;
				}
				bool loop = P_1.ReadBoolean();
				P_0.ignoreListenerVolume = loop;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource8 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource8, P_1);
					P_0 = persistentAudioSource8;
				}
				bool loop = P_1.ReadBoolean();
				P_0.loop = loop;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource20 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource20, P_1);
					P_0 = persistentAudioSource20;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.maxDistance = dopplerLevel;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource17 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource17, P_1);
					P_0 = persistentAudioSource17;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.minDistance = dopplerLevel;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource9 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource9, P_1);
					P_0 = persistentAudioSource9;
				}
				bool loop = P_1.ReadBoolean();
				P_0.mute = loop;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource6 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource6, P_1);
					P_0 = persistentAudioSource6;
				}
				long outputAudioMixerGroup = P_1.ReadInt64();
				P_0.outputAudioMixerGroup = outputAudioMixerGroup;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource23 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource23, P_1);
					P_0 = persistentAudioSource23;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.panStereo = dopplerLevel;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource21 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource21, P_1);
					P_0 = persistentAudioSource21;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.pitch = dopplerLevel;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource14 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource14, P_1);
					P_0 = persistentAudioSource14;
				}
				bool loop = P_1.ReadBoolean();
				P_0.playOnAwake = loop;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource12 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource12, P_1);
					P_0 = persistentAudioSource12;
				}
				int timeSamples = P_1.ReadInt32();
				P_0.priority = timeSamples;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource5 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource5, P_1);
					P_0 = persistentAudioSource5;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.reverbZoneMix = dopplerLevel;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource3 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource3, P_1);
					P_0 = persistentAudioSource3;
				}
				uint rolloffMode = P_1.ReadUInt32();
				P_0.rolloffMode = rolloffMode;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource25 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource25, P_1);
					P_0 = persistentAudioSource25;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.spatialBlend = dopplerLevel;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource22 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource22, P_1);
					P_0 = persistentAudioSource22;
				}
				bool loop = P_1.ReadBoolean();
				P_0.spatialize = loop;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource19 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource19, P_1);
					P_0 = persistentAudioSource19;
				}
				bool loop = P_1.ReadBoolean();
				P_0.spatializePostEffects = loop;
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource16 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource16, P_1);
					P_0 = persistentAudioSource16;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.spread = dopplerLevel;
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource13 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource13, P_1);
					P_0 = persistentAudioSource13;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.time = dopplerLevel;
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource10 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource10, P_1);
					P_0 = persistentAudioSource10;
				}
				int timeSamples = P_1.ReadInt32();
				P_0.timeSamples = timeSamples;
				break;
			}
			case 25:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource7 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource7, P_1);
					P_0 = persistentAudioSource7;
				}
				uint rolloffMode = P_1.ReadUInt32();
				P_0.velocityUpdateMode = rolloffMode;
				break;
			}
			case 26:
			{
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource4 = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource4, P_1);
					P_0 = persistentAudioSource4;
				}
				float dopplerLevel = P_1.ReadSingle();
				P_0.volume = dopplerLevel;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAudioSource persistentAudioSource = new PersistentAudioSource();
					ProtoReader.NoteObject(persistentAudioSource, P_1);
					P_0 = persistentAudioSource;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAudioSource persistentAudioSource28 = new PersistentAudioSource();
			ProtoReader.NoteObject(persistentAudioSource28, P_1);
			P_0 = persistentAudioSource28;
		}
		return P_0;
	}

	private static void Write(PersistentOffMeshLink P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentOffMeshLink))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentOffMeshLink), P_0.GetType());
		}
		bool activated = P_0.activated;
		if (activated)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(activated, P_1);
		}
		int area = P_0.area;
		if (area != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(area, P_1);
		}
		bool autoUpdatePositions = P_0.autoUpdatePositions;
		if (autoUpdatePositions)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoUpdatePositions, P_1);
		}
		bool biDirectional = P_0.biDirectional;
		if (biDirectional)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(biDirectional, P_1);
		}
		float costOverride = P_0.costOverride;
		if (costOverride != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(costOverride, P_1);
		}
		long endTransform = P_0.endTransform;
		if (endTransform != 0L)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(endTransform, P_1);
		}
		long startTransform = P_0.startTransform;
		if (startTransform != 0L)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(startTransform, P_1);
		}
	}

	private static PersistentOffMeshLink Read(PersistentOffMeshLink P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentOffMeshLink persistentOffMeshLink5 = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink5, P_1);
					P_0 = persistentOffMeshLink5;
				}
				bool biDirectional = P_1.ReadBoolean();
				P_0.activated = biDirectional;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentOffMeshLink persistentOffMeshLink8 = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink8, P_1);
					P_0 = persistentOffMeshLink8;
				}
				int area = P_1.ReadInt32();
				P_0.area = area;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentOffMeshLink persistentOffMeshLink6 = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink6, P_1);
					P_0 = persistentOffMeshLink6;
				}
				bool biDirectional = P_1.ReadBoolean();
				P_0.autoUpdatePositions = biDirectional;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentOffMeshLink persistentOffMeshLink3 = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink3, P_1);
					P_0 = persistentOffMeshLink3;
				}
				bool biDirectional = P_1.ReadBoolean();
				P_0.biDirectional = biDirectional;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentOffMeshLink persistentOffMeshLink2 = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink2, P_1);
					P_0 = persistentOffMeshLink2;
				}
				float costOverride = P_1.ReadSingle();
				P_0.costOverride = costOverride;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentOffMeshLink persistentOffMeshLink7 = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink7, P_1);
					P_0 = persistentOffMeshLink7;
				}
				long startTransform = P_1.ReadInt64();
				P_0.endTransform = startTransform;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentOffMeshLink persistentOffMeshLink4 = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink4, P_1);
					P_0 = persistentOffMeshLink4;
				}
				long startTransform = P_1.ReadInt64();
				P_0.startTransform = startTransform;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentOffMeshLink persistentOffMeshLink = new PersistentOffMeshLink();
					ProtoReader.NoteObject(persistentOffMeshLink, P_1);
					P_0 = persistentOffMeshLink;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentOffMeshLink persistentOffMeshLink9 = new PersistentOffMeshLink();
			ProtoReader.NoteObject(persistentOffMeshLink9, P_1);
			P_0 = persistentOffMeshLink9;
		}
		return P_0;
	}

	private static void Write(PersistentNavMeshObstacle P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentNavMeshObstacle))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentNavMeshObstacle), P_0.GetType());
		}
		bool carveOnlyStationary = P_0.carveOnlyStationary;
		if (carveOnlyStationary)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(carveOnlyStationary, P_1);
		}
		bool carving = P_0.carving;
		if (carving)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(carving, P_1);
		}
		float carvingMoveThreshold = P_0.carvingMoveThreshold;
		if (carvingMoveThreshold != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(carvingMoveThreshold, P_1);
		}
		float carvingTimeToStationary = P_0.carvingTimeToStationary;
		if (carvingTimeToStationary != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(carvingTimeToStationary, P_1);
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float height = P_0.height;
		if (height != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(height, P_1);
		}
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
		uint shape = P_0.shape;
		if (shape != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(shape, P_1);
		}
		Vector3 size = P_0.size;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 velocity = P_0.velocity;
		ProtoWriter.WriteFieldHeader(10, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(velocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentNavMeshObstacle Read(PersistentNavMeshObstacle P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle6 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle6, P_1);
					P_0 = persistentNavMeshObstacle6;
				}
				bool carveOnlyStationary = P_1.ReadBoolean();
				P_0.carveOnlyStationary = carveOnlyStationary;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle8 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle8, P_1);
					P_0 = persistentNavMeshObstacle8;
				}
				bool carveOnlyStationary = P_1.ReadBoolean();
				P_0.carving = carveOnlyStationary;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle5 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle5, P_1);
					P_0 = persistentNavMeshObstacle5;
				}
				float radius = P_1.ReadSingle();
				P_0.carvingMoveThreshold = radius;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle3 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle3, P_1);
					P_0 = persistentNavMeshObstacle3;
				}
				float radius = P_1.ReadSingle();
				P_0.carvingTimeToStationary = radius;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle11 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle11, P_1);
					P_0 = persistentNavMeshObstacle11;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector3;
				P_0.center = velocity2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle9 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle9, P_1);
					P_0 = persistentNavMeshObstacle9;
				}
				float radius = P_1.ReadSingle();
				P_0.height = radius;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle2 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle2, P_1);
					P_0 = persistentNavMeshObstacle2;
				}
				float radius = P_1.ReadSingle();
				P_0.radius = radius;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle10 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle10, P_1);
					P_0 = persistentNavMeshObstacle10;
				}
				uint shape = P_1.ReadUInt32();
				P_0.shape = shape;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle7 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle7, P_1);
					P_0 = persistentNavMeshObstacle7;
				}
				Vector3 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector2;
				P_0.size = velocity2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle4 = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle4, P_1);
					P_0 = persistentNavMeshObstacle4;
				}
				Vector3 velocity = P_0.velocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(velocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector;
				P_0.velocity = velocity2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentNavMeshObstacle persistentNavMeshObstacle = new PersistentNavMeshObstacle();
					ProtoReader.NoteObject(persistentNavMeshObstacle, P_1);
					P_0 = persistentNavMeshObstacle;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentNavMeshObstacle persistentNavMeshObstacle12 = new PersistentNavMeshObstacle();
			ProtoReader.NoteObject(persistentNavMeshObstacle12, P_1);
			P_0 = persistentNavMeshObstacle12;
		}
		return P_0;
	}

	private static void Write(PersistentNavMeshAgent P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentNavMeshAgent))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentNavMeshAgent), P_0.GetType());
		}
		float acceleration = P_0.acceleration;
		if (acceleration != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(acceleration, P_1);
		}
		float angularSpeed = P_0.angularSpeed;
		if (angularSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularSpeed, P_1);
		}
		int areaMask = P_0.areaMask;
		if (areaMask != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(areaMask, P_1);
		}
		bool autoBraking = P_0.autoBraking;
		if (autoBraking)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoBraking, P_1);
		}
		bool autoRepath = P_0.autoRepath;
		if (autoRepath)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoRepath, P_1);
		}
		bool autoTraverseOffMeshLink = P_0.autoTraverseOffMeshLink;
		if (autoTraverseOffMeshLink)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoTraverseOffMeshLink, P_1);
		}
		int avoidancePriority = P_0.avoidancePriority;
		if (avoidancePriority != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(avoidancePriority, P_1);
		}
		float baseOffset = P_0.baseOffset;
		if (baseOffset != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(baseOffset, P_1);
		}
		Vector3 destination = P_0.destination;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(destination, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float height = P_0.height;
		if (height != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(height, P_1);
		}
		bool isStopped = P_0.isStopped;
		if (isStopped)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isStopped, P_1);
		}
		Vector3 nextPosition = P_0.nextPosition;
		ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(nextPosition, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint obstacleAvoidanceType = P_0.obstacleAvoidanceType;
		if (obstacleAvoidanceType != 0)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(obstacleAvoidanceType, P_1);
		}
		NavMeshPath path = P_0.path;
		if (path != null)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(path, P_1);
			Write(path, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
		float speed = P_0.speed;
		if (speed != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(speed, P_1);
		}
		float stoppingDistance = P_0.stoppingDistance;
		if (stoppingDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(stoppingDistance, P_1);
		}
		bool updatePosition = P_0.updatePosition;
		if (updatePosition)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(updatePosition, P_1);
		}
		bool updateRotation = P_0.updateRotation;
		if (updateRotation)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(updateRotation, P_1);
		}
		bool updateUpAxis = P_0.updateUpAxis;
		if (updateUpAxis)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(updateUpAxis, P_1);
		}
		Vector3 velocity = P_0.velocity;
		ProtoWriter.WriteFieldHeader(21, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(velocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentNavMeshAgent Read(PersistentNavMeshAgent P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent5 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent5, P_1);
					P_0 = persistentNavMeshAgent5;
				}
				float height = P_1.ReadSingle();
				P_0.acceleration = height;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent15 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent15, P_1);
					P_0 = persistentNavMeshAgent15;
				}
				float height = P_1.ReadSingle();
				P_0.angularSpeed = height;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent9 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent9, P_1);
					P_0 = persistentNavMeshAgent9;
				}
				int areaMask = P_1.ReadInt32();
				P_0.areaMask = areaMask;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent2 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent2, P_1);
					P_0 = persistentNavMeshAgent2;
				}
				bool autoBraking = P_1.ReadBoolean();
				P_0.autoBraking = autoBraking;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent18 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent18, P_1);
					P_0 = persistentNavMeshAgent18;
				}
				bool autoBraking = P_1.ReadBoolean();
				P_0.autoRepath = autoBraking;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent11 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent11, P_1);
					P_0 = persistentNavMeshAgent11;
				}
				bool autoBraking = P_1.ReadBoolean();
				P_0.autoTraverseOffMeshLink = autoBraking;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent20 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent20, P_1);
					P_0 = persistentNavMeshAgent20;
				}
				int areaMask = P_1.ReadInt32();
				P_0.avoidancePriority = areaMask;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent17 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent17, P_1);
					P_0 = persistentNavMeshAgent17;
				}
				float height = P_1.ReadSingle();
				P_0.baseOffset = height;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent8 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent8, P_1);
					P_0 = persistentNavMeshAgent8;
				}
				Vector3 destination = P_0.destination;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(destination, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector2;
				P_0.destination = velocity2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent3 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent3, P_1);
					P_0 = persistentNavMeshAgent3;
				}
				float height = P_1.ReadSingle();
				P_0.height = height;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent21 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent21, P_1);
					P_0 = persistentNavMeshAgent21;
				}
				bool autoBraking = P_1.ReadBoolean();
				P_0.isStopped = autoBraking;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent14 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent14, P_1);
					P_0 = persistentNavMeshAgent14;
				}
				Vector3 nextPosition = P_0.nextPosition;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(nextPosition, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector3;
				P_0.nextPosition = velocity2;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent12 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent12, P_1);
					P_0 = persistentNavMeshAgent12;
				}
				uint obstacleAvoidanceType = P_1.ReadUInt32();
				P_0.obstacleAvoidanceType = obstacleAvoidanceType;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent6 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent6, P_1);
					P_0 = persistentNavMeshAgent6;
				}
				NavMeshPath path = P_0.path;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				NavMeshPath navMeshPath = Read(path, P_1);
				ProtoReader.EndSubItem(token, P_1);
				NavMeshPath navMeshPath2 = navMeshPath;
				if (navMeshPath2 != null)
				{
					P_0.path = navMeshPath2;
				}
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent22 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent22, P_1);
					P_0 = persistentNavMeshAgent22;
				}
				float height = P_1.ReadSingle();
				P_0.radius = height;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent19 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent19, P_1);
					P_0 = persistentNavMeshAgent19;
				}
				float height = P_1.ReadSingle();
				P_0.speed = height;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent16 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent16, P_1);
					P_0 = persistentNavMeshAgent16;
				}
				float height = P_1.ReadSingle();
				P_0.stoppingDistance = height;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent13 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent13, P_1);
					P_0 = persistentNavMeshAgent13;
				}
				bool autoBraking = P_1.ReadBoolean();
				P_0.updatePosition = autoBraking;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent10 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent10, P_1);
					P_0 = persistentNavMeshAgent10;
				}
				bool autoBraking = P_1.ReadBoolean();
				P_0.updateRotation = autoBraking;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent7 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent7, P_1);
					P_0 = persistentNavMeshAgent7;
				}
				bool autoBraking = P_1.ReadBoolean();
				P_0.updateUpAxis = autoBraking;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent4 = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent4, P_1);
					P_0 = persistentNavMeshAgent4;
				}
				Vector3 velocity = P_0.velocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(velocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector;
				P_0.velocity = velocity2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentNavMeshAgent persistentNavMeshAgent = new PersistentNavMeshAgent();
					ProtoReader.NoteObject(persistentNavMeshAgent, P_1);
					P_0 = persistentNavMeshAgent;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentNavMeshAgent persistentNavMeshAgent23 = new PersistentNavMeshAgent();
			ProtoReader.NoteObject(persistentNavMeshAgent23, P_1);
			P_0 = persistentNavMeshAgent23;
		}
		return P_0;
	}

	private static void Write(PersistentEffector2D P_0, ProtoWriter P_1)
	{
		PersistentAreaEffector2D obj = P_0 as PersistentAreaEffector2D;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1101, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentPlatformEffector2D obj2 = P_0 as PersistentPlatformEffector2D;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1102, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentBuoyancyEffector2D obj3 = P_0 as PersistentBuoyancyEffector2D;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1103, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentPointEffector2D obj4 = P_0 as PersistentPointEffector2D;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1104, WireType.String, P_1);
						SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentSurfaceEffector2D obj5 = P_0 as PersistentSurfaceEffector2D;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1105, WireType.String, P_1);
							SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else if (P_0.GetType() != typeof(PersistentEffector2D))
						{
							TypeModel.ThrowUnexpectedSubtype(typeof(PersistentEffector2D), P_0.GetType());
						}
					}
				}
			}
		}
		int colliderMask = P_0.colliderMask;
		if (colliderMask != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(colliderMask, P_1);
		}
		bool useColliderMask = P_0.useColliderMask;
		if (useColliderMask)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useColliderMask, P_1);
		}
	}

	private static PersistentEffector2D Read(PersistentEffector2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentEffector2D persistentEffector2D3 = new PersistentEffector2D();
					ProtoReader.NoteObject(persistentEffector2D3, P_1);
					P_0 = persistentEffector2D3;
				}
				int colliderMask = P_1.ReadInt32();
				P_0.colliderMask = colliderMask;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentEffector2D persistentEffector2D2 = new PersistentEffector2D();
					ProtoReader.NoteObject(persistentEffector2D2, P_1);
					P_0 = persistentEffector2D2;
				}
				bool useColliderMask = P_1.ReadBoolean();
				P_0.useColliderMask = useColliderMask;
				break;
			}
			case 1101:
			{
				if (P_0 != null && !(P_0 is PersistentAreaEffector2D))
				{
					PersistentEffector2D from4 = P_0;
					PersistentAreaEffector2D persistentAreaEffector2D = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D, P_1);
					P_0 = (PersistentEffector2D)ProtoReader.Merge(P_1, from4, persistentAreaEffector2D);
				}
				PersistentAreaEffector2D obj4 = (PersistentAreaEffector2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAreaEffector2D persistentAreaEffector2D2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAreaEffector2D2;
				break;
			}
			case 1102:
			{
				if (P_0 != null && !(P_0 is PersistentPlatformEffector2D))
				{
					PersistentEffector2D from = P_0;
					PersistentPlatformEffector2D persistentPlatformEffector2D = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D, P_1);
					P_0 = (PersistentEffector2D)ProtoReader.Merge(P_1, from, persistentPlatformEffector2D);
				}
				PersistentPlatformEffector2D obj = (PersistentPlatformEffector2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPlatformEffector2D persistentPlatformEffector2D2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPlatformEffector2D2;
				break;
			}
			case 1103:
			{
				if (P_0 != null && !(P_0 is PersistentBuoyancyEffector2D))
				{
					PersistentEffector2D from3 = P_0;
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D, P_1);
					P_0 = (PersistentEffector2D)ProtoReader.Merge(P_1, from3, persistentBuoyancyEffector2D);
				}
				PersistentBuoyancyEffector2D obj3 = (PersistentBuoyancyEffector2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBuoyancyEffector2D persistentBuoyancyEffector2D2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBuoyancyEffector2D2;
				break;
			}
			case 1104:
			{
				if (P_0 != null && !(P_0 is PersistentPointEffector2D))
				{
					PersistentEffector2D from5 = P_0;
					PersistentPointEffector2D persistentPointEffector2D = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D, P_1);
					P_0 = (PersistentEffector2D)ProtoReader.Merge(P_1, from5, persistentPointEffector2D);
				}
				PersistentPointEffector2D obj5 = (PersistentPointEffector2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPointEffector2D persistentPointEffector2D2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPointEffector2D2;
				break;
			}
			case 1105:
			{
				if (P_0 != null && !(P_0 is PersistentSurfaceEffector2D))
				{
					PersistentEffector2D from2 = P_0;
					PersistentSurfaceEffector2D persistentSurfaceEffector2D = new PersistentSurfaceEffector2D();
					ProtoReader.NoteObject(persistentSurfaceEffector2D, P_1);
					P_0 = (PersistentEffector2D)ProtoReader.Merge(P_1, from2, persistentSurfaceEffector2D);
				}
				PersistentSurfaceEffector2D obj2 = (PersistentSurfaceEffector2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSurfaceEffector2D persistentSurfaceEffector2D2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSurfaceEffector2D2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentEffector2D persistentEffector2D = new PersistentEffector2D();
					ProtoReader.NoteObject(persistentEffector2D, P_1);
					P_0 = persistentEffector2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentEffector2D persistentEffector2D4 = new PersistentEffector2D();
			ProtoReader.NoteObject(persistentEffector2D4, P_1);
			P_0 = persistentEffector2D4;
		}
		return P_0;
	}

	private static void Write(PersistentSurfaceEffector2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSurfaceEffector2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSurfaceEffector2D), P_0.GetType());
		}
		float forceScale = P_0.forceScale;
		if (forceScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(forceScale, P_1);
		}
		float speed = P_0.speed;
		if (speed != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(speed, P_1);
		}
		float speedVariation = P_0.speedVariation;
		if (speedVariation != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(speedVariation, P_1);
		}
		bool useBounce = P_0.useBounce;
		if (useBounce)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useBounce, P_1);
		}
		bool useContactForce = P_0.useContactForce;
		if (useContactForce)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useContactForce, P_1);
		}
		bool useFriction = P_0.useFriction;
		if (useFriction)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useFriction, P_1);
		}
	}

	private static PersistentSurfaceEffector2D Read(PersistentSurfaceEffector2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSurfaceEffector2D persistentSurfaceEffector2D2 = new PersistentSurfaceEffector2D();
					ProtoReader.NoteObject(persistentSurfaceEffector2D2, P_1);
					P_0 = persistentSurfaceEffector2D2;
				}
				float forceScale = P_1.ReadSingle();
				P_0.forceScale = forceScale;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSurfaceEffector2D persistentSurfaceEffector2D5 = new PersistentSurfaceEffector2D();
					ProtoReader.NoteObject(persistentSurfaceEffector2D5, P_1);
					P_0 = persistentSurfaceEffector2D5;
				}
				float forceScale = P_1.ReadSingle();
				P_0.speed = forceScale;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSurfaceEffector2D persistentSurfaceEffector2D3 = new PersistentSurfaceEffector2D();
					ProtoReader.NoteObject(persistentSurfaceEffector2D3, P_1);
					P_0 = persistentSurfaceEffector2D3;
				}
				float forceScale = P_1.ReadSingle();
				P_0.speedVariation = forceScale;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSurfaceEffector2D persistentSurfaceEffector2D6 = new PersistentSurfaceEffector2D();
					ProtoReader.NoteObject(persistentSurfaceEffector2D6, P_1);
					P_0 = persistentSurfaceEffector2D6;
				}
				bool useFriction = P_1.ReadBoolean();
				P_0.useBounce = useFriction;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSurfaceEffector2D persistentSurfaceEffector2D7 = new PersistentSurfaceEffector2D();
					ProtoReader.NoteObject(persistentSurfaceEffector2D7, P_1);
					P_0 = persistentSurfaceEffector2D7;
				}
				bool useFriction = P_1.ReadBoolean();
				P_0.useContactForce = useFriction;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSurfaceEffector2D persistentSurfaceEffector2D4 = new PersistentSurfaceEffector2D();
					ProtoReader.NoteObject(persistentSurfaceEffector2D4, P_1);
					P_0 = persistentSurfaceEffector2D4;
				}
				bool useFriction = P_1.ReadBoolean();
				P_0.useFriction = useFriction;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSurfaceEffector2D persistentSurfaceEffector2D = new PersistentSurfaceEffector2D();
					ProtoReader.NoteObject(persistentSurfaceEffector2D, P_1);
					P_0 = persistentSurfaceEffector2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSurfaceEffector2D persistentSurfaceEffector2D8 = new PersistentSurfaceEffector2D();
			ProtoReader.NoteObject(persistentSurfaceEffector2D8, P_1);
			P_0 = persistentSurfaceEffector2D8;
		}
		return P_0;
	}

	private static void Write(PersistentPointEffector2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPointEffector2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPointEffector2D), P_0.GetType());
		}
		float angularDrag = P_0.angularDrag;
		if (angularDrag != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularDrag, P_1);
		}
		float distanceScale = P_0.distanceScale;
		if (distanceScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(distanceScale, P_1);
		}
		float drag = P_0.drag;
		if (drag != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(drag, P_1);
		}
		float forceMagnitude = P_0.forceMagnitude;
		if (forceMagnitude != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(forceMagnitude, P_1);
		}
		uint forceMode = P_0.forceMode;
		if (forceMode != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(forceMode, P_1);
		}
		uint forceSource = P_0.forceSource;
		if (forceSource != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(forceSource, P_1);
		}
		uint forceTarget = P_0.forceTarget;
		if (forceTarget != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(forceTarget, P_1);
		}
		float forceVariation = P_0.forceVariation;
		if (forceVariation != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(forceVariation, P_1);
		}
	}

	private static PersistentPointEffector2D Read(PersistentPointEffector2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D8 = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D8, P_1);
					P_0 = persistentPointEffector2D8;
				}
				float distanceScale = P_1.ReadSingle();
				P_0.angularDrag = distanceScale;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D2 = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D2, P_1);
					P_0 = persistentPointEffector2D2;
				}
				float distanceScale = P_1.ReadSingle();
				P_0.distanceScale = distanceScale;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D9 = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D9, P_1);
					P_0 = persistentPointEffector2D9;
				}
				float distanceScale = P_1.ReadSingle();
				P_0.drag = distanceScale;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D6 = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D6, P_1);
					P_0 = persistentPointEffector2D6;
				}
				float distanceScale = P_1.ReadSingle();
				P_0.forceMagnitude = distanceScale;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D5 = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D5, P_1);
					P_0 = persistentPointEffector2D5;
				}
				uint forceSource = P_1.ReadUInt32();
				P_0.forceMode = forceSource;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D3 = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D3, P_1);
					P_0 = persistentPointEffector2D3;
				}
				uint forceSource = P_1.ReadUInt32();
				P_0.forceSource = forceSource;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D7 = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D7, P_1);
					P_0 = persistentPointEffector2D7;
				}
				uint forceSource = P_1.ReadUInt32();
				P_0.forceTarget = forceSource;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D4 = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D4, P_1);
					P_0 = persistentPointEffector2D4;
				}
				float distanceScale = P_1.ReadSingle();
				P_0.forceVariation = distanceScale;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentPointEffector2D persistentPointEffector2D = new PersistentPointEffector2D();
					ProtoReader.NoteObject(persistentPointEffector2D, P_1);
					P_0 = persistentPointEffector2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentPointEffector2D persistentPointEffector2D10 = new PersistentPointEffector2D();
			ProtoReader.NoteObject(persistentPointEffector2D10, P_1);
			P_0 = persistentPointEffector2D10;
		}
		return P_0;
	}

	private static void Write(PersistentBuoyancyEffector2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentBuoyancyEffector2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBuoyancyEffector2D), P_0.GetType());
		}
		float angularDrag = P_0.angularDrag;
		if (angularDrag != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularDrag, P_1);
		}
		float density = P_0.density;
		if (density != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(density, P_1);
		}
		float flowAngle = P_0.flowAngle;
		if (flowAngle != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(flowAngle, P_1);
		}
		float flowMagnitude = P_0.flowMagnitude;
		if (flowMagnitude != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(flowMagnitude, P_1);
		}
		float flowVariation = P_0.flowVariation;
		if (flowVariation != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(flowVariation, P_1);
		}
		float linearDrag = P_0.linearDrag;
		if (linearDrag != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(linearDrag, P_1);
		}
		float surfaceLevel = P_0.surfaceLevel;
		if (surfaceLevel != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(surfaceLevel, P_1);
		}
	}

	private static PersistentBuoyancyEffector2D Read(PersistentBuoyancyEffector2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D5 = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D5, P_1);
					P_0 = persistentBuoyancyEffector2D5;
				}
				float flowVariation = P_1.ReadSingle();
				P_0.angularDrag = flowVariation;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D8 = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D8, P_1);
					P_0 = persistentBuoyancyEffector2D8;
				}
				float flowVariation = P_1.ReadSingle();
				P_0.density = flowVariation;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D6 = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D6, P_1);
					P_0 = persistentBuoyancyEffector2D6;
				}
				float flowVariation = P_1.ReadSingle();
				P_0.flowAngle = flowVariation;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D3 = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D3, P_1);
					P_0 = persistentBuoyancyEffector2D3;
				}
				float flowVariation = P_1.ReadSingle();
				P_0.flowMagnitude = flowVariation;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D2 = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D2, P_1);
					P_0 = persistentBuoyancyEffector2D2;
				}
				float flowVariation = P_1.ReadSingle();
				P_0.flowVariation = flowVariation;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D7 = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D7, P_1);
					P_0 = persistentBuoyancyEffector2D7;
				}
				float flowVariation = P_1.ReadSingle();
				P_0.linearDrag = flowVariation;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D4 = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D4, P_1);
					P_0 = persistentBuoyancyEffector2D4;
				}
				float flowVariation = P_1.ReadSingle();
				P_0.surfaceLevel = flowVariation;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBuoyancyEffector2D persistentBuoyancyEffector2D = new PersistentBuoyancyEffector2D();
					ProtoReader.NoteObject(persistentBuoyancyEffector2D, P_1);
					P_0 = persistentBuoyancyEffector2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBuoyancyEffector2D persistentBuoyancyEffector2D9 = new PersistentBuoyancyEffector2D();
			ProtoReader.NoteObject(persistentBuoyancyEffector2D9, P_1);
			P_0 = persistentBuoyancyEffector2D9;
		}
		return P_0;
	}

	private static void Write(PersistentPlatformEffector2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPlatformEffector2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPlatformEffector2D), P_0.GetType());
		}
		float rotationalOffset = P_0.rotationalOffset;
		if (rotationalOffset != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rotationalOffset, P_1);
		}
		float sideArc = P_0.sideArc;
		if (sideArc != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(sideArc, P_1);
		}
		float surfaceArc = P_0.surfaceArc;
		if (surfaceArc != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(surfaceArc, P_1);
		}
		bool useOneWay = P_0.useOneWay;
		if (useOneWay)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useOneWay, P_1);
		}
		bool useOneWayGrouping = P_0.useOneWayGrouping;
		if (useOneWayGrouping)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useOneWayGrouping, P_1);
		}
		bool useSideBounce = P_0.useSideBounce;
		if (useSideBounce)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useSideBounce, P_1);
		}
		bool useSideFriction = P_0.useSideFriction;
		if (useSideFriction)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useSideFriction, P_1);
		}
	}

	private static PersistentPlatformEffector2D Read(PersistentPlatformEffector2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentPlatformEffector2D persistentPlatformEffector2D5 = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D5, P_1);
					P_0 = persistentPlatformEffector2D5;
				}
				float rotationalOffset = P_1.ReadSingle();
				P_0.rotationalOffset = rotationalOffset;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentPlatformEffector2D persistentPlatformEffector2D8 = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D8, P_1);
					P_0 = persistentPlatformEffector2D8;
				}
				float rotationalOffset = P_1.ReadSingle();
				P_0.sideArc = rotationalOffset;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentPlatformEffector2D persistentPlatformEffector2D6 = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D6, P_1);
					P_0 = persistentPlatformEffector2D6;
				}
				float rotationalOffset = P_1.ReadSingle();
				P_0.surfaceArc = rotationalOffset;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentPlatformEffector2D persistentPlatformEffector2D3 = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D3, P_1);
					P_0 = persistentPlatformEffector2D3;
				}
				bool useOneWayGrouping = P_1.ReadBoolean();
				P_0.useOneWay = useOneWayGrouping;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentPlatformEffector2D persistentPlatformEffector2D2 = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D2, P_1);
					P_0 = persistentPlatformEffector2D2;
				}
				bool useOneWayGrouping = P_1.ReadBoolean();
				P_0.useOneWayGrouping = useOneWayGrouping;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentPlatformEffector2D persistentPlatformEffector2D7 = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D7, P_1);
					P_0 = persistentPlatformEffector2D7;
				}
				bool useOneWayGrouping = P_1.ReadBoolean();
				P_0.useSideBounce = useOneWayGrouping;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentPlatformEffector2D persistentPlatformEffector2D4 = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D4, P_1);
					P_0 = persistentPlatformEffector2D4;
				}
				bool useOneWayGrouping = P_1.ReadBoolean();
				P_0.useSideFriction = useOneWayGrouping;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentPlatformEffector2D persistentPlatformEffector2D = new PersistentPlatformEffector2D();
					ProtoReader.NoteObject(persistentPlatformEffector2D, P_1);
					P_0 = persistentPlatformEffector2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentPlatformEffector2D persistentPlatformEffector2D9 = new PersistentPlatformEffector2D();
			ProtoReader.NoteObject(persistentPlatformEffector2D9, P_1);
			P_0 = persistentPlatformEffector2D9;
		}
		return P_0;
	}

	private static void Write(PersistentAreaEffector2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAreaEffector2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAreaEffector2D), P_0.GetType());
		}
		float angularDrag = P_0.angularDrag;
		if (angularDrag != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularDrag, P_1);
		}
		float drag = P_0.drag;
		if (drag != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(drag, P_1);
		}
		float forceAngle = P_0.forceAngle;
		if (forceAngle != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(forceAngle, P_1);
		}
		float forceMagnitude = P_0.forceMagnitude;
		if (forceMagnitude != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(forceMagnitude, P_1);
		}
		uint forceTarget = P_0.forceTarget;
		if (forceTarget != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(forceTarget, P_1);
		}
		float forceVariation = P_0.forceVariation;
		if (forceVariation != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(forceVariation, P_1);
		}
		bool useGlobalAngle = P_0.useGlobalAngle;
		if (useGlobalAngle)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useGlobalAngle, P_1);
		}
	}

	private static PersistentAreaEffector2D Read(PersistentAreaEffector2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAreaEffector2D persistentAreaEffector2D5 = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D5, P_1);
					P_0 = persistentAreaEffector2D5;
				}
				float forceMagnitude = P_1.ReadSingle();
				P_0.angularDrag = forceMagnitude;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAreaEffector2D persistentAreaEffector2D8 = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D8, P_1);
					P_0 = persistentAreaEffector2D8;
				}
				float forceMagnitude = P_1.ReadSingle();
				P_0.drag = forceMagnitude;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAreaEffector2D persistentAreaEffector2D6 = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D6, P_1);
					P_0 = persistentAreaEffector2D6;
				}
				float forceMagnitude = P_1.ReadSingle();
				P_0.forceAngle = forceMagnitude;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentAreaEffector2D persistentAreaEffector2D3 = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D3, P_1);
					P_0 = persistentAreaEffector2D3;
				}
				float forceMagnitude = P_1.ReadSingle();
				P_0.forceMagnitude = forceMagnitude;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentAreaEffector2D persistentAreaEffector2D2 = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D2, P_1);
					P_0 = persistentAreaEffector2D2;
				}
				uint forceTarget = P_1.ReadUInt32();
				P_0.forceTarget = forceTarget;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentAreaEffector2D persistentAreaEffector2D7 = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D7, P_1);
					P_0 = persistentAreaEffector2D7;
				}
				float forceMagnitude = P_1.ReadSingle();
				P_0.forceVariation = forceMagnitude;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentAreaEffector2D persistentAreaEffector2D4 = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D4, P_1);
					P_0 = persistentAreaEffector2D4;
				}
				bool useGlobalAngle = P_1.ReadBoolean();
				P_0.useGlobalAngle = useGlobalAngle;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAreaEffector2D persistentAreaEffector2D = new PersistentAreaEffector2D();
					ProtoReader.NoteObject(persistentAreaEffector2D, P_1);
					P_0 = persistentAreaEffector2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAreaEffector2D persistentAreaEffector2D9 = new PersistentAreaEffector2D();
			ProtoReader.NoteObject(persistentAreaEffector2D9, P_1);
			P_0 = persistentAreaEffector2D9;
		}
		return P_0;
	}

	private static void Write(PersistentPhysicsUpdateBehaviour2D P_0, ProtoWriter P_1)
	{
		PersistentConstantForce2D obj = P_0 as PersistentConstantForce2D;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1100, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentPhysicsUpdateBehaviour2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPhysicsUpdateBehaviour2D), P_0.GetType());
		}
	}

	private static PersistentPhysicsUpdateBehaviour2D Read(PersistentPhysicsUpdateBehaviour2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1100)
			{
				if (P_0 != null && !(P_0 is PersistentConstantForce2D))
				{
					PersistentPhysicsUpdateBehaviour2D from = P_0;
					PersistentConstantForce2D persistentConstantForce2D = new PersistentConstantForce2D();
					ProtoReader.NoteObject(persistentConstantForce2D, P_1);
					P_0 = (PersistentPhysicsUpdateBehaviour2D)ProtoReader.Merge(P_1, from, persistentConstantForce2D);
				}
				PersistentConstantForce2D obj = (PersistentConstantForce2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentConstantForce2D persistentConstantForce2D2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentConstantForce2D2;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentPhysicsUpdateBehaviour2D persistentPhysicsUpdateBehaviour2D = new PersistentPhysicsUpdateBehaviour2D();
					ProtoReader.NoteObject(persistentPhysicsUpdateBehaviour2D, P_1);
					P_0 = persistentPhysicsUpdateBehaviour2D;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentPhysicsUpdateBehaviour2D persistentPhysicsUpdateBehaviour2D2 = new PersistentPhysicsUpdateBehaviour2D();
			ProtoReader.NoteObject(persistentPhysicsUpdateBehaviour2D2, P_1);
			P_0 = persistentPhysicsUpdateBehaviour2D2;
		}
		return P_0;
	}

	private static void Write(PersistentConstantForce2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentConstantForce2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentConstantForce2D), P_0.GetType());
		}
		Vector2 force = P_0.force;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(force, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 relativeForce = P_0.relativeForce;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(relativeForce, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float torque = P_0.torque;
		if (torque != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(torque, P_1);
		}
	}

	private static PersistentConstantForce2D Read(PersistentConstantForce2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentConstantForce2D persistentConstantForce2D3 = new PersistentConstantForce2D();
					ProtoReader.NoteObject(persistentConstantForce2D3, P_1);
					P_0 = persistentConstantForce2D3;
				}
				Vector2 force = P_0.force;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(force, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 relativeForce2 = vector2;
				P_0.force = relativeForce2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentConstantForce2D persistentConstantForce2D2 = new PersistentConstantForce2D();
					ProtoReader.NoteObject(persistentConstantForce2D2, P_1);
					P_0 = persistentConstantForce2D2;
				}
				Vector2 relativeForce = P_0.relativeForce;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(relativeForce, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 relativeForce2 = vector;
				P_0.relativeForce = relativeForce2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentConstantForce2D persistentConstantForce2D4 = new PersistentConstantForce2D();
					ProtoReader.NoteObject(persistentConstantForce2D4, P_1);
					P_0 = persistentConstantForce2D4;
				}
				float torque = P_1.ReadSingle();
				P_0.torque = torque;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentConstantForce2D persistentConstantForce2D = new PersistentConstantForce2D();
					ProtoReader.NoteObject(persistentConstantForce2D, P_1);
					P_0 = persistentConstantForce2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentConstantForce2D persistentConstantForce2D5 = new PersistentConstantForce2D();
			ProtoReader.NoteObject(persistentConstantForce2D5, P_1);
			P_0 = persistentConstantForce2D5;
		}
		return P_0;
	}

	private static void Write(PersistentCollider2D P_0, ProtoWriter P_1)
	{
		PersistentCircleCollider2D obj = P_0 as PersistentCircleCollider2D;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1087, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentBoxCollider2D obj2 = P_0 as PersistentBoxCollider2D;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1088, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentEdgeCollider2D obj3 = P_0 as PersistentEdgeCollider2D;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1089, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentCapsuleCollider2D obj4 = P_0 as PersistentCapsuleCollider2D;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1090, WireType.String, P_1);
						token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentCompositeCollider2D obj5 = P_0 as PersistentCompositeCollider2D;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1091, WireType.String, P_1);
							token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentPolygonCollider2D obj6 = P_0 as PersistentPolygonCollider2D;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1092, WireType.String, P_1);
								token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else if (P_0.GetType() != typeof(PersistentCollider2D))
							{
								TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCollider2D), P_0.GetType());
							}
						}
					}
				}
			}
		}
		float density = P_0.density;
		if (density != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(density, P_1);
		}
		bool isTrigger = P_0.isTrigger;
		if (isTrigger)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isTrigger, P_1);
		}
		Vector2 offset = P_0.offset;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(offset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long sharedMaterial = P_0.sharedMaterial;
		if (sharedMaterial != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sharedMaterial, P_1);
		}
		bool usedByComposite = P_0.usedByComposite;
		if (usedByComposite)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(usedByComposite, P_1);
		}
		bool usedByEffector = P_0.usedByEffector;
		if (usedByEffector)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(usedByEffector, P_1);
		}
	}

	private static PersistentCollider2D Read(PersistentCollider2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCollider2D persistentCollider2D3 = new PersistentCollider2D();
					ProtoReader.NoteObject(persistentCollider2D3, P_1);
					P_0 = persistentCollider2D3;
				}
				float density = P_1.ReadSingle();
				P_0.density = density;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCollider2D persistentCollider2D5 = new PersistentCollider2D();
					ProtoReader.NoteObject(persistentCollider2D5, P_1);
					P_0 = persistentCollider2D5;
				}
				bool usedByComposite = P_1.ReadBoolean();
				P_0.isTrigger = usedByComposite;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCollider2D persistentCollider2D6 = new PersistentCollider2D();
					ProtoReader.NoteObject(persistentCollider2D6, P_1);
					P_0 = persistentCollider2D6;
				}
				Vector2 offset = P_0.offset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(offset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 offset2 = vector;
				P_0.offset = offset2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCollider2D persistentCollider2D2 = new PersistentCollider2D();
					ProtoReader.NoteObject(persistentCollider2D2, P_1);
					P_0 = persistentCollider2D2;
				}
				long sharedMaterial = P_1.ReadInt64();
				P_0.sharedMaterial = sharedMaterial;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentCollider2D persistentCollider2D4 = new PersistentCollider2D();
					ProtoReader.NoteObject(persistentCollider2D4, P_1);
					P_0 = persistentCollider2D4;
				}
				bool usedByComposite = P_1.ReadBoolean();
				P_0.usedByComposite = usedByComposite;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentCollider2D persistentCollider2D7 = new PersistentCollider2D();
					ProtoReader.NoteObject(persistentCollider2D7, P_1);
					P_0 = persistentCollider2D7;
				}
				bool usedByComposite = P_1.ReadBoolean();
				P_0.usedByEffector = usedByComposite;
				break;
			}
			case 1087:
			{
				if (P_0 != null && !(P_0 is PersistentCircleCollider2D))
				{
					PersistentCollider2D from = P_0;
					PersistentCircleCollider2D persistentCircleCollider2D = new PersistentCircleCollider2D();
					ProtoReader.NoteObject(persistentCircleCollider2D, P_1);
					P_0 = (PersistentCollider2D)ProtoReader.Merge(P_1, from, persistentCircleCollider2D);
				}
				PersistentCircleCollider2D obj = (PersistentCircleCollider2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCircleCollider2D persistentCircleCollider2D2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCircleCollider2D2;
				break;
			}
			case 1088:
			{
				if (P_0 != null && !(P_0 is PersistentBoxCollider2D))
				{
					PersistentCollider2D from5 = P_0;
					PersistentBoxCollider2D persistentBoxCollider2D = new PersistentBoxCollider2D();
					ProtoReader.NoteObject(persistentBoxCollider2D, P_1);
					P_0 = (PersistentCollider2D)ProtoReader.Merge(P_1, from5, persistentBoxCollider2D);
				}
				PersistentBoxCollider2D obj5 = (PersistentBoxCollider2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBoxCollider2D persistentBoxCollider2D2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBoxCollider2D2;
				break;
			}
			case 1089:
			{
				if (P_0 != null && !(P_0 is PersistentEdgeCollider2D))
				{
					PersistentCollider2D from3 = P_0;
					PersistentEdgeCollider2D persistentEdgeCollider2D = new PersistentEdgeCollider2D();
					ProtoReader.NoteObject(persistentEdgeCollider2D, P_1);
					P_0 = (PersistentCollider2D)ProtoReader.Merge(P_1, from3, persistentEdgeCollider2D);
				}
				PersistentEdgeCollider2D obj3 = (PersistentEdgeCollider2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentEdgeCollider2D persistentEdgeCollider2D2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentEdgeCollider2D2;
				break;
			}
			case 1090:
			{
				if (P_0 != null && !(P_0 is PersistentCapsuleCollider2D))
				{
					PersistentCollider2D from6 = P_0;
					PersistentCapsuleCollider2D persistentCapsuleCollider2D = new PersistentCapsuleCollider2D();
					ProtoReader.NoteObject(persistentCapsuleCollider2D, P_1);
					P_0 = (PersistentCollider2D)ProtoReader.Merge(P_1, from6, persistentCapsuleCollider2D);
				}
				PersistentCapsuleCollider2D obj6 = (PersistentCapsuleCollider2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCapsuleCollider2D persistentCapsuleCollider2D2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCapsuleCollider2D2;
				break;
			}
			case 1091:
			{
				if (P_0 != null && !(P_0 is PersistentCompositeCollider2D))
				{
					PersistentCollider2D from4 = P_0;
					PersistentCompositeCollider2D persistentCompositeCollider2D = new PersistentCompositeCollider2D();
					ProtoReader.NoteObject(persistentCompositeCollider2D, P_1);
					P_0 = (PersistentCollider2D)ProtoReader.Merge(P_1, from4, persistentCompositeCollider2D);
				}
				PersistentCompositeCollider2D obj4 = (PersistentCompositeCollider2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCompositeCollider2D persistentCompositeCollider2D2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCompositeCollider2D2;
				break;
			}
			case 1092:
			{
				if (P_0 != null && !(P_0 is PersistentPolygonCollider2D))
				{
					PersistentCollider2D from2 = P_0;
					PersistentPolygonCollider2D persistentPolygonCollider2D = new PersistentPolygonCollider2D();
					ProtoReader.NoteObject(persistentPolygonCollider2D, P_1);
					P_0 = (PersistentCollider2D)ProtoReader.Merge(P_1, from2, persistentPolygonCollider2D);
				}
				PersistentPolygonCollider2D obj2 = (PersistentPolygonCollider2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPolygonCollider2D persistentPolygonCollider2D2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPolygonCollider2D2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCollider2D persistentCollider2D = new PersistentCollider2D();
					ProtoReader.NoteObject(persistentCollider2D, P_1);
					P_0 = persistentCollider2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCollider2D persistentCollider2D8 = new PersistentCollider2D();
			ProtoReader.NoteObject(persistentCollider2D8, P_1);
			P_0 = persistentCollider2D8;
		}
		return P_0;
	}

	private static void Write(PersistentPolygonCollider2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPolygonCollider2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPolygonCollider2D), P_0.GetType());
		}
		bool autoTiling = P_0.autoTiling;
		if (autoTiling)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoTiling, P_1);
		}
		int pathCount = P_0.pathCount;
		if (pathCount != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(pathCount, P_1);
		}
		Vector2[] points = P_0.points;
		if (points != null)
		{
			Vector2[] array = points;
			foreach (Vector2 vector in array)
			{
				ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PersistentPolygonCollider2D Read(PersistentPolygonCollider2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentPolygonCollider2D persistentPolygonCollider2D3 = new PersistentPolygonCollider2D();
					ProtoReader.NoteObject(persistentPolygonCollider2D3, P_1);
					P_0 = persistentPolygonCollider2D3;
				}
				bool autoTiling = P_1.ReadBoolean();
				P_0.autoTiling = autoTiling;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentPolygonCollider2D persistentPolygonCollider2D2 = new PersistentPolygonCollider2D();
					ProtoReader.NoteObject(persistentPolygonCollider2D2, P_1);
					P_0 = persistentPolygonCollider2D2;
				}
				int pathCount = P_1.ReadInt32();
				P_0.pathCount = pathCount;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentPolygonCollider2D persistentPolygonCollider2D4 = new PersistentPolygonCollider2D();
					ProtoReader.NoteObject(persistentPolygonCollider2D4, P_1);
					P_0 = persistentPolygonCollider2D4;
				}
				Vector2[] points = P_0.points;
				List<Vector2> list = new List<Vector2>();
				int pathCount = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector2 item = Read(default(Vector2), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(pathCount));
				Vector2[] array = new Vector2[(pathCount = ((points != null) ? points.Length : 0)) + list.Count];
				if (pathCount != 0)
				{
					points.CopyTo(array, 0);
				}
				list.CopyTo(array, pathCount);
				array = array;
				if (array != null)
				{
					P_0.points = array;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentPolygonCollider2D persistentPolygonCollider2D = new PersistentPolygonCollider2D();
					ProtoReader.NoteObject(persistentPolygonCollider2D, P_1);
					P_0 = persistentPolygonCollider2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentPolygonCollider2D persistentPolygonCollider2D5 = new PersistentPolygonCollider2D();
			ProtoReader.NoteObject(persistentPolygonCollider2D5, P_1);
			P_0 = persistentPolygonCollider2D5;
		}
		return P_0;
	}

	private static void Write(PersistentCompositeCollider2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCompositeCollider2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCompositeCollider2D), P_0.GetType());
		}
		float edgeRadius = P_0.edgeRadius;
		if (edgeRadius != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(edgeRadius, P_1);
		}
		uint generationType = P_0.generationType;
		if (generationType != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(generationType, P_1);
		}
		uint geometryType = P_0.geometryType;
		if (geometryType != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(geometryType, P_1);
		}
		float vertexDistance = P_0.vertexDistance;
		if (vertexDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(vertexDistance, P_1);
		}
	}

	private static PersistentCompositeCollider2D Read(PersistentCompositeCollider2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCompositeCollider2D persistentCompositeCollider2D3 = new PersistentCompositeCollider2D();
					ProtoReader.NoteObject(persistentCompositeCollider2D3, P_1);
					P_0 = persistentCompositeCollider2D3;
				}
				float edgeRadius = P_1.ReadSingle();
				P_0.edgeRadius = edgeRadius;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCompositeCollider2D persistentCompositeCollider2D5 = new PersistentCompositeCollider2D();
					ProtoReader.NoteObject(persistentCompositeCollider2D5, P_1);
					P_0 = persistentCompositeCollider2D5;
				}
				uint geometryType = P_1.ReadUInt32();
				P_0.generationType = geometryType;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCompositeCollider2D persistentCompositeCollider2D2 = new PersistentCompositeCollider2D();
					ProtoReader.NoteObject(persistentCompositeCollider2D2, P_1);
					P_0 = persistentCompositeCollider2D2;
				}
				uint geometryType = P_1.ReadUInt32();
				P_0.geometryType = geometryType;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCompositeCollider2D persistentCompositeCollider2D4 = new PersistentCompositeCollider2D();
					ProtoReader.NoteObject(persistentCompositeCollider2D4, P_1);
					P_0 = persistentCompositeCollider2D4;
				}
				float edgeRadius = P_1.ReadSingle();
				P_0.vertexDistance = edgeRadius;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCompositeCollider2D persistentCompositeCollider2D = new PersistentCompositeCollider2D();
					ProtoReader.NoteObject(persistentCompositeCollider2D, P_1);
					P_0 = persistentCompositeCollider2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCompositeCollider2D persistentCompositeCollider2D6 = new PersistentCompositeCollider2D();
			ProtoReader.NoteObject(persistentCompositeCollider2D6, P_1);
			P_0 = persistentCompositeCollider2D6;
		}
		return P_0;
	}

	private static void Write(PersistentCapsuleCollider2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCapsuleCollider2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCapsuleCollider2D), P_0.GetType());
		}
		uint direction = P_0.direction;
		if (direction != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(direction, P_1);
		}
		Vector2 size = P_0.size;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentCapsuleCollider2D Read(PersistentCapsuleCollider2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCapsuleCollider2D persistentCapsuleCollider2D2 = new PersistentCapsuleCollider2D();
					ProtoReader.NoteObject(persistentCapsuleCollider2D2, P_1);
					P_0 = persistentCapsuleCollider2D2;
				}
				uint direction = P_1.ReadUInt32();
				P_0.direction = direction;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCapsuleCollider2D persistentCapsuleCollider2D3 = new PersistentCapsuleCollider2D();
					ProtoReader.NoteObject(persistentCapsuleCollider2D3, P_1);
					P_0 = persistentCapsuleCollider2D3;
				}
				Vector2 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 size2 = vector;
				P_0.size = size2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCapsuleCollider2D persistentCapsuleCollider2D = new PersistentCapsuleCollider2D();
					ProtoReader.NoteObject(persistentCapsuleCollider2D, P_1);
					P_0 = persistentCapsuleCollider2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCapsuleCollider2D persistentCapsuleCollider2D4 = new PersistentCapsuleCollider2D();
			ProtoReader.NoteObject(persistentCapsuleCollider2D4, P_1);
			P_0 = persistentCapsuleCollider2D4;
		}
		return P_0;
	}

	private static void Write(PersistentEdgeCollider2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentEdgeCollider2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentEdgeCollider2D), P_0.GetType());
		}
		float edgeRadius = P_0.edgeRadius;
		if (edgeRadius != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(edgeRadius, P_1);
		}
		Vector2[] points = P_0.points;
		if (points != null)
		{
			Vector2[] array = points;
			foreach (Vector2 vector in array)
			{
				ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PersistentEdgeCollider2D Read(PersistentEdgeCollider2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentEdgeCollider2D persistentEdgeCollider2D2 = new PersistentEdgeCollider2D();
					ProtoReader.NoteObject(persistentEdgeCollider2D2, P_1);
					P_0 = persistentEdgeCollider2D2;
				}
				float edgeRadius = P_1.ReadSingle();
				P_0.edgeRadius = edgeRadius;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentEdgeCollider2D persistentEdgeCollider2D3 = new PersistentEdgeCollider2D();
					ProtoReader.NoteObject(persistentEdgeCollider2D3, P_1);
					P_0 = persistentEdgeCollider2D3;
				}
				Vector2[] points = P_0.points;
				List<Vector2> list = new List<Vector2>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector2 item = Read(default(Vector2), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector2[] array = new Vector2[(fieldNumber = ((points != null) ? points.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					points.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.points = array;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentEdgeCollider2D persistentEdgeCollider2D = new PersistentEdgeCollider2D();
					ProtoReader.NoteObject(persistentEdgeCollider2D, P_1);
					P_0 = persistentEdgeCollider2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentEdgeCollider2D persistentEdgeCollider2D4 = new PersistentEdgeCollider2D();
			ProtoReader.NoteObject(persistentEdgeCollider2D4, P_1);
			P_0 = persistentEdgeCollider2D4;
		}
		return P_0;
	}

	private static void Write(PersistentBoxCollider2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentBoxCollider2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBoxCollider2D), P_0.GetType());
		}
		bool autoTiling = P_0.autoTiling;
		if (autoTiling)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoTiling, P_1);
		}
		float edgeRadius = P_0.edgeRadius;
		if (edgeRadius != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(edgeRadius, P_1);
		}
		Vector2 size = P_0.size;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentBoxCollider2D Read(PersistentBoxCollider2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentBoxCollider2D persistentBoxCollider2D3 = new PersistentBoxCollider2D();
					ProtoReader.NoteObject(persistentBoxCollider2D3, P_1);
					P_0 = persistentBoxCollider2D3;
				}
				bool autoTiling = P_1.ReadBoolean();
				P_0.autoTiling = autoTiling;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentBoxCollider2D persistentBoxCollider2D2 = new PersistentBoxCollider2D();
					ProtoReader.NoteObject(persistentBoxCollider2D2, P_1);
					P_0 = persistentBoxCollider2D2;
				}
				float edgeRadius = P_1.ReadSingle();
				P_0.edgeRadius = edgeRadius;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentBoxCollider2D persistentBoxCollider2D4 = new PersistentBoxCollider2D();
					ProtoReader.NoteObject(persistentBoxCollider2D4, P_1);
					P_0 = persistentBoxCollider2D4;
				}
				Vector2 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 size2 = vector;
				P_0.size = size2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBoxCollider2D persistentBoxCollider2D = new PersistentBoxCollider2D();
					ProtoReader.NoteObject(persistentBoxCollider2D, P_1);
					P_0 = persistentBoxCollider2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBoxCollider2D persistentBoxCollider2D5 = new PersistentBoxCollider2D();
			ProtoReader.NoteObject(persistentBoxCollider2D5, P_1);
			P_0 = persistentBoxCollider2D5;
		}
		return P_0;
	}

	private static void Write(PersistentCircleCollider2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCircleCollider2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCircleCollider2D), P_0.GetType());
		}
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
	}

	private static PersistentCircleCollider2D Read(PersistentCircleCollider2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentCircleCollider2D persistentCircleCollider2D = new PersistentCircleCollider2D();
					ProtoReader.NoteObject(persistentCircleCollider2D, P_1);
					P_0 = persistentCircleCollider2D;
				}
				float radius = P_1.ReadSingle();
				P_0.radius = radius;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentCircleCollider2D persistentCircleCollider2D2 = new PersistentCircleCollider2D();
					ProtoReader.NoteObject(persistentCircleCollider2D2, P_1);
					P_0 = persistentCircleCollider2D2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentCircleCollider2D persistentCircleCollider2D3 = new PersistentCircleCollider2D();
			ProtoReader.NoteObject(persistentCircleCollider2D3, P_1);
			P_0 = persistentCircleCollider2D3;
		}
		return P_0;
	}

	private static void Write(PersistentJoint2D P_0, ProtoWriter P_1)
	{
		PersistentAnchoredJoint2D obj = P_0 as PersistentAnchoredJoint2D;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1084, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentRelativeJoint2D obj2 = P_0 as PersistentRelativeJoint2D;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1085, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentTargetJoint2D obj3 = P_0 as PersistentTargetJoint2D;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1086, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else if (P_0.GetType() != typeof(PersistentJoint2D))
				{
					TypeModel.ThrowUnexpectedSubtype(typeof(PersistentJoint2D), P_0.GetType());
				}
			}
		}
		float breakForce = P_0.breakForce;
		if (breakForce != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(breakForce, P_1);
		}
		float breakTorque = P_0.breakTorque;
		if (breakTorque != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(breakTorque, P_1);
		}
		long connectedBody = P_0.connectedBody;
		if (connectedBody != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(connectedBody, P_1);
		}
		bool enableCollision = P_0.enableCollision;
		if (enableCollision)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enableCollision, P_1);
		}
	}

	private static PersistentJoint2D Read(PersistentJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentJoint2D persistentJoint2D4 = new PersistentJoint2D();
					ProtoReader.NoteObject(persistentJoint2D4, P_1);
					P_0 = persistentJoint2D4;
				}
				float breakTorque = P_1.ReadSingle();
				P_0.breakForce = breakTorque;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentJoint2D persistentJoint2D3 = new PersistentJoint2D();
					ProtoReader.NoteObject(persistentJoint2D3, P_1);
					P_0 = persistentJoint2D3;
				}
				float breakTorque = P_1.ReadSingle();
				P_0.breakTorque = breakTorque;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentJoint2D persistentJoint2D5 = new PersistentJoint2D();
					ProtoReader.NoteObject(persistentJoint2D5, P_1);
					P_0 = persistentJoint2D5;
				}
				long connectedBody = P_1.ReadInt64();
				P_0.connectedBody = connectedBody;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentJoint2D persistentJoint2D2 = new PersistentJoint2D();
					ProtoReader.NoteObject(persistentJoint2D2, P_1);
					P_0 = persistentJoint2D2;
				}
				bool enableCollision = P_1.ReadBoolean();
				P_0.enableCollision = enableCollision;
				break;
			}
			case 1084:
			{
				if (P_0 != null && !(P_0 is PersistentAnchoredJoint2D))
				{
					PersistentJoint2D from2 = P_0;
					PersistentAnchoredJoint2D persistentAnchoredJoint2D = new PersistentAnchoredJoint2D();
					ProtoReader.NoteObject(persistentAnchoredJoint2D, P_1);
					P_0 = (PersistentJoint2D)ProtoReader.Merge(P_1, from2, persistentAnchoredJoint2D);
				}
				PersistentAnchoredJoint2D obj2 = (PersistentAnchoredJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnchoredJoint2D persistentAnchoredJoint2D2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAnchoredJoint2D2;
				break;
			}
			case 1085:
			{
				if (P_0 != null && !(P_0 is PersistentRelativeJoint2D))
				{
					PersistentJoint2D from3 = P_0;
					PersistentRelativeJoint2D persistentRelativeJoint2D = new PersistentRelativeJoint2D();
					ProtoReader.NoteObject(persistentRelativeJoint2D, P_1);
					P_0 = (PersistentJoint2D)ProtoReader.Merge(P_1, from3, persistentRelativeJoint2D);
				}
				PersistentRelativeJoint2D obj3 = (PersistentRelativeJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRelativeJoint2D persistentRelativeJoint2D2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRelativeJoint2D2;
				break;
			}
			case 1086:
			{
				if (P_0 != null && !(P_0 is PersistentTargetJoint2D))
				{
					PersistentJoint2D from = P_0;
					PersistentTargetJoint2D persistentTargetJoint2D = new PersistentTargetJoint2D();
					ProtoReader.NoteObject(persistentTargetJoint2D, P_1);
					P_0 = (PersistentJoint2D)ProtoReader.Merge(P_1, from, persistentTargetJoint2D);
				}
				PersistentTargetJoint2D obj = (PersistentTargetJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentTargetJoint2D persistentTargetJoint2D2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentTargetJoint2D2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentJoint2D persistentJoint2D = new PersistentJoint2D();
					ProtoReader.NoteObject(persistentJoint2D, P_1);
					P_0 = persistentJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentJoint2D persistentJoint2D6 = new PersistentJoint2D();
			ProtoReader.NoteObject(persistentJoint2D6, P_1);
			P_0 = persistentJoint2D6;
		}
		return P_0;
	}

	private static void Write(PersistentTargetJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTargetJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTargetJoint2D), P_0.GetType());
		}
		Vector2 anchor = P_0.anchor;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(anchor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool autoConfigureTarget = P_0.autoConfigureTarget;
		if (autoConfigureTarget)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoConfigureTarget, P_1);
		}
		float dampingRatio = P_0.dampingRatio;
		if (dampingRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dampingRatio, P_1);
		}
		float frequency = P_0.frequency;
		if (frequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(frequency, P_1);
		}
		float maxForce = P_0.maxForce;
		if (maxForce != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxForce, P_1);
		}
		Vector2 target = P_0.target;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(target, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentTargetJoint2D Read(PersistentTargetJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTargetJoint2D persistentTargetJoint2D2 = new PersistentTargetJoint2D();
					ProtoReader.NoteObject(persistentTargetJoint2D2, P_1);
					P_0 = persistentTargetJoint2D2;
				}
				Vector2 anchor = P_0.anchor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(anchor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchor2 = vector;
				P_0.anchor = anchor2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTargetJoint2D persistentTargetJoint2D5 = new PersistentTargetJoint2D();
					ProtoReader.NoteObject(persistentTargetJoint2D5, P_1);
					P_0 = persistentTargetJoint2D5;
				}
				bool autoConfigureTarget = P_1.ReadBoolean();
				P_0.autoConfigureTarget = autoConfigureTarget;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTargetJoint2D persistentTargetJoint2D3 = new PersistentTargetJoint2D();
					ProtoReader.NoteObject(persistentTargetJoint2D3, P_1);
					P_0 = persistentTargetJoint2D3;
				}
				float dampingRatio = P_1.ReadSingle();
				P_0.dampingRatio = dampingRatio;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTargetJoint2D persistentTargetJoint2D6 = new PersistentTargetJoint2D();
					ProtoReader.NoteObject(persistentTargetJoint2D6, P_1);
					P_0 = persistentTargetJoint2D6;
				}
				float dampingRatio = P_1.ReadSingle();
				P_0.frequency = dampingRatio;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTargetJoint2D persistentTargetJoint2D7 = new PersistentTargetJoint2D();
					ProtoReader.NoteObject(persistentTargetJoint2D7, P_1);
					P_0 = persistentTargetJoint2D7;
				}
				float dampingRatio = P_1.ReadSingle();
				P_0.maxForce = dampingRatio;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTargetJoint2D persistentTargetJoint2D4 = new PersistentTargetJoint2D();
					ProtoReader.NoteObject(persistentTargetJoint2D4, P_1);
					P_0 = persistentTargetJoint2D4;
				}
				Vector2 target = P_0.target;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(target, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchor2 = vector2;
				P_0.target = anchor2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTargetJoint2D persistentTargetJoint2D = new PersistentTargetJoint2D();
					ProtoReader.NoteObject(persistentTargetJoint2D, P_1);
					P_0 = persistentTargetJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTargetJoint2D persistentTargetJoint2D8 = new PersistentTargetJoint2D();
			ProtoReader.NoteObject(persistentTargetJoint2D8, P_1);
			P_0 = persistentTargetJoint2D8;
		}
		return P_0;
	}

	private static void Write(PersistentRelativeJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRelativeJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRelativeJoint2D), P_0.GetType());
		}
		float angularOffset = P_0.angularOffset;
		if (angularOffset != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularOffset, P_1);
		}
		bool autoConfigureOffset = P_0.autoConfigureOffset;
		if (autoConfigureOffset)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoConfigureOffset, P_1);
		}
		float correctionScale = P_0.correctionScale;
		if (correctionScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(correctionScale, P_1);
		}
		Vector2 linearOffset = P_0.linearOffset;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(linearOffset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float maxForce = P_0.maxForce;
		if (maxForce != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxForce, P_1);
		}
		float maxTorque = P_0.maxTorque;
		if (maxTorque != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxTorque, P_1);
		}
	}

	private static PersistentRelativeJoint2D Read(PersistentRelativeJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRelativeJoint2D persistentRelativeJoint2D2 = new PersistentRelativeJoint2D();
					ProtoReader.NoteObject(persistentRelativeJoint2D2, P_1);
					P_0 = persistentRelativeJoint2D2;
				}
				float angularOffset = P_1.ReadSingle();
				P_0.angularOffset = angularOffset;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRelativeJoint2D persistentRelativeJoint2D5 = new PersistentRelativeJoint2D();
					ProtoReader.NoteObject(persistentRelativeJoint2D5, P_1);
					P_0 = persistentRelativeJoint2D5;
				}
				bool autoConfigureOffset = P_1.ReadBoolean();
				P_0.autoConfigureOffset = autoConfigureOffset;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentRelativeJoint2D persistentRelativeJoint2D3 = new PersistentRelativeJoint2D();
					ProtoReader.NoteObject(persistentRelativeJoint2D3, P_1);
					P_0 = persistentRelativeJoint2D3;
				}
				float angularOffset = P_1.ReadSingle();
				P_0.correctionScale = angularOffset;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentRelativeJoint2D persistentRelativeJoint2D6 = new PersistentRelativeJoint2D();
					ProtoReader.NoteObject(persistentRelativeJoint2D6, P_1);
					P_0 = persistentRelativeJoint2D6;
				}
				Vector2 linearOffset = P_0.linearOffset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(linearOffset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 linearOffset2 = vector;
				P_0.linearOffset = linearOffset2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentRelativeJoint2D persistentRelativeJoint2D7 = new PersistentRelativeJoint2D();
					ProtoReader.NoteObject(persistentRelativeJoint2D7, P_1);
					P_0 = persistentRelativeJoint2D7;
				}
				float angularOffset = P_1.ReadSingle();
				P_0.maxForce = angularOffset;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentRelativeJoint2D persistentRelativeJoint2D4 = new PersistentRelativeJoint2D();
					ProtoReader.NoteObject(persistentRelativeJoint2D4, P_1);
					P_0 = persistentRelativeJoint2D4;
				}
				float angularOffset = P_1.ReadSingle();
				P_0.maxTorque = angularOffset;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRelativeJoint2D persistentRelativeJoint2D = new PersistentRelativeJoint2D();
					ProtoReader.NoteObject(persistentRelativeJoint2D, P_1);
					P_0 = persistentRelativeJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRelativeJoint2D persistentRelativeJoint2D8 = new PersistentRelativeJoint2D();
			ProtoReader.NoteObject(persistentRelativeJoint2D8, P_1);
			P_0 = persistentRelativeJoint2D8;
		}
		return P_0;
	}

	private static void Write(PersistentAnchoredJoint2D P_0, ProtoWriter P_1)
	{
		PersistentSpringJoint2D obj = P_0 as PersistentSpringJoint2D;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1093, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentDistanceJoint2D obj2 = P_0 as PersistentDistanceJoint2D;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1094, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentFrictionJoint2D obj3 = P_0 as PersistentFrictionJoint2D;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1095, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentHingeJoint2D obj4 = P_0 as PersistentHingeJoint2D;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1096, WireType.String, P_1);
						token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentSliderJoint2D obj5 = P_0 as PersistentSliderJoint2D;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1097, WireType.String, P_1);
							token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentFixedJoint2D obj6 = P_0 as PersistentFixedJoint2D;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1098, WireType.String, P_1);
								token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else
							{
								PersistentWheelJoint2D obj7 = P_0 as PersistentWheelJoint2D;
								if (obj7 != null)
								{
									ProtoWriter.WriteFieldHeader(1099, WireType.String, P_1);
									token = ProtoWriter.StartSubItem(null, P_1);
									Write(obj7, P_1);
									ProtoWriter.EndSubItem(token, P_1);
								}
								else if (P_0.GetType() != typeof(PersistentAnchoredJoint2D))
								{
									TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAnchoredJoint2D), P_0.GetType());
								}
							}
						}
					}
				}
			}
		}
		Vector2 anchor = P_0.anchor;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(anchor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool autoConfigureConnectedAnchor = P_0.autoConfigureConnectedAnchor;
		if (autoConfigureConnectedAnchor)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoConfigureConnectedAnchor, P_1);
		}
		Vector2 connectedAnchor = P_0.connectedAnchor;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(connectedAnchor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentAnchoredJoint2D Read(PersistentAnchoredJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAnchoredJoint2D persistentAnchoredJoint2D2 = new PersistentAnchoredJoint2D();
					ProtoReader.NoteObject(persistentAnchoredJoint2D2, P_1);
					P_0 = persistentAnchoredJoint2D2;
				}
				Vector2 anchor = P_0.anchor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(anchor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchor2 = vector;
				P_0.anchor = anchor2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAnchoredJoint2D persistentAnchoredJoint2D3 = new PersistentAnchoredJoint2D();
					ProtoReader.NoteObject(persistentAnchoredJoint2D3, P_1);
					P_0 = persistentAnchoredJoint2D3;
				}
				bool autoConfigureConnectedAnchor = P_1.ReadBoolean();
				P_0.autoConfigureConnectedAnchor = autoConfigureConnectedAnchor;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentAnchoredJoint2D persistentAnchoredJoint2D4 = new PersistentAnchoredJoint2D();
					ProtoReader.NoteObject(persistentAnchoredJoint2D4, P_1);
					P_0 = persistentAnchoredJoint2D4;
				}
				Vector2 connectedAnchor = P_0.connectedAnchor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(connectedAnchor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 anchor2 = vector2;
				P_0.connectedAnchor = anchor2;
				break;
			}
			case 1093:
			{
				if (P_0 != null && !(P_0 is PersistentSpringJoint2D))
				{
					PersistentAnchoredJoint2D from5 = P_0;
					PersistentSpringJoint2D persistentSpringJoint2D = new PersistentSpringJoint2D();
					ProtoReader.NoteObject(persistentSpringJoint2D, P_1);
					P_0 = (PersistentAnchoredJoint2D)ProtoReader.Merge(P_1, from5, persistentSpringJoint2D);
				}
				PersistentSpringJoint2D obj5 = (PersistentSpringJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSpringJoint2D persistentSpringJoint2D2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSpringJoint2D2;
				break;
			}
			case 1094:
			{
				if (P_0 != null && !(P_0 is PersistentDistanceJoint2D))
				{
					PersistentAnchoredJoint2D from7 = P_0;
					PersistentDistanceJoint2D persistentDistanceJoint2D = new PersistentDistanceJoint2D();
					ProtoReader.NoteObject(persistentDistanceJoint2D, P_1);
					P_0 = (PersistentAnchoredJoint2D)ProtoReader.Merge(P_1, from7, persistentDistanceJoint2D);
				}
				PersistentDistanceJoint2D obj7 = (PersistentDistanceJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentDistanceJoint2D persistentDistanceJoint2D2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentDistanceJoint2D2;
				break;
			}
			case 1095:
			{
				if (P_0 != null && !(P_0 is PersistentFrictionJoint2D))
				{
					PersistentAnchoredJoint2D from3 = P_0;
					PersistentFrictionJoint2D persistentFrictionJoint2D = new PersistentFrictionJoint2D();
					ProtoReader.NoteObject(persistentFrictionJoint2D, P_1);
					P_0 = (PersistentAnchoredJoint2D)ProtoReader.Merge(P_1, from3, persistentFrictionJoint2D);
				}
				PersistentFrictionJoint2D obj3 = (PersistentFrictionJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentFrictionJoint2D persistentFrictionJoint2D2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentFrictionJoint2D2;
				break;
			}
			case 1096:
			{
				if (P_0 != null && !(P_0 is PersistentHingeJoint2D))
				{
					PersistentAnchoredJoint2D from4 = P_0;
					PersistentHingeJoint2D persistentHingeJoint2D = new PersistentHingeJoint2D();
					ProtoReader.NoteObject(persistentHingeJoint2D, P_1);
					P_0 = (PersistentAnchoredJoint2D)ProtoReader.Merge(P_1, from4, persistentHingeJoint2D);
				}
				PersistentHingeJoint2D obj4 = (PersistentHingeJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentHingeJoint2D persistentHingeJoint2D2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentHingeJoint2D2;
				break;
			}
			case 1097:
			{
				if (P_0 != null && !(P_0 is PersistentSliderJoint2D))
				{
					PersistentAnchoredJoint2D from = P_0;
					PersistentSliderJoint2D persistentSliderJoint2D = new PersistentSliderJoint2D();
					ProtoReader.NoteObject(persistentSliderJoint2D, P_1);
					P_0 = (PersistentAnchoredJoint2D)ProtoReader.Merge(P_1, from, persistentSliderJoint2D);
				}
				PersistentSliderJoint2D obj = (PersistentSliderJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSliderJoint2D persistentSliderJoint2D2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSliderJoint2D2;
				break;
			}
			case 1098:
			{
				if (P_0 != null && !(P_0 is PersistentFixedJoint2D))
				{
					PersistentAnchoredJoint2D from6 = P_0;
					PersistentFixedJoint2D persistentFixedJoint2D = new PersistentFixedJoint2D();
					ProtoReader.NoteObject(persistentFixedJoint2D, P_1);
					P_0 = (PersistentAnchoredJoint2D)ProtoReader.Merge(P_1, from6, persistentFixedJoint2D);
				}
				PersistentFixedJoint2D obj6 = (PersistentFixedJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentFixedJoint2D persistentFixedJoint2D2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentFixedJoint2D2;
				break;
			}
			case 1099:
			{
				if (P_0 != null && !(P_0 is PersistentWheelJoint2D))
				{
					PersistentAnchoredJoint2D from2 = P_0;
					PersistentWheelJoint2D persistentWheelJoint2D = new PersistentWheelJoint2D();
					ProtoReader.NoteObject(persistentWheelJoint2D, P_1);
					P_0 = (PersistentAnchoredJoint2D)ProtoReader.Merge(P_1, from2, persistentWheelJoint2D);
				}
				PersistentWheelJoint2D obj2 = (PersistentWheelJoint2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentWheelJoint2D persistentWheelJoint2D2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentWheelJoint2D2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAnchoredJoint2D persistentAnchoredJoint2D = new PersistentAnchoredJoint2D();
					ProtoReader.NoteObject(persistentAnchoredJoint2D, P_1);
					P_0 = persistentAnchoredJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAnchoredJoint2D persistentAnchoredJoint2D5 = new PersistentAnchoredJoint2D();
			ProtoReader.NoteObject(persistentAnchoredJoint2D5, P_1);
			P_0 = persistentAnchoredJoint2D5;
		}
		return P_0;
	}

	private static void Write(PersistentWheelJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentWheelJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentWheelJoint2D), P_0.GetType());
		}
		JointMotor2D motor = P_0.motor;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(motor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		JointSuspension2D suspension = P_0.suspension;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(suspension, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool useMotor = P_0.useMotor;
		if (useMotor)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useMotor, P_1);
		}
	}

	private static PersistentWheelJoint2D Read(PersistentWheelJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentWheelJoint2D persistentWheelJoint2D3 = new PersistentWheelJoint2D();
					ProtoReader.NoteObject(persistentWheelJoint2D3, P_1);
					P_0 = persistentWheelJoint2D3;
				}
				JointMotor2D motor = P_0.motor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointMotor2D jointMotor2D = Read(motor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointMotor2D motor2 = jointMotor2D;
				P_0.motor = motor2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentWheelJoint2D persistentWheelJoint2D2 = new PersistentWheelJoint2D();
					ProtoReader.NoteObject(persistentWheelJoint2D2, P_1);
					P_0 = persistentWheelJoint2D2;
				}
				JointSuspension2D suspension = P_0.suspension;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointSuspension2D jointSuspension2D = Read(suspension, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointSuspension2D suspension2 = jointSuspension2D;
				P_0.suspension = suspension2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentWheelJoint2D persistentWheelJoint2D4 = new PersistentWheelJoint2D();
					ProtoReader.NoteObject(persistentWheelJoint2D4, P_1);
					P_0 = persistentWheelJoint2D4;
				}
				bool useMotor = P_1.ReadBoolean();
				P_0.useMotor = useMotor;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentWheelJoint2D persistentWheelJoint2D = new PersistentWheelJoint2D();
					ProtoReader.NoteObject(persistentWheelJoint2D, P_1);
					P_0 = persistentWheelJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentWheelJoint2D persistentWheelJoint2D5 = new PersistentWheelJoint2D();
			ProtoReader.NoteObject(persistentWheelJoint2D5, P_1);
			P_0 = persistentWheelJoint2D5;
		}
		return P_0;
	}

	private static void Write(PersistentFixedJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentFixedJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentFixedJoint2D), P_0.GetType());
		}
		float dampingRatio = P_0.dampingRatio;
		if (dampingRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dampingRatio, P_1);
		}
		float frequency = P_0.frequency;
		if (frequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(frequency, P_1);
		}
	}

	private static PersistentFixedJoint2D Read(PersistentFixedJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentFixedJoint2D persistentFixedJoint2D2 = new PersistentFixedJoint2D();
					ProtoReader.NoteObject(persistentFixedJoint2D2, P_1);
					P_0 = persistentFixedJoint2D2;
				}
				float dampingRatio = P_1.ReadSingle();
				P_0.dampingRatio = dampingRatio;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentFixedJoint2D persistentFixedJoint2D3 = new PersistentFixedJoint2D();
					ProtoReader.NoteObject(persistentFixedJoint2D3, P_1);
					P_0 = persistentFixedJoint2D3;
				}
				float dampingRatio = P_1.ReadSingle();
				P_0.frequency = dampingRatio;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentFixedJoint2D persistentFixedJoint2D = new PersistentFixedJoint2D();
					ProtoReader.NoteObject(persistentFixedJoint2D, P_1);
					P_0 = persistentFixedJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentFixedJoint2D persistentFixedJoint2D4 = new PersistentFixedJoint2D();
			ProtoReader.NoteObject(persistentFixedJoint2D4, P_1);
			P_0 = persistentFixedJoint2D4;
		}
		return P_0;
	}

	private static void Write(PersistentSliderJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSliderJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSliderJoint2D), P_0.GetType());
		}
		float angle = P_0.angle;
		if (angle != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angle, P_1);
		}
		bool autoConfigureAngle = P_0.autoConfigureAngle;
		if (autoConfigureAngle)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoConfigureAngle, P_1);
		}
		JointTranslationLimits2D limits = P_0.limits;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(limits, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		JointMotor2D motor = P_0.motor;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(motor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool useLimits = P_0.useLimits;
		if (useLimits)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useLimits, P_1);
		}
		bool useMotor = P_0.useMotor;
		if (useMotor)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useMotor, P_1);
		}
	}

	private static PersistentSliderJoint2D Read(PersistentSliderJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSliderJoint2D persistentSliderJoint2D2 = new PersistentSliderJoint2D();
					ProtoReader.NoteObject(persistentSliderJoint2D2, P_1);
					P_0 = persistentSliderJoint2D2;
				}
				float angle = P_1.ReadSingle();
				P_0.angle = angle;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSliderJoint2D persistentSliderJoint2D5 = new PersistentSliderJoint2D();
					ProtoReader.NoteObject(persistentSliderJoint2D5, P_1);
					P_0 = persistentSliderJoint2D5;
				}
				bool useMotor = P_1.ReadBoolean();
				P_0.autoConfigureAngle = useMotor;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSliderJoint2D persistentSliderJoint2D3 = new PersistentSliderJoint2D();
					ProtoReader.NoteObject(persistentSliderJoint2D3, P_1);
					P_0 = persistentSliderJoint2D3;
				}
				JointTranslationLimits2D limits = P_0.limits;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointTranslationLimits2D jointTranslationLimits2D = Read(limits, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointTranslationLimits2D limits2 = jointTranslationLimits2D;
				P_0.limits = limits2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSliderJoint2D persistentSliderJoint2D6 = new PersistentSliderJoint2D();
					ProtoReader.NoteObject(persistentSliderJoint2D6, P_1);
					P_0 = persistentSliderJoint2D6;
				}
				JointMotor2D motor = P_0.motor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointMotor2D jointMotor2D = Read(motor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointMotor2D motor2 = jointMotor2D;
				P_0.motor = motor2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSliderJoint2D persistentSliderJoint2D7 = new PersistentSliderJoint2D();
					ProtoReader.NoteObject(persistentSliderJoint2D7, P_1);
					P_0 = persistentSliderJoint2D7;
				}
				bool useMotor = P_1.ReadBoolean();
				P_0.useLimits = useMotor;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSliderJoint2D persistentSliderJoint2D4 = new PersistentSliderJoint2D();
					ProtoReader.NoteObject(persistentSliderJoint2D4, P_1);
					P_0 = persistentSliderJoint2D4;
				}
				bool useMotor = P_1.ReadBoolean();
				P_0.useMotor = useMotor;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSliderJoint2D persistentSliderJoint2D = new PersistentSliderJoint2D();
					ProtoReader.NoteObject(persistentSliderJoint2D, P_1);
					P_0 = persistentSliderJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSliderJoint2D persistentSliderJoint2D8 = new PersistentSliderJoint2D();
			ProtoReader.NoteObject(persistentSliderJoint2D8, P_1);
			P_0 = persistentSliderJoint2D8;
		}
		return P_0;
	}

	private static void Write(PersistentHingeJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentHingeJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentHingeJoint2D), P_0.GetType());
		}
		JointAngleLimits2D limits = P_0.limits;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(limits, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		JointMotor2D motor = P_0.motor;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(motor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool useLimits = P_0.useLimits;
		if (useLimits)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useLimits, P_1);
		}
		bool useMotor = P_0.useMotor;
		if (useMotor)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useMotor, P_1);
		}
	}

	private static PersistentHingeJoint2D Read(PersistentHingeJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint2D persistentHingeJoint2D3 = new PersistentHingeJoint2D();
					ProtoReader.NoteObject(persistentHingeJoint2D3, P_1);
					P_0 = persistentHingeJoint2D3;
				}
				JointAngleLimits2D limits = P_0.limits;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointAngleLimits2D jointAngleLimits2D = Read(limits, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointAngleLimits2D limits2 = jointAngleLimits2D;
				P_0.limits = limits2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint2D persistentHingeJoint2D5 = new PersistentHingeJoint2D();
					ProtoReader.NoteObject(persistentHingeJoint2D5, P_1);
					P_0 = persistentHingeJoint2D5;
				}
				JointMotor2D motor = P_0.motor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				JointMotor2D jointMotor2D = Read(motor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				JointMotor2D motor2 = jointMotor2D;
				P_0.motor = motor2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint2D persistentHingeJoint2D2 = new PersistentHingeJoint2D();
					ProtoReader.NoteObject(persistentHingeJoint2D2, P_1);
					P_0 = persistentHingeJoint2D2;
				}
				bool useLimits = P_1.ReadBoolean();
				P_0.useLimits = useLimits;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentHingeJoint2D persistentHingeJoint2D4 = new PersistentHingeJoint2D();
					ProtoReader.NoteObject(persistentHingeJoint2D4, P_1);
					P_0 = persistentHingeJoint2D4;
				}
				bool useLimits = P_1.ReadBoolean();
				P_0.useMotor = useLimits;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentHingeJoint2D persistentHingeJoint2D = new PersistentHingeJoint2D();
					ProtoReader.NoteObject(persistentHingeJoint2D, P_1);
					P_0 = persistentHingeJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentHingeJoint2D persistentHingeJoint2D6 = new PersistentHingeJoint2D();
			ProtoReader.NoteObject(persistentHingeJoint2D6, P_1);
			P_0 = persistentHingeJoint2D6;
		}
		return P_0;
	}

	private static void Write(PersistentFrictionJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentFrictionJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentFrictionJoint2D), P_0.GetType());
		}
		float maxForce = P_0.maxForce;
		if (maxForce != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxForce, P_1);
		}
		float maxTorque = P_0.maxTorque;
		if (maxTorque != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxTorque, P_1);
		}
	}

	private static PersistentFrictionJoint2D Read(PersistentFrictionJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentFrictionJoint2D persistentFrictionJoint2D2 = new PersistentFrictionJoint2D();
					ProtoReader.NoteObject(persistentFrictionJoint2D2, P_1);
					P_0 = persistentFrictionJoint2D2;
				}
				float maxForce = P_1.ReadSingle();
				P_0.maxForce = maxForce;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentFrictionJoint2D persistentFrictionJoint2D3 = new PersistentFrictionJoint2D();
					ProtoReader.NoteObject(persistentFrictionJoint2D3, P_1);
					P_0 = persistentFrictionJoint2D3;
				}
				float maxForce = P_1.ReadSingle();
				P_0.maxTorque = maxForce;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentFrictionJoint2D persistentFrictionJoint2D = new PersistentFrictionJoint2D();
					ProtoReader.NoteObject(persistentFrictionJoint2D, P_1);
					P_0 = persistentFrictionJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentFrictionJoint2D persistentFrictionJoint2D4 = new PersistentFrictionJoint2D();
			ProtoReader.NoteObject(persistentFrictionJoint2D4, P_1);
			P_0 = persistentFrictionJoint2D4;
		}
		return P_0;
	}

	private static void Write(PersistentDistanceJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentDistanceJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentDistanceJoint2D), P_0.GetType());
		}
		bool autoConfigureDistance = P_0.autoConfigureDistance;
		if (autoConfigureDistance)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoConfigureDistance, P_1);
		}
		float distance = P_0.distance;
		if (distance != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(distance, P_1);
		}
		bool maxDistanceOnly = P_0.maxDistanceOnly;
		if (maxDistanceOnly)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(maxDistanceOnly, P_1);
		}
	}

	private static PersistentDistanceJoint2D Read(PersistentDistanceJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentDistanceJoint2D persistentDistanceJoint2D3 = new PersistentDistanceJoint2D();
					ProtoReader.NoteObject(persistentDistanceJoint2D3, P_1);
					P_0 = persistentDistanceJoint2D3;
				}
				bool autoConfigureDistance = P_1.ReadBoolean();
				P_0.autoConfigureDistance = autoConfigureDistance;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentDistanceJoint2D persistentDistanceJoint2D2 = new PersistentDistanceJoint2D();
					ProtoReader.NoteObject(persistentDistanceJoint2D2, P_1);
					P_0 = persistentDistanceJoint2D2;
				}
				float distance = P_1.ReadSingle();
				P_0.distance = distance;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentDistanceJoint2D persistentDistanceJoint2D4 = new PersistentDistanceJoint2D();
					ProtoReader.NoteObject(persistentDistanceJoint2D4, P_1);
					P_0 = persistentDistanceJoint2D4;
				}
				bool autoConfigureDistance = P_1.ReadBoolean();
				P_0.maxDistanceOnly = autoConfigureDistance;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentDistanceJoint2D persistentDistanceJoint2D = new PersistentDistanceJoint2D();
					ProtoReader.NoteObject(persistentDistanceJoint2D, P_1);
					P_0 = persistentDistanceJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentDistanceJoint2D persistentDistanceJoint2D5 = new PersistentDistanceJoint2D();
			ProtoReader.NoteObject(persistentDistanceJoint2D5, P_1);
			P_0 = persistentDistanceJoint2D5;
		}
		return P_0;
	}

	private static void Write(PersistentSpringJoint2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSpringJoint2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSpringJoint2D), P_0.GetType());
		}
		bool autoConfigureDistance = P_0.autoConfigureDistance;
		if (autoConfigureDistance)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(autoConfigureDistance, P_1);
		}
		float dampingRatio = P_0.dampingRatio;
		if (dampingRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dampingRatio, P_1);
		}
		float distance = P_0.distance;
		if (distance != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(distance, P_1);
		}
		float frequency = P_0.frequency;
		if (frequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(frequency, P_1);
		}
	}

	private static PersistentSpringJoint2D Read(PersistentSpringJoint2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint2D persistentSpringJoint2D3 = new PersistentSpringJoint2D();
					ProtoReader.NoteObject(persistentSpringJoint2D3, P_1);
					P_0 = persistentSpringJoint2D3;
				}
				bool autoConfigureDistance = P_1.ReadBoolean();
				P_0.autoConfigureDistance = autoConfigureDistance;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint2D persistentSpringJoint2D5 = new PersistentSpringJoint2D();
					ProtoReader.NoteObject(persistentSpringJoint2D5, P_1);
					P_0 = persistentSpringJoint2D5;
				}
				float distance = P_1.ReadSingle();
				P_0.dampingRatio = distance;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint2D persistentSpringJoint2D2 = new PersistentSpringJoint2D();
					ProtoReader.NoteObject(persistentSpringJoint2D2, P_1);
					P_0 = persistentSpringJoint2D2;
				}
				float distance = P_1.ReadSingle();
				P_0.distance = distance;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSpringJoint2D persistentSpringJoint2D4 = new PersistentSpringJoint2D();
					ProtoReader.NoteObject(persistentSpringJoint2D4, P_1);
					P_0 = persistentSpringJoint2D4;
				}
				float distance = P_1.ReadSingle();
				P_0.frequency = distance;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSpringJoint2D persistentSpringJoint2D = new PersistentSpringJoint2D();
					ProtoReader.NoteObject(persistentSpringJoint2D, P_1);
					P_0 = persistentSpringJoint2D;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSpringJoint2D persistentSpringJoint2D6 = new PersistentSpringJoint2D();
			ProtoReader.NoteObject(persistentSpringJoint2D6, P_1);
			P_0 = persistentSpringJoint2D6;
		}
		return P_0;
	}

	private static void Write(PersistentConstantForce P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentConstantForce))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentConstantForce), P_0.GetType());
		}
		Vector3 force = P_0.force;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(force, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 relativeForce = P_0.relativeForce;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(relativeForce, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 relativeTorque = P_0.relativeTorque;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(relativeTorque, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 torque = P_0.torque;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(torque, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentConstantForce Read(PersistentConstantForce P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentConstantForce persistentConstantForce3 = new PersistentConstantForce();
					ProtoReader.NoteObject(persistentConstantForce3, P_1);
					P_0 = persistentConstantForce3;
				}
				Vector3 force = P_0.force;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(force, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 relativeTorque2 = vector2;
				P_0.force = relativeTorque2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentConstantForce persistentConstantForce5 = new PersistentConstantForce();
					ProtoReader.NoteObject(persistentConstantForce5, P_1);
					P_0 = persistentConstantForce5;
				}
				Vector3 relativeForce = P_0.relativeForce;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector4 = Read(relativeForce, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 relativeTorque2 = vector4;
				P_0.relativeForce = relativeTorque2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentConstantForce persistentConstantForce2 = new PersistentConstantForce();
					ProtoReader.NoteObject(persistentConstantForce2, P_1);
					P_0 = persistentConstantForce2;
				}
				Vector3 relativeTorque = P_0.relativeTorque;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(relativeTorque, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 relativeTorque2 = vector;
				P_0.relativeTorque = relativeTorque2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentConstantForce persistentConstantForce4 = new PersistentConstantForce();
					ProtoReader.NoteObject(persistentConstantForce4, P_1);
					P_0 = persistentConstantForce4;
				}
				Vector3 torque = P_0.torque;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(torque, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 relativeTorque2 = vector3;
				P_0.torque = relativeTorque2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentConstantForce persistentConstantForce = new PersistentConstantForce();
					ProtoReader.NoteObject(persistentConstantForce, P_1);
					P_0 = persistentConstantForce;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentConstantForce persistentConstantForce6 = new PersistentConstantForce();
			ProtoReader.NoteObject(persistentConstantForce6, P_1);
			P_0 = persistentConstantForce6;
		}
		return P_0;
	}

	private static void Write(PersistentSortingGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSortingGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSortingGroup), P_0.GetType());
		}
		int sortingLayerID = P_0.sortingLayerID;
		if (sortingLayerID != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(sortingLayerID, P_1);
		}
		string sortingLayerName = P_0.sortingLayerName;
		if (sortingLayerName != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			ProtoWriter.WriteString(sortingLayerName, P_1);
		}
		int sortingOrder = P_0.sortingOrder;
		if (sortingOrder != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(sortingOrder, P_1);
		}
	}

	private static PersistentSortingGroup Read(PersistentSortingGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSortingGroup persistentSortingGroup3 = new PersistentSortingGroup();
					ProtoReader.NoteObject(persistentSortingGroup3, P_1);
					P_0 = persistentSortingGroup3;
				}
				int sortingLayerID = P_1.ReadInt32();
				P_0.sortingLayerID = sortingLayerID;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSortingGroup persistentSortingGroup2 = new PersistentSortingGroup();
					ProtoReader.NoteObject(persistentSortingGroup2, P_1);
					P_0 = persistentSortingGroup2;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.sortingLayerName = text;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSortingGroup persistentSortingGroup4 = new PersistentSortingGroup();
					ProtoReader.NoteObject(persistentSortingGroup4, P_1);
					P_0 = persistentSortingGroup4;
				}
				int sortingLayerID = P_1.ReadInt32();
				P_0.sortingOrder = sortingLayerID;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSortingGroup persistentSortingGroup = new PersistentSortingGroup();
					ProtoReader.NoteObject(persistentSortingGroup, P_1);
					P_0 = persistentSortingGroup;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSortingGroup persistentSortingGroup5 = new PersistentSortingGroup();
			ProtoReader.NoteObject(persistentSortingGroup5, P_1);
			P_0 = persistentSortingGroup5;
		}
		return P_0;
	}

	private static void Write(PersistentReflectionProbe P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentReflectionProbe))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentReflectionProbe), P_0.GetType());
		}
		Color backgroundColor = P_0.backgroundColor;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(backgroundColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long bakedTexture = P_0.bakedTexture;
		if (bakedTexture != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(bakedTexture, P_1);
		}
		float blendDistance = P_0.blendDistance;
		if (blendDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(blendDistance, P_1);
		}
		bool boxProjection = P_0.boxProjection;
		if (boxProjection)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(boxProjection, P_1);
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint clearFlags = P_0.clearFlags;
		if (clearFlags != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(clearFlags, P_1);
		}
		int cullingMask = P_0.cullingMask;
		if (cullingMask != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(cullingMask, P_1);
		}
		long customBakedTexture = P_0.customBakedTexture;
		if (customBakedTexture != 0L)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(customBakedTexture, P_1);
		}
		float farClipPlane = P_0.farClipPlane;
		if (farClipPlane != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(farClipPlane, P_1);
		}
		bool hdr = P_0.hdr;
		if (hdr)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(hdr, P_1);
		}
		int importance = P_0.importance;
		if (importance != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(importance, P_1);
		}
		float intensity = P_0.intensity;
		if (intensity != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(intensity, P_1);
		}
		uint mode = P_0.mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(mode, P_1);
		}
		float nearClipPlane = P_0.nearClipPlane;
		if (nearClipPlane != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(nearClipPlane, P_1);
		}
		uint refreshMode = P_0.refreshMode;
		if (refreshMode != 0)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(refreshMode, P_1);
		}
		int resolution = P_0.resolution;
		if (resolution != 0)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(resolution, P_1);
		}
		float shadowDistance = P_0.shadowDistance;
		if (shadowDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(shadowDistance, P_1);
		}
		Vector3 size = P_0.size;
		ProtoWriter.WriteFieldHeader(18, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint timeSlicingMode = P_0.timeSlicingMode;
		if (timeSlicingMode != 0)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(timeSlicingMode, P_1);
		}
	}

	private static PersistentReflectionProbe Read(PersistentReflectionProbe P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe3 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe3, P_1);
					P_0 = persistentReflectionProbe3;
				}
				Color backgroundColor = P_0.backgroundColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(backgroundColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color backgroundColor2 = color;
				P_0.backgroundColor = backgroundColor2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe5 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe5, P_1);
					P_0 = persistentReflectionProbe5;
				}
				long bakedTexture = P_1.ReadInt64();
				P_0.bakedTexture = bakedTexture;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe17 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe17, P_1);
					P_0 = persistentReflectionProbe17;
				}
				float intensity = P_1.ReadSingle();
				P_0.blendDistance = intensity;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe14 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe14, P_1);
					P_0 = persistentReflectionProbe14;
				}
				bool boxProjection = P_1.ReadBoolean();
				P_0.boxProjection = boxProjection;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe8 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe8, P_1);
					P_0 = persistentReflectionProbe8;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 size2 = vector2;
				P_0.center = size2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe6 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe6, P_1);
					P_0 = persistentReflectionProbe6;
				}
				uint mode = P_1.ReadUInt32();
				P_0.clearFlags = mode;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe15 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe15, P_1);
					P_0 = persistentReflectionProbe15;
				}
				int importance = P_1.ReadInt32();
				P_0.cullingMask = importance;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe12 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe12, P_1);
					P_0 = persistentReflectionProbe12;
				}
				long bakedTexture = P_1.ReadInt64();
				P_0.customBakedTexture = bakedTexture;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe20 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe20, P_1);
					P_0 = persistentReflectionProbe20;
				}
				float intensity = P_1.ReadSingle();
				P_0.farClipPlane = intensity;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe18 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe18, P_1);
					P_0 = persistentReflectionProbe18;
				}
				bool boxProjection = P_1.ReadBoolean();
				P_0.hdr = boxProjection;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe11 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe11, P_1);
					P_0 = persistentReflectionProbe11;
				}
				int importance = P_1.ReadInt32();
				P_0.importance = importance;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe9 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe9, P_1);
					P_0 = persistentReflectionProbe9;
				}
				float intensity = P_1.ReadSingle();
				P_0.intensity = intensity;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe2 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe2, P_1);
					P_0 = persistentReflectionProbe2;
				}
				uint mode = P_1.ReadUInt32();
				P_0.mode = mode;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe19 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe19, P_1);
					P_0 = persistentReflectionProbe19;
				}
				float intensity = P_1.ReadSingle();
				P_0.nearClipPlane = intensity;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe16 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe16, P_1);
					P_0 = persistentReflectionProbe16;
				}
				uint mode = P_1.ReadUInt32();
				P_0.refreshMode = mode;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe13 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe13, P_1);
					P_0 = persistentReflectionProbe13;
				}
				int importance = P_1.ReadInt32();
				P_0.resolution = importance;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe10 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe10, P_1);
					P_0 = persistentReflectionProbe10;
				}
				float intensity = P_1.ReadSingle();
				P_0.shadowDistance = intensity;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe7 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe7, P_1);
					P_0 = persistentReflectionProbe7;
				}
				Vector3 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 size2 = vector;
				P_0.size = size2;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe4 = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe4, P_1);
					P_0 = persistentReflectionProbe4;
				}
				uint mode = P_1.ReadUInt32();
				P_0.timeSlicingMode = mode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentReflectionProbe persistentReflectionProbe = new PersistentReflectionProbe();
					ProtoReader.NoteObject(persistentReflectionProbe, P_1);
					P_0 = persistentReflectionProbe;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentReflectionProbe persistentReflectionProbe21 = new PersistentReflectionProbe();
			ProtoReader.NoteObject(persistentReflectionProbe21, P_1);
			P_0 = persistentReflectionProbe21;
		}
		return P_0;
	}

	private static void Write(PersistentNetworkView P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentNetworkView))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentNetworkView), P_0.GetType());
		}
		int group = P_0.group;
		if (group != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(group, P_1);
		}
		long observed = P_0.observed;
		if (observed != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(observed, P_1);
		}
		uint stateSynchronization = P_0.stateSynchronization;
		if (stateSynchronization != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(stateSynchronization, P_1);
		}
	}

	private static PersistentNetworkView Read(PersistentNetworkView P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentNetworkView persistentNetworkView3 = new PersistentNetworkView();
					ProtoReader.NoteObject(persistentNetworkView3, P_1);
					P_0 = persistentNetworkView3;
				}
				int group = P_1.ReadInt32();
				P_0.group = group;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentNetworkView persistentNetworkView2 = new PersistentNetworkView();
					ProtoReader.NoteObject(persistentNetworkView2, P_1);
					P_0 = persistentNetworkView2;
				}
				long observed = P_1.ReadInt64();
				P_0.observed = observed;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentNetworkView persistentNetworkView4 = new PersistentNetworkView();
					ProtoReader.NoteObject(persistentNetworkView4, P_1);
					P_0 = persistentNetworkView4;
				}
				uint stateSynchronization = P_1.ReadUInt32();
				P_0.stateSynchronization = stateSynchronization;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentNetworkView persistentNetworkView = new PersistentNetworkView();
					ProtoReader.NoteObject(persistentNetworkView, P_1);
					P_0 = persistentNetworkView;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentNetworkView persistentNetworkView5 = new PersistentNetworkView();
			ProtoReader.NoteObject(persistentNetworkView5, P_1);
			P_0 = persistentNetworkView5;
		}
		return P_0;
	}

	private static void Write(PersistentMonoBehaviour P_0, ProtoWriter P_1)
	{
		PersistentNetworkMatch obj = P_0 as PersistentNetworkMatch;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1069, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentEventTrigger obj2 = P_0 as PersistentEventTrigger;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1070, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentUIBehaviour obj3 = P_0 as PersistentUIBehaviour;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1071, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else if (P_0.GetType() != typeof(PersistentMonoBehaviour))
				{
					TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMonoBehaviour), P_0.GetType());
				}
			}
		}
		bool useGUILayout = P_0.useGUILayout;
		if (useGUILayout)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useGUILayout, P_1);
		}
	}

	private static PersistentMonoBehaviour Read(PersistentMonoBehaviour P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentMonoBehaviour persistentMonoBehaviour2 = new PersistentMonoBehaviour();
					ProtoReader.NoteObject(persistentMonoBehaviour2, P_1);
					P_0 = persistentMonoBehaviour2;
				}
				bool useGUILayout = P_1.ReadBoolean();
				P_0.useGUILayout = useGUILayout;
				break;
			}
			case 1069:
			{
				if (P_0 != null && !(P_0 is PersistentNetworkMatch))
				{
					PersistentMonoBehaviour from3 = P_0;
					PersistentNetworkMatch persistentNetworkMatch = new PersistentNetworkMatch();
					ProtoReader.NoteObject(persistentNetworkMatch, P_1);
					P_0 = (PersistentMonoBehaviour)ProtoReader.Merge(P_1, from3, persistentNetworkMatch);
				}
				PersistentNetworkMatch obj3 = (PersistentNetworkMatch)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentNetworkMatch persistentNetworkMatch2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentNetworkMatch2;
				break;
			}
			case 1070:
			{
				if (P_0 != null && !(P_0 is PersistentEventTrigger))
				{
					PersistentMonoBehaviour from = P_0;
					PersistentEventTrigger persistentEventTrigger = new PersistentEventTrigger();
					ProtoReader.NoteObject(persistentEventTrigger, P_1);
					P_0 = (PersistentMonoBehaviour)ProtoReader.Merge(P_1, from, persistentEventTrigger);
				}
				PersistentEventTrigger obj = (PersistentEventTrigger)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentEventTrigger persistentEventTrigger2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentEventTrigger2;
				break;
			}
			case 1071:
			{
				if (P_0 != null && !(P_0 is PersistentUIBehaviour))
				{
					PersistentMonoBehaviour from2 = P_0;
					PersistentUIBehaviour persistentUIBehaviour = new PersistentUIBehaviour();
					ProtoReader.NoteObject(persistentUIBehaviour, P_1);
					P_0 = (PersistentMonoBehaviour)ProtoReader.Merge(P_1, from2, persistentUIBehaviour);
				}
				PersistentUIBehaviour obj2 = (PersistentUIBehaviour)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentUIBehaviour persistentUIBehaviour2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentUIBehaviour2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentMonoBehaviour persistentMonoBehaviour = new PersistentMonoBehaviour();
					ProtoReader.NoteObject(persistentMonoBehaviour, P_1);
					P_0 = persistentMonoBehaviour;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentMonoBehaviour persistentMonoBehaviour3 = new PersistentMonoBehaviour();
			ProtoReader.NoteObject(persistentMonoBehaviour3, P_1);
			P_0 = persistentMonoBehaviour3;
		}
		return P_0;
	}

	private static void Write(PersistentUIBehaviour P_0, ProtoWriter P_1)
	{
		PersistentEventSystem obj = P_0 as PersistentEventSystem;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1108, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentBaseInput obj2 = P_0 as PersistentBaseInput;
		if (obj2 != null)
		{
			ProtoWriter.WriteFieldHeader(1109, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj2, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentBaseInputModule obj3 = P_0 as PersistentBaseInputModule;
		if (obj3 != null)
		{
			ProtoWriter.WriteFieldHeader(1110, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj3, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentBaseRaycaster obj4 = P_0 as PersistentBaseRaycaster;
		if (obj4 != null)
		{
			ProtoWriter.WriteFieldHeader(1111, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj4, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentGraphic obj5 = P_0 as PersistentGraphic;
		if (obj5 != null)
		{
			ProtoWriter.WriteFieldHeader(1112, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj5, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentMask obj6 = P_0 as PersistentMask;
		if (obj6 != null)
		{
			ProtoWriter.WriteFieldHeader(1113, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj6, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentRectMask2D obj7 = P_0 as PersistentRectMask2D;
		if (obj7 != null)
		{
			ProtoWriter.WriteFieldHeader(1114, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj7, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentScrollRect obj8 = P_0 as PersistentScrollRect;
		if (obj8 != null)
		{
			ProtoWriter.WriteFieldHeader(1115, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj8, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentSelectable obj9 = P_0 as PersistentSelectable;
		if (obj9 != null)
		{
			ProtoWriter.WriteFieldHeader(1116, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj9, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentToggleGroup obj10 = P_0 as PersistentToggleGroup;
		if (obj10 != null)
		{
			ProtoWriter.WriteFieldHeader(1117, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj10, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentAspectRatioFitter obj11 = P_0 as PersistentAspectRatioFitter;
		if (obj11 != null)
		{
			ProtoWriter.WriteFieldHeader(1118, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj11, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentCanvasScaler obj12 = P_0 as PersistentCanvasScaler;
		if (obj12 != null)
		{
			ProtoWriter.WriteFieldHeader(1119, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj12, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentContentSizeFitter obj13 = P_0 as PersistentContentSizeFitter;
		if (obj13 != null)
		{
			ProtoWriter.WriteFieldHeader(1120, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj13, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentLayoutElement obj14 = P_0 as PersistentLayoutElement;
		if (obj14 != null)
		{
			ProtoWriter.WriteFieldHeader(1121, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj14, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentLayoutGroup obj15 = P_0 as PersistentLayoutGroup;
		if (obj15 != null)
		{
			ProtoWriter.WriteFieldHeader(1122, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj15, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentBaseMeshEffect obj16 = P_0 as PersistentBaseMeshEffect;
		if (obj16 != null)
		{
			ProtoWriter.WriteFieldHeader(1123, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj16, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentUIBehaviour))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentUIBehaviour), P_0.GetType());
		}
	}

	private static PersistentUIBehaviour Read(PersistentUIBehaviour P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1108:
			{
				if (P_0 != null && !(P_0 is PersistentEventSystem))
				{
					PersistentUIBehaviour from4 = P_0;
					PersistentEventSystem persistentEventSystem = new PersistentEventSystem();
					ProtoReader.NoteObject(persistentEventSystem, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from4, persistentEventSystem);
				}
				PersistentEventSystem obj4 = (PersistentEventSystem)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentEventSystem persistentEventSystem2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentEventSystem2;
				break;
			}
			case 1109:
			{
				if (P_0 != null && !(P_0 is PersistentBaseInput))
				{
					PersistentUIBehaviour from14 = P_0;
					PersistentBaseInput persistentBaseInput = new PersistentBaseInput();
					ProtoReader.NoteObject(persistentBaseInput, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from14, persistentBaseInput);
				}
				PersistentBaseInput obj14 = (PersistentBaseInput)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBaseInput persistentBaseInput2 = Read(obj14, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBaseInput2;
				break;
			}
			case 1110:
			{
				if (P_0 != null && !(P_0 is PersistentBaseInputModule))
				{
					PersistentUIBehaviour from5 = P_0;
					PersistentBaseInputModule persistentBaseInputModule = new PersistentBaseInputModule();
					ProtoReader.NoteObject(persistentBaseInputModule, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from5, persistentBaseInputModule);
				}
				PersistentBaseInputModule obj5 = (PersistentBaseInputModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBaseInputModule persistentBaseInputModule2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBaseInputModule2;
				break;
			}
			case 1111:
			{
				if (P_0 != null && !(P_0 is PersistentBaseRaycaster))
				{
					PersistentUIBehaviour from2 = P_0;
					PersistentBaseRaycaster persistentBaseRaycaster = new PersistentBaseRaycaster();
					ProtoReader.NoteObject(persistentBaseRaycaster, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from2, persistentBaseRaycaster);
				}
				PersistentBaseRaycaster obj2 = (PersistentBaseRaycaster)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBaseRaycaster persistentBaseRaycaster2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBaseRaycaster2;
				break;
			}
			case 1112:
			{
				if (P_0 != null && !(P_0 is PersistentGraphic))
				{
					PersistentUIBehaviour from12 = P_0;
					PersistentGraphic persistentGraphic = new PersistentGraphic();
					ProtoReader.NoteObject(persistentGraphic, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from12, persistentGraphic);
				}
				PersistentGraphic obj12 = (PersistentGraphic)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGraphic persistentGraphic2 = Read(obj12, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGraphic2;
				break;
			}
			case 1113:
			{
				if (P_0 != null && !(P_0 is PersistentMask))
				{
					PersistentUIBehaviour from = P_0;
					PersistentMask persistentMask = new PersistentMask();
					ProtoReader.NoteObject(persistentMask, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from, persistentMask);
				}
				PersistentMask obj = (PersistentMask)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMask persistentMask2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMask2;
				break;
			}
			case 1114:
			{
				if (P_0 != null && !(P_0 is PersistentRectMask2D))
				{
					PersistentUIBehaviour from16 = P_0;
					PersistentRectMask2D persistentRectMask2D = new PersistentRectMask2D();
					ProtoReader.NoteObject(persistentRectMask2D, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from16, persistentRectMask2D);
				}
				PersistentRectMask2D obj16 = (PersistentRectMask2D)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRectMask2D persistentRectMask2D2 = Read(obj16, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRectMask2D2;
				break;
			}
			case 1115:
			{
				if (P_0 != null && !(P_0 is PersistentScrollRect))
				{
					PersistentUIBehaviour from9 = P_0;
					PersistentScrollRect persistentScrollRect = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from9, persistentScrollRect);
				}
				PersistentScrollRect obj9 = (PersistentScrollRect)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentScrollRect persistentScrollRect2 = Read(obj9, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentScrollRect2;
				break;
			}
			case 1116:
			{
				if (P_0 != null && !(P_0 is PersistentSelectable))
				{
					PersistentUIBehaviour from10 = P_0;
					PersistentSelectable persistentSelectable = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from10, persistentSelectable);
				}
				PersistentSelectable obj10 = (PersistentSelectable)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSelectable persistentSelectable2 = Read(obj10, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSelectable2;
				break;
			}
			case 1117:
			{
				if (P_0 != null && !(P_0 is PersistentToggleGroup))
				{
					PersistentUIBehaviour from13 = P_0;
					PersistentToggleGroup persistentToggleGroup = new PersistentToggleGroup();
					ProtoReader.NoteObject(persistentToggleGroup, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from13, persistentToggleGroup);
				}
				PersistentToggleGroup obj13 = (PersistentToggleGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentToggleGroup persistentToggleGroup2 = Read(obj13, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentToggleGroup2;
				break;
			}
			case 1118:
			{
				if (P_0 != null && !(P_0 is PersistentAspectRatioFitter))
				{
					PersistentUIBehaviour from8 = P_0;
					PersistentAspectRatioFitter persistentAspectRatioFitter = new PersistentAspectRatioFitter();
					ProtoReader.NoteObject(persistentAspectRatioFitter, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from8, persistentAspectRatioFitter);
				}
				PersistentAspectRatioFitter obj8 = (PersistentAspectRatioFitter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAspectRatioFitter persistentAspectRatioFitter2 = Read(obj8, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentAspectRatioFitter2;
				break;
			}
			case 1119:
			{
				if (P_0 != null && !(P_0 is PersistentCanvasScaler))
				{
					PersistentUIBehaviour from6 = P_0;
					PersistentCanvasScaler persistentCanvasScaler = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from6, persistentCanvasScaler);
				}
				PersistentCanvasScaler obj6 = (PersistentCanvasScaler)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentCanvasScaler persistentCanvasScaler2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentCanvasScaler2;
				break;
			}
			case 1120:
			{
				if (P_0 != null && !(P_0 is PersistentContentSizeFitter))
				{
					PersistentUIBehaviour from15 = P_0;
					PersistentContentSizeFitter persistentContentSizeFitter = new PersistentContentSizeFitter();
					ProtoReader.NoteObject(persistentContentSizeFitter, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from15, persistentContentSizeFitter);
				}
				PersistentContentSizeFitter obj15 = (PersistentContentSizeFitter)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentContentSizeFitter persistentContentSizeFitter2 = Read(obj15, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentContentSizeFitter2;
				break;
			}
			case 1121:
			{
				if (P_0 != null && !(P_0 is PersistentLayoutElement))
				{
					PersistentUIBehaviour from11 = P_0;
					PersistentLayoutElement persistentLayoutElement = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from11, persistentLayoutElement);
				}
				PersistentLayoutElement obj11 = (PersistentLayoutElement)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLayoutElement persistentLayoutElement2 = Read(obj11, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLayoutElement2;
				break;
			}
			case 1122:
			{
				if (P_0 != null && !(P_0 is PersistentLayoutGroup))
				{
					PersistentUIBehaviour from7 = P_0;
					PersistentLayoutGroup persistentLayoutGroup = new PersistentLayoutGroup();
					ProtoReader.NoteObject(persistentLayoutGroup, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from7, persistentLayoutGroup);
				}
				PersistentLayoutGroup obj7 = (PersistentLayoutGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentLayoutGroup persistentLayoutGroup2 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentLayoutGroup2;
				break;
			}
			case 1123:
			{
				if (P_0 != null && !(P_0 is PersistentBaseMeshEffect))
				{
					PersistentUIBehaviour from3 = P_0;
					PersistentBaseMeshEffect persistentBaseMeshEffect = new PersistentBaseMeshEffect();
					ProtoReader.NoteObject(persistentBaseMeshEffect, P_1);
					P_0 = (PersistentUIBehaviour)ProtoReader.Merge(P_1, from3, persistentBaseMeshEffect);
				}
				PersistentBaseMeshEffect obj3 = (PersistentBaseMeshEffect)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentBaseMeshEffect persistentBaseMeshEffect2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentBaseMeshEffect2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentUIBehaviour persistentUIBehaviour = new PersistentUIBehaviour();
					ProtoReader.NoteObject(persistentUIBehaviour, P_1);
					P_0 = persistentUIBehaviour;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentUIBehaviour persistentUIBehaviour2 = new PersistentUIBehaviour();
			ProtoReader.NoteObject(persistentUIBehaviour2, P_1);
			P_0 = persistentUIBehaviour2;
		}
		return P_0;
	}

	private static void Write(PersistentBaseMeshEffect P_0, ProtoWriter P_1)
	{
		PersistentPositionAsUV1 obj = P_0 as PersistentPositionAsUV1;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1134, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentShadow obj2 = P_0 as PersistentShadow;
		if (obj2 != null)
		{
			ProtoWriter.WriteFieldHeader(1135, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj2, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentBaseMeshEffect))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBaseMeshEffect), P_0.GetType());
		}
	}

	private static PersistentBaseMeshEffect Read(PersistentBaseMeshEffect P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1134:
			{
				if (P_0 != null && !(P_0 is PersistentPositionAsUV1))
				{
					PersistentBaseMeshEffect from = P_0;
					PersistentPositionAsUV1 persistentPositionAsUV = new PersistentPositionAsUV1();
					ProtoReader.NoteObject(persistentPositionAsUV, P_1);
					P_0 = (PersistentBaseMeshEffect)ProtoReader.Merge(P_1, from, persistentPositionAsUV);
				}
				PersistentPositionAsUV1 obj = (PersistentPositionAsUV1)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPositionAsUV1 persistentPositionAsUV2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPositionAsUV2;
				break;
			}
			case 1135:
			{
				if (P_0 != null && !(P_0 is PersistentShadow))
				{
					PersistentBaseMeshEffect from2 = P_0;
					PersistentShadow persistentShadow = new PersistentShadow();
					ProtoReader.NoteObject(persistentShadow, P_1);
					P_0 = (PersistentBaseMeshEffect)ProtoReader.Merge(P_1, from2, persistentShadow);
				}
				PersistentShadow obj2 = (PersistentShadow)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentShadow persistentShadow2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentShadow2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBaseMeshEffect persistentBaseMeshEffect = new PersistentBaseMeshEffect();
					ProtoReader.NoteObject(persistentBaseMeshEffect, P_1);
					P_0 = persistentBaseMeshEffect;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBaseMeshEffect persistentBaseMeshEffect2 = new PersistentBaseMeshEffect();
			ProtoReader.NoteObject(persistentBaseMeshEffect2, P_1);
			P_0 = persistentBaseMeshEffect2;
		}
		return P_0;
	}

	private static void Write(PersistentShadow P_0, ProtoWriter P_1)
	{
		PersistentOutline obj = P_0 as PersistentOutline;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1136, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentShadow))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentShadow), P_0.GetType());
		}
		Color effectColor = P_0.effectColor;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(effectColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 effectDistance = P_0.effectDistance;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(effectDistance, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool useGraphicAlpha = P_0.useGraphicAlpha;
		if (useGraphicAlpha)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useGraphicAlpha, P_1);
		}
	}

	private static PersistentShadow Read(PersistentShadow P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentShadow persistentShadow4 = new PersistentShadow();
					ProtoReader.NoteObject(persistentShadow4, P_1);
					P_0 = persistentShadow4;
				}
				Color effectColor = P_0.effectColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(effectColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color effectColor2 = color;
				P_0.effectColor = effectColor2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentShadow persistentShadow3 = new PersistentShadow();
					ProtoReader.NoteObject(persistentShadow3, P_1);
					P_0 = persistentShadow3;
				}
				Vector2 effectDistance = P_0.effectDistance;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(effectDistance, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 effectDistance2 = vector;
				P_0.effectDistance = effectDistance2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentShadow persistentShadow2 = new PersistentShadow();
					ProtoReader.NoteObject(persistentShadow2, P_1);
					P_0 = persistentShadow2;
				}
				bool useGraphicAlpha = P_1.ReadBoolean();
				P_0.useGraphicAlpha = useGraphicAlpha;
				break;
			}
			case 1136:
			{
				if (P_0 != null && !(P_0 is PersistentOutline))
				{
					PersistentShadow from = P_0;
					PersistentOutline persistentOutline = new PersistentOutline();
					ProtoReader.NoteObject(persistentOutline, P_1);
					P_0 = (PersistentShadow)ProtoReader.Merge(P_1, from, persistentOutline);
				}
				PersistentOutline obj = (PersistentOutline)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentOutline persistentOutline2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentOutline2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentShadow persistentShadow = new PersistentShadow();
					ProtoReader.NoteObject(persistentShadow, P_1);
					P_0 = persistentShadow;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentShadow persistentShadow5 = new PersistentShadow();
			ProtoReader.NoteObject(persistentShadow5, P_1);
			P_0 = persistentShadow5;
		}
		return P_0;
	}

	private static void Write(PersistentOutline P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentOutline))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentOutline), P_0.GetType());
		}
	}

	private static PersistentOutline Read(PersistentOutline P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentOutline persistentOutline = new PersistentOutline();
				ProtoReader.NoteObject(persistentOutline, P_1);
				P_0 = persistentOutline;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentOutline persistentOutline2 = new PersistentOutline();
			ProtoReader.NoteObject(persistentOutline2, P_1);
			P_0 = persistentOutline2;
		}
		return P_0;
	}

	private static void Write(PersistentPositionAsUV1 P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPositionAsUV1))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPositionAsUV1), P_0.GetType());
		}
	}

	private static PersistentPositionAsUV1 Read(PersistentPositionAsUV1 P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentPositionAsUV1 persistentPositionAsUV = new PersistentPositionAsUV1();
				ProtoReader.NoteObject(persistentPositionAsUV, P_1);
				P_0 = persistentPositionAsUV;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentPositionAsUV1 persistentPositionAsUV2 = new PersistentPositionAsUV1();
			ProtoReader.NoteObject(persistentPositionAsUV2, P_1);
			P_0 = persistentPositionAsUV2;
		}
		return P_0;
	}

	private static void Write(PersistentLayoutGroup P_0, ProtoWriter P_1)
	{
		PersistentGridLayoutGroup obj = P_0 as PersistentGridLayoutGroup;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1132, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentHorizontalOrVerticalLayoutGroup obj2 = P_0 as PersistentHorizontalOrVerticalLayoutGroup;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1133, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else if (P_0.GetType() != typeof(PersistentLayoutGroup))
			{
				TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLayoutGroup), P_0.GetType());
			}
		}
		uint childAlignment = P_0.childAlignment;
		if (childAlignment != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(childAlignment, P_1);
		}
		RectOffset padding = P_0.padding;
		if (padding != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(padding, P_1);
			Write(padding, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static PersistentLayoutGroup Read(PersistentLayoutGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLayoutGroup persistentLayoutGroup2 = new PersistentLayoutGroup();
					ProtoReader.NoteObject(persistentLayoutGroup2, P_1);
					P_0 = persistentLayoutGroup2;
				}
				uint childAlignment = P_1.ReadUInt32();
				P_0.childAlignment = childAlignment;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLayoutGroup persistentLayoutGroup3 = new PersistentLayoutGroup();
					ProtoReader.NoteObject(persistentLayoutGroup3, P_1);
					P_0 = persistentLayoutGroup3;
				}
				RectOffset padding = P_0.padding;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				RectOffset rectOffset = Read(padding, P_1);
				ProtoReader.EndSubItem(token, P_1);
				RectOffset rectOffset2 = rectOffset;
				if (rectOffset2 != null)
				{
					P_0.padding = rectOffset2;
				}
				break;
			}
			case 1132:
			{
				if (P_0 != null && !(P_0 is PersistentGridLayoutGroup))
				{
					PersistentLayoutGroup from = P_0;
					PersistentGridLayoutGroup persistentGridLayoutGroup = new PersistentGridLayoutGroup();
					ProtoReader.NoteObject(persistentGridLayoutGroup, P_1);
					P_0 = (PersistentLayoutGroup)ProtoReader.Merge(P_1, from, persistentGridLayoutGroup);
				}
				PersistentGridLayoutGroup obj = (PersistentGridLayoutGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGridLayoutGroup persistentGridLayoutGroup2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGridLayoutGroup2;
				break;
			}
			case 1133:
			{
				if (P_0 != null && !(P_0 is PersistentHorizontalOrVerticalLayoutGroup))
				{
					PersistentLayoutGroup from2 = P_0;
					PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup = new PersistentHorizontalOrVerticalLayoutGroup();
					ProtoReader.NoteObject(persistentHorizontalOrVerticalLayoutGroup, P_1);
					P_0 = (PersistentLayoutGroup)ProtoReader.Merge(P_1, from2, persistentHorizontalOrVerticalLayoutGroup);
				}
				PersistentHorizontalOrVerticalLayoutGroup obj2 = (PersistentHorizontalOrVerticalLayoutGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentHorizontalOrVerticalLayoutGroup2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLayoutGroup persistentLayoutGroup = new PersistentLayoutGroup();
					ProtoReader.NoteObject(persistentLayoutGroup, P_1);
					P_0 = persistentLayoutGroup;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLayoutGroup persistentLayoutGroup4 = new PersistentLayoutGroup();
			ProtoReader.NoteObject(persistentLayoutGroup4, P_1);
			P_0 = persistentLayoutGroup4;
		}
		return P_0;
	}

	private static void Write(PersistentHorizontalOrVerticalLayoutGroup P_0, ProtoWriter P_1)
	{
		PersistentHorizontalLayoutGroup obj = P_0 as PersistentHorizontalLayoutGroup;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1130, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentVerticalLayoutGroup obj2 = P_0 as PersistentVerticalLayoutGroup;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1131, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else if (P_0.GetType() != typeof(PersistentHorizontalOrVerticalLayoutGroup))
			{
				TypeModel.ThrowUnexpectedSubtype(typeof(PersistentHorizontalOrVerticalLayoutGroup), P_0.GetType());
			}
		}
		bool childControlHeight = P_0.childControlHeight;
		if (childControlHeight)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(childControlHeight, P_1);
		}
		bool childControlWidth = P_0.childControlWidth;
		if (childControlWidth)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(childControlWidth, P_1);
		}
		bool childForceExpandHeight = P_0.childForceExpandHeight;
		if (childForceExpandHeight)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(childForceExpandHeight, P_1);
		}
		bool childForceExpandWidth = P_0.childForceExpandWidth;
		if (childForceExpandWidth)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(childForceExpandWidth, P_1);
		}
		float spacing = P_0.spacing;
		if (spacing != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spacing, P_1);
		}
	}

	private static PersistentHorizontalOrVerticalLayoutGroup Read(PersistentHorizontalOrVerticalLayoutGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup6 = new PersistentHorizontalOrVerticalLayoutGroup();
					ProtoReader.NoteObject(persistentHorizontalOrVerticalLayoutGroup6, P_1);
					P_0 = persistentHorizontalOrVerticalLayoutGroup6;
				}
				bool childControlWidth = P_1.ReadBoolean();
				P_0.childControlHeight = childControlWidth;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup2 = new PersistentHorizontalOrVerticalLayoutGroup();
					ProtoReader.NoteObject(persistentHorizontalOrVerticalLayoutGroup2, P_1);
					P_0 = persistentHorizontalOrVerticalLayoutGroup2;
				}
				bool childControlWidth = P_1.ReadBoolean();
				P_0.childControlWidth = childControlWidth;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup5 = new PersistentHorizontalOrVerticalLayoutGroup();
					ProtoReader.NoteObject(persistentHorizontalOrVerticalLayoutGroup5, P_1);
					P_0 = persistentHorizontalOrVerticalLayoutGroup5;
				}
				bool childControlWidth = P_1.ReadBoolean();
				P_0.childForceExpandHeight = childControlWidth;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup3 = new PersistentHorizontalOrVerticalLayoutGroup();
					ProtoReader.NoteObject(persistentHorizontalOrVerticalLayoutGroup3, P_1);
					P_0 = persistentHorizontalOrVerticalLayoutGroup3;
				}
				bool childControlWidth = P_1.ReadBoolean();
				P_0.childForceExpandWidth = childControlWidth;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup4 = new PersistentHorizontalOrVerticalLayoutGroup();
					ProtoReader.NoteObject(persistentHorizontalOrVerticalLayoutGroup4, P_1);
					P_0 = persistentHorizontalOrVerticalLayoutGroup4;
				}
				float spacing = P_1.ReadSingle();
				P_0.spacing = spacing;
				break;
			}
			case 1130:
			{
				if (P_0 != null && !(P_0 is PersistentHorizontalLayoutGroup))
				{
					PersistentHorizontalOrVerticalLayoutGroup from2 = P_0;
					PersistentHorizontalLayoutGroup persistentHorizontalLayoutGroup = new PersistentHorizontalLayoutGroup();
					ProtoReader.NoteObject(persistentHorizontalLayoutGroup, P_1);
					P_0 = (PersistentHorizontalOrVerticalLayoutGroup)ProtoReader.Merge(P_1, from2, persistentHorizontalLayoutGroup);
				}
				PersistentHorizontalLayoutGroup obj2 = (PersistentHorizontalLayoutGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentHorizontalLayoutGroup persistentHorizontalLayoutGroup2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentHorizontalLayoutGroup2;
				break;
			}
			case 1131:
			{
				if (P_0 != null && !(P_0 is PersistentVerticalLayoutGroup))
				{
					PersistentHorizontalOrVerticalLayoutGroup from = P_0;
					PersistentVerticalLayoutGroup persistentVerticalLayoutGroup = new PersistentVerticalLayoutGroup();
					ProtoReader.NoteObject(persistentVerticalLayoutGroup, P_1);
					P_0 = (PersistentHorizontalOrVerticalLayoutGroup)ProtoReader.Merge(P_1, from, persistentVerticalLayoutGroup);
				}
				PersistentVerticalLayoutGroup obj = (PersistentVerticalLayoutGroup)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentVerticalLayoutGroup persistentVerticalLayoutGroup2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentVerticalLayoutGroup2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup = new PersistentHorizontalOrVerticalLayoutGroup();
					ProtoReader.NoteObject(persistentHorizontalOrVerticalLayoutGroup, P_1);
					P_0 = persistentHorizontalOrVerticalLayoutGroup;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentHorizontalOrVerticalLayoutGroup persistentHorizontalOrVerticalLayoutGroup7 = new PersistentHorizontalOrVerticalLayoutGroup();
			ProtoReader.NoteObject(persistentHorizontalOrVerticalLayoutGroup7, P_1);
			P_0 = persistentHorizontalOrVerticalLayoutGroup7;
		}
		return P_0;
	}

	private static void Write(PersistentVerticalLayoutGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentVerticalLayoutGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentVerticalLayoutGroup), P_0.GetType());
		}
	}

	private static PersistentVerticalLayoutGroup Read(PersistentVerticalLayoutGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentVerticalLayoutGroup persistentVerticalLayoutGroup = new PersistentVerticalLayoutGroup();
				ProtoReader.NoteObject(persistentVerticalLayoutGroup, P_1);
				P_0 = persistentVerticalLayoutGroup;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentVerticalLayoutGroup persistentVerticalLayoutGroup2 = new PersistentVerticalLayoutGroup();
			ProtoReader.NoteObject(persistentVerticalLayoutGroup2, P_1);
			P_0 = persistentVerticalLayoutGroup2;
		}
		return P_0;
	}

	private static void Write(PersistentHorizontalLayoutGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentHorizontalLayoutGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentHorizontalLayoutGroup), P_0.GetType());
		}
	}

	private static PersistentHorizontalLayoutGroup Read(PersistentHorizontalLayoutGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentHorizontalLayoutGroup persistentHorizontalLayoutGroup = new PersistentHorizontalLayoutGroup();
				ProtoReader.NoteObject(persistentHorizontalLayoutGroup, P_1);
				P_0 = persistentHorizontalLayoutGroup;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentHorizontalLayoutGroup persistentHorizontalLayoutGroup2 = new PersistentHorizontalLayoutGroup();
			ProtoReader.NoteObject(persistentHorizontalLayoutGroup2, P_1);
			P_0 = persistentHorizontalLayoutGroup2;
		}
		return P_0;
	}

	private static void Write(PersistentGridLayoutGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGridLayoutGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGridLayoutGroup), P_0.GetType());
		}
		Vector2 cellSize = P_0.cellSize;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(cellSize, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint constraint = P_0.constraint;
		if (constraint != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(constraint, P_1);
		}
		int constraintCount = P_0.constraintCount;
		if (constraintCount != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(constraintCount, P_1);
		}
		Vector2 spacing = P_0.spacing;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(spacing, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint startAxis = P_0.startAxis;
		if (startAxis != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(startAxis, P_1);
		}
		uint startCorner = P_0.startCorner;
		if (startCorner != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(startCorner, P_1);
		}
	}

	private static PersistentGridLayoutGroup Read(PersistentGridLayoutGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentGridLayoutGroup persistentGridLayoutGroup2 = new PersistentGridLayoutGroup();
					ProtoReader.NoteObject(persistentGridLayoutGroup2, P_1);
					P_0 = persistentGridLayoutGroup2;
				}
				Vector2 cellSize = P_0.cellSize;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(cellSize, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 cellSize2 = vector;
				P_0.cellSize = cellSize2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentGridLayoutGroup persistentGridLayoutGroup5 = new PersistentGridLayoutGroup();
					ProtoReader.NoteObject(persistentGridLayoutGroup5, P_1);
					P_0 = persistentGridLayoutGroup5;
				}
				uint startCorner = P_1.ReadUInt32();
				P_0.constraint = startCorner;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentGridLayoutGroup persistentGridLayoutGroup3 = new PersistentGridLayoutGroup();
					ProtoReader.NoteObject(persistentGridLayoutGroup3, P_1);
					P_0 = persistentGridLayoutGroup3;
				}
				int constraintCount = P_1.ReadInt32();
				P_0.constraintCount = constraintCount;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentGridLayoutGroup persistentGridLayoutGroup6 = new PersistentGridLayoutGroup();
					ProtoReader.NoteObject(persistentGridLayoutGroup6, P_1);
					P_0 = persistentGridLayoutGroup6;
				}
				Vector2 spacing = P_0.spacing;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(spacing, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 cellSize2 = vector2;
				P_0.spacing = cellSize2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentGridLayoutGroup persistentGridLayoutGroup7 = new PersistentGridLayoutGroup();
					ProtoReader.NoteObject(persistentGridLayoutGroup7, P_1);
					P_0 = persistentGridLayoutGroup7;
				}
				uint startCorner = P_1.ReadUInt32();
				P_0.startAxis = startCorner;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentGridLayoutGroup persistentGridLayoutGroup4 = new PersistentGridLayoutGroup();
					ProtoReader.NoteObject(persistentGridLayoutGroup4, P_1);
					P_0 = persistentGridLayoutGroup4;
				}
				uint startCorner = P_1.ReadUInt32();
				P_0.startCorner = startCorner;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentGridLayoutGroup persistentGridLayoutGroup = new PersistentGridLayoutGroup();
					ProtoReader.NoteObject(persistentGridLayoutGroup, P_1);
					P_0 = persistentGridLayoutGroup;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentGridLayoutGroup persistentGridLayoutGroup8 = new PersistentGridLayoutGroup();
			ProtoReader.NoteObject(persistentGridLayoutGroup8, P_1);
			P_0 = persistentGridLayoutGroup8;
		}
		return P_0;
	}

	private static void Write(PersistentLayoutElement P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLayoutElement))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLayoutElement), P_0.GetType());
		}
		float flexibleHeight = P_0.flexibleHeight;
		if (flexibleHeight != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(flexibleHeight, P_1);
		}
		float flexibleWidth = P_0.flexibleWidth;
		if (flexibleWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(flexibleWidth, P_1);
		}
		bool ignoreLayout = P_0.ignoreLayout;
		if (ignoreLayout)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(ignoreLayout, P_1);
		}
		float minHeight = P_0.minHeight;
		if (minHeight != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minHeight, P_1);
		}
		float minWidth = P_0.minWidth;
		if (minWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minWidth, P_1);
		}
		float preferredHeight = P_0.preferredHeight;
		if (preferredHeight != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(preferredHeight, P_1);
		}
		float preferredWidth = P_0.preferredWidth;
		if (preferredWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(preferredWidth, P_1);
		}
	}

	private static PersistentLayoutElement Read(PersistentLayoutElement P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLayoutElement persistentLayoutElement5 = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement5, P_1);
					P_0 = persistentLayoutElement5;
				}
				float minWidth = P_1.ReadSingle();
				P_0.flexibleHeight = minWidth;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLayoutElement persistentLayoutElement8 = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement8, P_1);
					P_0 = persistentLayoutElement8;
				}
				float minWidth = P_1.ReadSingle();
				P_0.flexibleWidth = minWidth;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentLayoutElement persistentLayoutElement6 = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement6, P_1);
					P_0 = persistentLayoutElement6;
				}
				bool ignoreLayout = P_1.ReadBoolean();
				P_0.ignoreLayout = ignoreLayout;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentLayoutElement persistentLayoutElement3 = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement3, P_1);
					P_0 = persistentLayoutElement3;
				}
				float minWidth = P_1.ReadSingle();
				P_0.minHeight = minWidth;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentLayoutElement persistentLayoutElement2 = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement2, P_1);
					P_0 = persistentLayoutElement2;
				}
				float minWidth = P_1.ReadSingle();
				P_0.minWidth = minWidth;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentLayoutElement persistentLayoutElement7 = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement7, P_1);
					P_0 = persistentLayoutElement7;
				}
				float minWidth = P_1.ReadSingle();
				P_0.preferredHeight = minWidth;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentLayoutElement persistentLayoutElement4 = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement4, P_1);
					P_0 = persistentLayoutElement4;
				}
				float minWidth = P_1.ReadSingle();
				P_0.preferredWidth = minWidth;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLayoutElement persistentLayoutElement = new PersistentLayoutElement();
					ProtoReader.NoteObject(persistentLayoutElement, P_1);
					P_0 = persistentLayoutElement;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLayoutElement persistentLayoutElement9 = new PersistentLayoutElement();
			ProtoReader.NoteObject(persistentLayoutElement9, P_1);
			P_0 = persistentLayoutElement9;
		}
		return P_0;
	}

	private static void Write(PersistentContentSizeFitter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentContentSizeFitter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentContentSizeFitter), P_0.GetType());
		}
		uint horizontalFit = P_0.horizontalFit;
		if (horizontalFit != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(horizontalFit, P_1);
		}
		uint verticalFit = P_0.verticalFit;
		if (verticalFit != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(verticalFit, P_1);
		}
	}

	private static PersistentContentSizeFitter Read(PersistentContentSizeFitter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentContentSizeFitter persistentContentSizeFitter2 = new PersistentContentSizeFitter();
					ProtoReader.NoteObject(persistentContentSizeFitter2, P_1);
					P_0 = persistentContentSizeFitter2;
				}
				uint horizontalFit = P_1.ReadUInt32();
				P_0.horizontalFit = horizontalFit;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentContentSizeFitter persistentContentSizeFitter3 = new PersistentContentSizeFitter();
					ProtoReader.NoteObject(persistentContentSizeFitter3, P_1);
					P_0 = persistentContentSizeFitter3;
				}
				uint horizontalFit = P_1.ReadUInt32();
				P_0.verticalFit = horizontalFit;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentContentSizeFitter persistentContentSizeFitter = new PersistentContentSizeFitter();
					ProtoReader.NoteObject(persistentContentSizeFitter, P_1);
					P_0 = persistentContentSizeFitter;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentContentSizeFitter persistentContentSizeFitter4 = new PersistentContentSizeFitter();
			ProtoReader.NoteObject(persistentContentSizeFitter4, P_1);
			P_0 = persistentContentSizeFitter4;
		}
		return P_0;
	}

	private static void Write(PersistentCanvasScaler P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCanvasScaler))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCanvasScaler), P_0.GetType());
		}
		float defaultSpriteDPI = P_0.defaultSpriteDPI;
		if (defaultSpriteDPI != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(defaultSpriteDPI, P_1);
		}
		float dynamicPixelsPerUnit = P_0.dynamicPixelsPerUnit;
		if (dynamicPixelsPerUnit != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dynamicPixelsPerUnit, P_1);
		}
		float fallbackScreenDPI = P_0.fallbackScreenDPI;
		if (fallbackScreenDPI != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fallbackScreenDPI, P_1);
		}
		float matchWidthOrHeight = P_0.matchWidthOrHeight;
		if (matchWidthOrHeight != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(matchWidthOrHeight, P_1);
		}
		uint physicalUnit = P_0.physicalUnit;
		if (physicalUnit != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(physicalUnit, P_1);
		}
		float referencePixelsPerUnit = P_0.referencePixelsPerUnit;
		if (referencePixelsPerUnit != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(referencePixelsPerUnit, P_1);
		}
		Vector2 referenceResolution = P_0.referenceResolution;
		ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(referenceResolution, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float scaleFactor = P_0.scaleFactor;
		if (scaleFactor != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(scaleFactor, P_1);
		}
		uint screenMatchMode = P_0.screenMatchMode;
		if (screenMatchMode != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(screenMatchMode, P_1);
		}
		uint uiScaleMode = P_0.uiScaleMode;
		if (uiScaleMode != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(uiScaleMode, P_1);
		}
	}

	private static PersistentCanvasScaler Read(PersistentCanvasScaler P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler6 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler6, P_1);
					P_0 = persistentCanvasScaler6;
				}
				float matchWidthOrHeight = P_1.ReadSingle();
				P_0.defaultSpriteDPI = matchWidthOrHeight;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler8 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler8, P_1);
					P_0 = persistentCanvasScaler8;
				}
				float matchWidthOrHeight = P_1.ReadSingle();
				P_0.dynamicPixelsPerUnit = matchWidthOrHeight;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler5 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler5, P_1);
					P_0 = persistentCanvasScaler5;
				}
				float matchWidthOrHeight = P_1.ReadSingle();
				P_0.fallbackScreenDPI = matchWidthOrHeight;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler3 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler3, P_1);
					P_0 = persistentCanvasScaler3;
				}
				float matchWidthOrHeight = P_1.ReadSingle();
				P_0.matchWidthOrHeight = matchWidthOrHeight;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler11 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler11, P_1);
					P_0 = persistentCanvasScaler11;
				}
				uint uiScaleMode = P_1.ReadUInt32();
				P_0.physicalUnit = uiScaleMode;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler9 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler9, P_1);
					P_0 = persistentCanvasScaler9;
				}
				float matchWidthOrHeight = P_1.ReadSingle();
				P_0.referencePixelsPerUnit = matchWidthOrHeight;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler2 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler2, P_1);
					P_0 = persistentCanvasScaler2;
				}
				Vector2 referenceResolution = P_0.referenceResolution;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(referenceResolution, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 referenceResolution2 = vector;
				P_0.referenceResolution = referenceResolution2;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler10 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler10, P_1);
					P_0 = persistentCanvasScaler10;
				}
				float matchWidthOrHeight = P_1.ReadSingle();
				P_0.scaleFactor = matchWidthOrHeight;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler7 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler7, P_1);
					P_0 = persistentCanvasScaler7;
				}
				uint uiScaleMode = P_1.ReadUInt32();
				P_0.screenMatchMode = uiScaleMode;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler4 = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler4, P_1);
					P_0 = persistentCanvasScaler4;
				}
				uint uiScaleMode = P_1.ReadUInt32();
				P_0.uiScaleMode = uiScaleMode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCanvasScaler persistentCanvasScaler = new PersistentCanvasScaler();
					ProtoReader.NoteObject(persistentCanvasScaler, P_1);
					P_0 = persistentCanvasScaler;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCanvasScaler persistentCanvasScaler12 = new PersistentCanvasScaler();
			ProtoReader.NoteObject(persistentCanvasScaler12, P_1);
			P_0 = persistentCanvasScaler12;
		}
		return P_0;
	}

	private static void Write(PersistentAspectRatioFitter P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAspectRatioFitter))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAspectRatioFitter), P_0.GetType());
		}
		uint aspectMode = P_0.aspectMode;
		if (aspectMode != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(aspectMode, P_1);
		}
		float aspectRatio = P_0.aspectRatio;
		if (aspectRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(aspectRatio, P_1);
		}
	}

	private static PersistentAspectRatioFitter Read(PersistentAspectRatioFitter P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentAspectRatioFitter persistentAspectRatioFitter2 = new PersistentAspectRatioFitter();
					ProtoReader.NoteObject(persistentAspectRatioFitter2, P_1);
					P_0 = persistentAspectRatioFitter2;
				}
				uint aspectMode = P_1.ReadUInt32();
				P_0.aspectMode = aspectMode;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentAspectRatioFitter persistentAspectRatioFitter3 = new PersistentAspectRatioFitter();
					ProtoReader.NoteObject(persistentAspectRatioFitter3, P_1);
					P_0 = persistentAspectRatioFitter3;
				}
				float aspectRatio = P_1.ReadSingle();
				P_0.aspectRatio = aspectRatio;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentAspectRatioFitter persistentAspectRatioFitter = new PersistentAspectRatioFitter();
					ProtoReader.NoteObject(persistentAspectRatioFitter, P_1);
					P_0 = persistentAspectRatioFitter;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentAspectRatioFitter persistentAspectRatioFitter4 = new PersistentAspectRatioFitter();
			ProtoReader.NoteObject(persistentAspectRatioFitter4, P_1);
			P_0 = persistentAspectRatioFitter4;
		}
		return P_0;
	}

	private static void Write(PersistentToggleGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentToggleGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentToggleGroup), P_0.GetType());
		}
		bool allowSwitchOff = P_0.allowSwitchOff;
		if (allowSwitchOff)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(allowSwitchOff, P_1);
		}
	}

	private static PersistentToggleGroup Read(PersistentToggleGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentToggleGroup persistentToggleGroup = new PersistentToggleGroup();
					ProtoReader.NoteObject(persistentToggleGroup, P_1);
					P_0 = persistentToggleGroup;
				}
				bool allowSwitchOff = P_1.ReadBoolean();
				P_0.allowSwitchOff = allowSwitchOff;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentToggleGroup persistentToggleGroup2 = new PersistentToggleGroup();
					ProtoReader.NoteObject(persistentToggleGroup2, P_1);
					P_0 = persistentToggleGroup2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentToggleGroup persistentToggleGroup3 = new PersistentToggleGroup();
			ProtoReader.NoteObject(persistentToggleGroup3, P_1);
			P_0 = persistentToggleGroup3;
		}
		return P_0;
	}

	private static void Write(PersistentSelectable P_0, ProtoWriter P_1)
	{
		PersistentButton obj = P_0 as PersistentButton;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1131, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentDropdown obj2 = P_0 as PersistentDropdown;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1132, WireType.String, P_1);
				token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentInputField obj3 = P_0 as PersistentInputField;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1133, WireType.String, P_1);
					token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else
				{
					PersistentScrollbar obj4 = P_0 as PersistentScrollbar;
					if (obj4 != null)
					{
						ProtoWriter.WriteFieldHeader(1134, WireType.String, P_1);
						token = ProtoWriter.StartSubItem(null, P_1);
						Write(obj4, P_1);
						ProtoWriter.EndSubItem(token, P_1);
					}
					else
					{
						PersistentSlider obj5 = P_0 as PersistentSlider;
						if (obj5 != null)
						{
							ProtoWriter.WriteFieldHeader(1135, WireType.String, P_1);
							token = ProtoWriter.StartSubItem(null, P_1);
							Write(obj5, P_1);
							ProtoWriter.EndSubItem(token, P_1);
						}
						else
						{
							PersistentToggle obj6 = P_0 as PersistentToggle;
							if (obj6 != null)
							{
								ProtoWriter.WriteFieldHeader(1136, WireType.String, P_1);
								token = ProtoWriter.StartSubItem(null, P_1);
								Write(obj6, P_1);
								ProtoWriter.EndSubItem(token, P_1);
							}
							else if (P_0.GetType() != typeof(PersistentSelectable))
							{
								TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSelectable), P_0.GetType());
							}
						}
					}
				}
			}
		}
		AnimationTriggers animationTriggers = P_0.animationTriggers;
		if (animationTriggers != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(animationTriggers, P_1);
			Write(animationTriggers, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		ColorBlock colors = P_0.colors;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(colors, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long image = P_0.image;
		if (image != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(image, P_1);
		}
		bool interactable = P_0.interactable;
		if (interactable)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(interactable, P_1);
		}
		PersistentNavigation navigation = P_0.navigation;
		if (navigation != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(navigation, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentSpriteState spriteState = P_0.spriteState;
		if (spriteState != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(spriteState, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		long targetGraphic = P_0.targetGraphic;
		if (targetGraphic != 0L)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(targetGraphic, P_1);
		}
		Selectable.Transition transition = P_0.transition;
		if (transition != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			Selectable.Transition transition2 = transition;
			switch (transition2)
			{
			case Selectable.Transition.None:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case Selectable.Transition.ColorTint:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case Selectable.Transition.SpriteSwap:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case Selectable.Transition.Animation:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, transition2);
				break;
			}
		}
	}

	private static PersistentSelectable Read(PersistentSelectable P_0, ProtoReader P_1)
	{
		int num;
		Selectable.Transition transition = default(Selectable.Transition);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable3 = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable3, P_1);
					P_0 = persistentSelectable3;
				}
				AnimationTriggers animationTriggers = P_0.animationTriggers;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				AnimationTriggers animationTriggers2 = Read(animationTriggers, P_1);
				ProtoReader.EndSubItem(token, P_1);
				AnimationTriggers animationTriggers3 = animationTriggers2;
				if (animationTriggers3 != null)
				{
					P_0.animationTriggers = animationTriggers3;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable4 = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable4, P_1);
					P_0 = persistentSelectable4;
				}
				ColorBlock colors = P_0.colors;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				ColorBlock colorBlock = Read(colors, P_1);
				ProtoReader.EndSubItem(token, P_1);
				ColorBlock colors2 = colorBlock;
				P_0.colors = colors2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable6 = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable6, P_1);
					P_0 = persistentSelectable6;
				}
				long targetGraphic = P_1.ReadInt64();
				P_0.image = targetGraphic;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable7 = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable7, P_1);
					P_0 = persistentSelectable7;
				}
				bool interactable = P_1.ReadBoolean();
				P_0.interactable = interactable;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable8 = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable8, P_1);
					P_0 = persistentSelectable8;
				}
				PersistentNavigation persistentNavigation = (PersistentNavigation)BclHelpers.ReadNetObject(P_0.navigation, P_1, 258, typeof(PersistentNavigation), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentNavigation != null)
				{
					P_0.navigation = persistentNavigation;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable9 = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable9, P_1);
					P_0 = persistentSelectable9;
				}
				PersistentSpriteState persistentSpriteState = (PersistentSpriteState)BclHelpers.ReadNetObject(P_0.spriteState, P_1, 258, typeof(PersistentSpriteState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentSpriteState != null)
				{
					P_0.spriteState = persistentSpriteState;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable5 = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable5, P_1);
					P_0 = persistentSelectable5;
				}
				long targetGraphic = P_1.ReadInt64();
				P_0.targetGraphic = targetGraphic;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable2 = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable2, P_1);
					P_0 = persistentSelectable2;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					transition = Selectable.Transition.None;
					break;
				case 1:
					transition = Selectable.Transition.ColorTint;
					break;
				case 2:
					transition = Selectable.Transition.SpriteSwap;
					break;
				case 3:
					transition = Selectable.Transition.Animation;
					break;
				default:
					P_1.ThrowEnumException(typeof(Selectable.Transition), num2);
					break;
				}
				transition = (P_0.transition = transition);
				break;
			}
			case 1131:
			{
				if (P_0 != null && !(P_0 is PersistentButton))
				{
					PersistentSelectable from6 = P_0;
					PersistentButton persistentButton = new PersistentButton();
					ProtoReader.NoteObject(persistentButton, P_1);
					P_0 = (PersistentSelectable)ProtoReader.Merge(P_1, from6, persistentButton);
				}
				PersistentButton obj6 = (PersistentButton)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentButton persistentButton2 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentButton2;
				break;
			}
			case 1132:
			{
				if (P_0 != null && !(P_0 is PersistentDropdown))
				{
					PersistentSelectable from3 = P_0;
					PersistentDropdown persistentDropdown = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown, P_1);
					P_0 = (PersistentSelectable)ProtoReader.Merge(P_1, from3, persistentDropdown);
				}
				PersistentDropdown obj3 = (PersistentDropdown)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentDropdown persistentDropdown2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentDropdown2;
				break;
			}
			case 1133:
			{
				if (P_0 != null && !(P_0 is PersistentInputField))
				{
					PersistentSelectable from = P_0;
					PersistentInputField persistentInputField = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField, P_1);
					P_0 = (PersistentSelectable)ProtoReader.Merge(P_1, from, persistentInputField);
				}
				PersistentInputField obj = (PersistentInputField)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentInputField persistentInputField2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentInputField2;
				break;
			}
			case 1134:
			{
				if (P_0 != null && !(P_0 is PersistentScrollbar))
				{
					PersistentSelectable from5 = P_0;
					PersistentScrollbar persistentScrollbar = new PersistentScrollbar();
					ProtoReader.NoteObject(persistentScrollbar, P_1);
					P_0 = (PersistentSelectable)ProtoReader.Merge(P_1, from5, persistentScrollbar);
				}
				PersistentScrollbar obj5 = (PersistentScrollbar)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentScrollbar persistentScrollbar2 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentScrollbar2;
				break;
			}
			case 1135:
			{
				if (P_0 != null && !(P_0 is PersistentSlider))
				{
					PersistentSelectable from4 = P_0;
					PersistentSlider persistentSlider = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider, P_1);
					P_0 = (PersistentSelectable)ProtoReader.Merge(P_1, from4, persistentSlider);
				}
				PersistentSlider obj4 = (PersistentSlider)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentSlider persistentSlider2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentSlider2;
				break;
			}
			case 1136:
			{
				if (P_0 != null && !(P_0 is PersistentToggle))
				{
					PersistentSelectable from2 = P_0;
					PersistentToggle persistentToggle = new PersistentToggle();
					ProtoReader.NoteObject(persistentToggle, P_1);
					P_0 = (PersistentSelectable)ProtoReader.Merge(P_1, from2, persistentToggle);
				}
				PersistentToggle obj2 = (PersistentToggle)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentToggle persistentToggle2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentToggle2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSelectable persistentSelectable = new PersistentSelectable();
					ProtoReader.NoteObject(persistentSelectable, P_1);
					P_0 = persistentSelectable;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSelectable persistentSelectable10 = new PersistentSelectable();
			ProtoReader.NoteObject(persistentSelectable10, P_1);
			P_0 = persistentSelectable10;
		}
		return P_0;
	}

	private static void Write(PersistentToggle P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentToggle))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentToggle), P_0.GetType());
		}
		long group = P_0.group;
		if (group != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(group, P_1);
		}
		bool isOn = P_0.isOn;
		if (isOn)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isOn, P_1);
		}
	}

	private static PersistentToggle Read(PersistentToggle P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentToggle persistentToggle2 = new PersistentToggle();
					ProtoReader.NoteObject(persistentToggle2, P_1);
					P_0 = persistentToggle2;
				}
				long group = P_1.ReadInt64();
				P_0.group = group;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentToggle persistentToggle3 = new PersistentToggle();
					ProtoReader.NoteObject(persistentToggle3, P_1);
					P_0 = persistentToggle3;
				}
				bool isOn = P_1.ReadBoolean();
				P_0.isOn = isOn;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentToggle persistentToggle = new PersistentToggle();
					ProtoReader.NoteObject(persistentToggle, P_1);
					P_0 = persistentToggle;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentToggle persistentToggle4 = new PersistentToggle();
			ProtoReader.NoteObject(persistentToggle4, P_1);
			P_0 = persistentToggle4;
		}
		return P_0;
	}

	private static void Write(PersistentSlider P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSlider))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSlider), P_0.GetType());
		}
		Slider.Direction direction = P_0.direction;
		if (direction != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			Slider.Direction direction2 = direction;
			switch (direction2)
			{
			case Slider.Direction.LeftToRight:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case Slider.Direction.RightToLeft:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case Slider.Direction.BottomToTop:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case Slider.Direction.TopToBottom:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, direction2);
				break;
			}
		}
		long fillRect = P_0.fillRect;
		if (fillRect != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(fillRect, P_1);
		}
		long handleRect = P_0.handleRect;
		if (handleRect != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(handleRect, P_1);
		}
		float maxValue = P_0.maxValue;
		if (maxValue != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxValue, P_1);
		}
		float minValue = P_0.minValue;
		if (minValue != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minValue, P_1);
		}
		float normalizedValue = P_0.normalizedValue;
		if (normalizedValue != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(normalizedValue, P_1);
		}
		PersistentUnityEventBase onValueChanged = P_0.onValueChanged;
		if (onValueChanged != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			BclHelpers.WriteNetObject(onValueChanged, P_1, 813, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float value = P_0.value;
		if (value != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(value, P_1);
		}
		bool wholeNumbers = P_0.wholeNumbers;
		if (wholeNumbers)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(wholeNumbers, P_1);
		}
	}

	private static PersistentSlider Read(PersistentSlider P_0, ProtoReader P_1)
	{
		int num;
		Slider.Direction direction = default(Slider.Direction);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider6 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider6, P_1);
					P_0 = persistentSlider6;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					direction = Slider.Direction.LeftToRight;
					break;
				case 1:
					direction = Slider.Direction.RightToLeft;
					break;
				case 2:
					direction = Slider.Direction.BottomToTop;
					break;
				case 3:
					direction = Slider.Direction.TopToBottom;
					break;
				default:
					P_1.ThrowEnumException(typeof(Slider.Direction), num2);
					break;
				}
				direction = (P_0.direction = direction);
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider9 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider9, P_1);
					P_0 = persistentSlider9;
				}
				long handleRect = P_1.ReadInt64();
				P_0.fillRect = handleRect;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider3 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider3, P_1);
					P_0 = persistentSlider3;
				}
				long handleRect = P_1.ReadInt64();
				P_0.handleRect = handleRect;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider8 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider8, P_1);
					P_0 = persistentSlider8;
				}
				float minValue = P_1.ReadSingle();
				P_0.maxValue = minValue;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider2 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider2, P_1);
					P_0 = persistentSlider2;
				}
				float minValue = P_1.ReadSingle();
				P_0.minValue = minValue;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider5 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider5, P_1);
					P_0 = persistentSlider5;
				}
				float minValue = P_1.ReadSingle();
				P_0.normalizedValue = minValue;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider10 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider10, P_1);
					P_0 = persistentSlider10;
				}
				PersistentUnityEventBase persistentUnityEventBase = (PersistentUnityEventBase)BclHelpers.ReadNetObject(P_0.onValueChanged, P_1, 813, typeof(PersistentUnityEventBase), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentUnityEventBase != null)
				{
					P_0.onValueChanged = persistentUnityEventBase;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider7 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider7, P_1);
					P_0 = persistentSlider7;
				}
				float minValue = P_1.ReadSingle();
				P_0.value = minValue;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentSlider persistentSlider4 = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider4, P_1);
					P_0 = persistentSlider4;
				}
				bool wholeNumbers = P_1.ReadBoolean();
				P_0.wholeNumbers = wholeNumbers;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSlider persistentSlider = new PersistentSlider();
					ProtoReader.NoteObject(persistentSlider, P_1);
					P_0 = persistentSlider;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSlider persistentSlider11 = new PersistentSlider();
			ProtoReader.NoteObject(persistentSlider11, P_1);
			P_0 = persistentSlider11;
		}
		return P_0;
	}

	private static void Write(PersistentScrollbar P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentScrollbar))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentScrollbar), P_0.GetType());
		}
		Scrollbar.Direction direction = P_0.direction;
		if (direction != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			Scrollbar.Direction direction2 = direction;
			switch (direction2)
			{
			case Scrollbar.Direction.LeftToRight:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case Scrollbar.Direction.RightToLeft:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case Scrollbar.Direction.BottomToTop:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case Scrollbar.Direction.TopToBottom:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, direction2);
				break;
			}
		}
		long handleRect = P_0.handleRect;
		if (handleRect != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(handleRect, P_1);
		}
		int numberOfSteps = P_0.numberOfSteps;
		if (numberOfSteps != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(numberOfSteps, P_1);
		}
		PersistentUnityEventBase onValueChanged = P_0.onValueChanged;
		if (onValueChanged != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			BclHelpers.WriteNetObject(onValueChanged, P_1, 813, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float size = P_0.size;
		if (size != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(size, P_1);
		}
		float value = P_0.value;
		if (value != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(value, P_1);
		}
	}

	private static PersistentScrollbar Read(PersistentScrollbar P_0, ProtoReader P_1)
	{
		int num;
		Scrollbar.Direction direction = default(Scrollbar.Direction);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentScrollbar persistentScrollbar5 = new PersistentScrollbar();
					ProtoReader.NoteObject(persistentScrollbar5, P_1);
					P_0 = persistentScrollbar5;
				}
				int numberOfSteps = P_1.ReadInt32();
				switch (numberOfSteps)
				{
				case 0:
					direction = Scrollbar.Direction.LeftToRight;
					break;
				case 1:
					direction = Scrollbar.Direction.RightToLeft;
					break;
				case 2:
					direction = Scrollbar.Direction.BottomToTop;
					break;
				case 3:
					direction = Scrollbar.Direction.TopToBottom;
					break;
				default:
					P_1.ThrowEnumException(typeof(Scrollbar.Direction), numberOfSteps);
					break;
				}
				direction = (P_0.direction = direction);
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentScrollbar persistentScrollbar3 = new PersistentScrollbar();
					ProtoReader.NoteObject(persistentScrollbar3, P_1);
					P_0 = persistentScrollbar3;
				}
				long handleRect = P_1.ReadInt64();
				P_0.handleRect = handleRect;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentScrollbar persistentScrollbar2 = new PersistentScrollbar();
					ProtoReader.NoteObject(persistentScrollbar2, P_1);
					P_0 = persistentScrollbar2;
				}
				int numberOfSteps = P_1.ReadInt32();
				P_0.numberOfSteps = numberOfSteps;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentScrollbar persistentScrollbar6 = new PersistentScrollbar();
					ProtoReader.NoteObject(persistentScrollbar6, P_1);
					P_0 = persistentScrollbar6;
				}
				PersistentUnityEventBase persistentUnityEventBase = (PersistentUnityEventBase)BclHelpers.ReadNetObject(P_0.onValueChanged, P_1, 813, typeof(PersistentUnityEventBase), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentUnityEventBase != null)
				{
					P_0.onValueChanged = persistentUnityEventBase;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentScrollbar persistentScrollbar7 = new PersistentScrollbar();
					ProtoReader.NoteObject(persistentScrollbar7, P_1);
					P_0 = persistentScrollbar7;
				}
				float value = P_1.ReadSingle();
				P_0.size = value;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentScrollbar persistentScrollbar4 = new PersistentScrollbar();
					ProtoReader.NoteObject(persistentScrollbar4, P_1);
					P_0 = persistentScrollbar4;
				}
				float value = P_1.ReadSingle();
				P_0.value = value;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentScrollbar persistentScrollbar = new PersistentScrollbar();
					ProtoReader.NoteObject(persistentScrollbar, P_1);
					P_0 = persistentScrollbar;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentScrollbar persistentScrollbar8 = new PersistentScrollbar();
			ProtoReader.NoteObject(persistentScrollbar8, P_1);
			P_0 = persistentScrollbar8;
		}
		return P_0;
	}

	private static void Write(PersistentInputField P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentInputField))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentInputField), P_0.GetType());
		}
		char asteriskChar = P_0.asteriskChar;
		if (asteriskChar != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt16(asteriskChar, P_1);
		}
		float caretBlinkRate = P_0.caretBlinkRate;
		if (caretBlinkRate != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(caretBlinkRate, P_1);
		}
		Color caretColor = P_0.caretColor;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(caretColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		int caretPosition = P_0.caretPosition;
		if (caretPosition != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(caretPosition, P_1);
		}
		int caretWidth = P_0.caretWidth;
		if (caretWidth != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(caretWidth, P_1);
		}
		int characterLimit = P_0.characterLimit;
		if (characterLimit != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(characterLimit, P_1);
		}
		InputField.CharacterValidation characterValidation = P_0.characterValidation;
		if (characterValidation != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			InputField.CharacterValidation characterValidation2 = characterValidation;
			switch (characterValidation2)
			{
			case InputField.CharacterValidation.None:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case InputField.CharacterValidation.Integer:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case InputField.CharacterValidation.Decimal:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case InputField.CharacterValidation.Alphanumeric:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			case InputField.CharacterValidation.Name:
				ProtoWriter.WriteInt32(4, P_1);
				break;
			case InputField.CharacterValidation.EmailAddress:
				ProtoWriter.WriteInt32(5, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, characterValidation2);
				break;
			}
		}
		InputField.ContentType contentType = P_0.contentType;
		if (contentType != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			InputField.ContentType contentType2 = contentType;
			switch (contentType2)
			{
			case InputField.ContentType.Standard:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case InputField.ContentType.Autocorrected:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case InputField.ContentType.IntegerNumber:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case InputField.ContentType.DecimalNumber:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			case InputField.ContentType.Alphanumeric:
				ProtoWriter.WriteInt32(4, P_1);
				break;
			case InputField.ContentType.Name:
				ProtoWriter.WriteInt32(5, P_1);
				break;
			case InputField.ContentType.EmailAddress:
				ProtoWriter.WriteInt32(6, P_1);
				break;
			case InputField.ContentType.Password:
				ProtoWriter.WriteInt32(7, P_1);
				break;
			case InputField.ContentType.Pin:
				ProtoWriter.WriteInt32(8, P_1);
				break;
			case InputField.ContentType.Custom:
				ProtoWriter.WriteInt32(9, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, contentType2);
				break;
			}
		}
		bool customCaretColor = P_0.customCaretColor;
		if (customCaretColor)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(customCaretColor, P_1);
		}
		InputField.InputType inputType = P_0.inputType;
		if (inputType != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			InputField.InputType inputType2 = inputType;
			switch (inputType2)
			{
			case InputField.InputType.Standard:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case InputField.InputType.AutoCorrect:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case InputField.InputType.Password:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, inputType2);
				break;
			}
		}
		TouchScreenKeyboardType keyboardType = P_0.keyboardType;
		if (keyboardType != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			TouchScreenKeyboardType touchScreenKeyboardType = keyboardType;
			switch (touchScreenKeyboardType)
			{
			case TouchScreenKeyboardType.Default:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case TouchScreenKeyboardType.ASCIICapable:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case TouchScreenKeyboardType.NumbersAndPunctuation:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case TouchScreenKeyboardType.URL:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			case TouchScreenKeyboardType.NumberPad:
				ProtoWriter.WriteInt32(4, P_1);
				break;
			case TouchScreenKeyboardType.PhonePad:
				ProtoWriter.WriteInt32(5, P_1);
				break;
			case TouchScreenKeyboardType.NamePhonePad:
				ProtoWriter.WriteInt32(6, P_1);
				break;
			case TouchScreenKeyboardType.EmailAddress:
				ProtoWriter.WriteInt32(7, P_1);
				break;
			case TouchScreenKeyboardType.NintendoNetworkAccount:
				ProtoWriter.WriteInt32(8, P_1);
				break;
			case TouchScreenKeyboardType.Social:
				ProtoWriter.WriteInt32(9, P_1);
				break;
			case TouchScreenKeyboardType.Search:
				ProtoWriter.WriteInt32(10, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, touchScreenKeyboardType);
				break;
			}
		}
		InputField.LineType lineType = P_0.lineType;
		if (lineType != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			InputField.LineType lineType2 = lineType;
			switch (lineType2)
			{
			case InputField.LineType.SingleLine:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case InputField.LineType.MultiLineSubmit:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case InputField.LineType.MultiLineNewline:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, lineType2);
				break;
			}
		}
		PersistentUnityEventBase onEndEdit = P_0.onEndEdit;
		if (onEndEdit != null)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
			BclHelpers.WriteNetObject(onEndEdit, P_1, 813, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentUnityEventBase onValueChanged = P_0.onValueChanged;
		if (onValueChanged != null)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
			BclHelpers.WriteNetObject(onValueChanged, P_1, 813, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		long placeholder = P_0.placeholder;
		if (placeholder != 0L)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(placeholder, P_1);
		}
		bool readOnly = P_0.readOnly;
		if (readOnly)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(readOnly, P_1);
		}
		int selectionAnchorPosition = P_0.selectionAnchorPosition;
		if (selectionAnchorPosition != 0)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(selectionAnchorPosition, P_1);
		}
		Color selectionColor = P_0.selectionColor;
		ProtoWriter.WriteFieldHeader(18, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(selectionColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		int selectionFocusPosition = P_0.selectionFocusPosition;
		if (selectionFocusPosition != 0)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(selectionFocusPosition, P_1);
		}
		bool shouldHideMobileInput = P_0.shouldHideMobileInput;
		if (shouldHideMobileInput)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(shouldHideMobileInput, P_1);
		}
		string text = P_0.text;
		if (text != null)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.String, P_1);
			ProtoWriter.WriteString(text, P_1);
		}
		long textComponent = P_0.textComponent;
		if (textComponent != 0L)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(textComponent, P_1);
		}
	}

	private static PersistentInputField Read(PersistentInputField P_0, ProtoReader P_1)
	{
		int num;
		InputField.CharacterValidation characterValidation = default(InputField.CharacterValidation);
		InputField.ContentType contentType = default(InputField.ContentType);
		InputField.InputType inputType = default(InputField.InputType);
		TouchScreenKeyboardType keyboardType = default(TouchScreenKeyboardType);
		InputField.LineType lineType = default(InputField.LineType);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField21 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField21, P_1);
					P_0 = persistentInputField21;
				}
				char asteriskChar = (char)P_1.ReadUInt16();
				P_0.asteriskChar = asteriskChar;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField5 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField5, P_1);
					P_0 = persistentInputField5;
				}
				float caretBlinkRate = P_1.ReadSingle();
				P_0.caretBlinkRate = caretBlinkRate;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField18 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField18, P_1);
					P_0 = persistentInputField18;
				}
				Color caretColor = P_0.caretColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(caretColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color selectionColor2 = color2;
				P_0.caretColor = selectionColor2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField15 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField15, P_1);
					P_0 = persistentInputField15;
				}
				int caretWidth = P_1.ReadInt32();
				P_0.caretPosition = caretWidth;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField3 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField3, P_1);
					P_0 = persistentInputField3;
				}
				int caretWidth = P_1.ReadInt32();
				P_0.caretWidth = caretWidth;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField10 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField10, P_1);
					P_0 = persistentInputField10;
				}
				int caretWidth = P_1.ReadInt32();
				P_0.characterLimit = caretWidth;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField19 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField19, P_1);
					P_0 = persistentInputField19;
				}
				int caretWidth = P_1.ReadInt32();
				switch (caretWidth)
				{
				case 0:
					characterValidation = InputField.CharacterValidation.None;
					break;
				case 1:
					characterValidation = InputField.CharacterValidation.Integer;
					break;
				case 2:
					characterValidation = InputField.CharacterValidation.Decimal;
					break;
				case 3:
					characterValidation = InputField.CharacterValidation.Alphanumeric;
					break;
				case 4:
					characterValidation = InputField.CharacterValidation.Name;
					break;
				case 5:
					characterValidation = InputField.CharacterValidation.EmailAddress;
					break;
				default:
					P_1.ThrowEnumException(typeof(InputField.CharacterValidation), caretWidth);
					break;
				}
				characterValidation = (P_0.characterValidation = characterValidation);
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField13 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField13, P_1);
					P_0 = persistentInputField13;
				}
				int caretWidth = P_1.ReadInt32();
				switch (caretWidth)
				{
				case 0:
					contentType = InputField.ContentType.Standard;
					break;
				case 1:
					contentType = InputField.ContentType.Autocorrected;
					break;
				case 2:
					contentType = InputField.ContentType.IntegerNumber;
					break;
				case 3:
					contentType = InputField.ContentType.DecimalNumber;
					break;
				case 4:
					contentType = InputField.ContentType.Alphanumeric;
					break;
				case 5:
					contentType = InputField.ContentType.Name;
					break;
				case 6:
					contentType = InputField.ContentType.EmailAddress;
					break;
				case 7:
					contentType = InputField.ContentType.Password;
					break;
				case 8:
					contentType = InputField.ContentType.Pin;
					break;
				case 9:
					contentType = InputField.ContentType.Custom;
					break;
				default:
					P_1.ThrowEnumException(typeof(InputField.ContentType), caretWidth);
					break;
				}
				contentType = (P_0.contentType = contentType);
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField2 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField2, P_1);
					P_0 = persistentInputField2;
				}
				bool customCaretColor = P_1.ReadBoolean();
				P_0.customCaretColor = customCaretColor;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField12 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField12, P_1);
					P_0 = persistentInputField12;
				}
				int caretWidth = P_1.ReadInt32();
				switch (caretWidth)
				{
				case 0:
					inputType = InputField.InputType.Standard;
					break;
				case 1:
					inputType = InputField.InputType.AutoCorrect;
					break;
				case 2:
					inputType = InputField.InputType.Password;
					break;
				default:
					P_1.ThrowEnumException(typeof(InputField.InputType), caretWidth);
					break;
				}
				inputType = (P_0.inputType = inputType);
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField9 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField9, P_1);
					P_0 = persistentInputField9;
				}
				int caretWidth = P_1.ReadInt32();
				switch (caretWidth)
				{
				case 0:
					keyboardType = TouchScreenKeyboardType.Default;
					break;
				case 1:
					keyboardType = TouchScreenKeyboardType.ASCIICapable;
					break;
				case 2:
					keyboardType = TouchScreenKeyboardType.NumbersAndPunctuation;
					break;
				case 3:
					keyboardType = TouchScreenKeyboardType.URL;
					break;
				case 4:
					keyboardType = TouchScreenKeyboardType.NumberPad;
					break;
				case 5:
					keyboardType = TouchScreenKeyboardType.PhonePad;
					break;
				case 6:
					keyboardType = TouchScreenKeyboardType.NamePhonePad;
					break;
				case 7:
					keyboardType = TouchScreenKeyboardType.EmailAddress;
					break;
				case 8:
					keyboardType = TouchScreenKeyboardType.NintendoNetworkAccount;
					break;
				case 9:
					keyboardType = TouchScreenKeyboardType.Social;
					break;
				case 10:
					keyboardType = TouchScreenKeyboardType.Search;
					break;
				default:
					P_1.ThrowEnumException(typeof(TouchScreenKeyboardType), caretWidth);
					break;
				}
				keyboardType = (P_0.keyboardType = keyboardType);
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField22 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField22, P_1);
					P_0 = persistentInputField22;
				}
				int caretWidth = P_1.ReadInt32();
				switch (caretWidth)
				{
				case 0:
					lineType = InputField.LineType.SingleLine;
					break;
				case 1:
					lineType = InputField.LineType.MultiLineSubmit;
					break;
				case 2:
					lineType = InputField.LineType.MultiLineNewline;
					break;
				default:
					P_1.ThrowEnumException(typeof(InputField.LineType), caretWidth);
					break;
				}
				lineType = (P_0.lineType = lineType);
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField16 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField16, P_1);
					P_0 = persistentInputField16;
				}
				PersistentUnityEventBase persistentUnityEventBase = (PersistentUnityEventBase)BclHelpers.ReadNetObject(P_0.onEndEdit, P_1, 813, typeof(PersistentUnityEventBase), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentUnityEventBase != null)
				{
					P_0.onEndEdit = persistentUnityEventBase;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField8 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField8, P_1);
					P_0 = persistentInputField8;
				}
				PersistentUnityEventBase persistentUnityEventBase = (PersistentUnityEventBase)BclHelpers.ReadNetObject(P_0.onValueChanged, P_1, 813, typeof(PersistentUnityEventBase), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentUnityEventBase != null)
				{
					P_0.onValueChanged = persistentUnityEventBase;
				}
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField6 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField6, P_1);
					P_0 = persistentInputField6;
				}
				long textComponent = P_1.ReadInt64();
				P_0.placeholder = textComponent;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField23 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField23, P_1);
					P_0 = persistentInputField23;
				}
				bool customCaretColor = P_1.ReadBoolean();
				P_0.readOnly = customCaretColor;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField20 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField20, P_1);
					P_0 = persistentInputField20;
				}
				int caretWidth = P_1.ReadInt32();
				P_0.selectionAnchorPosition = caretWidth;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField17 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField17, P_1);
					P_0 = persistentInputField17;
				}
				Color selectionColor = P_0.selectionColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(selectionColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color selectionColor2 = color;
				P_0.selectionColor = selectionColor2;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField14 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField14, P_1);
					P_0 = persistentInputField14;
				}
				int caretWidth = P_1.ReadInt32();
				P_0.selectionFocusPosition = caretWidth;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField11 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField11, P_1);
					P_0 = persistentInputField11;
				}
				bool customCaretColor = P_1.ReadBoolean();
				P_0.shouldHideMobileInput = customCaretColor;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField7 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField7, P_1);
					P_0 = persistentInputField7;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.text = text;
				}
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentInputField persistentInputField4 = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField4, P_1);
					P_0 = persistentInputField4;
				}
				long textComponent = P_1.ReadInt64();
				P_0.textComponent = textComponent;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentInputField persistentInputField = new PersistentInputField();
					ProtoReader.NoteObject(persistentInputField, P_1);
					P_0 = persistentInputField;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentInputField persistentInputField24 = new PersistentInputField();
			ProtoReader.NoteObject(persistentInputField24, P_1);
			P_0 = persistentInputField24;
		}
		return P_0;
	}

	private static void Write(PersistentDropdown P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentDropdown))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentDropdown), P_0.GetType());
		}
		long captionImage = P_0.captionImage;
		if (captionImage != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(captionImage, P_1);
		}
		long captionText = P_0.captionText;
		if (captionText != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(captionText, P_1);
		}
		long itemImage = P_0.itemImage;
		if (itemImage != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(itemImage, P_1);
		}
		long itemText = P_0.itemText;
		if (itemText != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(itemText, P_1);
		}
		PersistentUnityEventBase onValueChanged = P_0.onValueChanged;
		if (onValueChanged != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(onValueChanged, P_1, 813, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentOptionData[] options = P_0.options;
		if (options != null)
		{
			PersistentOptionData[] array = options;
			foreach (PersistentOptionData obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
					Write((PersistentData)obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		long template = P_0.template;
		if (template != 0L)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(template, P_1);
		}
		int value = P_0.value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(value, P_1);
		}
	}

	private static PersistentDropdown Read(PersistentDropdown P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown6 = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown6, P_1);
					P_0 = persistentDropdown6;
				}
				long itemText = P_1.ReadInt64();
				P_0.captionImage = itemText;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown9 = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown9, P_1);
					P_0 = persistentDropdown9;
				}
				long itemText = P_1.ReadInt64();
				P_0.captionText = itemText;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown5 = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown5, P_1);
					P_0 = persistentDropdown5;
				}
				long itemText = P_1.ReadInt64();
				P_0.itemImage = itemText;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown2 = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown2, P_1);
					P_0 = persistentDropdown2;
				}
				long itemText = P_1.ReadInt64();
				P_0.itemText = itemText;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown8 = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown8, P_1);
					P_0 = persistentDropdown8;
				}
				PersistentUnityEventBase persistentUnityEventBase = (PersistentUnityEventBase)BclHelpers.ReadNetObject(P_0.onValueChanged, P_1, 813, typeof(PersistentUnityEventBase), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentUnityEventBase != null)
				{
					P_0.onValueChanged = persistentUnityEventBase;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown3 = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown3, P_1);
					P_0 = persistentDropdown3;
				}
				PersistentOptionData[] options = P_0.options;
				List<PersistentOptionData> list = new List<PersistentOptionData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOptionData item = (PersistentOptionData)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentOptionData[] array = new PersistentOptionData[(fieldNumber = ((options != null) ? options.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					options.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.options = array;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown7 = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown7, P_1);
					P_0 = persistentDropdown7;
				}
				long itemText = P_1.ReadInt64();
				P_0.template = itemText;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown4 = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown4, P_1);
					P_0 = persistentDropdown4;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.value = fieldNumber;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentDropdown persistentDropdown = new PersistentDropdown();
					ProtoReader.NoteObject(persistentDropdown, P_1);
					P_0 = persistentDropdown;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentDropdown persistentDropdown10 = new PersistentDropdown();
			ProtoReader.NoteObject(persistentDropdown10, P_1);
			P_0 = persistentDropdown10;
		}
		return P_0;
	}

	private static void Write(PersistentButton P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentButton))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentButton), P_0.GetType());
		}
		PersistentUnityEventBase onClick = P_0.onClick;
		if (onClick != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(onClick, P_1, 813, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
	}

	private static PersistentButton Read(PersistentButton P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentButton persistentButton = new PersistentButton();
					ProtoReader.NoteObject(persistentButton, P_1);
					P_0 = persistentButton;
				}
				PersistentUnityEventBase persistentUnityEventBase = (PersistentUnityEventBase)BclHelpers.ReadNetObject(P_0.onClick, P_1, 813, typeof(PersistentUnityEventBase), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentUnityEventBase != null)
				{
					P_0.onClick = persistentUnityEventBase;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PersistentButton persistentButton2 = new PersistentButton();
					ProtoReader.NoteObject(persistentButton2, P_1);
					P_0 = persistentButton2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentButton persistentButton3 = new PersistentButton();
			ProtoReader.NoteObject(persistentButton3, P_1);
			P_0 = persistentButton3;
		}
		return P_0;
	}

	private static void Write(PersistentScrollRect P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentScrollRect))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentScrollRect), P_0.GetType());
		}
		long content = P_0.content;
		if (content != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(content, P_1);
		}
		float decelerationRate = P_0.decelerationRate;
		if (decelerationRate != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(decelerationRate, P_1);
		}
		float elasticity = P_0.elasticity;
		if (elasticity != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(elasticity, P_1);
		}
		bool horizontal = P_0.horizontal;
		if (horizontal)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(horizontal, P_1);
		}
		float horizontalNormalizedPosition = P_0.horizontalNormalizedPosition;
		if (horizontalNormalizedPosition != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(horizontalNormalizedPosition, P_1);
		}
		long horizontalScrollbar = P_0.horizontalScrollbar;
		if (horizontalScrollbar != 0L)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(horizontalScrollbar, P_1);
		}
		float horizontalScrollbarSpacing = P_0.horizontalScrollbarSpacing;
		if (horizontalScrollbarSpacing != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(horizontalScrollbarSpacing, P_1);
		}
		ScrollRect.ScrollbarVisibility horizontalScrollbarVisibility = P_0.horizontalScrollbarVisibility;
		if (horizontalScrollbarVisibility != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ScrollRect.ScrollbarVisibility scrollbarVisibility = horizontalScrollbarVisibility;
			switch (scrollbarVisibility)
			{
			case ScrollRect.ScrollbarVisibility.Permanent:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ScrollRect.ScrollbarVisibility.AutoHide:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, scrollbarVisibility);
				break;
			}
		}
		bool inertia = P_0.inertia;
		if (inertia)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(inertia, P_1);
		}
		ScrollRect.MovementType movementType = P_0.movementType;
		if (movementType != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ScrollRect.MovementType movementType2 = movementType;
			switch (movementType2)
			{
			case ScrollRect.MovementType.Unrestricted:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ScrollRect.MovementType.Elastic:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case ScrollRect.MovementType.Clamped:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, movementType2);
				break;
			}
		}
		Vector2 normalizedPosition = P_0.normalizedPosition;
		ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(normalizedPosition, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		PersistentUnityEventBase onValueChanged = P_0.onValueChanged;
		if (onValueChanged != null)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
			BclHelpers.WriteNetObject(onValueChanged, P_1, 813, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float scrollSensitivity = P_0.scrollSensitivity;
		if (scrollSensitivity != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(scrollSensitivity, P_1);
		}
		Vector2 velocity = P_0.velocity;
		ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(velocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool vertical = P_0.vertical;
		if (vertical)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(vertical, P_1);
		}
		float verticalNormalizedPosition = P_0.verticalNormalizedPosition;
		if (verticalNormalizedPosition != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(verticalNormalizedPosition, P_1);
		}
		long verticalScrollbar = P_0.verticalScrollbar;
		if (verticalScrollbar != 0L)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(verticalScrollbar, P_1);
		}
		float verticalScrollbarSpacing = P_0.verticalScrollbarSpacing;
		if (verticalScrollbarSpacing != 0f)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(verticalScrollbarSpacing, P_1);
		}
		ScrollRect.ScrollbarVisibility verticalScrollbarVisibility = P_0.verticalScrollbarVisibility;
		if (verticalScrollbarVisibility != 0)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ScrollRect.ScrollbarVisibility scrollbarVisibility = verticalScrollbarVisibility;
			switch (scrollbarVisibility)
			{
			case ScrollRect.ScrollbarVisibility.Permanent:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ScrollRect.ScrollbarVisibility.AutoHide:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, scrollbarVisibility);
				break;
			}
		}
		long viewport = P_0.viewport;
		if (viewport != 0L)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(viewport, P_1);
		}
	}

	private static PersistentScrollRect Read(PersistentScrollRect P_0, ProtoReader P_1)
	{
		int num;
		ScrollRect.ScrollbarVisibility scrollbarVisibility = default(ScrollRect.ScrollbarVisibility);
		ScrollRect.MovementType movementType = default(ScrollRect.MovementType);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect10 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect10, P_1);
					P_0 = persistentScrollRect10;
				}
				long viewport = P_1.ReadInt64();
				P_0.content = viewport;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect18 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect18, P_1);
					P_0 = persistentScrollRect18;
				}
				float horizontalScrollbarSpacing = P_1.ReadSingle();
				P_0.decelerationRate = horizontalScrollbarSpacing;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect12 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect12, P_1);
					P_0 = persistentScrollRect12;
				}
				float horizontalScrollbarSpacing = P_1.ReadSingle();
				P_0.elasticity = horizontalScrollbarSpacing;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect3 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect3, P_1);
					P_0 = persistentScrollRect3;
				}
				bool horizontal = P_1.ReadBoolean();
				P_0.horizontal = horizontal;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect6 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect6, P_1);
					P_0 = persistentScrollRect6;
				}
				float horizontalScrollbarSpacing = P_1.ReadSingle();
				P_0.horizontalNormalizedPosition = horizontalScrollbarSpacing;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect16 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect16, P_1);
					P_0 = persistentScrollRect16;
				}
				long viewport = P_1.ReadInt64();
				P_0.horizontalScrollbar = viewport;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect5 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect5, P_1);
					P_0 = persistentScrollRect5;
				}
				float horizontalScrollbarSpacing = P_1.ReadSingle();
				P_0.horizontalScrollbarSpacing = horizontalScrollbarSpacing;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect15 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect15, P_1);
					P_0 = persistentScrollRect15;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					scrollbarVisibility = ScrollRect.ScrollbarVisibility.Permanent;
					break;
				case 1:
					scrollbarVisibility = ScrollRect.ScrollbarVisibility.AutoHide;
					break;
				case 2:
					scrollbarVisibility = ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport;
					break;
				default:
					P_1.ThrowEnumException(typeof(ScrollRect.ScrollbarVisibility), num2);
					break;
				}
				scrollbarVisibility = (P_0.horizontalScrollbarVisibility = scrollbarVisibility);
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect8 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect8, P_1);
					P_0 = persistentScrollRect8;
				}
				bool horizontal = P_1.ReadBoolean();
				P_0.inertia = horizontal;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect21 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect21, P_1);
					P_0 = persistentScrollRect21;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					movementType = ScrollRect.MovementType.Unrestricted;
					break;
				case 1:
					movementType = ScrollRect.MovementType.Elastic;
					break;
				case 2:
					movementType = ScrollRect.MovementType.Clamped;
					break;
				default:
					P_1.ThrowEnumException(typeof(ScrollRect.MovementType), num2);
					break;
				}
				movementType = (P_0.movementType = movementType);
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect19 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect19, P_1);
					P_0 = persistentScrollRect19;
				}
				Vector2 normalizedPosition = P_0.normalizedPosition;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(normalizedPosition, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 velocity2 = vector2;
				P_0.normalizedPosition = velocity2;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect13 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect13, P_1);
					P_0 = persistentScrollRect13;
				}
				PersistentUnityEventBase persistentUnityEventBase = (PersistentUnityEventBase)BclHelpers.ReadNetObject(P_0.onValueChanged, P_1, 813, typeof(PersistentUnityEventBase), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentUnityEventBase != null)
				{
					P_0.onValueChanged = persistentUnityEventBase;
				}
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect9 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect9, P_1);
					P_0 = persistentScrollRect9;
				}
				float horizontalScrollbarSpacing = P_1.ReadSingle();
				P_0.scrollSensitivity = horizontalScrollbarSpacing;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect2 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect2, P_1);
					P_0 = persistentScrollRect2;
				}
				Vector2 velocity = P_0.velocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(velocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 velocity2 = vector;
				P_0.velocity = velocity2;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect20 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect20, P_1);
					P_0 = persistentScrollRect20;
				}
				bool horizontal = P_1.ReadBoolean();
				P_0.vertical = horizontal;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect17 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect17, P_1);
					P_0 = persistentScrollRect17;
				}
				float horizontalScrollbarSpacing = P_1.ReadSingle();
				P_0.verticalNormalizedPosition = horizontalScrollbarSpacing;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect14 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect14, P_1);
					P_0 = persistentScrollRect14;
				}
				long viewport = P_1.ReadInt64();
				P_0.verticalScrollbar = viewport;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect11 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect11, P_1);
					P_0 = persistentScrollRect11;
				}
				float horizontalScrollbarSpacing = P_1.ReadSingle();
				P_0.verticalScrollbarSpacing = horizontalScrollbarSpacing;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect7 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect7, P_1);
					P_0 = persistentScrollRect7;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					scrollbarVisibility = ScrollRect.ScrollbarVisibility.Permanent;
					break;
				case 1:
					scrollbarVisibility = ScrollRect.ScrollbarVisibility.AutoHide;
					break;
				case 2:
					scrollbarVisibility = ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport;
					break;
				default:
					P_1.ThrowEnumException(typeof(ScrollRect.ScrollbarVisibility), num2);
					break;
				}
				scrollbarVisibility = (P_0.verticalScrollbarVisibility = scrollbarVisibility);
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect4 = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect4, P_1);
					P_0 = persistentScrollRect4;
				}
				long viewport = P_1.ReadInt64();
				P_0.viewport = viewport;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentScrollRect persistentScrollRect = new PersistentScrollRect();
					ProtoReader.NoteObject(persistentScrollRect, P_1);
					P_0 = persistentScrollRect;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentScrollRect persistentScrollRect22 = new PersistentScrollRect();
			ProtoReader.NoteObject(persistentScrollRect22, P_1);
			P_0 = persistentScrollRect22;
		}
		return P_0;
	}

	private static void Write(PersistentRectMask2D P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRectMask2D))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRectMask2D), P_0.GetType());
		}
	}

	private static PersistentRectMask2D Read(PersistentRectMask2D P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentRectMask2D persistentRectMask2D = new PersistentRectMask2D();
				ProtoReader.NoteObject(persistentRectMask2D, P_1);
				P_0 = persistentRectMask2D;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentRectMask2D persistentRectMask2D2 = new PersistentRectMask2D();
			ProtoReader.NoteObject(persistentRectMask2D2, P_1);
			P_0 = persistentRectMask2D2;
		}
		return P_0;
	}

	private static void Write(PersistentMask P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMask))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMask), P_0.GetType());
		}
		bool showMaskGraphic = P_0.showMaskGraphic;
		if (showMaskGraphic)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(showMaskGraphic, P_1);
		}
	}

	private static PersistentMask Read(PersistentMask P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentMask persistentMask = new PersistentMask();
					ProtoReader.NoteObject(persistentMask, P_1);
					P_0 = persistentMask;
				}
				bool showMaskGraphic = P_1.ReadBoolean();
				P_0.showMaskGraphic = showMaskGraphic;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentMask persistentMask2 = new PersistentMask();
					ProtoReader.NoteObject(persistentMask2, P_1);
					P_0 = persistentMask2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentMask persistentMask3 = new PersistentMask();
			ProtoReader.NoteObject(persistentMask3, P_1);
			P_0 = persistentMask3;
		}
		return P_0;
	}

	private static void Write(PersistentGraphic P_0, ProtoWriter P_1)
	{
		PersistentMaskableGraphic obj = P_0 as PersistentMaskableGraphic;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1129, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentGraphic))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGraphic), P_0.GetType());
		}
		Color color = P_0.color;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long material = P_0.material;
		if (material != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(material, P_1);
		}
		bool raycastTarget = P_0.raycastTarget;
		if (raycastTarget)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(raycastTarget, P_1);
		}
	}

	private static PersistentGraphic Read(PersistentGraphic P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentGraphic persistentGraphic4 = new PersistentGraphic();
					ProtoReader.NoteObject(persistentGraphic4, P_1);
					P_0 = persistentGraphic4;
				}
				Color color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				P_0.color = color3;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentGraphic persistentGraphic3 = new PersistentGraphic();
					ProtoReader.NoteObject(persistentGraphic3, P_1);
					P_0 = persistentGraphic3;
				}
				long material = P_1.ReadInt64();
				P_0.material = material;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentGraphic persistentGraphic2 = new PersistentGraphic();
					ProtoReader.NoteObject(persistentGraphic2, P_1);
					P_0 = persistentGraphic2;
				}
				bool raycastTarget = P_1.ReadBoolean();
				P_0.raycastTarget = raycastTarget;
				break;
			}
			case 1129:
			{
				if (P_0 != null && !(P_0 is PersistentMaskableGraphic))
				{
					PersistentGraphic from = P_0;
					PersistentMaskableGraphic persistentMaskableGraphic = new PersistentMaskableGraphic();
					ProtoReader.NoteObject(persistentMaskableGraphic, P_1);
					P_0 = (PersistentGraphic)ProtoReader.Merge(P_1, from, persistentMaskableGraphic);
				}
				PersistentMaskableGraphic obj = (PersistentMaskableGraphic)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentMaskableGraphic persistentMaskableGraphic2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentMaskableGraphic2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentGraphic persistentGraphic = new PersistentGraphic();
					ProtoReader.NoteObject(persistentGraphic, P_1);
					P_0 = persistentGraphic;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentGraphic persistentGraphic5 = new PersistentGraphic();
			ProtoReader.NoteObject(persistentGraphic5, P_1);
			P_0 = persistentGraphic5;
		}
		return P_0;
	}

	private static void Write(PersistentMaskableGraphic P_0, ProtoWriter P_1)
	{
		PersistentImage obj = P_0 as PersistentImage;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1131, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else
		{
			PersistentRawImage obj2 = P_0 as PersistentRawImage;
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(1132, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
			else
			{
				PersistentText obj3 = P_0 as PersistentText;
				if (obj3 != null)
				{
					ProtoWriter.WriteFieldHeader(1133, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
					Write(obj3, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
				else if (P_0.GetType() != typeof(PersistentMaskableGraphic))
				{
					TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMaskableGraphic), P_0.GetType());
				}
			}
		}
		bool maskable = P_0.maskable;
		if (maskable)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(maskable, P_1);
		}
		PersistentUnityEventBase onCullStateChanged = P_0.onCullStateChanged;
		if (onCullStateChanged != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			BclHelpers.WriteNetObject(onCullStateChanged, P_1, 813, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
	}

	private static PersistentMaskableGraphic Read(PersistentMaskableGraphic P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentMaskableGraphic persistentMaskableGraphic3 = new PersistentMaskableGraphic();
					ProtoReader.NoteObject(persistentMaskableGraphic3, P_1);
					P_0 = persistentMaskableGraphic3;
				}
				bool maskable = P_1.ReadBoolean();
				P_0.maskable = maskable;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentMaskableGraphic persistentMaskableGraphic2 = new PersistentMaskableGraphic();
					ProtoReader.NoteObject(persistentMaskableGraphic2, P_1);
					P_0 = persistentMaskableGraphic2;
				}
				PersistentUnityEventBase persistentUnityEventBase = (PersistentUnityEventBase)BclHelpers.ReadNetObject(P_0.onCullStateChanged, P_1, 813, typeof(PersistentUnityEventBase), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentUnityEventBase != null)
				{
					P_0.onCullStateChanged = persistentUnityEventBase;
				}
				break;
			}
			case 1131:
			{
				if (P_0 != null && !(P_0 is PersistentImage))
				{
					PersistentMaskableGraphic from3 = P_0;
					PersistentImage persistentImage = new PersistentImage();
					ProtoReader.NoteObject(persistentImage, P_1);
					P_0 = (PersistentMaskableGraphic)ProtoReader.Merge(P_1, from3, persistentImage);
				}
				PersistentImage obj3 = (PersistentImage)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentImage persistentImage2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentImage2;
				break;
			}
			case 1132:
			{
				if (P_0 != null && !(P_0 is PersistentRawImage))
				{
					PersistentMaskableGraphic from = P_0;
					PersistentRawImage persistentRawImage = new PersistentRawImage();
					ProtoReader.NoteObject(persistentRawImage, P_1);
					P_0 = (PersistentMaskableGraphic)ProtoReader.Merge(P_1, from, persistentRawImage);
				}
				PersistentRawImage obj = (PersistentRawImage)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRawImage persistentRawImage2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRawImage2;
				break;
			}
			case 1133:
			{
				if (P_0 != null && !(P_0 is PersistentText))
				{
					PersistentMaskableGraphic from2 = P_0;
					PersistentText persistentText = new PersistentText();
					ProtoReader.NoteObject(persistentText, P_1);
					P_0 = (PersistentMaskableGraphic)ProtoReader.Merge(P_1, from2, persistentText);
				}
				PersistentText obj2 = (PersistentText)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentText persistentText2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentText2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentMaskableGraphic persistentMaskableGraphic = new PersistentMaskableGraphic();
					ProtoReader.NoteObject(persistentMaskableGraphic, P_1);
					P_0 = persistentMaskableGraphic;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentMaskableGraphic persistentMaskableGraphic4 = new PersistentMaskableGraphic();
			ProtoReader.NoteObject(persistentMaskableGraphic4, P_1);
			P_0 = persistentMaskableGraphic4;
		}
		return P_0;
	}

	private static void Write(PersistentText P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentText))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentText), P_0.GetType());
		}
		bool alignByGeometry = P_0.alignByGeometry;
		if (alignByGeometry)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(alignByGeometry, P_1);
		}
		uint alignment = P_0.alignment;
		if (alignment != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(alignment, P_1);
		}
		long font = P_0.font;
		if (font != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(font, P_1);
		}
		int fontSize = P_0.fontSize;
		if (fontSize != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(fontSize, P_1);
		}
		uint fontStyle = P_0.fontStyle;
		if (fontStyle != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(fontStyle, P_1);
		}
		uint horizontalOverflow = P_0.horizontalOverflow;
		if (horizontalOverflow != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(horizontalOverflow, P_1);
		}
		float lineSpacing = P_0.lineSpacing;
		if (lineSpacing != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(lineSpacing, P_1);
		}
		bool resizeTextForBestFit = P_0.resizeTextForBestFit;
		if (resizeTextForBestFit)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(resizeTextForBestFit, P_1);
		}
		int resizeTextMaxSize = P_0.resizeTextMaxSize;
		if (resizeTextMaxSize != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(resizeTextMaxSize, P_1);
		}
		int resizeTextMinSize = P_0.resizeTextMinSize;
		if (resizeTextMinSize != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(resizeTextMinSize, P_1);
		}
		bool supportRichText = P_0.supportRichText;
		if (supportRichText)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(supportRichText, P_1);
		}
		string text = P_0.text;
		if (text != null)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
			ProtoWriter.WriteString(text, P_1);
		}
		uint verticalOverflow = P_0.verticalOverflow;
		if (verticalOverflow != 0)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(verticalOverflow, P_1);
		}
	}

	private static PersistentText Read(PersistentText P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentText persistentText2 = new PersistentText();
					ProtoReader.NoteObject(persistentText2, P_1);
					P_0 = persistentText2;
				}
				bool alignByGeometry = P_1.ReadBoolean();
				P_0.alignByGeometry = alignByGeometry;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentText persistentText5 = new PersistentText();
					ProtoReader.NoteObject(persistentText5, P_1);
					P_0 = persistentText5;
				}
				uint verticalOverflow = P_1.ReadUInt32();
				P_0.alignment = verticalOverflow;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentText persistentText3 = new PersistentText();
					ProtoReader.NoteObject(persistentText3, P_1);
					P_0 = persistentText3;
				}
				long font = P_1.ReadInt64();
				P_0.font = font;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentText persistentText13 = new PersistentText();
					ProtoReader.NoteObject(persistentText13, P_1);
					P_0 = persistentText13;
				}
				int resizeTextMaxSize = P_1.ReadInt32();
				P_0.fontSize = resizeTextMaxSize;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentText persistentText10 = new PersistentText();
					ProtoReader.NoteObject(persistentText10, P_1);
					P_0 = persistentText10;
				}
				uint verticalOverflow = P_1.ReadUInt32();
				P_0.fontStyle = verticalOverflow;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentText persistentText9 = new PersistentText();
					ProtoReader.NoteObject(persistentText9, P_1);
					P_0 = persistentText9;
				}
				uint verticalOverflow = P_1.ReadUInt32();
				P_0.horizontalOverflow = verticalOverflow;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentText persistentText12 = new PersistentText();
					ProtoReader.NoteObject(persistentText12, P_1);
					P_0 = persistentText12;
				}
				float lineSpacing = P_1.ReadSingle();
				P_0.lineSpacing = lineSpacing;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentText persistentText8 = new PersistentText();
					ProtoReader.NoteObject(persistentText8, P_1);
					P_0 = persistentText8;
				}
				bool alignByGeometry = P_1.ReadBoolean();
				P_0.resizeTextForBestFit = alignByGeometry;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentText persistentText6 = new PersistentText();
					ProtoReader.NoteObject(persistentText6, P_1);
					P_0 = persistentText6;
				}
				int resizeTextMaxSize = P_1.ReadInt32();
				P_0.resizeTextMaxSize = resizeTextMaxSize;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentText persistentText14 = new PersistentText();
					ProtoReader.NoteObject(persistentText14, P_1);
					P_0 = persistentText14;
				}
				int resizeTextMaxSize = P_1.ReadInt32();
				P_0.resizeTextMinSize = resizeTextMaxSize;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentText persistentText11 = new PersistentText();
					ProtoReader.NoteObject(persistentText11, P_1);
					P_0 = persistentText11;
				}
				bool alignByGeometry = P_1.ReadBoolean();
				P_0.supportRichText = alignByGeometry;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentText persistentText7 = new PersistentText();
					ProtoReader.NoteObject(persistentText7, P_1);
					P_0 = persistentText7;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.text = text;
				}
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentText persistentText4 = new PersistentText();
					ProtoReader.NoteObject(persistentText4, P_1);
					P_0 = persistentText4;
				}
				uint verticalOverflow = P_1.ReadUInt32();
				P_0.verticalOverflow = verticalOverflow;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentText persistentText = new PersistentText();
					ProtoReader.NoteObject(persistentText, P_1);
					P_0 = persistentText;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentText persistentText15 = new PersistentText();
			ProtoReader.NoteObject(persistentText15, P_1);
			P_0 = persistentText15;
		}
		return P_0;
	}

	private static void Write(PersistentRawImage P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRawImage))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRawImage), P_0.GetType());
		}
		long texture = P_0.texture;
		if (texture != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(texture, P_1);
		}
		Rect uvRect = P_0.uvRect;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvRect, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentRawImage Read(PersistentRawImage P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRawImage persistentRawImage2 = new PersistentRawImage();
					ProtoReader.NoteObject(persistentRawImage2, P_1);
					P_0 = persistentRawImage2;
				}
				long texture = P_1.ReadInt64();
				P_0.texture = texture;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRawImage persistentRawImage3 = new PersistentRawImage();
					ProtoReader.NoteObject(persistentRawImage3, P_1);
					P_0 = persistentRawImage3;
				}
				Rect uvRect = P_0.uvRect;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Rect rect = Read(uvRect, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Rect uvRect2 = rect;
				P_0.uvRect = uvRect2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRawImage persistentRawImage = new PersistentRawImage();
					ProtoReader.NoteObject(persistentRawImage, P_1);
					P_0 = persistentRawImage;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRawImage persistentRawImage4 = new PersistentRawImage();
			ProtoReader.NoteObject(persistentRawImage4, P_1);
			P_0 = persistentRawImage4;
		}
		return P_0;
	}

	private static void Write(PersistentImage P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentImage))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentImage), P_0.GetType());
		}
		float alphaHitTestMinimumThreshold = P_0.alphaHitTestMinimumThreshold;
		if (alphaHitTestMinimumThreshold != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(alphaHitTestMinimumThreshold, P_1);
		}
		float fillAmount = P_0.fillAmount;
		if (fillAmount != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fillAmount, P_1);
		}
		bool fillCenter = P_0.fillCenter;
		if (fillCenter)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(fillCenter, P_1);
		}
		bool fillClockwise = P_0.fillClockwise;
		if (fillClockwise)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(fillClockwise, P_1);
		}
		uint fillMethod = P_0.fillMethod;
		if (fillMethod != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(fillMethod, P_1);
		}
		int fillOrigin = P_0.fillOrigin;
		if (fillOrigin != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(fillOrigin, P_1);
		}
		long overrideSprite = P_0.overrideSprite;
		if (overrideSprite != 0L)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(overrideSprite, P_1);
		}
		bool preserveAspect = P_0.preserveAspect;
		if (preserveAspect)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(preserveAspect, P_1);
		}
		long sprite = P_0.sprite;
		if (sprite != 0L)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(sprite, P_1);
		}
		uint type = P_0.type;
		if (type != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(type, P_1);
		}
	}

	private static PersistentImage Read(PersistentImage P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage6 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage6, P_1);
					P_0 = persistentImage6;
				}
				float alphaHitTestMinimumThreshold = P_1.ReadSingle();
				P_0.alphaHitTestMinimumThreshold = alphaHitTestMinimumThreshold;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage8 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage8, P_1);
					P_0 = persistentImage8;
				}
				float alphaHitTestMinimumThreshold = P_1.ReadSingle();
				P_0.fillAmount = alphaHitTestMinimumThreshold;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage5 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage5, P_1);
					P_0 = persistentImage5;
				}
				bool fillClockwise = P_1.ReadBoolean();
				P_0.fillCenter = fillClockwise;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage3 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage3, P_1);
					P_0 = persistentImage3;
				}
				bool fillClockwise = P_1.ReadBoolean();
				P_0.fillClockwise = fillClockwise;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage11 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage11, P_1);
					P_0 = persistentImage11;
				}
				uint type = P_1.ReadUInt32();
				P_0.fillMethod = type;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage9 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage9, P_1);
					P_0 = persistentImage9;
				}
				int fillOrigin = P_1.ReadInt32();
				P_0.fillOrigin = fillOrigin;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage2 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage2, P_1);
					P_0 = persistentImage2;
				}
				long overrideSprite = P_1.ReadInt64();
				P_0.overrideSprite = overrideSprite;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage10 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage10, P_1);
					P_0 = persistentImage10;
				}
				bool fillClockwise = P_1.ReadBoolean();
				P_0.preserveAspect = fillClockwise;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage7 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage7, P_1);
					P_0 = persistentImage7;
				}
				long overrideSprite = P_1.ReadInt64();
				P_0.sprite = overrideSprite;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentImage persistentImage4 = new PersistentImage();
					ProtoReader.NoteObject(persistentImage4, P_1);
					P_0 = persistentImage4;
				}
				uint type = P_1.ReadUInt32();
				P_0.type = type;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentImage persistentImage = new PersistentImage();
					ProtoReader.NoteObject(persistentImage, P_1);
					P_0 = persistentImage;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentImage persistentImage12 = new PersistentImage();
			ProtoReader.NoteObject(persistentImage12, P_1);
			P_0 = persistentImage12;
		}
		return P_0;
	}

	private static void Write(PersistentBaseRaycaster P_0, ProtoWriter P_1)
	{
		PersistentPhysicsRaycaster obj = P_0 as PersistentPhysicsRaycaster;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1126, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentGraphicRaycaster obj2 = P_0 as PersistentGraphicRaycaster;
		if (obj2 != null)
		{
			ProtoWriter.WriteFieldHeader(1127, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj2, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentBaseRaycaster))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBaseRaycaster), P_0.GetType());
		}
	}

	private static PersistentBaseRaycaster Read(PersistentBaseRaycaster P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1126:
			{
				if (P_0 != null && !(P_0 is PersistentPhysicsRaycaster))
				{
					PersistentBaseRaycaster from = P_0;
					PersistentPhysicsRaycaster persistentPhysicsRaycaster = new PersistentPhysicsRaycaster();
					ProtoReader.NoteObject(persistentPhysicsRaycaster, P_1);
					P_0 = (PersistentBaseRaycaster)ProtoReader.Merge(P_1, from, persistentPhysicsRaycaster);
				}
				PersistentPhysicsRaycaster obj = (PersistentPhysicsRaycaster)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPhysicsRaycaster persistentPhysicsRaycaster2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPhysicsRaycaster2;
				break;
			}
			case 1127:
			{
				if (P_0 != null && !(P_0 is PersistentGraphicRaycaster))
				{
					PersistentBaseRaycaster from2 = P_0;
					PersistentGraphicRaycaster persistentGraphicRaycaster = new PersistentGraphicRaycaster();
					ProtoReader.NoteObject(persistentGraphicRaycaster, P_1);
					P_0 = (PersistentBaseRaycaster)ProtoReader.Merge(P_1, from2, persistentGraphicRaycaster);
				}
				PersistentGraphicRaycaster obj2 = (PersistentGraphicRaycaster)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGraphicRaycaster persistentGraphicRaycaster2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGraphicRaycaster2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBaseRaycaster persistentBaseRaycaster = new PersistentBaseRaycaster();
					ProtoReader.NoteObject(persistentBaseRaycaster, P_1);
					P_0 = persistentBaseRaycaster;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBaseRaycaster persistentBaseRaycaster2 = new PersistentBaseRaycaster();
			ProtoReader.NoteObject(persistentBaseRaycaster2, P_1);
			P_0 = persistentBaseRaycaster2;
		}
		return P_0;
	}

	private static void Write(PersistentGraphicRaycaster P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGraphicRaycaster))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGraphicRaycaster), P_0.GetType());
		}
		uint blockingObjects = P_0.blockingObjects;
		if (blockingObjects != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(blockingObjects, P_1);
		}
		bool ignoreReversedGraphics = P_0.ignoreReversedGraphics;
		if (ignoreReversedGraphics)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(ignoreReversedGraphics, P_1);
		}
	}

	private static PersistentGraphicRaycaster Read(PersistentGraphicRaycaster P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentGraphicRaycaster persistentGraphicRaycaster2 = new PersistentGraphicRaycaster();
					ProtoReader.NoteObject(persistentGraphicRaycaster2, P_1);
					P_0 = persistentGraphicRaycaster2;
				}
				uint blockingObjects = P_1.ReadUInt32();
				P_0.blockingObjects = blockingObjects;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentGraphicRaycaster persistentGraphicRaycaster3 = new PersistentGraphicRaycaster();
					ProtoReader.NoteObject(persistentGraphicRaycaster3, P_1);
					P_0 = persistentGraphicRaycaster3;
				}
				bool ignoreReversedGraphics = P_1.ReadBoolean();
				P_0.ignoreReversedGraphics = ignoreReversedGraphics;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentGraphicRaycaster persistentGraphicRaycaster = new PersistentGraphicRaycaster();
					ProtoReader.NoteObject(persistentGraphicRaycaster, P_1);
					P_0 = persistentGraphicRaycaster;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentGraphicRaycaster persistentGraphicRaycaster4 = new PersistentGraphicRaycaster();
			ProtoReader.NoteObject(persistentGraphicRaycaster4, P_1);
			P_0 = persistentGraphicRaycaster4;
		}
		return P_0;
	}

	private static void Write(PersistentPhysicsRaycaster P_0, ProtoWriter P_1)
	{
		PersistentPhysics2DRaycaster obj = P_0 as PersistentPhysics2DRaycaster;
		SubItemToken token;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1128, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentPhysicsRaycaster))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPhysicsRaycaster), P_0.GetType());
		}
		LayerMask eventMask = P_0.eventMask;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(eventMask, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentPhysicsRaycaster Read(PersistentPhysicsRaycaster P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentPhysicsRaycaster persistentPhysicsRaycaster2 = new PersistentPhysicsRaycaster();
					ProtoReader.NoteObject(persistentPhysicsRaycaster2, P_1);
					P_0 = persistentPhysicsRaycaster2;
				}
				LayerMask eventMask = P_0.eventMask;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				LayerMask layerMask = Read(eventMask, P_1);
				ProtoReader.EndSubItem(token, P_1);
				LayerMask eventMask2 = layerMask;
				P_0.eventMask = eventMask2;
				break;
			}
			case 1128:
			{
				if (P_0 != null && !(P_0 is PersistentPhysics2DRaycaster))
				{
					PersistentPhysicsRaycaster from = P_0;
					PersistentPhysics2DRaycaster persistentPhysics2DRaycaster = new PersistentPhysics2DRaycaster();
					ProtoReader.NoteObject(persistentPhysics2DRaycaster, P_1);
					P_0 = (PersistentPhysicsRaycaster)ProtoReader.Merge(P_1, from, persistentPhysics2DRaycaster);
				}
				PersistentPhysics2DRaycaster obj = (PersistentPhysics2DRaycaster)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPhysics2DRaycaster persistentPhysics2DRaycaster2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPhysics2DRaycaster2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentPhysicsRaycaster persistentPhysicsRaycaster = new PersistentPhysicsRaycaster();
					ProtoReader.NoteObject(persistentPhysicsRaycaster, P_1);
					P_0 = persistentPhysicsRaycaster;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentPhysicsRaycaster persistentPhysicsRaycaster3 = new PersistentPhysicsRaycaster();
			ProtoReader.NoteObject(persistentPhysicsRaycaster3, P_1);
			P_0 = persistentPhysicsRaycaster3;
		}
		return P_0;
	}

	private static void Write(PersistentPhysics2DRaycaster P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPhysics2DRaycaster))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPhysics2DRaycaster), P_0.GetType());
		}
	}

	private static PersistentPhysics2DRaycaster Read(PersistentPhysics2DRaycaster P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentPhysics2DRaycaster persistentPhysics2DRaycaster = new PersistentPhysics2DRaycaster();
				ProtoReader.NoteObject(persistentPhysics2DRaycaster, P_1);
				P_0 = persistentPhysics2DRaycaster;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentPhysics2DRaycaster persistentPhysics2DRaycaster2 = new PersistentPhysics2DRaycaster();
			ProtoReader.NoteObject(persistentPhysics2DRaycaster2, P_1);
			P_0 = persistentPhysics2DRaycaster2;
		}
		return P_0;
	}

	private static void Write(PersistentBaseInputModule P_0, ProtoWriter P_1)
	{
		PersistentPointerInputModule obj = P_0 as PersistentPointerInputModule;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1124, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentBaseInputModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBaseInputModule), P_0.GetType());
		}
	}

	private static PersistentBaseInputModule Read(PersistentBaseInputModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1124)
			{
				if (P_0 != null && !(P_0 is PersistentPointerInputModule))
				{
					PersistentBaseInputModule from = P_0;
					PersistentPointerInputModule persistentPointerInputModule = new PersistentPointerInputModule();
					ProtoReader.NoteObject(persistentPointerInputModule, P_1);
					P_0 = (PersistentBaseInputModule)ProtoReader.Merge(P_1, from, persistentPointerInputModule);
				}
				PersistentPointerInputModule obj = (PersistentPointerInputModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPointerInputModule persistentPointerInputModule2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPointerInputModule2;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentBaseInputModule persistentBaseInputModule = new PersistentBaseInputModule();
					ProtoReader.NoteObject(persistentBaseInputModule, P_1);
					P_0 = persistentBaseInputModule;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentBaseInputModule persistentBaseInputModule2 = new PersistentBaseInputModule();
			ProtoReader.NoteObject(persistentBaseInputModule2, P_1);
			P_0 = persistentBaseInputModule2;
		}
		return P_0;
	}

	private static void Write(PersistentPointerInputModule P_0, ProtoWriter P_1)
	{
		PersistentStandaloneInputModule obj = P_0 as PersistentStandaloneInputModule;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1125, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentPointerInputModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPointerInputModule), P_0.GetType());
		}
	}

	private static PersistentPointerInputModule Read(PersistentPointerInputModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1125)
			{
				if (P_0 != null && !(P_0 is PersistentStandaloneInputModule))
				{
					PersistentPointerInputModule from = P_0;
					PersistentStandaloneInputModule persistentStandaloneInputModule = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule, P_1);
					P_0 = (PersistentPointerInputModule)ProtoReader.Merge(P_1, from, persistentStandaloneInputModule);
				}
				PersistentStandaloneInputModule obj = (PersistentStandaloneInputModule)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentStandaloneInputModule persistentStandaloneInputModule2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentStandaloneInputModule2;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentPointerInputModule persistentPointerInputModule = new PersistentPointerInputModule();
					ProtoReader.NoteObject(persistentPointerInputModule, P_1);
					P_0 = persistentPointerInputModule;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentPointerInputModule persistentPointerInputModule2 = new PersistentPointerInputModule();
			ProtoReader.NoteObject(persistentPointerInputModule2, P_1);
			P_0 = persistentPointerInputModule2;
		}
		return P_0;
	}

	private static void Write(PersistentStandaloneInputModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentStandaloneInputModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentStandaloneInputModule), P_0.GetType());
		}
		string cancelButton = P_0.cancelButton;
		if (cancelButton != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(cancelButton, P_1);
		}
		bool forceModuleActive = P_0.forceModuleActive;
		if (forceModuleActive)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(forceModuleActive, P_1);
		}
		string horizontalAxis = P_0.horizontalAxis;
		if (horizontalAxis != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			ProtoWriter.WriteString(horizontalAxis, P_1);
		}
		float inputActionsPerSecond = P_0.inputActionsPerSecond;
		if (inputActionsPerSecond != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(inputActionsPerSecond, P_1);
		}
		float repeatDelay = P_0.repeatDelay;
		if (repeatDelay != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(repeatDelay, P_1);
		}
		string submitButton = P_0.submitButton;
		if (submitButton != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			ProtoWriter.WriteString(submitButton, P_1);
		}
		string verticalAxis = P_0.verticalAxis;
		if (verticalAxis != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			ProtoWriter.WriteString(verticalAxis, P_1);
		}
	}

	private static PersistentStandaloneInputModule Read(PersistentStandaloneInputModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentStandaloneInputModule persistentStandaloneInputModule6 = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule6, P_1);
					P_0 = persistentStandaloneInputModule6;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.cancelButton = text;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentStandaloneInputModule persistentStandaloneInputModule2 = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule2, P_1);
					P_0 = persistentStandaloneInputModule2;
				}
				bool forceModuleActive = P_1.ReadBoolean();
				P_0.forceModuleActive = forceModuleActive;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentStandaloneInputModule persistentStandaloneInputModule7 = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule7, P_1);
					P_0 = persistentStandaloneInputModule7;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.horizontalAxis = text;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentStandaloneInputModule persistentStandaloneInputModule3 = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule3, P_1);
					P_0 = persistentStandaloneInputModule3;
				}
				float inputActionsPerSecond = P_1.ReadSingle();
				P_0.inputActionsPerSecond = inputActionsPerSecond;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentStandaloneInputModule persistentStandaloneInputModule5 = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule5, P_1);
					P_0 = persistentStandaloneInputModule5;
				}
				float inputActionsPerSecond = P_1.ReadSingle();
				P_0.repeatDelay = inputActionsPerSecond;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentStandaloneInputModule persistentStandaloneInputModule8 = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule8, P_1);
					P_0 = persistentStandaloneInputModule8;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.submitButton = text;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentStandaloneInputModule persistentStandaloneInputModule4 = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule4, P_1);
					P_0 = persistentStandaloneInputModule4;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.verticalAxis = text;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentStandaloneInputModule persistentStandaloneInputModule = new PersistentStandaloneInputModule();
					ProtoReader.NoteObject(persistentStandaloneInputModule, P_1);
					P_0 = persistentStandaloneInputModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentStandaloneInputModule persistentStandaloneInputModule9 = new PersistentStandaloneInputModule();
			ProtoReader.NoteObject(persistentStandaloneInputModule9, P_1);
			P_0 = persistentStandaloneInputModule9;
		}
		return P_0;
	}

	private static void Write(PersistentBaseInput P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentBaseInput))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBaseInput), P_0.GetType());
		}
		Vector2 compositionCursorPos = P_0.compositionCursorPos;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(compositionCursorPos, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint imeCompositionMode = P_0.imeCompositionMode;
		if (imeCompositionMode != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(imeCompositionMode, P_1);
		}
	}

	private static PersistentBaseInput Read(PersistentBaseInput P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentBaseInput persistentBaseInput2 = new PersistentBaseInput();
					ProtoReader.NoteObject(persistentBaseInput2, P_1);
					P_0 = persistentBaseInput2;
				}
				Vector2 compositionCursorPos = P_0.compositionCursorPos;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(compositionCursorPos, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 compositionCursorPos2 = vector;
				P_0.compositionCursorPos = compositionCursorPos2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentBaseInput persistentBaseInput3 = new PersistentBaseInput();
					ProtoReader.NoteObject(persistentBaseInput3, P_1);
					P_0 = persistentBaseInput3;
				}
				uint imeCompositionMode = P_1.ReadUInt32();
				P_0.imeCompositionMode = imeCompositionMode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBaseInput persistentBaseInput = new PersistentBaseInput();
					ProtoReader.NoteObject(persistentBaseInput, P_1);
					P_0 = persistentBaseInput;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBaseInput persistentBaseInput4 = new PersistentBaseInput();
			ProtoReader.NoteObject(persistentBaseInput4, P_1);
			P_0 = persistentBaseInput4;
		}
		return P_0;
	}

	private static void Write(PersistentEventSystem P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentEventSystem))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentEventSystem), P_0.GetType());
		}
		long firstSelectedGameObject = P_0.firstSelectedGameObject;
		if (firstSelectedGameObject != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(firstSelectedGameObject, P_1);
		}
		int pixelDragThreshold = P_0.pixelDragThreshold;
		if (pixelDragThreshold != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(pixelDragThreshold, P_1);
		}
		bool sendNavigationEvents = P_0.sendNavigationEvents;
		if (sendNavigationEvents)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(sendNavigationEvents, P_1);
		}
	}

	private static PersistentEventSystem Read(PersistentEventSystem P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentEventSystem persistentEventSystem3 = new PersistentEventSystem();
					ProtoReader.NoteObject(persistentEventSystem3, P_1);
					P_0 = persistentEventSystem3;
				}
				long firstSelectedGameObject = P_1.ReadInt64();
				P_0.firstSelectedGameObject = firstSelectedGameObject;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentEventSystem persistentEventSystem2 = new PersistentEventSystem();
					ProtoReader.NoteObject(persistentEventSystem2, P_1);
					P_0 = persistentEventSystem2;
				}
				int pixelDragThreshold = P_1.ReadInt32();
				P_0.pixelDragThreshold = pixelDragThreshold;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentEventSystem persistentEventSystem4 = new PersistentEventSystem();
					ProtoReader.NoteObject(persistentEventSystem4, P_1);
					P_0 = persistentEventSystem4;
				}
				bool sendNavigationEvents = P_1.ReadBoolean();
				P_0.sendNavigationEvents = sendNavigationEvents;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentEventSystem persistentEventSystem = new PersistentEventSystem();
					ProtoReader.NoteObject(persistentEventSystem, P_1);
					P_0 = persistentEventSystem;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentEventSystem persistentEventSystem5 = new PersistentEventSystem();
			ProtoReader.NoteObject(persistentEventSystem5, P_1);
			P_0 = persistentEventSystem5;
		}
		return P_0;
	}

	private static void Write(PersistentEventTrigger P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentEventTrigger))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentEventTrigger), P_0.GetType());
		}
	}

	private static PersistentEventTrigger Read(PersistentEventTrigger P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentEventTrigger persistentEventTrigger = new PersistentEventTrigger();
				ProtoReader.NoteObject(persistentEventTrigger, P_1);
				P_0 = persistentEventTrigger;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentEventTrigger persistentEventTrigger2 = new PersistentEventTrigger();
			ProtoReader.NoteObject(persistentEventTrigger2, P_1);
			P_0 = persistentEventTrigger2;
		}
		return P_0;
	}

	private static void Write(PersistentNetworkMatch P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentNetworkMatch))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentNetworkMatch), P_0.GetType());
		}
		Uri baseUri = P_0.baseUri;
		if ((object)baseUri != null)
		{
			string absoluteUri = baseUri.AbsoluteUri;
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(absoluteUri, P_1);
		}
	}

	private static PersistentNetworkMatch Read(PersistentNetworkMatch P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentNetworkMatch persistentNetworkMatch = new PersistentNetworkMatch();
					ProtoReader.NoteObject(persistentNetworkMatch, P_1);
					P_0 = persistentNetworkMatch;
				}
				string text = P_1.ReadString();
				Uri uri = ((text.Length != 0) ? new Uri(text) : null);
				if ((object)uri != null)
				{
					P_0.baseUri = uri;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PersistentNetworkMatch persistentNetworkMatch2 = new PersistentNetworkMatch();
					ProtoReader.NoteObject(persistentNetworkMatch2, P_1);
					P_0 = persistentNetworkMatch2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentNetworkMatch persistentNetworkMatch3 = new PersistentNetworkMatch();
			ProtoReader.NoteObject(persistentNetworkMatch3, P_1);
			P_0 = persistentNetworkMatch3;
		}
		return P_0;
	}

	private static void Write(PersistentLightProbeProxyVolume P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLightProbeProxyVolume))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLightProbeProxyVolume), P_0.GetType());
		}
		uint boundingBoxMode = P_0.boundingBoxMode;
		if (boundingBoxMode != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(boundingBoxMode, P_1);
		}
		int gridResolutionX = P_0.gridResolutionX;
		if (gridResolutionX != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(gridResolutionX, P_1);
		}
		int gridResolutionY = P_0.gridResolutionY;
		if (gridResolutionY != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(gridResolutionY, P_1);
		}
		int gridResolutionZ = P_0.gridResolutionZ;
		if (gridResolutionZ != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(gridResolutionZ, P_1);
		}
		Vector3 originCustom = P_0.originCustom;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(originCustom, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float probeDensity = P_0.probeDensity;
		if (probeDensity != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(probeDensity, P_1);
		}
		uint probePositionMode = P_0.probePositionMode;
		if (probePositionMode != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(probePositionMode, P_1);
		}
		uint refreshMode = P_0.refreshMode;
		if (refreshMode != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(refreshMode, P_1);
		}
		uint resolutionMode = P_0.resolutionMode;
		if (resolutionMode != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(resolutionMode, P_1);
		}
		Vector3 sizeCustom = P_0.sizeCustom;
		ProtoWriter.WriteFieldHeader(10, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(sizeCustom, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentLightProbeProxyVolume Read(PersistentLightProbeProxyVolume P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume6 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume6, P_1);
					P_0 = persistentLightProbeProxyVolume6;
				}
				uint probePositionMode = P_1.ReadUInt32();
				P_0.boundingBoxMode = probePositionMode;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume8 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume8, P_1);
					P_0 = persistentLightProbeProxyVolume8;
				}
				int gridResolutionZ = P_1.ReadInt32();
				P_0.gridResolutionX = gridResolutionZ;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume5 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume5, P_1);
					P_0 = persistentLightProbeProxyVolume5;
				}
				int gridResolutionZ = P_1.ReadInt32();
				P_0.gridResolutionY = gridResolutionZ;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume3 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume3, P_1);
					P_0 = persistentLightProbeProxyVolume3;
				}
				int gridResolutionZ = P_1.ReadInt32();
				P_0.gridResolutionZ = gridResolutionZ;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume11 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume11, P_1);
					P_0 = persistentLightProbeProxyVolume11;
				}
				Vector3 originCustom = P_0.originCustom;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(originCustom, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 sizeCustom2 = vector2;
				P_0.originCustom = sizeCustom2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume9 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume9, P_1);
					P_0 = persistentLightProbeProxyVolume9;
				}
				float probeDensity = P_1.ReadSingle();
				P_0.probeDensity = probeDensity;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume2 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume2, P_1);
					P_0 = persistentLightProbeProxyVolume2;
				}
				uint probePositionMode = P_1.ReadUInt32();
				P_0.probePositionMode = probePositionMode;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume10 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume10, P_1);
					P_0 = persistentLightProbeProxyVolume10;
				}
				uint probePositionMode = P_1.ReadUInt32();
				P_0.refreshMode = probePositionMode;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume7 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume7, P_1);
					P_0 = persistentLightProbeProxyVolume7;
				}
				uint probePositionMode = P_1.ReadUInt32();
				P_0.resolutionMode = probePositionMode;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume4 = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume4, P_1);
					P_0 = persistentLightProbeProxyVolume4;
				}
				Vector3 sizeCustom = P_0.sizeCustom;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(sizeCustom, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 sizeCustom2 = vector;
				P_0.sizeCustom = sizeCustom2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLightProbeProxyVolume persistentLightProbeProxyVolume = new PersistentLightProbeProxyVolume();
					ProtoReader.NoteObject(persistentLightProbeProxyVolume, P_1);
					P_0 = persistentLightProbeProxyVolume;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLightProbeProxyVolume persistentLightProbeProxyVolume12 = new PersistentLightProbeProxyVolume();
			ProtoReader.NoteObject(persistentLightProbeProxyVolume12, P_1);
			P_0 = persistentLightProbeProxyVolume12;
		}
		return P_0;
	}

	private static void Write(PersistentLightProbeGroup P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLightProbeGroup))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLightProbeGroup), P_0.GetType());
		}
		Vector3[] probePositions = P_0.probePositions;
		if (probePositions != null)
		{
			Vector3[] array = probePositions;
			foreach (Vector3 vector in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PersistentLightProbeGroup Read(PersistentLightProbeGroup P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentLightProbeGroup persistentLightProbeGroup = new PersistentLightProbeGroup();
					ProtoReader.NoteObject(persistentLightProbeGroup, P_1);
					P_0 = persistentLightProbeGroup;
				}
				Vector3[] probePositions = P_0.probePositions;
				List<Vector3> list = new List<Vector3>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector3 item = Read(default(Vector3), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector3[] array = new Vector3[(fieldNumber = ((probePositions != null) ? probePositions.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					probePositions.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.probePositions = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PersistentLightProbeGroup persistentLightProbeGroup2 = new PersistentLightProbeGroup();
					ProtoReader.NoteObject(persistentLightProbeGroup2, P_1);
					P_0 = persistentLightProbeGroup2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentLightProbeGroup persistentLightProbeGroup3 = new PersistentLightProbeGroup();
			ProtoReader.NoteObject(persistentLightProbeGroup3, P_1);
			P_0 = persistentLightProbeGroup3;
		}
		return P_0;
	}

	private static void Write(PersistentLight P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLight))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLight), P_0.GetType());
		}
		bool alreadyLightmapped = P_0.alreadyLightmapped;
		if (alreadyLightmapped)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(alreadyLightmapped, P_1);
		}
		float bounceIntensity = P_0.bounceIntensity;
		if (bounceIntensity != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounceIntensity, P_1);
		}
		Color color = P_0.color;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float colorTemperature = P_0.colorTemperature;
		if (colorTemperature != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(colorTemperature, P_1);
		}
		long cookie = P_0.cookie;
		if (cookie != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(cookie, P_1);
		}
		float cookieSize = P_0.cookieSize;
		if (cookieSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(cookieSize, P_1);
		}
		int cullingMask = P_0.cullingMask;
		if (cullingMask != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(cullingMask, P_1);
		}
		long flare = P_0.flare;
		if (flare != 0L)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(flare, P_1);
		}
		float intensity = P_0.intensity;
		if (intensity != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(intensity, P_1);
		}
		float range = P_0.range;
		if (range != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(range, P_1);
		}
		uint renderMode = P_0.renderMode;
		if (renderMode != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(renderMode, P_1);
		}
		float shadowBias = P_0.shadowBias;
		if (shadowBias != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(shadowBias, P_1);
		}
		int shadowCustomResolution = P_0.shadowCustomResolution;
		if (shadowCustomResolution != 0)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(shadowCustomResolution, P_1);
		}
		float shadowNearPlane = P_0.shadowNearPlane;
		if (shadowNearPlane != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(shadowNearPlane, P_1);
		}
		float shadowNormalBias = P_0.shadowNormalBias;
		if (shadowNormalBias != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(shadowNormalBias, P_1);
		}
		uint shadowResolution = P_0.shadowResolution;
		if (shadowResolution != 0)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(shadowResolution, P_1);
		}
		float shadowStrength = P_0.shadowStrength;
		if (shadowStrength != 0f)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(shadowStrength, P_1);
		}
		uint shadows = P_0.shadows;
		if (shadows != 0)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(shadows, P_1);
		}
		float spotAngle = P_0.spotAngle;
		if (spotAngle != 0f)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spotAngle, P_1);
		}
		uint type = P_0.type;
		if (type != 0)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(type, P_1);
		}
	}

	private static PersistentLight Read(PersistentLight P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight6 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight6, P_1);
					P_0 = persistentLight6;
				}
				bool alreadyLightmapped = P_1.ReadBoolean();
				P_0.alreadyLightmapped = alreadyLightmapped;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight8 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight8, P_1);
					P_0 = persistentLight8;
				}
				float intensity = P_1.ReadSingle();
				P_0.bounceIntensity = intensity;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight20 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight20, P_1);
					P_0 = persistentLight20;
				}
				Color color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				P_0.color = color3;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight17 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight17, P_1);
					P_0 = persistentLight17;
				}
				float intensity = P_1.ReadSingle();
				P_0.colorTemperature = intensity;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight11 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight11, P_1);
					P_0 = persistentLight11;
				}
				long cookie = P_1.ReadInt64();
				P_0.cookie = cookie;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight9 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight9, P_1);
					P_0 = persistentLight9;
				}
				float intensity = P_1.ReadSingle();
				P_0.cookieSize = intensity;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight18 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight18, P_1);
					P_0 = persistentLight18;
				}
				int shadowCustomResolution = P_1.ReadInt32();
				P_0.cullingMask = shadowCustomResolution;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight15 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight15, P_1);
					P_0 = persistentLight15;
				}
				long cookie = P_1.ReadInt64();
				P_0.flare = cookie;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight2 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight2, P_1);
					P_0 = persistentLight2;
				}
				float intensity = P_1.ReadSingle();
				P_0.intensity = intensity;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight21 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight21, P_1);
					P_0 = persistentLight21;
				}
				float intensity = P_1.ReadSingle();
				P_0.range = intensity;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight14 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight14, P_1);
					P_0 = persistentLight14;
				}
				uint type = P_1.ReadUInt32();
				P_0.renderMode = type;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight12 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight12, P_1);
					P_0 = persistentLight12;
				}
				float intensity = P_1.ReadSingle();
				P_0.shadowBias = intensity;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight5 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight5, P_1);
					P_0 = persistentLight5;
				}
				int shadowCustomResolution = P_1.ReadInt32();
				P_0.shadowCustomResolution = shadowCustomResolution;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight3 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight3, P_1);
					P_0 = persistentLight3;
				}
				float intensity = P_1.ReadSingle();
				P_0.shadowNearPlane = intensity;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight19 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight19, P_1);
					P_0 = persistentLight19;
				}
				float intensity = P_1.ReadSingle();
				P_0.shadowNormalBias = intensity;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight16 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight16, P_1);
					P_0 = persistentLight16;
				}
				uint type = P_1.ReadUInt32();
				P_0.shadowResolution = type;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight13 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight13, P_1);
					P_0 = persistentLight13;
				}
				float intensity = P_1.ReadSingle();
				P_0.shadowStrength = intensity;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight10 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight10, P_1);
					P_0 = persistentLight10;
				}
				uint type = P_1.ReadUInt32();
				P_0.shadows = type;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight7 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight7, P_1);
					P_0 = persistentLight7;
				}
				float intensity = P_1.ReadSingle();
				P_0.spotAngle = intensity;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentLight persistentLight4 = new PersistentLight();
					ProtoReader.NoteObject(persistentLight4, P_1);
					P_0 = persistentLight4;
				}
				uint type = P_1.ReadUInt32();
				P_0.type = type;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLight persistentLight = new PersistentLight();
					ProtoReader.NoteObject(persistentLight, P_1);
					P_0 = persistentLight;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLight persistentLight22 = new PersistentLight();
			ProtoReader.NoteObject(persistentLight22, P_1);
			P_0 = persistentLight22;
		}
		return P_0;
	}

	private static void Write(PersistentGUILayer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGUILayer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGUILayer), P_0.GetType());
		}
	}

	private static PersistentGUILayer Read(PersistentGUILayer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentGUILayer persistentGUILayer = new PersistentGUILayer();
				ProtoReader.NoteObject(persistentGUILayer, P_1);
				P_0 = persistentGUILayer;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentGUILayer persistentGUILayer2 = new PersistentGUILayer();
			ProtoReader.NoteObject(persistentGUILayer2, P_1);
			P_0 = persistentGUILayer2;
		}
		return P_0;
	}

	private static void Write(PersistentGUIElement P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGUIElement))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGUIElement), P_0.GetType());
		}
	}

	private static PersistentGUIElement Read(PersistentGUIElement P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentGUIElement persistentGUIElement = new PersistentGUIElement();
				ProtoReader.NoteObject(persistentGUIElement, P_1);
				P_0 = persistentGUIElement;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentGUIElement persistentGUIElement2 = new PersistentGUIElement();
			ProtoReader.NoteObject(persistentGUIElement2, P_1);
			P_0 = persistentGUIElement2;
		}
		return P_0;
	}

	private static void Write(PersistentSkybox P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSkybox))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSkybox), P_0.GetType());
		}
		long material = P_0.material;
		if (material != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(material, P_1);
		}
	}

	private static PersistentSkybox Read(PersistentSkybox P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentSkybox persistentSkybox = new PersistentSkybox();
					ProtoReader.NoteObject(persistentSkybox, P_1);
					P_0 = persistentSkybox;
				}
				long material = P_1.ReadInt64();
				P_0.material = material;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentSkybox persistentSkybox2 = new PersistentSkybox();
					ProtoReader.NoteObject(persistentSkybox2, P_1);
					P_0 = persistentSkybox2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentSkybox persistentSkybox3 = new PersistentSkybox();
			ProtoReader.NoteObject(persistentSkybox3, P_1);
			P_0 = persistentSkybox3;
		}
		return P_0;
	}

	private static void Write(PersistentProjector P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentProjector))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentProjector), P_0.GetType());
		}
		float aspectRatio = P_0.aspectRatio;
		if (aspectRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(aspectRatio, P_1);
		}
		float farClipPlane = P_0.farClipPlane;
		if (farClipPlane != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(farClipPlane, P_1);
		}
		float fieldOfView = P_0.fieldOfView;
		if (fieldOfView != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fieldOfView, P_1);
		}
		int ignoreLayers = P_0.ignoreLayers;
		if (ignoreLayers != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(ignoreLayers, P_1);
		}
		long material = P_0.material;
		if (material != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(material, P_1);
		}
		float nearClipPlane = P_0.nearClipPlane;
		if (nearClipPlane != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(nearClipPlane, P_1);
		}
		bool orthographic = P_0.orthographic;
		if (orthographic)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(orthographic, P_1);
		}
		float orthographicSize = P_0.orthographicSize;
		if (orthographicSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(orthographicSize, P_1);
		}
	}

	private static PersistentProjector Read(PersistentProjector P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentProjector persistentProjector8 = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector8, P_1);
					P_0 = persistentProjector8;
				}
				float farClipPlane = P_1.ReadSingle();
				P_0.aspectRatio = farClipPlane;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentProjector persistentProjector2 = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector2, P_1);
					P_0 = persistentProjector2;
				}
				float farClipPlane = P_1.ReadSingle();
				P_0.farClipPlane = farClipPlane;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentProjector persistentProjector9 = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector9, P_1);
					P_0 = persistentProjector9;
				}
				float farClipPlane = P_1.ReadSingle();
				P_0.fieldOfView = farClipPlane;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentProjector persistentProjector6 = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector6, P_1);
					P_0 = persistentProjector6;
				}
				int ignoreLayers = P_1.ReadInt32();
				P_0.ignoreLayers = ignoreLayers;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentProjector persistentProjector5 = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector5, P_1);
					P_0 = persistentProjector5;
				}
				long material = P_1.ReadInt64();
				P_0.material = material;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentProjector persistentProjector3 = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector3, P_1);
					P_0 = persistentProjector3;
				}
				float farClipPlane = P_1.ReadSingle();
				P_0.nearClipPlane = farClipPlane;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentProjector persistentProjector7 = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector7, P_1);
					P_0 = persistentProjector7;
				}
				bool orthographic = P_1.ReadBoolean();
				P_0.orthographic = orthographic;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentProjector persistentProjector4 = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector4, P_1);
					P_0 = persistentProjector4;
				}
				float farClipPlane = P_1.ReadSingle();
				P_0.orthographicSize = farClipPlane;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentProjector persistentProjector = new PersistentProjector();
					ProtoReader.NoteObject(persistentProjector, P_1);
					P_0 = persistentProjector;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentProjector persistentProjector10 = new PersistentProjector();
			ProtoReader.NoteObject(persistentProjector10, P_1);
			P_0 = persistentProjector10;
		}
		return P_0;
	}

	private static void Write(PersistentLensFlare P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLensFlare))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLensFlare), P_0.GetType());
		}
		float brightness = P_0.brightness;
		if (brightness != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(brightness, P_1);
		}
		Color color = P_0.color;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float fadeSpeed = P_0.fadeSpeed;
		if (fadeSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fadeSpeed, P_1);
		}
		long flare = P_0.flare;
		if (flare != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(flare, P_1);
		}
	}

	private static PersistentLensFlare Read(PersistentLensFlare P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLensFlare persistentLensFlare3 = new PersistentLensFlare();
					ProtoReader.NoteObject(persistentLensFlare3, P_1);
					P_0 = persistentLensFlare3;
				}
				float fadeSpeed = P_1.ReadSingle();
				P_0.brightness = fadeSpeed;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLensFlare persistentLensFlare5 = new PersistentLensFlare();
					ProtoReader.NoteObject(persistentLensFlare5, P_1);
					P_0 = persistentLensFlare5;
				}
				Color color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				P_0.color = color3;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentLensFlare persistentLensFlare2 = new PersistentLensFlare();
					ProtoReader.NoteObject(persistentLensFlare2, P_1);
					P_0 = persistentLensFlare2;
				}
				float fadeSpeed = P_1.ReadSingle();
				P_0.fadeSpeed = fadeSpeed;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentLensFlare persistentLensFlare4 = new PersistentLensFlare();
					ProtoReader.NoteObject(persistentLensFlare4, P_1);
					P_0 = persistentLensFlare4;
				}
				long flare = P_1.ReadInt64();
				P_0.flare = flare;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLensFlare persistentLensFlare = new PersistentLensFlare();
					ProtoReader.NoteObject(persistentLensFlare, P_1);
					P_0 = persistentLensFlare;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLensFlare persistentLensFlare6 = new PersistentLensFlare();
			ProtoReader.NoteObject(persistentLensFlare6, P_1);
			P_0 = persistentLensFlare6;
		}
		return P_0;
	}

	private static void Write(PersistentFlareLayer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentFlareLayer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentFlareLayer), P_0.GetType());
		}
	}

	private static PersistentFlareLayer Read(PersistentFlareLayer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentFlareLayer persistentFlareLayer = new PersistentFlareLayer();
				ProtoReader.NoteObject(persistentFlareLayer, P_1);
				P_0 = persistentFlareLayer;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentFlareLayer persistentFlareLayer2 = new PersistentFlareLayer();
			ProtoReader.NoteObject(persistentFlareLayer2, P_1);
			P_0 = persistentFlareLayer2;
		}
		return P_0;
	}

	private static void Write(PersistentCamera P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCamera))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCamera), P_0.GetType());
		}
		bool allowHDR = P_0.allowHDR;
		if (allowHDR)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(allowHDR, P_1);
		}
		bool allowMSAA = P_0.allowMSAA;
		if (allowMSAA)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(allowMSAA, P_1);
		}
		Color backgroundColor = P_0.backgroundColor;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(backgroundColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint cameraType = P_0.cameraType;
		if (cameraType != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(cameraType, P_1);
		}
		uint clearFlags = P_0.clearFlags;
		if (clearFlags != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(clearFlags, P_1);
		}
		bool clearStencilAfterLightingPass = P_0.clearStencilAfterLightingPass;
		if (clearStencilAfterLightingPass)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(clearStencilAfterLightingPass, P_1);
		}
		int cullingMask = P_0.cullingMask;
		if (cullingMask != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(cullingMask, P_1);
		}
		float depth = P_0.depth;
		if (depth != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(depth, P_1);
		}
		uint depthTextureMode = P_0.depthTextureMode;
		if (depthTextureMode != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(depthTextureMode, P_1);
		}
		int eventMask = P_0.eventMask;
		if (eventMask != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(eventMask, P_1);
		}
		float farClipPlane = P_0.farClipPlane;
		if (farClipPlane != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(farClipPlane, P_1);
		}
		float fieldOfView = P_0.fieldOfView;
		if (fieldOfView != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fieldOfView, P_1);
		}
		bool forceIntoRenderTexture = P_0.forceIntoRenderTexture;
		if (forceIntoRenderTexture)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(forceIntoRenderTexture, P_1);
		}
		float[] layerCullDistances = P_0.layerCullDistances;
		if (layerCullDistances != null)
		{
			float[] array = layerCullDistances;
			foreach (float value in array)
			{
				ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
				ProtoWriter.WriteSingle(value, P_1);
			}
		}
		bool layerCullSpherical = P_0.layerCullSpherical;
		if (layerCullSpherical)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(layerCullSpherical, P_1);
		}
		float nearClipPlane = P_0.nearClipPlane;
		if (nearClipPlane != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(nearClipPlane, P_1);
		}
		uint opaqueSortMode = P_0.opaqueSortMode;
		if (opaqueSortMode != 0)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(opaqueSortMode, P_1);
		}
		bool orthographic = P_0.orthographic;
		if (orthographic)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(orthographic, P_1);
		}
		float orthographicSize = P_0.orthographicSize;
		if (orthographicSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(orthographicSize, P_1);
		}
		Rect pixelRect = P_0.pixelRect;
		ProtoWriter.WriteFieldHeader(20, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(pixelRect, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Rect rect = P_0.rect;
		ProtoWriter.WriteFieldHeader(21, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(rect, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint renderingPath = P_0.renderingPath;
		if (renderingPath != 0)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(renderingPath, P_1);
		}
		float stereoConvergence = P_0.stereoConvergence;
		if (stereoConvergence != 0f)
		{
			ProtoWriter.WriteFieldHeader(23, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(stereoConvergence, P_1);
		}
		bool stereoMirrorMode = P_0.stereoMirrorMode;
		if (stereoMirrorMode)
		{
			ProtoWriter.WriteFieldHeader(24, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(stereoMirrorMode, P_1);
		}
		float stereoSeparation = P_0.stereoSeparation;
		if (stereoSeparation != 0f)
		{
			ProtoWriter.WriteFieldHeader(25, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(stereoSeparation, P_1);
		}
		uint stereoTargetEye = P_0.stereoTargetEye;
		if (stereoTargetEye != 0)
		{
			ProtoWriter.WriteFieldHeader(26, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(stereoTargetEye, P_1);
		}
		int targetDisplay = P_0.targetDisplay;
		if (targetDisplay != 0)
		{
			ProtoWriter.WriteFieldHeader(27, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(targetDisplay, P_1);
		}
		long targetTexture = P_0.targetTexture;
		if (targetTexture != 0L)
		{
			ProtoWriter.WriteFieldHeader(28, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(targetTexture, P_1);
		}
		Vector3 transparencySortAxis = P_0.transparencySortAxis;
		ProtoWriter.WriteFieldHeader(29, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(transparencySortAxis, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint transparencySortMode = P_0.transparencySortMode;
		if (transparencySortMode != 0)
		{
			ProtoWriter.WriteFieldHeader(30, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(transparencySortMode, P_1);
		}
		bool useJitteredProjectionMatrixForTransparentRendering = P_0.useJitteredProjectionMatrixForTransparentRendering;
		if (useJitteredProjectionMatrixForTransparentRendering)
		{
			ProtoWriter.WriteFieldHeader(31, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useJitteredProjectionMatrixForTransparentRendering, P_1);
		}
		bool useOcclusionCulling = P_0.useOcclusionCulling;
		if (useOcclusionCulling)
		{
			ProtoWriter.WriteFieldHeader(32, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useOcclusionCulling, P_1);
		}
	}

	private static PersistentCamera Read(PersistentCamera P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera2 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera2, P_1);
					P_0 = persistentCamera2;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.allowHDR = allowHDR;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera11 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera11, P_1);
					P_0 = persistentCamera11;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.allowMSAA = allowHDR;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera6 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera6, P_1);
					P_0 = persistentCamera6;
				}
				Color backgroundColor = P_0.backgroundColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(backgroundColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color backgroundColor2 = color;
				P_0.backgroundColor = backgroundColor2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera27 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera27, P_1);
					P_0 = persistentCamera27;
				}
				uint renderingPath = P_1.ReadUInt32();
				P_0.cameraType = renderingPath;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera17 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera17, P_1);
					P_0 = persistentCamera17;
				}
				uint renderingPath = P_1.ReadUInt32();
				P_0.clearFlags = renderingPath;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera26 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera26, P_1);
					P_0 = persistentCamera26;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.clearStencilAfterLightingPass = allowHDR;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera29 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera29, P_1);
					P_0 = persistentCamera29;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.cullingMask = fieldNumber;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera24 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera24, P_1);
					P_0 = persistentCamera24;
				}
				float orthographicSize = P_1.ReadSingle();
				P_0.depth = orthographicSize;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera15 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera15, P_1);
					P_0 = persistentCamera15;
				}
				uint renderingPath = P_1.ReadUInt32();
				P_0.depthTextureMode = renderingPath;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera33 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera33, P_1);
					P_0 = persistentCamera33;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.eventMask = fieldNumber;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera20 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera20, P_1);
					P_0 = persistentCamera20;
				}
				float orthographicSize = P_1.ReadSingle();
				P_0.farClipPlane = orthographicSize;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera18 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera18, P_1);
					P_0 = persistentCamera18;
				}
				float orthographicSize = P_1.ReadSingle();
				P_0.fieldOfView = orthographicSize;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera9 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera9, P_1);
					P_0 = persistentCamera9;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.forceIntoRenderTexture = allowHDR;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera8 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera8, P_1);
					P_0 = persistentCamera8;
				}
				float[] layerCullDistances = P_0.layerCullDistances;
				List<float> list = new List<float>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadSingle());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Fixed32, P_1))
					{
						list.Add(P_1.ReadSingle());
					}
					ProtoReader.EndSubItem(token2, P_1);
				}
				float[] array = new float[(fieldNumber = ((layerCullDistances != null) ? layerCullDistances.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					layerCullDistances.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.layerCullDistances = array;
				}
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera32 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera32, P_1);
					P_0 = persistentCamera32;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.layerCullSpherical = allowHDR;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera30 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera30, P_1);
					P_0 = persistentCamera30;
				}
				float orthographicSize = P_1.ReadSingle();
				P_0.nearClipPlane = orthographicSize;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera23 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera23, P_1);
					P_0 = persistentCamera23;
				}
				uint renderingPath = P_1.ReadUInt32();
				P_0.opaqueSortMode = renderingPath;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera21 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera21, P_1);
					P_0 = persistentCamera21;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.orthographic = allowHDR;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera14 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera14, P_1);
					P_0 = persistentCamera14;
				}
				float orthographicSize = P_1.ReadSingle();
				P_0.orthographicSize = orthographicSize;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera12 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera12, P_1);
					P_0 = persistentCamera12;
				}
				Rect pixelRect = P_0.pixelRect;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Rect rect4 = Read(pixelRect, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Rect rect3 = rect4;
				P_0.pixelRect = rect3;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera5 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera5, P_1);
					P_0 = persistentCamera5;
				}
				Rect rect = P_0.rect;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Rect rect2 = Read(rect, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Rect rect3 = rect2;
				P_0.rect = rect3;
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera3 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera3, P_1);
					P_0 = persistentCamera3;
				}
				uint renderingPath = P_1.ReadUInt32();
				P_0.renderingPath = renderingPath;
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera31 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera31, P_1);
					P_0 = persistentCamera31;
				}
				float orthographicSize = P_1.ReadSingle();
				P_0.stereoConvergence = orthographicSize;
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera28 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera28, P_1);
					P_0 = persistentCamera28;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.stereoMirrorMode = allowHDR;
				break;
			}
			case 25:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera25 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera25, P_1);
					P_0 = persistentCamera25;
				}
				float orthographicSize = P_1.ReadSingle();
				P_0.stereoSeparation = orthographicSize;
				break;
			}
			case 26:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera22 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera22, P_1);
					P_0 = persistentCamera22;
				}
				uint renderingPath = P_1.ReadUInt32();
				P_0.stereoTargetEye = renderingPath;
				break;
			}
			case 27:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera19 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera19, P_1);
					P_0 = persistentCamera19;
				}
				int fieldNumber = P_1.ReadInt32();
				P_0.targetDisplay = fieldNumber;
				break;
			}
			case 28:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera16 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera16, P_1);
					P_0 = persistentCamera16;
				}
				long targetTexture = P_1.ReadInt64();
				P_0.targetTexture = targetTexture;
				break;
			}
			case 29:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera13 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera13, P_1);
					P_0 = persistentCamera13;
				}
				Vector3 transparencySortAxis = P_0.transparencySortAxis;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(transparencySortAxis, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 transparencySortAxis2 = vector;
				P_0.transparencySortAxis = transparencySortAxis2;
				break;
			}
			case 30:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera10 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera10, P_1);
					P_0 = persistentCamera10;
				}
				uint renderingPath = P_1.ReadUInt32();
				P_0.transparencySortMode = renderingPath;
				break;
			}
			case 31:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera7 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera7, P_1);
					P_0 = persistentCamera7;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.useJitteredProjectionMatrixForTransparentRendering = allowHDR;
				break;
			}
			case 32:
			{
				if (P_0 == null)
				{
					PersistentCamera persistentCamera4 = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera4, P_1);
					P_0 = persistentCamera4;
				}
				bool allowHDR = P_1.ReadBoolean();
				P_0.useOcclusionCulling = allowHDR;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCamera persistentCamera = new PersistentCamera();
					ProtoReader.NoteObject(persistentCamera, P_1);
					P_0 = persistentCamera;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCamera persistentCamera34 = new PersistentCamera();
			ProtoReader.NoteObject(persistentCamera34, P_1);
			P_0 = persistentCamera34;
		}
		return P_0;
	}

	private static void Write(PersistentBillboardAsset P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentBillboardAsset))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBillboardAsset), P_0.GetType());
		}
		float bottom = P_0.bottom;
		if (bottom != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bottom, P_1);
		}
		float height = P_0.height;
		if (height != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(height, P_1);
		}
		long material = P_0.material;
		if (material != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(material, P_1);
		}
		float width = P_0.width;
		if (width != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(width, P_1);
		}
	}

	private static PersistentBillboardAsset Read(PersistentBillboardAsset P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentBillboardAsset persistentBillboardAsset3 = new PersistentBillboardAsset();
					ProtoReader.NoteObject(persistentBillboardAsset3, P_1);
					P_0 = persistentBillboardAsset3;
				}
				float bottom = P_1.ReadSingle();
				P_0.bottom = bottom;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentBillboardAsset persistentBillboardAsset5 = new PersistentBillboardAsset();
					ProtoReader.NoteObject(persistentBillboardAsset5, P_1);
					P_0 = persistentBillboardAsset5;
				}
				float bottom = P_1.ReadSingle();
				P_0.height = bottom;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentBillboardAsset persistentBillboardAsset2 = new PersistentBillboardAsset();
					ProtoReader.NoteObject(persistentBillboardAsset2, P_1);
					P_0 = persistentBillboardAsset2;
				}
				long material = P_1.ReadInt64();
				P_0.material = material;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentBillboardAsset persistentBillboardAsset4 = new PersistentBillboardAsset();
					ProtoReader.NoteObject(persistentBillboardAsset4, P_1);
					P_0 = persistentBillboardAsset4;
				}
				float bottom = P_1.ReadSingle();
				P_0.width = bottom;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBillboardAsset persistentBillboardAsset = new PersistentBillboardAsset();
					ProtoReader.NoteObject(persistentBillboardAsset, P_1);
					P_0 = persistentBillboardAsset;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBillboardAsset persistentBillboardAsset6 = new PersistentBillboardAsset();
			ProtoReader.NoteObject(persistentBillboardAsset6, P_1);
			P_0 = persistentBillboardAsset6;
		}
		return P_0;
	}

	private static void Write(PersistentScriptableObject P_0, ProtoWriter P_1)
	{
		PersistentStateMachineBehaviour obj = P_0 as PersistentStateMachineBehaviour;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(1000, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentGUISkin obj2 = P_0 as PersistentGUISkin;
		if (obj2 != null)
		{
			ProtoWriter.WriteFieldHeader(1001, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj2, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentPlayerConnection obj3 = P_0 as PersistentPlayerConnection;
		if (obj3 != null)
		{
			ProtoWriter.WriteFieldHeader(1002, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj3, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PersistentRenderPipelineAsset obj4 = P_0 as PersistentRenderPipelineAsset;
		if (obj4 != null)
		{
			ProtoWriter.WriteFieldHeader(1003, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj4, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PersistentScriptableObject))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentScriptableObject), P_0.GetType());
		}
	}

	private static PersistentScriptableObject Read(PersistentScriptableObject P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1000:
			{
				if (P_0 != null && !(P_0 is PersistentStateMachineBehaviour))
				{
					PersistentScriptableObject from2 = P_0;
					PersistentStateMachineBehaviour persistentStateMachineBehaviour = new PersistentStateMachineBehaviour();
					ProtoReader.NoteObject(persistentStateMachineBehaviour, P_1);
					P_0 = (PersistentScriptableObject)ProtoReader.Merge(P_1, from2, persistentStateMachineBehaviour);
				}
				PersistentStateMachineBehaviour obj2 = (PersistentStateMachineBehaviour)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentStateMachineBehaviour persistentStateMachineBehaviour2 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentStateMachineBehaviour2;
				break;
			}
			case 1001:
			{
				if (P_0 != null && !(P_0 is PersistentGUISkin))
				{
					PersistentScriptableObject from4 = P_0;
					PersistentGUISkin persistentGUISkin = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin, P_1);
					P_0 = (PersistentScriptableObject)ProtoReader.Merge(P_1, from4, persistentGUISkin);
				}
				PersistentGUISkin obj4 = (PersistentGUISkin)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentGUISkin persistentGUISkin2 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentGUISkin2;
				break;
			}
			case 1002:
			{
				if (P_0 != null && !(P_0 is PersistentPlayerConnection))
				{
					PersistentScriptableObject from = P_0;
					PersistentPlayerConnection persistentPlayerConnection = new PersistentPlayerConnection();
					ProtoReader.NoteObject(persistentPlayerConnection, P_1);
					P_0 = (PersistentScriptableObject)ProtoReader.Merge(P_1, from, persistentPlayerConnection);
				}
				PersistentPlayerConnection obj = (PersistentPlayerConnection)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentPlayerConnection persistentPlayerConnection2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentPlayerConnection2;
				break;
			}
			case 1003:
			{
				if (P_0 != null && !(P_0 is PersistentRenderPipelineAsset))
				{
					PersistentScriptableObject from3 = P_0;
					PersistentRenderPipelineAsset persistentRenderPipelineAsset = new PersistentRenderPipelineAsset();
					ProtoReader.NoteObject(persistentRenderPipelineAsset, P_1);
					P_0 = (PersistentScriptableObject)ProtoReader.Merge(P_1, from3, persistentRenderPipelineAsset);
				}
				PersistentRenderPipelineAsset obj3 = (PersistentRenderPipelineAsset)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentRenderPipelineAsset persistentRenderPipelineAsset2 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = persistentRenderPipelineAsset2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentScriptableObject persistentScriptableObject = new PersistentScriptableObject();
					ProtoReader.NoteObject(persistentScriptableObject, P_1);
					P_0 = persistentScriptableObject;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentScriptableObject persistentScriptableObject2 = new PersistentScriptableObject();
			ProtoReader.NoteObject(persistentScriptableObject2, P_1);
			P_0 = persistentScriptableObject2;
		}
		return P_0;
	}

	private static void Write(PersistentRenderPipelineAsset P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRenderPipelineAsset))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRenderPipelineAsset), P_0.GetType());
		}
	}

	private static PersistentRenderPipelineAsset Read(PersistentRenderPipelineAsset P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentRenderPipelineAsset persistentRenderPipelineAsset = new PersistentRenderPipelineAsset();
				ProtoReader.NoteObject(persistentRenderPipelineAsset, P_1);
				P_0 = persistentRenderPipelineAsset;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentRenderPipelineAsset persistentRenderPipelineAsset2 = new PersistentRenderPipelineAsset();
			ProtoReader.NoteObject(persistentRenderPipelineAsset2, P_1);
			P_0 = persistentRenderPipelineAsset2;
		}
		return P_0;
	}

	private static void Write(PersistentPlayerConnection P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPlayerConnection))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPlayerConnection), P_0.GetType());
		}
	}

	private static PersistentPlayerConnection Read(PersistentPlayerConnection P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentPlayerConnection persistentPlayerConnection = new PersistentPlayerConnection();
				ProtoReader.NoteObject(persistentPlayerConnection, P_1);
				P_0 = persistentPlayerConnection;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentPlayerConnection persistentPlayerConnection2 = new PersistentPlayerConnection();
			ProtoReader.NoteObject(persistentPlayerConnection2, P_1);
			P_0 = persistentPlayerConnection2;
		}
		return P_0;
	}

	private static void Write(PersistentGUISkin P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGUISkin))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGUISkin), P_0.GetType());
		}
		PersistentGUIStyle box = P_0.box;
		if (box != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(box, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle button = P_0.button;
		if (button != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			BclHelpers.WriteNetObject(button, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle[] customStyles = P_0.customStyles;
		if (customStyles != null)
		{
			PersistentGUIStyle[] array = customStyles;
			foreach (PersistentGUIStyle obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
					Write((PersistentData)obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		long font = P_0.font;
		if (font != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(font, P_1);
		}
		PersistentGUIStyle horizontalScrollbar = P_0.horizontalScrollbar;
		if (horizontalScrollbar != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(horizontalScrollbar, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle horizontalScrollbarLeftButton = P_0.horizontalScrollbarLeftButton;
		if (horizontalScrollbarLeftButton != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(horizontalScrollbarLeftButton, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle horizontalScrollbarRightButton = P_0.horizontalScrollbarRightButton;
		if (horizontalScrollbarRightButton != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			BclHelpers.WriteNetObject(horizontalScrollbarRightButton, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle horizontalScrollbarThumb = P_0.horizontalScrollbarThumb;
		if (horizontalScrollbarThumb != null)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
			BclHelpers.WriteNetObject(horizontalScrollbarThumb, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle horizontalSlider = P_0.horizontalSlider;
		if (horizontalSlider != null)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
			BclHelpers.WriteNetObject(horizontalSlider, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle horizontalSliderThumb = P_0.horizontalSliderThumb;
		if (horizontalSliderThumb != null)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.String, P_1);
			BclHelpers.WriteNetObject(horizontalSliderThumb, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle label = P_0.label;
		if (label != null)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
			BclHelpers.WriteNetObject(label, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle scrollView = P_0.scrollView;
		if (scrollView != null)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
			BclHelpers.WriteNetObject(scrollView, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle textArea = P_0.textArea;
		if (textArea != null)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
			BclHelpers.WriteNetObject(textArea, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle textField = P_0.textField;
		if (textField != null)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
			BclHelpers.WriteNetObject(textField, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle toggle = P_0.toggle;
		if (toggle != null)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.String, P_1);
			BclHelpers.WriteNetObject(toggle, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle verticalScrollbar = P_0.verticalScrollbar;
		if (verticalScrollbar != null)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.String, P_1);
			BclHelpers.WriteNetObject(verticalScrollbar, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle verticalScrollbarDownButton = P_0.verticalScrollbarDownButton;
		if (verticalScrollbarDownButton != null)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.String, P_1);
			BclHelpers.WriteNetObject(verticalScrollbarDownButton, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle verticalScrollbarThumb = P_0.verticalScrollbarThumb;
		if (verticalScrollbarThumb != null)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.String, P_1);
			BclHelpers.WriteNetObject(verticalScrollbarThumb, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle verticalScrollbarUpButton = P_0.verticalScrollbarUpButton;
		if (verticalScrollbarUpButton != null)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.String, P_1);
			BclHelpers.WriteNetObject(verticalScrollbarUpButton, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle verticalSlider = P_0.verticalSlider;
		if (verticalSlider != null)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.String, P_1);
			BclHelpers.WriteNetObject(verticalSlider, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle verticalSliderThumb = P_0.verticalSliderThumb;
		if (verticalSliderThumb != null)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.String, P_1);
			BclHelpers.WriteNetObject(verticalSliderThumb, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyle window = P_0.window;
		if (window != null)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.String, P_1);
			BclHelpers.WriteNetObject(window, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
	}

	private static PersistentGUISkin Read(PersistentGUISkin P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin22 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin22, P_1);
					P_0 = persistentGUISkin22;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.box, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.box = persistentGUIStyle;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin2 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin2, P_1);
					P_0 = persistentGUISkin2;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.button, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.button = persistentGUIStyle;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin19 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin19, P_1);
					P_0 = persistentGUISkin19;
				}
				PersistentGUIStyle[] customStyles = P_0.customStyles;
				List<PersistentGUIStyle> list = new List<PersistentGUIStyle>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUIStyle item = (PersistentGUIStyle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGUIStyle[] array = new PersistentGUIStyle[(fieldNumber = ((customStyles != null) ? customStyles.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					customStyles.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.customStyles = array;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin10 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin10, P_1);
					P_0 = persistentGUISkin10;
				}
				long font = P_1.ReadInt64();
				P_0.font = font;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin15 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin15, P_1);
					P_0 = persistentGUISkin15;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.horizontalScrollbar, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.horizontalScrollbar = persistentGUIStyle;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin6 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin6, P_1);
					P_0 = persistentGUISkin6;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.horizontalScrollbarLeftButton, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.horizontalScrollbarLeftButton = persistentGUIStyle;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin5 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin5, P_1);
					P_0 = persistentGUISkin5;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.horizontalScrollbarRightButton, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.horizontalScrollbarRightButton = persistentGUIStyle;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin18 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin18, P_1);
					P_0 = persistentGUISkin18;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.horizontalScrollbarThumb, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.horizontalScrollbarThumb = persistentGUIStyle;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin11 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin11, P_1);
					P_0 = persistentGUISkin11;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.horizontalSlider, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.horizontalSlider = persistentGUIStyle;
				}
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin21 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin21, P_1);
					P_0 = persistentGUISkin21;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.horizontalSliderThumb, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.horizontalSliderThumb = persistentGUIStyle;
				}
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin13 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin13, P_1);
					P_0 = persistentGUISkin13;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.label, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.label = persistentGUIStyle;
				}
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin9 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin9, P_1);
					P_0 = persistentGUISkin9;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.scrollView, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.scrollView = persistentGUIStyle;
				}
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin23 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin23, P_1);
					P_0 = persistentGUISkin23;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.textArea, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.textArea = persistentGUIStyle;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin17 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin17, P_1);
					P_0 = persistentGUISkin17;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.textField, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.textField = persistentGUIStyle;
				}
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin14 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin14, P_1);
					P_0 = persistentGUISkin14;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.toggle, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.toggle = persistentGUIStyle;
				}
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin7 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin7, P_1);
					P_0 = persistentGUISkin7;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.verticalScrollbar, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.verticalScrollbar = persistentGUIStyle;
				}
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin3 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin3, P_1);
					P_0 = persistentGUISkin3;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.verticalScrollbarDownButton, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.verticalScrollbarDownButton = persistentGUIStyle;
				}
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin20 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin20, P_1);
					P_0 = persistentGUISkin20;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.verticalScrollbarThumb, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.verticalScrollbarThumb = persistentGUIStyle;
				}
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin16 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin16, P_1);
					P_0 = persistentGUISkin16;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.verticalScrollbarUpButton, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.verticalScrollbarUpButton = persistentGUIStyle;
				}
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin12 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin12, P_1);
					P_0 = persistentGUISkin12;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.verticalSlider, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.verticalSlider = persistentGUIStyle;
				}
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin8 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin8, P_1);
					P_0 = persistentGUISkin8;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.verticalSliderThumb, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.verticalSliderThumb = persistentGUIStyle;
				}
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin4 = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin4, P_1);
					P_0 = persistentGUISkin4;
				}
				PersistentGUIStyle persistentGUIStyle = (PersistentGUIStyle)BclHelpers.ReadNetObject(P_0.window, P_1, 258, typeof(PersistentGUIStyle), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyle != null)
				{
					P_0.window = persistentGUIStyle;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentGUISkin persistentGUISkin = new PersistentGUISkin();
					ProtoReader.NoteObject(persistentGUISkin, P_1);
					P_0 = persistentGUISkin;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentGUISkin persistentGUISkin24 = new PersistentGUISkin();
			ProtoReader.NoteObject(persistentGUISkin24, P_1);
			P_0 = persistentGUISkin24;
		}
		return P_0;
	}

	private static void Write(PersistentStateMachineBehaviour P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentStateMachineBehaviour))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentStateMachineBehaviour), P_0.GetType());
		}
	}

	private static PersistentStateMachineBehaviour Read(PersistentStateMachineBehaviour P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentStateMachineBehaviour persistentStateMachineBehaviour = new PersistentStateMachineBehaviour();
				ProtoReader.NoteObject(persistentStateMachineBehaviour, P_1);
				P_0 = persistentStateMachineBehaviour;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentStateMachineBehaviour persistentStateMachineBehaviour2 = new PersistentStateMachineBehaviour();
			ProtoReader.NoteObject(persistentStateMachineBehaviour2, P_1);
			P_0 = persistentStateMachineBehaviour2;
		}
		return P_0;
	}

	private static void Write(PersistentAssetBundleManifest P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAssetBundleManifest))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAssetBundleManifest), P_0.GetType());
		}
	}

	private static PersistentAssetBundleManifest Read(PersistentAssetBundleManifest P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentAssetBundleManifest persistentAssetBundleManifest = new PersistentAssetBundleManifest();
				ProtoReader.NoteObject(persistentAssetBundleManifest, P_1);
				P_0 = persistentAssetBundleManifest;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentAssetBundleManifest persistentAssetBundleManifest2 = new PersistentAssetBundleManifest();
			ProtoReader.NoteObject(persistentAssetBundleManifest2, P_1);
			P_0 = persistentAssetBundleManifest2;
		}
		return P_0;
	}

	private static void Write(PersistentAssetBundle P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentAssetBundle))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentAssetBundle), P_0.GetType());
		}
	}

	private static PersistentAssetBundle Read(PersistentAssetBundle P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PersistentAssetBundle persistentAssetBundle = new PersistentAssetBundle();
				ProtoReader.NoteObject(persistentAssetBundle, P_1);
				P_0 = persistentAssetBundle;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PersistentAssetBundle persistentAssetBundle2 = new PersistentAssetBundle();
			ProtoReader.NoteObject(persistentAssetBundle2, P_1);
			P_0 = persistentAssetBundle2;
		}
		return P_0;
	}

	private static void Write(PersistentTriggerModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTriggerModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTriggerModule), P_0.GetType());
		}
		long[] colliders = P_0.colliders;
		if (colliders != null)
		{
			long[] array = colliders;
			foreach (long value in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteInt64(value, P_1);
			}
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		ParticleSystemOverlapAction enter = P_0.enter;
		if (enter != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ParticleSystemOverlapAction particleSystemOverlapAction = enter;
			switch (particleSystemOverlapAction)
			{
			case ParticleSystemOverlapAction.Ignore:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ParticleSystemOverlapAction.Kill:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case ParticleSystemOverlapAction.Callback:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, particleSystemOverlapAction);
				break;
			}
		}
		ParticleSystemOverlapAction exit = P_0.exit;
		if (exit != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ParticleSystemOverlapAction particleSystemOverlapAction = exit;
			switch (particleSystemOverlapAction)
			{
			case ParticleSystemOverlapAction.Ignore:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ParticleSystemOverlapAction.Kill:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case ParticleSystemOverlapAction.Callback:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, particleSystemOverlapAction);
				break;
			}
		}
		ParticleSystemOverlapAction inside = P_0.inside;
		if (inside != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ParticleSystemOverlapAction particleSystemOverlapAction = inside;
			switch (particleSystemOverlapAction)
			{
			case ParticleSystemOverlapAction.Ignore:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ParticleSystemOverlapAction.Kill:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case ParticleSystemOverlapAction.Callback:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, particleSystemOverlapAction);
				break;
			}
		}
		ParticleSystemOverlapAction outside = P_0.outside;
		if (outside != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ParticleSystemOverlapAction particleSystemOverlapAction = outside;
			switch (particleSystemOverlapAction)
			{
			case ParticleSystemOverlapAction.Ignore:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ParticleSystemOverlapAction.Kill:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case ParticleSystemOverlapAction.Callback:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, particleSystemOverlapAction);
				break;
			}
		}
		float radiusScale = P_0.radiusScale;
		if (radiusScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radiusScale, P_1);
		}
	}

	private static PersistentTriggerModule Read(PersistentTriggerModule P_0, ProtoReader P_1)
	{
		int num;
		ParticleSystemOverlapAction particleSystemOverlapAction = default(ParticleSystemOverlapAction);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTriggerModule persistentTriggerModule8 = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule8, P_1);
					P_0 = persistentTriggerModule8;
				}
				long[] colliders = P_0.colliders;
				List<long> list = new List<long>();
				int num2;
				if (P_1.WireType != WireType.String)
				{
					num2 = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt64());
					}
					while (P_1.TryReadFieldHeader(num2));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt64());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				long[] array = new long[(num2 = ((colliders != null) ? colliders.Length : 0)) + list.Count];
				if (num2 != 0)
				{
					colliders.CopyTo(array, 0);
				}
				list.CopyTo(array, num2);
				array = array;
				if (array != null)
				{
					P_0.colliders = array;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTriggerModule persistentTriggerModule3 = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule3, P_1);
					P_0 = persistentTriggerModule3;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTriggerModule persistentTriggerModule5 = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule5, P_1);
					P_0 = persistentTriggerModule5;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Ignore;
					break;
				case 1:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Kill;
					break;
				case 2:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Callback;
					break;
				default:
					P_1.ThrowEnumException(typeof(ParticleSystemOverlapAction), num2);
					break;
				}
				particleSystemOverlapAction = (P_0.enter = particleSystemOverlapAction);
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTriggerModule persistentTriggerModule2 = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule2, P_1);
					P_0 = persistentTriggerModule2;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Ignore;
					break;
				case 1:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Kill;
					break;
				case 2:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Callback;
					break;
				default:
					P_1.ThrowEnumException(typeof(ParticleSystemOverlapAction), num2);
					break;
				}
				particleSystemOverlapAction = (P_0.exit = particleSystemOverlapAction);
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTriggerModule persistentTriggerModule6 = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule6, P_1);
					P_0 = persistentTriggerModule6;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Ignore;
					break;
				case 1:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Kill;
					break;
				case 2:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Callback;
					break;
				default:
					P_1.ThrowEnumException(typeof(ParticleSystemOverlapAction), num2);
					break;
				}
				particleSystemOverlapAction = (P_0.inside = particleSystemOverlapAction);
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTriggerModule persistentTriggerModule7 = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule7, P_1);
					P_0 = persistentTriggerModule7;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Ignore;
					break;
				case 1:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Kill;
					break;
				case 2:
					particleSystemOverlapAction = ParticleSystemOverlapAction.Callback;
					break;
				default:
					P_1.ThrowEnumException(typeof(ParticleSystemOverlapAction), num2);
					break;
				}
				particleSystemOverlapAction = (P_0.outside = particleSystemOverlapAction);
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentTriggerModule persistentTriggerModule4 = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule4, P_1);
					P_0 = persistentTriggerModule4;
				}
				float radiusScale = P_1.ReadSingle();
				P_0.radiusScale = radiusScale;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTriggerModule persistentTriggerModule = new PersistentTriggerModule();
					ProtoReader.NoteObject(persistentTriggerModule, P_1);
					P_0 = persistentTriggerModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTriggerModule persistentTriggerModule9 = new PersistentTriggerModule();
			ProtoReader.NoteObject(persistentTriggerModule9, P_1);
			P_0 = persistentTriggerModule9;
		}
		return P_0;
	}

	private static void Write(PersistentEmissionModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentEmissionModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentEmissionModule), P_0.GetType());
		}
		PersistentBurst[] bursts = P_0.bursts;
		if (bursts != null)
		{
			PersistentBurst[] array = bursts;
			foreach (PersistentBurst obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
					Write((PersistentData)obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		PersistentMinMaxCurve rateOverDistance = P_0.rateOverDistance;
		if (rateOverDistance != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(rateOverDistance, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float rateOverDistanceMultiplier = P_0.rateOverDistanceMultiplier;
		if (rateOverDistanceMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rateOverDistanceMultiplier, P_1);
		}
		PersistentMinMaxCurve rateOverTime = P_0.rateOverTime;
		if (rateOverTime != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(rateOverTime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float rateOverTimeMultiplier = P_0.rateOverTimeMultiplier;
		if (rateOverTimeMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rateOverTimeMultiplier, P_1);
		}
	}

	private static PersistentEmissionModule Read(PersistentEmissionModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentEmissionModule persistentEmissionModule2 = new PersistentEmissionModule();
					ProtoReader.NoteObject(persistentEmissionModule2, P_1);
					P_0 = persistentEmissionModule2;
				}
				PersistentBurst[] bursts = P_0.bursts;
				List<PersistentBurst> list = new List<PersistentBurst>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBurst item = (PersistentBurst)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBurst[] array = new PersistentBurst[(fieldNumber = ((bursts != null) ? bursts.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					bursts.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.bursts = array;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentEmissionModule persistentEmissionModule3 = new PersistentEmissionModule();
					ProtoReader.NoteObject(persistentEmissionModule3, P_1);
					P_0 = persistentEmissionModule3;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentEmissionModule persistentEmissionModule6 = new PersistentEmissionModule();
					ProtoReader.NoteObject(persistentEmissionModule6, P_1);
					P_0 = persistentEmissionModule6;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.rateOverDistance, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.rateOverDistance = persistentMinMaxCurve;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentEmissionModule persistentEmissionModule5 = new PersistentEmissionModule();
					ProtoReader.NoteObject(persistentEmissionModule5, P_1);
					P_0 = persistentEmissionModule5;
				}
				float rateOverTimeMultiplier = P_1.ReadSingle();
				P_0.rateOverDistanceMultiplier = rateOverTimeMultiplier;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentEmissionModule persistentEmissionModule7 = new PersistentEmissionModule();
					ProtoReader.NoteObject(persistentEmissionModule7, P_1);
					P_0 = persistentEmissionModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.rateOverTime, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.rateOverTime = persistentMinMaxCurve;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentEmissionModule persistentEmissionModule4 = new PersistentEmissionModule();
					ProtoReader.NoteObject(persistentEmissionModule4, P_1);
					P_0 = persistentEmissionModule4;
				}
				float rateOverTimeMultiplier = P_1.ReadSingle();
				P_0.rateOverTimeMultiplier = rateOverTimeMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentEmissionModule persistentEmissionModule = new PersistentEmissionModule();
					ProtoReader.NoteObject(persistentEmissionModule, P_1);
					P_0 = persistentEmissionModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentEmissionModule persistentEmissionModule8 = new PersistentEmissionModule();
			ProtoReader.NoteObject(persistentEmissionModule8, P_1);
			P_0 = persistentEmissionModule8;
		}
		return P_0;
	}

	private static void Write(PersistentCollisionModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCollisionModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCollisionModule), P_0.GetType());
		}
		PersistentMinMaxCurve bounce = P_0.bounce;
		if (bounce != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(bounce, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float bounceMultiplier = P_0.bounceMultiplier;
		if (bounceMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounceMultiplier, P_1);
		}
		LayerMask collidesWith = P_0.collidesWith;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(collidesWith, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		PersistentMinMaxCurve dampen = P_0.dampen;
		if (dampen != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			BclHelpers.WriteNetObject(dampen, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float dampenMultiplier = P_0.dampenMultiplier;
		if (dampenMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dampenMultiplier, P_1);
		}
		bool enableDynamicColliders = P_0.enableDynamicColliders;
		if (enableDynamicColliders)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enableDynamicColliders, P_1);
		}
		bool enableInteriorCollisions = P_0.enableInteriorCollisions;
		if (enableInteriorCollisions)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enableInteriorCollisions, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		PersistentMinMaxCurve lifetimeLoss = P_0.lifetimeLoss;
		if (lifetimeLoss != null)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
			BclHelpers.WriteNetObject(lifetimeLoss, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float lifetimeLossMultiplier = P_0.lifetimeLossMultiplier;
		if (lifetimeLossMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(lifetimeLossMultiplier, P_1);
		}
		int maxCollisionShapes = P_0.maxCollisionShapes;
		if (maxCollisionShapes != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(maxCollisionShapes, P_1);
		}
		float maxKillSpeed = P_0.maxKillSpeed;
		if (maxKillSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxKillSpeed, P_1);
		}
		float minKillSpeed = P_0.minKillSpeed;
		if (minKillSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minKillSpeed, P_1);
		}
		ParticleSystemCollisionMode mode = P_0.mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Variant, P_1);
			ParticleSystemCollisionMode particleSystemCollisionMode = mode;
			switch (particleSystemCollisionMode)
			{
			case ParticleSystemCollisionMode.Collision3D:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ParticleSystemCollisionMode.Collision2D:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, particleSystemCollisionMode);
				break;
			}
		}
		long[] planes = P_0.planes;
		if (planes != null)
		{
			long[] array = planes;
			foreach (long value in array)
			{
				ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
				ProtoWriter.WriteInt64(value, P_1);
			}
		}
		ParticleSystemCollisionQuality quality = P_0.quality;
		if (quality != 0)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Variant, P_1);
			ParticleSystemCollisionQuality particleSystemCollisionQuality = quality;
			switch (particleSystemCollisionQuality)
			{
			case ParticleSystemCollisionQuality.High:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ParticleSystemCollisionQuality.Medium:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case ParticleSystemCollisionQuality.Low:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, particleSystemCollisionQuality);
				break;
			}
		}
		float radiusScale = P_0.radiusScale;
		if (radiusScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radiusScale, P_1);
		}
		bool sendCollisionMessages = P_0.sendCollisionMessages;
		if (sendCollisionMessages)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(sendCollisionMessages, P_1);
		}
		ParticleSystemCollisionType type = P_0.type;
		if (type != 0)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ParticleSystemCollisionType particleSystemCollisionType = type;
			switch (particleSystemCollisionType)
			{
			case ParticleSystemCollisionType.Planes:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case ParticleSystemCollisionType.World:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, particleSystemCollisionType);
				break;
			}
		}
		float voxelSize = P_0.voxelSize;
		if (voxelSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(voxelSize, P_1);
		}
	}

	private static PersistentCollisionModule Read(PersistentCollisionModule P_0, ProtoReader P_1)
	{
		int num;
		ParticleSystemCollisionMode mode = default(ParticleSystemCollisionMode);
		ParticleSystemCollisionQuality quality = default(ParticleSystemCollisionQuality);
		ParticleSystemCollisionType type = default(ParticleSystemCollisionType);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule12 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule12, P_1);
					P_0 = persistentCollisionModule12;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.bounce, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.bounce = persistentMinMaxCurve;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule5 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule5, P_1);
					P_0 = persistentCollisionModule5;
				}
				float voxelSize = P_1.ReadSingle();
				P_0.bounceMultiplier = voxelSize;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule13 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule13, P_1);
					P_0 = persistentCollisionModule13;
				}
				LayerMask collidesWith = P_0.collidesWith;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				LayerMask layerMask = Read(collidesWith, P_1);
				ProtoReader.EndSubItem(token, P_1);
				LayerMask collidesWith2 = layerMask;
				P_0.collidesWith = collidesWith2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule18 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule18, P_1);
					P_0 = persistentCollisionModule18;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.dampen, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.dampen = persistentMinMaxCurve;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule19 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule19, P_1);
					P_0 = persistentCollisionModule19;
				}
				float voxelSize = P_1.ReadSingle();
				P_0.dampenMultiplier = voxelSize;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule8 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule8, P_1);
					P_0 = persistentCollisionModule8;
				}
				bool enableInteriorCollisions = P_1.ReadBoolean();
				P_0.enableDynamicColliders = enableInteriorCollisions;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule3 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule3, P_1);
					P_0 = persistentCollisionModule3;
				}
				bool enableInteriorCollisions = P_1.ReadBoolean();
				P_0.enableInteriorCollisions = enableInteriorCollisions;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule15 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule15, P_1);
					P_0 = persistentCollisionModule15;
				}
				bool enableInteriorCollisions = P_1.ReadBoolean();
				P_0.enabled = enableInteriorCollisions;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule6 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule6, P_1);
					P_0 = persistentCollisionModule6;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.lifetimeLoss, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.lifetimeLoss = persistentMinMaxCurve;
				}
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule20 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule20, P_1);
					P_0 = persistentCollisionModule20;
				}
				float voxelSize = P_1.ReadSingle();
				P_0.lifetimeLossMultiplier = voxelSize;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule16 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule16, P_1);
					P_0 = persistentCollisionModule16;
				}
				int num2 = P_1.ReadInt32();
				P_0.maxCollisionShapes = num2;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule10 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule10, P_1);
					P_0 = persistentCollisionModule10;
				}
				float voxelSize = P_1.ReadSingle();
				P_0.maxKillSpeed = voxelSize;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule9 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule9, P_1);
					P_0 = persistentCollisionModule9;
				}
				float voxelSize = P_1.ReadSingle();
				P_0.minKillSpeed = voxelSize;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule2 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule2, P_1);
					P_0 = persistentCollisionModule2;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					mode = ParticleSystemCollisionMode.Collision3D;
					break;
				case 1:
					mode = ParticleSystemCollisionMode.Collision2D;
					break;
				default:
					P_1.ThrowEnumException(typeof(ParticleSystemCollisionMode), num2);
					break;
				}
				mode = (P_0.mode = mode);
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule21 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule21, P_1);
					P_0 = persistentCollisionModule21;
				}
				long[] planes = P_0.planes;
				List<long> list = new List<long>();
				int num2;
				if (P_1.WireType != WireType.String)
				{
					num2 = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt64());
					}
					while (P_1.TryReadFieldHeader(num2));
				}
				else
				{
					SubItemToken token2 = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt64());
					}
					ProtoReader.EndSubItem(token2, P_1);
				}
				long[] array = new long[(num2 = ((planes != null) ? planes.Length : 0)) + list.Count];
				if (num2 != 0)
				{
					planes.CopyTo(array, 0);
				}
				list.CopyTo(array, num2);
				array = array;
				if (array != null)
				{
					P_0.planes = array;
				}
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule17 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule17, P_1);
					P_0 = persistentCollisionModule17;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					quality = ParticleSystemCollisionQuality.High;
					break;
				case 1:
					quality = ParticleSystemCollisionQuality.Medium;
					break;
				case 2:
					quality = ParticleSystemCollisionQuality.Low;
					break;
				default:
					P_1.ThrowEnumException(typeof(ParticleSystemCollisionQuality), num2);
					break;
				}
				quality = (P_0.quality = quality);
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule14 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule14, P_1);
					P_0 = persistentCollisionModule14;
				}
				float voxelSize = P_1.ReadSingle();
				P_0.radiusScale = voxelSize;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule11 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule11, P_1);
					P_0 = persistentCollisionModule11;
				}
				bool enableInteriorCollisions = P_1.ReadBoolean();
				P_0.sendCollisionMessages = enableInteriorCollisions;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule7 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule7, P_1);
					P_0 = persistentCollisionModule7;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					type = ParticleSystemCollisionType.Planes;
					break;
				case 1:
					type = ParticleSystemCollisionType.World;
					break;
				default:
					P_1.ThrowEnumException(typeof(ParticleSystemCollisionType), num2);
					break;
				}
				type = (P_0.type = type);
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule4 = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule4, P_1);
					P_0 = persistentCollisionModule4;
				}
				float voxelSize = P_1.ReadSingle();
				P_0.voxelSize = voxelSize;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentCollisionModule persistentCollisionModule = new PersistentCollisionModule();
					ProtoReader.NoteObject(persistentCollisionModule, P_1);
					P_0 = persistentCollisionModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentCollisionModule persistentCollisionModule22 = new PersistentCollisionModule();
			ProtoReader.NoteObject(persistentCollisionModule22, P_1);
			P_0 = persistentCollisionModule22;
		}
		return P_0;
	}

	private static void Write(PersistentGUIStyleState P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGUIStyleState))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGUIStyleState), P_0.GetType());
		}
		long background = P_0.background;
		if (background != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(background, P_1);
		}
		long[] scaledBackgrounds = P_0.scaledBackgrounds;
		if (scaledBackgrounds != null)
		{
			long[] array = scaledBackgrounds;
			foreach (long value in array)
			{
				ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
				ProtoWriter.WriteInt64(value, P_1);
			}
		}
		Color textColor = P_0.textColor;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(textColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentGUIStyleState Read(PersistentGUIStyleState P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentGUIStyleState persistentGUIStyleState3 = new PersistentGUIStyleState();
					ProtoReader.NoteObject(persistentGUIStyleState3, P_1);
					P_0 = persistentGUIStyleState3;
				}
				long background = P_1.ReadInt64();
				P_0.background = background;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentGUIStyleState persistentGUIStyleState2 = new PersistentGUIStyleState();
					ProtoReader.NoteObject(persistentGUIStyleState2, P_1);
					P_0 = persistentGUIStyleState2;
				}
				long[] scaledBackgrounds = P_0.scaledBackgrounds;
				List<long> list = new List<long>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt64());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt64());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				long[] array = new long[(fieldNumber = ((scaledBackgrounds != null) ? scaledBackgrounds.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					scaledBackgrounds.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.scaledBackgrounds = array;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentGUIStyleState persistentGUIStyleState4 = new PersistentGUIStyleState();
					ProtoReader.NoteObject(persistentGUIStyleState4, P_1);
					P_0 = persistentGUIStyleState4;
				}
				Color textColor = P_0.textColor;
				SubItemToken token2 = ProtoReader.StartSubItem(P_1);
				Color color = Read(textColor, P_1);
				ProtoReader.EndSubItem(token2, P_1);
				Color textColor2 = color;
				P_0.textColor = textColor2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentGUIStyleState persistentGUIStyleState = new PersistentGUIStyleState();
					ProtoReader.NoteObject(persistentGUIStyleState, P_1);
					P_0 = persistentGUIStyleState;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentGUIStyleState persistentGUIStyleState5 = new PersistentGUIStyleState();
			ProtoReader.NoteObject(persistentGUIStyleState5, P_1);
			P_0 = persistentGUIStyleState5;
		}
		return P_0;
	}

	private static void Write(PersistentGUIStyle P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGUIStyle))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGUIStyle), P_0.GetType());
		}
		PersistentGUIStyleState active = P_0.active;
		if (active != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(active, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		uint alignment = P_0.alignment;
		if (alignment != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(alignment, P_1);
		}
		RectOffset border = P_0.border;
		SubItemToken token;
		if (border != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(border, P_1);
			Write(border, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		uint clipping = P_0.clipping;
		if (clipping != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(clipping, P_1);
		}
		Vector2 contentOffset = P_0.contentOffset;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(contentOffset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float fixedHeight = P_0.fixedHeight;
		if (fixedHeight != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fixedHeight, P_1);
		}
		float fixedWidth = P_0.fixedWidth;
		if (fixedWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fixedWidth, P_1);
		}
		PersistentGUIStyleState focused = P_0.focused;
		if (focused != null)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
			BclHelpers.WriteNetObject(focused, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		long font = P_0.font;
		if (font != 0L)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(font, P_1);
		}
		int fontSize = P_0.fontSize;
		if (fontSize != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(fontSize, P_1);
		}
		uint fontStyle = P_0.fontStyle;
		if (fontStyle != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(fontStyle, P_1);
		}
		PersistentGUIStyleState hover = P_0.hover;
		if (hover != null)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
			BclHelpers.WriteNetObject(hover, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		uint imagePosition = P_0.imagePosition;
		if (imagePosition != 0)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(imagePosition, P_1);
		}
		RectOffset margin = P_0.margin;
		if (margin != null)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(margin, P_1);
			Write(margin, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		string name = P_0.name;
		if (name != null)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.String, P_1);
			ProtoWriter.WriteString(name, P_1);
		}
		PersistentGUIStyleState normal = P_0.normal;
		if (normal != null)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.String, P_1);
			BclHelpers.WriteNetObject(normal, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyleState onActive = P_0.onActive;
		if (onActive != null)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.String, P_1);
			BclHelpers.WriteNetObject(onActive, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyleState onFocused = P_0.onFocused;
		if (onFocused != null)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.String, P_1);
			BclHelpers.WriteNetObject(onFocused, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyleState onHover = P_0.onHover;
		if (onHover != null)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.String, P_1);
			BclHelpers.WriteNetObject(onHover, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGUIStyleState onNormal = P_0.onNormal;
		if (onNormal != null)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.String, P_1);
			BclHelpers.WriteNetObject(onNormal, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		RectOffset overflow = P_0.overflow;
		if (overflow != null)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(overflow, P_1);
			Write(overflow, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		RectOffset padding = P_0.padding;
		if (padding != null)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.String, P_1);
			token = ProtoWriter.StartSubItem(padding, P_1);
			Write(padding, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		bool richText = P_0.richText;
		if (richText)
		{
			ProtoWriter.WriteFieldHeader(23, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(richText, P_1);
		}
		bool stretchHeight = P_0.stretchHeight;
		if (stretchHeight)
		{
			ProtoWriter.WriteFieldHeader(24, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(stretchHeight, P_1);
		}
		bool stretchWidth = P_0.stretchWidth;
		if (stretchWidth)
		{
			ProtoWriter.WriteFieldHeader(25, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(stretchWidth, P_1);
		}
		bool wordWrap = P_0.wordWrap;
		if (wordWrap)
		{
			ProtoWriter.WriteFieldHeader(26, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(wordWrap, P_1);
		}
	}

	private static PersistentGUIStyle Read(PersistentGUIStyle P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle6 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle6, P_1);
					P_0 = persistentGUIStyle6;
				}
				PersistentGUIStyleState persistentGUIStyleState = (PersistentGUIStyleState)BclHelpers.ReadNetObject(P_0.active, P_1, 258, typeof(PersistentGUIStyleState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyleState != null)
				{
					P_0.active = persistentGUIStyleState;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle5 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle5, P_1);
					P_0 = persistentGUIStyle5;
				}
				uint alignment = P_1.ReadUInt32();
				P_0.alignment = alignment;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle22 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle22, P_1);
					P_0 = persistentGUIStyle22;
				}
				RectOffset border = P_0.border;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				RectOffset rectOffset5 = Read(border, P_1);
				ProtoReader.EndSubItem(token, P_1);
				RectOffset rectOffset2 = rectOffset5;
				if (rectOffset2 != null)
				{
					P_0.border = rectOffset2;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle23 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle23, P_1);
					P_0 = persistentGUIStyle23;
				}
				uint alignment = P_1.ReadUInt32();
				P_0.clipping = alignment;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle25 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle25, P_1);
					P_0 = persistentGUIStyle25;
				}
				Vector2 contentOffset = P_0.contentOffset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(contentOffset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 contentOffset2 = vector;
				P_0.contentOffset = contentOffset2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle18 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle18, P_1);
					P_0 = persistentGUIStyle18;
				}
				float fixedWidth = P_1.ReadSingle();
				P_0.fixedHeight = fixedWidth;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle8 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle8, P_1);
					P_0 = persistentGUIStyle8;
				}
				float fixedWidth = P_1.ReadSingle();
				P_0.fixedWidth = fixedWidth;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle21 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle21, P_1);
					P_0 = persistentGUIStyle21;
				}
				PersistentGUIStyleState persistentGUIStyleState = (PersistentGUIStyleState)BclHelpers.ReadNetObject(P_0.focused, P_1, 258, typeof(PersistentGUIStyleState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyleState != null)
				{
					P_0.focused = persistentGUIStyleState;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle14 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle14, P_1);
					P_0 = persistentGUIStyle14;
				}
				long font = P_1.ReadInt64();
				P_0.font = font;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle12 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle12, P_1);
					P_0 = persistentGUIStyle12;
				}
				int fontSize = P_1.ReadInt32();
				P_0.fontSize = fontSize;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle27 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle27, P_1);
					P_0 = persistentGUIStyle27;
				}
				uint alignment = P_1.ReadUInt32();
				P_0.fontStyle = alignment;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle17 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle17, P_1);
					P_0 = persistentGUIStyle17;
				}
				PersistentGUIStyleState persistentGUIStyleState = (PersistentGUIStyleState)BclHelpers.ReadNetObject(P_0.hover, P_1, 258, typeof(PersistentGUIStyleState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyleState != null)
				{
					P_0.hover = persistentGUIStyleState;
				}
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle11 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle11, P_1);
					P_0 = persistentGUIStyle11;
				}
				uint alignment = P_1.ReadUInt32();
				P_0.imagePosition = alignment;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle2 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle2, P_1);
					P_0 = persistentGUIStyle2;
				}
				RectOffset margin = P_0.margin;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				RectOffset rectOffset = Read(margin, P_1);
				ProtoReader.EndSubItem(token, P_1);
				RectOffset rectOffset2 = rectOffset;
				if (rectOffset2 != null)
				{
					P_0.margin = rectOffset2;
				}
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle26 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle26, P_1);
					P_0 = persistentGUIStyle26;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.name = text;
				}
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle19 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle19, P_1);
					P_0 = persistentGUIStyle19;
				}
				PersistentGUIStyleState persistentGUIStyleState = (PersistentGUIStyleState)BclHelpers.ReadNetObject(P_0.normal, P_1, 258, typeof(PersistentGUIStyleState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyleState != null)
				{
					P_0.normal = persistentGUIStyleState;
				}
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle15 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle15, P_1);
					P_0 = persistentGUIStyle15;
				}
				PersistentGUIStyleState persistentGUIStyleState = (PersistentGUIStyleState)BclHelpers.ReadNetObject(P_0.onActive, P_1, 258, typeof(PersistentGUIStyleState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyleState != null)
				{
					P_0.onActive = persistentGUIStyleState;
				}
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle9 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle9, P_1);
					P_0 = persistentGUIStyle9;
				}
				PersistentGUIStyleState persistentGUIStyleState = (PersistentGUIStyleState)BclHelpers.ReadNetObject(P_0.onFocused, P_1, 258, typeof(PersistentGUIStyleState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyleState != null)
				{
					P_0.onFocused = persistentGUIStyleState;
				}
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle3 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle3, P_1);
					P_0 = persistentGUIStyle3;
				}
				PersistentGUIStyleState persistentGUIStyleState = (PersistentGUIStyleState)BclHelpers.ReadNetObject(P_0.onHover, P_1, 258, typeof(PersistentGUIStyleState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyleState != null)
				{
					P_0.onHover = persistentGUIStyleState;
				}
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle24 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle24, P_1);
					P_0 = persistentGUIStyle24;
				}
				PersistentGUIStyleState persistentGUIStyleState = (PersistentGUIStyleState)BclHelpers.ReadNetObject(P_0.onNormal, P_1, 258, typeof(PersistentGUIStyleState), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGUIStyleState != null)
				{
					P_0.onNormal = persistentGUIStyleState;
				}
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle20 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle20, P_1);
					P_0 = persistentGUIStyle20;
				}
				RectOffset overflow = P_0.overflow;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				RectOffset rectOffset4 = Read(overflow, P_1);
				ProtoReader.EndSubItem(token, P_1);
				RectOffset rectOffset2 = rectOffset4;
				if (rectOffset2 != null)
				{
					P_0.overflow = rectOffset2;
				}
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle16 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle16, P_1);
					P_0 = persistentGUIStyle16;
				}
				RectOffset padding = P_0.padding;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				RectOffset rectOffset3 = Read(padding, P_1);
				ProtoReader.EndSubItem(token, P_1);
				RectOffset rectOffset2 = rectOffset3;
				if (rectOffset2 != null)
				{
					P_0.padding = rectOffset2;
				}
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle13 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle13, P_1);
					P_0 = persistentGUIStyle13;
				}
				bool wordWrap = P_1.ReadBoolean();
				P_0.richText = wordWrap;
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle10 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle10, P_1);
					P_0 = persistentGUIStyle10;
				}
				bool wordWrap = P_1.ReadBoolean();
				P_0.stretchHeight = wordWrap;
				break;
			}
			case 25:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle7 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle7, P_1);
					P_0 = persistentGUIStyle7;
				}
				bool wordWrap = P_1.ReadBoolean();
				P_0.stretchWidth = wordWrap;
				break;
			}
			case 26:
			{
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle4 = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle4, P_1);
					P_0 = persistentGUIStyle4;
				}
				bool wordWrap = P_1.ReadBoolean();
				P_0.wordWrap = wordWrap;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentGUIStyle persistentGUIStyle = new PersistentGUIStyle();
					ProtoReader.NoteObject(persistentGUIStyle, P_1);
					P_0 = persistentGUIStyle;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentGUIStyle persistentGUIStyle28 = new PersistentGUIStyle();
			ProtoReader.NoteObject(persistentGUIStyle28, P_1);
			P_0 = persistentGUIStyle28;
		}
		return P_0;
	}

	private static void Write(PersistentVelocityOverLifetimeModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentVelocityOverLifetimeModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentVelocityOverLifetimeModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		uint space = P_0.space;
		if (space != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(space, P_1);
		}
		PersistentMinMaxCurve x = P_0.x;
		if (x != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(x, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float xMultiplier = P_0.xMultiplier;
		if (xMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(xMultiplier, P_1);
		}
		PersistentMinMaxCurve y = P_0.y;
		if (y != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(y, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float yMultiplier = P_0.yMultiplier;
		if (yMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(yMultiplier, P_1);
		}
		PersistentMinMaxCurve z = P_0.z;
		if (z != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			BclHelpers.WriteNetObject(z, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float zMultiplier = P_0.zMultiplier;
		if (zMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(zMultiplier, P_1);
		}
	}

	private static PersistentVelocityOverLifetimeModule Read(PersistentVelocityOverLifetimeModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule3 = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule3, P_1);
					P_0 = persistentVelocityOverLifetimeModule3;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule8 = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule8, P_1);
					P_0 = persistentVelocityOverLifetimeModule8;
				}
				uint space = P_1.ReadUInt32();
				P_0.space = space;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule5 = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule5, P_1);
					P_0 = persistentVelocityOverLifetimeModule5;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.x, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.x = persistentMinMaxCurve;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule6 = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule6, P_1);
					P_0 = persistentVelocityOverLifetimeModule6;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.xMultiplier = yMultiplier;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule9 = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule9, P_1);
					P_0 = persistentVelocityOverLifetimeModule9;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.y, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.y = persistentMinMaxCurve;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule2 = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule2, P_1);
					P_0 = persistentVelocityOverLifetimeModule2;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.yMultiplier = yMultiplier;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule7 = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule7, P_1);
					P_0 = persistentVelocityOverLifetimeModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.z, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.z = persistentMinMaxCurve;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule4 = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule4, P_1);
					P_0 = persistentVelocityOverLifetimeModule4;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.zMultiplier = yMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule = new PersistentVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentVelocityOverLifetimeModule, P_1);
					P_0 = persistentVelocityOverLifetimeModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentVelocityOverLifetimeModule persistentVelocityOverLifetimeModule10 = new PersistentVelocityOverLifetimeModule();
			ProtoReader.NoteObject(persistentVelocityOverLifetimeModule10, P_1);
			P_0 = persistentVelocityOverLifetimeModule10;
		}
		return P_0;
	}

	private static void Write(PersistentTrailModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTrailModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTrailModule), P_0.GetType());
		}
		PersistentMinMaxGradient colorOverLifetime = P_0.colorOverLifetime;
		if (colorOverLifetime != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(colorOverLifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentMinMaxGradient colorOverTrail = P_0.colorOverTrail;
		if (colorOverTrail != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			BclHelpers.WriteNetObject(colorOverTrail, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		bool dieWithParticles = P_0.dieWithParticles;
		if (dieWithParticles)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(dieWithParticles, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		bool inheritParticleColor = P_0.inheritParticleColor;
		if (inheritParticleColor)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(inheritParticleColor, P_1);
		}
		PersistentMinMaxCurve lifetime = P_0.lifetime;
		if (lifetime != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(lifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float lifetimeMultiplier = P_0.lifetimeMultiplier;
		if (lifetimeMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(lifetimeMultiplier, P_1);
		}
		float minVertexDistance = P_0.minVertexDistance;
		if (minVertexDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minVertexDistance, P_1);
		}
		float ratio = P_0.ratio;
		if (ratio != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(ratio, P_1);
		}
		bool sizeAffectsLifetime = P_0.sizeAffectsLifetime;
		if (sizeAffectsLifetime)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(sizeAffectsLifetime, P_1);
		}
		bool sizeAffectsWidth = P_0.sizeAffectsWidth;
		if (sizeAffectsWidth)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(sizeAffectsWidth, P_1);
		}
		uint textureMode = P_0.textureMode;
		if (textureMode != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(textureMode, P_1);
		}
		PersistentMinMaxCurve widthOverTrail = P_0.widthOverTrail;
		if (widthOverTrail != null)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
			BclHelpers.WriteNetObject(widthOverTrail, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float widthOverTrailMultiplier = P_0.widthOverTrailMultiplier;
		if (widthOverTrailMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(widthOverTrailMultiplier, P_1);
		}
		bool worldSpace = P_0.worldSpace;
		if (worldSpace)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(worldSpace, P_1);
		}
	}

	private static PersistentTrailModule Read(PersistentTrailModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule6 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule6, P_1);
					P_0 = persistentTrailModule6;
				}
				PersistentMinMaxGradient persistentMinMaxGradient = (PersistentMinMaxGradient)BclHelpers.ReadNetObject(P_0.colorOverLifetime, P_1, 258, typeof(PersistentMinMaxGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxGradient != null)
				{
					P_0.colorOverLifetime = persistentMinMaxGradient;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule15 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule15, P_1);
					P_0 = persistentTrailModule15;
				}
				PersistentMinMaxGradient persistentMinMaxGradient = (PersistentMinMaxGradient)BclHelpers.ReadNetObject(P_0.colorOverTrail, P_1, 258, typeof(PersistentMinMaxGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxGradient != null)
				{
					P_0.colorOverTrail = persistentMinMaxGradient;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule8 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule8, P_1);
					P_0 = persistentTrailModule8;
				}
				bool sizeAffectsWidth = P_1.ReadBoolean();
				P_0.dieWithParticles = sizeAffectsWidth;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule11 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule11, P_1);
					P_0 = persistentTrailModule11;
				}
				bool sizeAffectsWidth = P_1.ReadBoolean();
				P_0.enabled = sizeAffectsWidth;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule9 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule9, P_1);
					P_0 = persistentTrailModule9;
				}
				bool sizeAffectsWidth = P_1.ReadBoolean();
				P_0.inheritParticleColor = sizeAffectsWidth;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule13 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule13, P_1);
					P_0 = persistentTrailModule13;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.lifetime, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.lifetime = persistentMinMaxCurve;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule2 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule2, P_1);
					P_0 = persistentTrailModule2;
				}
				float lifetimeMultiplier = P_1.ReadSingle();
				P_0.lifetimeMultiplier = lifetimeMultiplier;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule16 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule16, P_1);
					P_0 = persistentTrailModule16;
				}
				float lifetimeMultiplier = P_1.ReadSingle();
				P_0.minVertexDistance = lifetimeMultiplier;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule12 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule12, P_1);
					P_0 = persistentTrailModule12;
				}
				float lifetimeMultiplier = P_1.ReadSingle();
				P_0.ratio = lifetimeMultiplier;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule5 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule5, P_1);
					P_0 = persistentTrailModule5;
				}
				bool sizeAffectsWidth = P_1.ReadBoolean();
				P_0.sizeAffectsLifetime = sizeAffectsWidth;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule3 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule3, P_1);
					P_0 = persistentTrailModule3;
				}
				bool sizeAffectsWidth = P_1.ReadBoolean();
				P_0.sizeAffectsWidth = sizeAffectsWidth;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule14 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule14, P_1);
					P_0 = persistentTrailModule14;
				}
				uint textureMode = P_1.ReadUInt32();
				P_0.textureMode = textureMode;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule10 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule10, P_1);
					P_0 = persistentTrailModule10;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.widthOverTrail, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.widthOverTrail = persistentMinMaxCurve;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule7 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule7, P_1);
					P_0 = persistentTrailModule7;
				}
				float lifetimeMultiplier = P_1.ReadSingle();
				P_0.widthOverTrailMultiplier = lifetimeMultiplier;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule4 = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule4, P_1);
					P_0 = persistentTrailModule4;
				}
				bool sizeAffectsWidth = P_1.ReadBoolean();
				P_0.worldSpace = sizeAffectsWidth;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTrailModule persistentTrailModule = new PersistentTrailModule();
					ProtoReader.NoteObject(persistentTrailModule, P_1);
					P_0 = persistentTrailModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTrailModule persistentTrailModule17 = new PersistentTrailModule();
			ProtoReader.NoteObject(persistentTrailModule17, P_1);
			P_0 = persistentTrailModule17;
		}
		return P_0;
	}

	private static void Write(PersistentTextureSheetAnimationModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTextureSheetAnimationModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTextureSheetAnimationModule), P_0.GetType());
		}
		uint animation = P_0.animation;
		if (animation != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(animation, P_1);
		}
		int cycleCount = P_0.cycleCount;
		if (cycleCount != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(cycleCount, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		float flipU = P_0.flipU;
		if (flipU != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(flipU, P_1);
		}
		float flipV = P_0.flipV;
		if (flipV != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(flipV, P_1);
		}
		PersistentMinMaxCurve frameOverTime = P_0.frameOverTime;
		if (frameOverTime != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(frameOverTime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float frameOverTimeMultiplier = P_0.frameOverTimeMultiplier;
		if (frameOverTimeMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(frameOverTimeMultiplier, P_1);
		}
		int numTilesX = P_0.numTilesX;
		if (numTilesX != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(numTilesX, P_1);
		}
		int numTilesY = P_0.numTilesY;
		if (numTilesY != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(numTilesY, P_1);
		}
		int rowIndex = P_0.rowIndex;
		if (rowIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(rowIndex, P_1);
		}
		PersistentMinMaxCurve startFrame = P_0.startFrame;
		if (startFrame != null)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
			BclHelpers.WriteNetObject(startFrame, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startFrameMultiplier = P_0.startFrameMultiplier;
		if (startFrameMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startFrameMultiplier, P_1);
		}
		bool useRandomRow = P_0.useRandomRow;
		if (useRandomRow)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useRandomRow, P_1);
		}
		uint uvChannelMask = P_0.uvChannelMask;
		if (uvChannelMask != 0)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(uvChannelMask, P_1);
		}
	}

	private static PersistentTextureSheetAnimationModule Read(PersistentTextureSheetAnimationModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule14 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule14, P_1);
					P_0 = persistentTextureSheetAnimationModule14;
				}
				uint uvChannelMask = P_1.ReadUInt32();
				P_0.animation = uvChannelMask;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule15 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule15, P_1);
					P_0 = persistentTextureSheetAnimationModule15;
				}
				int rowIndex = P_1.ReadInt32();
				P_0.cycleCount = rowIndex;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule5 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule5, P_1);
					P_0 = persistentTextureSheetAnimationModule5;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule8 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule8, P_1);
					P_0 = persistentTextureSheetAnimationModule8;
				}
				float frameOverTimeMultiplier = P_1.ReadSingle();
				P_0.flipU = frameOverTimeMultiplier;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule6 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule6, P_1);
					P_0 = persistentTextureSheetAnimationModule6;
				}
				float frameOverTimeMultiplier = P_1.ReadSingle();
				P_0.flipV = frameOverTimeMultiplier;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule12 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule12, P_1);
					P_0 = persistentTextureSheetAnimationModule12;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.frameOverTime, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.frameOverTime = persistentMinMaxCurve;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule3 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule3, P_1);
					P_0 = persistentTextureSheetAnimationModule3;
				}
				float frameOverTimeMultiplier = P_1.ReadSingle();
				P_0.frameOverTimeMultiplier = frameOverTimeMultiplier;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule11 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule11, P_1);
					P_0 = persistentTextureSheetAnimationModule11;
				}
				int rowIndex = P_1.ReadInt32();
				P_0.numTilesX = rowIndex;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule9 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule9, P_1);
					P_0 = persistentTextureSheetAnimationModule9;
				}
				int rowIndex = P_1.ReadInt32();
				P_0.numTilesY = rowIndex;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule2 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule2, P_1);
					P_0 = persistentTextureSheetAnimationModule2;
				}
				int rowIndex = P_1.ReadInt32();
				P_0.rowIndex = rowIndex;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule13 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule13, P_1);
					P_0 = persistentTextureSheetAnimationModule13;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startFrame, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startFrame = persistentMinMaxCurve;
				}
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule10 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule10, P_1);
					P_0 = persistentTextureSheetAnimationModule10;
				}
				float frameOverTimeMultiplier = P_1.ReadSingle();
				P_0.startFrameMultiplier = frameOverTimeMultiplier;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule7 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule7, P_1);
					P_0 = persistentTextureSheetAnimationModule7;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.useRandomRow = enabled;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule4 = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule4, P_1);
					P_0 = persistentTextureSheetAnimationModule4;
				}
				uint uvChannelMask = P_1.ReadUInt32();
				P_0.uvChannelMask = uvChannelMask;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule = new PersistentTextureSheetAnimationModule();
					ProtoReader.NoteObject(persistentTextureSheetAnimationModule, P_1);
					P_0 = persistentTextureSheetAnimationModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTextureSheetAnimationModule persistentTextureSheetAnimationModule16 = new PersistentTextureSheetAnimationModule();
			ProtoReader.NoteObject(persistentTextureSheetAnimationModule16, P_1);
			P_0 = persistentTextureSheetAnimationModule16;
		}
		return P_0;
	}

	private static void Write(PersistentSubEmittersModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSubEmittersModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSubEmittersModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
	}

	private static PersistentSubEmittersModule Read(PersistentSubEmittersModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentSubEmittersModule persistentSubEmittersModule = new PersistentSubEmittersModule();
					ProtoReader.NoteObject(persistentSubEmittersModule, P_1);
					P_0 = persistentSubEmittersModule;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentSubEmittersModule persistentSubEmittersModule2 = new PersistentSubEmittersModule();
					ProtoReader.NoteObject(persistentSubEmittersModule2, P_1);
					P_0 = persistentSubEmittersModule2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentSubEmittersModule persistentSubEmittersModule3 = new PersistentSubEmittersModule();
			ProtoReader.NoteObject(persistentSubEmittersModule3, P_1);
			P_0 = persistentSubEmittersModule3;
		}
		return P_0;
	}

	private static void Write(PersistentSizeOverLifetimeModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSizeOverLifetimeModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSizeOverLifetimeModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		bool separateAxes = P_0.separateAxes;
		if (separateAxes)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(separateAxes, P_1);
		}
		PersistentMinMaxCurve size = P_0.size;
		if (size != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(size, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float sizeMultiplier = P_0.sizeMultiplier;
		if (sizeMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(sizeMultiplier, P_1);
		}
		PersistentMinMaxCurve x = P_0.x;
		if (x != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(x, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float xMultiplier = P_0.xMultiplier;
		if (xMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(xMultiplier, P_1);
		}
		PersistentMinMaxCurve y = P_0.y;
		if (y != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			BclHelpers.WriteNetObject(y, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float yMultiplier = P_0.yMultiplier;
		if (yMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(yMultiplier, P_1);
		}
		PersistentMinMaxCurve z = P_0.z;
		if (z != null)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
			BclHelpers.WriteNetObject(z, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float zMultiplier = P_0.zMultiplier;
		if (zMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(zMultiplier, P_1);
		}
	}

	private static PersistentSizeOverLifetimeModule Read(PersistentSizeOverLifetimeModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule8 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule8, P_1);
					P_0 = persistentSizeOverLifetimeModule8;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.enabled = separateAxes;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule5 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule5, P_1);
					P_0 = persistentSizeOverLifetimeModule5;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.separateAxes = separateAxes;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule3 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule3, P_1);
					P_0 = persistentSizeOverLifetimeModule3;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.size, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.size = persistentMinMaxCurve;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule2 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule2, P_1);
					P_0 = persistentSizeOverLifetimeModule2;
				}
				float sizeMultiplier = P_1.ReadSingle();
				P_0.sizeMultiplier = sizeMultiplier;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule9 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule9, P_1);
					P_0 = persistentSizeOverLifetimeModule9;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.x, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.x = persistentMinMaxCurve;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule10 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule10, P_1);
					P_0 = persistentSizeOverLifetimeModule10;
				}
				float sizeMultiplier = P_1.ReadSingle();
				P_0.xMultiplier = sizeMultiplier;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule6 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule6, P_1);
					P_0 = persistentSizeOverLifetimeModule6;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.y, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.y = persistentMinMaxCurve;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule11 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule11, P_1);
					P_0 = persistentSizeOverLifetimeModule11;
				}
				float sizeMultiplier = P_1.ReadSingle();
				P_0.yMultiplier = sizeMultiplier;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule7 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule7, P_1);
					P_0 = persistentSizeOverLifetimeModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.z, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.z = persistentMinMaxCurve;
				}
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule4 = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule4, P_1);
					P_0 = persistentSizeOverLifetimeModule4;
				}
				float sizeMultiplier = P_1.ReadSingle();
				P_0.zMultiplier = sizeMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule = new PersistentSizeOverLifetimeModule();
					ProtoReader.NoteObject(persistentSizeOverLifetimeModule, P_1);
					P_0 = persistentSizeOverLifetimeModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSizeOverLifetimeModule persistentSizeOverLifetimeModule12 = new PersistentSizeOverLifetimeModule();
			ProtoReader.NoteObject(persistentSizeOverLifetimeModule12, P_1);
			P_0 = persistentSizeOverLifetimeModule12;
		}
		return P_0;
	}

	private static void Write(PersistentSizeBySpeedModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSizeBySpeedModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSizeBySpeedModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		Vector2 range = P_0.range;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(range, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool separateAxes = P_0.separateAxes;
		if (separateAxes)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(separateAxes, P_1);
		}
		PersistentMinMaxCurve size = P_0.size;
		if (size != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			BclHelpers.WriteNetObject(size, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float sizeMultiplier = P_0.sizeMultiplier;
		if (sizeMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(sizeMultiplier, P_1);
		}
		PersistentMinMaxCurve x = P_0.x;
		if (x != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(x, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float xMultiplier = P_0.xMultiplier;
		if (xMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(xMultiplier, P_1);
		}
		PersistentMinMaxCurve y = P_0.y;
		if (y != null)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
			BclHelpers.WriteNetObject(y, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float yMultiplier = P_0.yMultiplier;
		if (yMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(yMultiplier, P_1);
		}
		PersistentMinMaxCurve z = P_0.z;
		if (z != null)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.String, P_1);
			BclHelpers.WriteNetObject(z, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float zMultiplier = P_0.zMultiplier;
		if (zMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(zMultiplier, P_1);
		}
	}

	private static PersistentSizeBySpeedModule Read(PersistentSizeBySpeedModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule9 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule9, P_1);
					P_0 = persistentSizeBySpeedModule9;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.enabled = separateAxes;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule10 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule10, P_1);
					P_0 = persistentSizeBySpeedModule10;
				}
				Vector2 range = P_0.range;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(range, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 range2 = vector;
				P_0.range = range2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule6 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule6, P_1);
					P_0 = persistentSizeBySpeedModule6;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.separateAxes = separateAxes;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule5 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule5, P_1);
					P_0 = persistentSizeBySpeedModule5;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.size, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.size = persistentMinMaxCurve;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule3 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule3, P_1);
					P_0 = persistentSizeBySpeedModule3;
				}
				float sizeMultiplier = P_1.ReadSingle();
				P_0.sizeMultiplier = sizeMultiplier;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule12 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule12, P_1);
					P_0 = persistentSizeBySpeedModule12;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.x, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.x = persistentMinMaxCurve;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule8 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule8, P_1);
					P_0 = persistentSizeBySpeedModule8;
				}
				float sizeMultiplier = P_1.ReadSingle();
				P_0.xMultiplier = sizeMultiplier;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule2 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule2, P_1);
					P_0 = persistentSizeBySpeedModule2;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.y, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.y = persistentMinMaxCurve;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule11 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule11, P_1);
					P_0 = persistentSizeBySpeedModule11;
				}
				float sizeMultiplier = P_1.ReadSingle();
				P_0.yMultiplier = sizeMultiplier;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule7 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule7, P_1);
					P_0 = persistentSizeBySpeedModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.z, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.z = persistentMinMaxCurve;
				}
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule4 = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule4, P_1);
					P_0 = persistentSizeBySpeedModule4;
				}
				float sizeMultiplier = P_1.ReadSingle();
				P_0.zMultiplier = sizeMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSizeBySpeedModule persistentSizeBySpeedModule = new PersistentSizeBySpeedModule();
					ProtoReader.NoteObject(persistentSizeBySpeedModule, P_1);
					P_0 = persistentSizeBySpeedModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSizeBySpeedModule persistentSizeBySpeedModule13 = new PersistentSizeBySpeedModule();
			ProtoReader.NoteObject(persistentSizeBySpeedModule13, P_1);
			P_0 = persistentSizeBySpeedModule13;
		}
		return P_0;
	}

	private static void Write(PersistentShapeModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentShapeModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentShapeModule), P_0.GetType());
		}
		bool alignToDirection = P_0.alignToDirection;
		if (alignToDirection)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(alignToDirection, P_1);
		}
		float angle = P_0.angle;
		if (angle != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angle, P_1);
		}
		float arc = P_0.arc;
		if (arc != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(arc, P_1);
		}
		uint arcMode = P_0.arcMode;
		if (arcMode != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(arcMode, P_1);
		}
		PersistentMinMaxCurve arcSpeed = P_0.arcSpeed;
		if (arcSpeed != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(arcSpeed, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float arcSpeedMultiplier = P_0.arcSpeedMultiplier;
		if (arcSpeedMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(arcSpeedMultiplier, P_1);
		}
		float arcSpread = P_0.arcSpread;
		if (arcSpread != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(arcSpread, P_1);
		}
		Vector3 box = P_0.box;
		ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(box, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		float length = P_0.length;
		if (length != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(length, P_1);
		}
		long mesh = P_0.mesh;
		if (mesh != 0L)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(mesh, P_1);
		}
		int meshMaterialIndex = P_0.meshMaterialIndex;
		if (meshMaterialIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(meshMaterialIndex, P_1);
		}
		long meshRenderer = P_0.meshRenderer;
		if (meshRenderer != 0L)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(meshRenderer, P_1);
		}
		float meshScale = P_0.meshScale;
		if (meshScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(meshScale, P_1);
		}
		uint meshShapeType = P_0.meshShapeType;
		if (meshShapeType != 0)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(meshShapeType, P_1);
		}
		float normalOffset = P_0.normalOffset;
		if (normalOffset != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(normalOffset, P_1);
		}
		float radius = P_0.radius;
		if (radius != 0f)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radius, P_1);
		}
		uint radiusMode = P_0.radiusMode;
		if (radiusMode != 0)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(radiusMode, P_1);
		}
		PersistentMinMaxCurve radiusSpeed = P_0.radiusSpeed;
		if (radiusSpeed != null)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.String, P_1);
			BclHelpers.WriteNetObject(radiusSpeed, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float radiusSpeedMultiplier = P_0.radiusSpeedMultiplier;
		if (radiusSpeedMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radiusSpeedMultiplier, P_1);
		}
		float radiusSpread = P_0.radiusSpread;
		if (radiusSpread != 0f)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(radiusSpread, P_1);
		}
		float randomDirectionAmount = P_0.randomDirectionAmount;
		if (randomDirectionAmount != 0f)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(randomDirectionAmount, P_1);
		}
		Vector3 scale = P_0.scale;
		ProtoWriter.WriteFieldHeader(23, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(scale, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint shapeType = P_0.shapeType;
		if (shapeType != 0)
		{
			ProtoWriter.WriteFieldHeader(24, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(shapeType, P_1);
		}
		long skinnedMeshRenderer = P_0.skinnedMeshRenderer;
		if (skinnedMeshRenderer != 0L)
		{
			ProtoWriter.WriteFieldHeader(25, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(skinnedMeshRenderer, P_1);
		}
		float sphericalDirectionAmount = P_0.sphericalDirectionAmount;
		if (sphericalDirectionAmount != 0f)
		{
			ProtoWriter.WriteFieldHeader(26, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(sphericalDirectionAmount, P_1);
		}
		bool useMeshColors = P_0.useMeshColors;
		if (useMeshColors)
		{
			ProtoWriter.WriteFieldHeader(27, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useMeshColors, P_1);
		}
		bool useMeshMaterialIndex = P_0.useMeshMaterialIndex;
		if (useMeshMaterialIndex)
		{
			ProtoWriter.WriteFieldHeader(28, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useMeshMaterialIndex, P_1);
		}
	}

	private static PersistentShapeModule Read(PersistentShapeModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule23 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule23, P_1);
					P_0 = persistentShapeModule23;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.alignToDirection = enabled;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule29 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule29, P_1);
					P_0 = persistentShapeModule29;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.angle = arcSpeedMultiplier;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule21 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule21, P_1);
					P_0 = persistentShapeModule21;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.arc = arcSpeedMultiplier;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule9 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule9, P_1);
					P_0 = persistentShapeModule9;
				}
				uint radiusMode = P_1.ReadUInt32();
				P_0.arcMode = radiusMode;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule12 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule12, P_1);
					P_0 = persistentShapeModule12;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.arcSpeed, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.arcSpeed = persistentMinMaxCurve;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule6 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule6, P_1);
					P_0 = persistentShapeModule6;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.arcSpeedMultiplier = arcSpeedMultiplier;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule20 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule20, P_1);
					P_0 = persistentShapeModule20;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.arcSpread = arcSpeedMultiplier;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule18 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule18, P_1);
					P_0 = persistentShapeModule18;
				}
				Vector3 box = P_0.box;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(box, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 box2 = vector;
				P_0.box = box2;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule3 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule3, P_1);
					P_0 = persistentShapeModule3;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule27 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule27, P_1);
					P_0 = persistentShapeModule27;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.length = arcSpeedMultiplier;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule14 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule14, P_1);
					P_0 = persistentShapeModule14;
				}
				long meshRenderer = P_1.ReadInt64();
				P_0.mesh = meshRenderer;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule11 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule11, P_1);
					P_0 = persistentShapeModule11;
				}
				int meshMaterialIndex = P_1.ReadInt32();
				P_0.meshMaterialIndex = meshMaterialIndex;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule5 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule5, P_1);
					P_0 = persistentShapeModule5;
				}
				long meshRenderer = P_1.ReadInt64();
				P_0.meshRenderer = meshRenderer;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule26 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule26, P_1);
					P_0 = persistentShapeModule26;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.meshScale = arcSpeedMultiplier;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule24 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule24, P_1);
					P_0 = persistentShapeModule24;
				}
				uint radiusMode = P_1.ReadUInt32();
				P_0.meshShapeType = radiusMode;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule17 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule17, P_1);
					P_0 = persistentShapeModule17;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.normalOffset = arcSpeedMultiplier;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule15 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule15, P_1);
					P_0 = persistentShapeModule15;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.radius = arcSpeedMultiplier;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule8 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule8, P_1);
					P_0 = persistentShapeModule8;
				}
				uint radiusMode = P_1.ReadUInt32();
				P_0.radiusMode = radiusMode;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule2 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule2, P_1);
					P_0 = persistentShapeModule2;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.radiusSpeed, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.radiusSpeed = persistentMinMaxCurve;
				}
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule28 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule28, P_1);
					P_0 = persistentShapeModule28;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.radiusSpeedMultiplier = arcSpeedMultiplier;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule25 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule25, P_1);
					P_0 = persistentShapeModule25;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.radiusSpread = arcSpeedMultiplier;
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule22 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule22, P_1);
					P_0 = persistentShapeModule22;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.randomDirectionAmount = arcSpeedMultiplier;
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule19 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule19, P_1);
					P_0 = persistentShapeModule19;
				}
				Vector3 scale = P_0.scale;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(scale, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 box2 = vector2;
				P_0.scale = box2;
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule16 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule16, P_1);
					P_0 = persistentShapeModule16;
				}
				uint radiusMode = P_1.ReadUInt32();
				P_0.shapeType = radiusMode;
				break;
			}
			case 25:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule13 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule13, P_1);
					P_0 = persistentShapeModule13;
				}
				long meshRenderer = P_1.ReadInt64();
				P_0.skinnedMeshRenderer = meshRenderer;
				break;
			}
			case 26:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule10 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule10, P_1);
					P_0 = persistentShapeModule10;
				}
				float arcSpeedMultiplier = P_1.ReadSingle();
				P_0.sphericalDirectionAmount = arcSpeedMultiplier;
				break;
			}
			case 27:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule7 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule7, P_1);
					P_0 = persistentShapeModule7;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.useMeshColors = enabled;
				break;
			}
			case 28:
			{
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule4 = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule4, P_1);
					P_0 = persistentShapeModule4;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.useMeshMaterialIndex = enabled;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentShapeModule persistentShapeModule = new PersistentShapeModule();
					ProtoReader.NoteObject(persistentShapeModule, P_1);
					P_0 = persistentShapeModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentShapeModule persistentShapeModule30 = new PersistentShapeModule();
			ProtoReader.NoteObject(persistentShapeModule30, P_1);
			P_0 = persistentShapeModule30;
		}
		return P_0;
	}

	private static void Write(PersistentRotationOverLifetimeModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRotationOverLifetimeModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRotationOverLifetimeModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		bool separateAxes = P_0.separateAxes;
		if (separateAxes)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(separateAxes, P_1);
		}
		PersistentMinMaxCurve x = P_0.x;
		if (x != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(x, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float xMultiplier = P_0.xMultiplier;
		if (xMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(xMultiplier, P_1);
		}
		PersistentMinMaxCurve y = P_0.y;
		if (y != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(y, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float yMultiplier = P_0.yMultiplier;
		if (yMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(yMultiplier, P_1);
		}
		PersistentMinMaxCurve z = P_0.z;
		if (z != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			BclHelpers.WriteNetObject(z, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float zMultiplier = P_0.zMultiplier;
		if (zMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(zMultiplier, P_1);
		}
	}

	private static PersistentRotationOverLifetimeModule Read(PersistentRotationOverLifetimeModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule3 = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule3, P_1);
					P_0 = persistentRotationOverLifetimeModule3;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule8 = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule8, P_1);
					P_0 = persistentRotationOverLifetimeModule8;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.separateAxes = enabled;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule5 = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule5, P_1);
					P_0 = persistentRotationOverLifetimeModule5;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.x, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.x = persistentMinMaxCurve;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule6 = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule6, P_1);
					P_0 = persistentRotationOverLifetimeModule6;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.xMultiplier = yMultiplier;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule9 = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule9, P_1);
					P_0 = persistentRotationOverLifetimeModule9;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.y, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.y = persistentMinMaxCurve;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule2 = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule2, P_1);
					P_0 = persistentRotationOverLifetimeModule2;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.yMultiplier = yMultiplier;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule7 = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule7, P_1);
					P_0 = persistentRotationOverLifetimeModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.z, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.z = persistentMinMaxCurve;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule4 = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule4, P_1);
					P_0 = persistentRotationOverLifetimeModule4;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.zMultiplier = yMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule = new PersistentRotationOverLifetimeModule();
					ProtoReader.NoteObject(persistentRotationOverLifetimeModule, P_1);
					P_0 = persistentRotationOverLifetimeModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRotationOverLifetimeModule persistentRotationOverLifetimeModule10 = new PersistentRotationOverLifetimeModule();
			ProtoReader.NoteObject(persistentRotationOverLifetimeModule10, P_1);
			P_0 = persistentRotationOverLifetimeModule10;
		}
		return P_0;
	}

	private static void Write(PersistentRotationBySpeedModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentRotationBySpeedModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentRotationBySpeedModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		Vector2 range = P_0.range;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(range, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool separateAxes = P_0.separateAxes;
		if (separateAxes)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(separateAxes, P_1);
		}
		PersistentMinMaxCurve x = P_0.x;
		if (x != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			BclHelpers.WriteNetObject(x, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float xMultiplier = P_0.xMultiplier;
		if (xMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(xMultiplier, P_1);
		}
		PersistentMinMaxCurve y = P_0.y;
		if (y != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(y, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float yMultiplier = P_0.yMultiplier;
		if (yMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(yMultiplier, P_1);
		}
		PersistentMinMaxCurve z = P_0.z;
		if (z != null)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
			BclHelpers.WriteNetObject(z, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float zMultiplier = P_0.zMultiplier;
		if (zMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(zMultiplier, P_1);
		}
	}

	private static PersistentRotationBySpeedModule Read(PersistentRotationBySpeedModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule10 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule10, P_1);
					P_0 = persistentRotationBySpeedModule10;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.enabled = separateAxes;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule2 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule2, P_1);
					P_0 = persistentRotationBySpeedModule2;
				}
				Vector2 range = P_0.range;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(range, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 range2 = vector;
				P_0.range = range2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule8 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule8, P_1);
					P_0 = persistentRotationBySpeedModule8;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.separateAxes = separateAxes;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule9 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule9, P_1);
					P_0 = persistentRotationBySpeedModule9;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.x, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.x = persistentMinMaxCurve;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule6 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule6, P_1);
					P_0 = persistentRotationBySpeedModule6;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.xMultiplier = yMultiplier;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule5 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule5, P_1);
					P_0 = persistentRotationBySpeedModule5;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.y, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.y = persistentMinMaxCurve;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule3 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule3, P_1);
					P_0 = persistentRotationBySpeedModule3;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.yMultiplier = yMultiplier;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule7 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule7, P_1);
					P_0 = persistentRotationBySpeedModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.z, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.z = persistentMinMaxCurve;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule4 = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule4, P_1);
					P_0 = persistentRotationBySpeedModule4;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.zMultiplier = yMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentRotationBySpeedModule persistentRotationBySpeedModule = new PersistentRotationBySpeedModule();
					ProtoReader.NoteObject(persistentRotationBySpeedModule, P_1);
					P_0 = persistentRotationBySpeedModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentRotationBySpeedModule persistentRotationBySpeedModule11 = new PersistentRotationBySpeedModule();
			ProtoReader.NoteObject(persistentRotationBySpeedModule11, P_1);
			P_0 = persistentRotationBySpeedModule11;
		}
		return P_0;
	}

	private static void Write(PersistentParticle P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentParticle))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentParticle), P_0.GetType());
		}
		float angularVelocity = P_0.angularVelocity;
		if (angularVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularVelocity, P_1);
		}
		Vector3 angularVelocity3D = P_0.angularVelocity3D;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularVelocity3D, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 axisOfRotation = P_0.axisOfRotation;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(axisOfRotation, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 position = P_0.position;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(position, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint randomSeed = P_0.randomSeed;
		if (randomSeed != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(randomSeed, P_1);
		}
		float remainingLifetime = P_0.remainingLifetime;
		if (remainingLifetime != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(remainingLifetime, P_1);
		}
		float rotation = P_0.rotation;
		if (rotation != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rotation, P_1);
		}
		Vector3 rotation3D = P_0.rotation3D;
		ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(rotation3D, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color32 startColor = P_0.startColor;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(startColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float startLifetime = P_0.startLifetime;
		if (startLifetime != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startLifetime, P_1);
		}
		float startSize = P_0.startSize;
		if (startSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startSize, P_1);
		}
		Vector3 startSize3D = P_0.startSize3D;
		ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(startSize3D, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 velocity = P_0.velocity;
		ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(velocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentParticle Read(PersistentParticle P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle3 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle3, P_1);
					P_0 = persistentParticle3;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.angularVelocity = angularVelocity;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle6 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle6, P_1);
					P_0 = persistentParticle6;
				}
				Vector3 angularVelocity3D = P_0.angularVelocity3D;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(angularVelocity3D, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector2;
				P_0.angularVelocity3D = velocity2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle14 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle14, P_1);
					P_0 = persistentParticle14;
				}
				Vector3 axisOfRotation = P_0.axisOfRotation;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector6 = Read(axisOfRotation, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector6;
				P_0.axisOfRotation = velocity2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle12 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle12, P_1);
					P_0 = persistentParticle12;
				}
				Vector3 position = P_0.position;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector5 = Read(position, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector5;
				P_0.position = velocity2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle8 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle8, P_1);
					P_0 = persistentParticle8;
				}
				uint randomSeed = P_1.ReadUInt32();
				P_0.randomSeed = randomSeed;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle5 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle5, P_1);
					P_0 = persistentParticle5;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.remainingLifetime = angularVelocity;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle11 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle11, P_1);
					P_0 = persistentParticle11;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.rotation = angularVelocity;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle9 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle9, P_1);
					P_0 = persistentParticle9;
				}
				Vector3 rotation3D = P_0.rotation3D;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector4 = Read(rotation3D, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector4;
				P_0.rotation3D = velocity2;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle2 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle2, P_1);
					P_0 = persistentParticle2;
				}
				Color32 startColor = P_0.startColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color32 color = Read(startColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color32 startColor2 = color;
				P_0.startColor = startColor2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle13 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle13, P_1);
					P_0 = persistentParticle13;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.startLifetime = angularVelocity;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle10 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle10, P_1);
					P_0 = persistentParticle10;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.startSize = angularVelocity;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle7 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle7, P_1);
					P_0 = persistentParticle7;
				}
				Vector3 startSize3D = P_0.startSize3D;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(startSize3D, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector3;
				P_0.startSize3D = velocity2;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentParticle persistentParticle4 = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle4, P_1);
					P_0 = persistentParticle4;
				}
				Vector3 velocity = P_0.velocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(velocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector;
				P_0.velocity = velocity2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentParticle persistentParticle = new PersistentParticle();
					ProtoReader.NoteObject(persistentParticle, P_1);
					P_0 = persistentParticle;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentParticle persistentParticle15 = new PersistentParticle();
			ProtoReader.NoteObject(persistentParticle15, P_1);
			P_0 = persistentParticle15;
		}
		return P_0;
	}

	private static void Write(PersistentNoiseModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentNoiseModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentNoiseModule), P_0.GetType());
		}
		bool damping = P_0.damping;
		if (damping)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(damping, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		float frequency = P_0.frequency;
		if (frequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(frequency, P_1);
		}
		int octaveCount = P_0.octaveCount;
		if (octaveCount != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(octaveCount, P_1);
		}
		float octaveMultiplier = P_0.octaveMultiplier;
		if (octaveMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(octaveMultiplier, P_1);
		}
		float octaveScale = P_0.octaveScale;
		if (octaveScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(octaveScale, P_1);
		}
		uint quality = P_0.quality;
		if (quality != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(quality, P_1);
		}
		PersistentMinMaxCurve remap = P_0.remap;
		if (remap != null)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
			BclHelpers.WriteNetObject(remap, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		bool remapEnabled = P_0.remapEnabled;
		if (remapEnabled)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(remapEnabled, P_1);
		}
		float remapMultiplier = P_0.remapMultiplier;
		if (remapMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(remapMultiplier, P_1);
		}
		PersistentMinMaxCurve remapX = P_0.remapX;
		if (remapX != null)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.String, P_1);
			BclHelpers.WriteNetObject(remapX, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float remapXMultiplier = P_0.remapXMultiplier;
		if (remapXMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(remapXMultiplier, P_1);
		}
		PersistentMinMaxCurve remapY = P_0.remapY;
		if (remapY != null)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
			BclHelpers.WriteNetObject(remapY, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float remapYMultiplier = P_0.remapYMultiplier;
		if (remapYMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(remapYMultiplier, P_1);
		}
		PersistentMinMaxCurve remapZ = P_0.remapZ;
		if (remapZ != null)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.String, P_1);
			BclHelpers.WriteNetObject(remapZ, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float remapZMultiplier = P_0.remapZMultiplier;
		if (remapZMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(remapZMultiplier, P_1);
		}
		PersistentMinMaxCurve scrollSpeed = P_0.scrollSpeed;
		if (scrollSpeed != null)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.String, P_1);
			BclHelpers.WriteNetObject(scrollSpeed, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float scrollSpeedMultiplier = P_0.scrollSpeedMultiplier;
		if (scrollSpeedMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(scrollSpeedMultiplier, P_1);
		}
		bool separateAxes = P_0.separateAxes;
		if (separateAxes)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(separateAxes, P_1);
		}
		PersistentMinMaxCurve strength = P_0.strength;
		if (strength != null)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.String, P_1);
			BclHelpers.WriteNetObject(strength, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float strengthMultiplier = P_0.strengthMultiplier;
		if (strengthMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(strengthMultiplier, P_1);
		}
		PersistentMinMaxCurve strengthX = P_0.strengthX;
		if (strengthX != null)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.String, P_1);
			BclHelpers.WriteNetObject(strengthX, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float strengthXMultiplier = P_0.strengthXMultiplier;
		if (strengthXMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(23, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(strengthXMultiplier, P_1);
		}
		PersistentMinMaxCurve strengthY = P_0.strengthY;
		if (strengthY != null)
		{
			ProtoWriter.WriteFieldHeader(24, WireType.String, P_1);
			BclHelpers.WriteNetObject(strengthY, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float strengthYMultiplier = P_0.strengthYMultiplier;
		if (strengthYMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(25, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(strengthYMultiplier, P_1);
		}
		PersistentMinMaxCurve strengthZ = P_0.strengthZ;
		if (strengthZ != null)
		{
			ProtoWriter.WriteFieldHeader(26, WireType.String, P_1);
			BclHelpers.WriteNetObject(strengthZ, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float strengthZMultiplier = P_0.strengthZMultiplier;
		if (strengthZMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(27, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(strengthZMultiplier, P_1);
		}
	}

	private static PersistentNoiseModule Read(PersistentNoiseModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule6 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule6, P_1);
					P_0 = persistentNoiseModule6;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.damping = separateAxes;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule26 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule26, P_1);
					P_0 = persistentNoiseModule26;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.enabled = separateAxes;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule22 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule22, P_1);
					P_0 = persistentNoiseModule22;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.frequency = octaveMultiplier;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule27 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule27, P_1);
					P_0 = persistentNoiseModule27;
				}
				int octaveCount = P_1.ReadInt32();
				P_0.octaveCount = octaveCount;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule2 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule2, P_1);
					P_0 = persistentNoiseModule2;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.octaveMultiplier = octaveMultiplier;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule17 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule17, P_1);
					P_0 = persistentNoiseModule17;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.octaveScale = octaveMultiplier;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule13 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule13, P_1);
					P_0 = persistentNoiseModule13;
				}
				uint quality = P_1.ReadUInt32();
				P_0.quality = quality;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule20 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule20, P_1);
					P_0 = persistentNoiseModule20;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.remap, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.remap = persistentMinMaxCurve;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule12 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule12, P_1);
					P_0 = persistentNoiseModule12;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.remapEnabled = separateAxes;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule8 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule8, P_1);
					P_0 = persistentNoiseModule8;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.remapMultiplier = octaveMultiplier;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule23 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule23, P_1);
					P_0 = persistentNoiseModule23;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.remapX, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.remapX = persistentMinMaxCurve;
				}
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule15 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule15, P_1);
					P_0 = persistentNoiseModule15;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.remapXMultiplier = octaveMultiplier;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule9 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule9, P_1);
					P_0 = persistentNoiseModule9;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.remapY, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.remapY = persistentMinMaxCurve;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule3 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule3, P_1);
					P_0 = persistentNoiseModule3;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.remapYMultiplier = octaveMultiplier;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule24 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule24, P_1);
					P_0 = persistentNoiseModule24;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.remapZ, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.remapZ = persistentMinMaxCurve;
				}
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule19 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule19, P_1);
					P_0 = persistentNoiseModule19;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.remapZMultiplier = octaveMultiplier;
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule16 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule16, P_1);
					P_0 = persistentNoiseModule16;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.scrollSpeed, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.scrollSpeed = persistentMinMaxCurve;
				}
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule10 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule10, P_1);
					P_0 = persistentNoiseModule10;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.scrollSpeedMultiplier = octaveMultiplier;
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule5 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule5, P_1);
					P_0 = persistentNoiseModule5;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.separateAxes = separateAxes;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule28 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule28, P_1);
					P_0 = persistentNoiseModule28;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.strength, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.strength = persistentMinMaxCurve;
				}
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule25 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule25, P_1);
					P_0 = persistentNoiseModule25;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.strengthMultiplier = octaveMultiplier;
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule21 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule21, P_1);
					P_0 = persistentNoiseModule21;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.strengthX, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.strengthX = persistentMinMaxCurve;
				}
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule18 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule18, P_1);
					P_0 = persistentNoiseModule18;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.strengthXMultiplier = octaveMultiplier;
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule14 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule14, P_1);
					P_0 = persistentNoiseModule14;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.strengthY, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.strengthY = persistentMinMaxCurve;
				}
				break;
			}
			case 25:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule11 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule11, P_1);
					P_0 = persistentNoiseModule11;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.strengthYMultiplier = octaveMultiplier;
				break;
			}
			case 26:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule7 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule7, P_1);
					P_0 = persistentNoiseModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.strengthZ, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.strengthZ = persistentMinMaxCurve;
				}
				break;
			}
			case 27:
			{
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule4 = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule4, P_1);
					P_0 = persistentNoiseModule4;
				}
				float octaveMultiplier = P_1.ReadSingle();
				P_0.strengthZMultiplier = octaveMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentNoiseModule persistentNoiseModule = new PersistentNoiseModule();
					ProtoReader.NoteObject(persistentNoiseModule, P_1);
					P_0 = persistentNoiseModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentNoiseModule persistentNoiseModule29 = new PersistentNoiseModule();
			ProtoReader.NoteObject(persistentNoiseModule29, P_1);
			P_0 = persistentNoiseModule29;
		}
		return P_0;
	}

	private static void Write(PersistentMinMaxGradient P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMinMaxGradient))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMinMaxGradient), P_0.GetType());
		}
		Color color = P_0.color;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color colorMax = P_0.colorMax;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(colorMax, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color colorMin = P_0.colorMin;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(colorMin, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		PersistentGradient gradient = P_0.gradient;
		if (gradient != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			BclHelpers.WriteNetObject(gradient, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGradient gradientMax = P_0.gradientMax;
		if (gradientMax != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(gradientMax, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentGradient gradientMin = P_0.gradientMin;
		if (gradientMin != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(gradientMin, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		uint mode = P_0.mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(mode, P_1);
		}
	}

	private static PersistentMinMaxGradient Read(PersistentMinMaxGradient P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentMinMaxGradient persistentMinMaxGradient3 = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient3, P_1);
					P_0 = persistentMinMaxGradient3;
				}
				Color color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				P_0.color = color3;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentMinMaxGradient persistentMinMaxGradient8 = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient8, P_1);
					P_0 = persistentMinMaxGradient8;
				}
				Color colorMax = P_0.colorMax;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color5 = Read(colorMax, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color5;
				P_0.colorMax = color3;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentMinMaxGradient persistentMinMaxGradient5 = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient5, P_1);
					P_0 = persistentMinMaxGradient5;
				}
				Color colorMin = P_0.colorMin;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color4 = Read(colorMin, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color4;
				P_0.colorMin = color3;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentMinMaxGradient persistentMinMaxGradient2 = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient2, P_1);
					P_0 = persistentMinMaxGradient2;
				}
				PersistentGradient persistentGradient = (PersistentGradient)BclHelpers.ReadNetObject(P_0.gradient, P_1, 258, typeof(PersistentGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGradient != null)
				{
					P_0.gradient = persistentGradient;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentMinMaxGradient persistentMinMaxGradient6 = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient6, P_1);
					P_0 = persistentMinMaxGradient6;
				}
				PersistentGradient persistentGradient = (PersistentGradient)BclHelpers.ReadNetObject(P_0.gradientMax, P_1, 258, typeof(PersistentGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGradient != null)
				{
					P_0.gradientMax = persistentGradient;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentMinMaxGradient persistentMinMaxGradient7 = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient7, P_1);
					P_0 = persistentMinMaxGradient7;
				}
				PersistentGradient persistentGradient = (PersistentGradient)BclHelpers.ReadNetObject(P_0.gradientMin, P_1, 258, typeof(PersistentGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentGradient != null)
				{
					P_0.gradientMin = persistentGradient;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentMinMaxGradient persistentMinMaxGradient4 = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient4, P_1);
					P_0 = persistentMinMaxGradient4;
				}
				uint mode = P_1.ReadUInt32();
				P_0.mode = mode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentMinMaxGradient persistentMinMaxGradient = new PersistentMinMaxGradient();
					ProtoReader.NoteObject(persistentMinMaxGradient, P_1);
					P_0 = persistentMinMaxGradient;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentMinMaxGradient persistentMinMaxGradient9 = new PersistentMinMaxGradient();
			ProtoReader.NoteObject(persistentMinMaxGradient9, P_1);
			P_0 = persistentMinMaxGradient9;
		}
		return P_0;
	}

	private static void Write(PersistentMinMaxCurve P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMinMaxCurve))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMinMaxCurve), P_0.GetType());
		}
		float constant = P_0.constant;
		if (constant != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(constant, P_1);
		}
		float constantMax = P_0.constantMax;
		if (constantMax != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(constantMax, P_1);
		}
		float constantMin = P_0.constantMin;
		if (constantMin != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(constantMin, P_1);
		}
		PersistentAnimationCurve curve = P_0.curve;
		if (curve != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(curve, P_1);
			Write((PersistentData)curve, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		PersistentAnimationCurve curveMax = P_0.curveMax;
		if (curveMax != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(curveMax, P_1);
			Write((PersistentData)curveMax, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		PersistentAnimationCurve curveMin = P_0.curveMin;
		if (curveMin != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(curveMin, P_1);
			Write((PersistentData)curveMin, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		float curveMultiplier = P_0.curveMultiplier;
		if (curveMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(curveMultiplier, P_1);
		}
		uint mode = P_0.mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(mode, P_1);
		}
	}

	private static PersistentMinMaxCurve Read(PersistentMinMaxCurve P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve6 = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve6, P_1);
					P_0 = persistentMinMaxCurve6;
				}
				float constantMax = P_1.ReadSingle();
				P_0.constant = constantMax;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve2 = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve2, P_1);
					P_0 = persistentMinMaxCurve2;
				}
				float constantMax = P_1.ReadSingle();
				P_0.constantMax = constantMax;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve8 = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve8, P_1);
					P_0 = persistentMinMaxCurve8;
				}
				float constantMax = P_1.ReadSingle();
				P_0.constantMin = constantMax;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve5 = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve5, P_1);
					P_0 = persistentMinMaxCurve5;
				}
				PersistentAnimationCurve curve = P_0.curve;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimationCurve obj2 = (PersistentAnimationCurve)Read((PersistentData)curve, P_1);
				ProtoReader.EndSubItem(token, P_1);
				PersistentAnimationCurve persistentAnimationCurve = obj2;
				if (persistentAnimationCurve != null)
				{
					P_0.curve = persistentAnimationCurve;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve9 = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve9, P_1);
					P_0 = persistentMinMaxCurve9;
				}
				PersistentAnimationCurve curveMax = P_0.curveMax;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimationCurve obj3 = (PersistentAnimationCurve)Read((PersistentData)curveMax, P_1);
				ProtoReader.EndSubItem(token, P_1);
				PersistentAnimationCurve persistentAnimationCurve = obj3;
				if (persistentAnimationCurve != null)
				{
					P_0.curveMax = persistentAnimationCurve;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve3 = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve3, P_1);
					P_0 = persistentMinMaxCurve3;
				}
				PersistentAnimationCurve curveMin = P_0.curveMin;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PersistentAnimationCurve obj = (PersistentAnimationCurve)Read((PersistentData)curveMin, P_1);
				ProtoReader.EndSubItem(token, P_1);
				PersistentAnimationCurve persistentAnimationCurve = obj;
				if (persistentAnimationCurve != null)
				{
					P_0.curveMin = persistentAnimationCurve;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve7 = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve7, P_1);
					P_0 = persistentMinMaxCurve7;
				}
				float constantMax = P_1.ReadSingle();
				P_0.curveMultiplier = constantMax;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve4 = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve4, P_1);
					P_0 = persistentMinMaxCurve4;
				}
				uint mode = P_1.ReadUInt32();
				P_0.mode = mode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentMinMaxCurve persistentMinMaxCurve = new PersistentMinMaxCurve();
					ProtoReader.NoteObject(persistentMinMaxCurve, P_1);
					P_0 = persistentMinMaxCurve;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentMinMaxCurve persistentMinMaxCurve10 = new PersistentMinMaxCurve();
			ProtoReader.NoteObject(persistentMinMaxCurve10, P_1);
			P_0 = persistentMinMaxCurve10;
		}
		return P_0;
	}

	private static void Write(PersistentMainModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentMainModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentMainModule), P_0.GetType());
		}
		long customSimulationSpace = P_0.customSimulationSpace;
		if (customSimulationSpace != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(customSimulationSpace, P_1);
		}
		float duration = P_0.duration;
		if (duration != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(duration, P_1);
		}
		PersistentMinMaxCurve gravityModifier = P_0.gravityModifier;
		if (gravityModifier != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(gravityModifier, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float gravityModifierMultiplier = P_0.gravityModifierMultiplier;
		if (gravityModifierMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(gravityModifierMultiplier, P_1);
		}
		bool loop = P_0.loop;
		if (loop)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(loop, P_1);
		}
		int maxParticles = P_0.maxParticles;
		if (maxParticles != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(maxParticles, P_1);
		}
		bool playOnAwake = P_0.playOnAwake;
		if (playOnAwake)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(playOnAwake, P_1);
		}
		bool prewarm = P_0.prewarm;
		if (prewarm)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(prewarm, P_1);
		}
		float randomizeRotationDirection = P_0.randomizeRotationDirection;
		if (randomizeRotationDirection != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(randomizeRotationDirection, P_1);
		}
		uint scalingMode = P_0.scalingMode;
		if (scalingMode != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(scalingMode, P_1);
		}
		uint simulationSpace = P_0.simulationSpace;
		if (simulationSpace != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(simulationSpace, P_1);
		}
		float simulationSpeed = P_0.simulationSpeed;
		if (simulationSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(simulationSpeed, P_1);
		}
		PersistentMinMaxGradient startColor = P_0.startColor;
		if (startColor != null)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
			BclHelpers.WriteNetObject(startColor, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		PersistentMinMaxCurve startDelay = P_0.startDelay;
		if (startDelay != null)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
			BclHelpers.WriteNetObject(startDelay, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startDelayMultiplier = P_0.startDelayMultiplier;
		if (startDelayMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startDelayMultiplier, P_1);
		}
		PersistentMinMaxCurve startLifetime = P_0.startLifetime;
		if (startLifetime != null)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.String, P_1);
			BclHelpers.WriteNetObject(startLifetime, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startLifetimeMultiplier = P_0.startLifetimeMultiplier;
		if (startLifetimeMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(17, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startLifetimeMultiplier, P_1);
		}
		PersistentMinMaxCurve startRotation = P_0.startRotation;
		if (startRotation != null)
		{
			ProtoWriter.WriteFieldHeader(18, WireType.String, P_1);
			BclHelpers.WriteNetObject(startRotation, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		bool startRotation3D = P_0.startRotation3D;
		if (startRotation3D)
		{
			ProtoWriter.WriteFieldHeader(19, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(startRotation3D, P_1);
		}
		float startRotationMultiplier = P_0.startRotationMultiplier;
		if (startRotationMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(20, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startRotationMultiplier, P_1);
		}
		PersistentMinMaxCurve startRotationX = P_0.startRotationX;
		if (startRotationX != null)
		{
			ProtoWriter.WriteFieldHeader(21, WireType.String, P_1);
			BclHelpers.WriteNetObject(startRotationX, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startRotationXMultiplier = P_0.startRotationXMultiplier;
		if (startRotationXMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(22, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startRotationXMultiplier, P_1);
		}
		PersistentMinMaxCurve startRotationY = P_0.startRotationY;
		if (startRotationY != null)
		{
			ProtoWriter.WriteFieldHeader(23, WireType.String, P_1);
			BclHelpers.WriteNetObject(startRotationY, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startRotationYMultiplier = P_0.startRotationYMultiplier;
		if (startRotationYMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(24, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startRotationYMultiplier, P_1);
		}
		PersistentMinMaxCurve startRotationZ = P_0.startRotationZ;
		if (startRotationZ != null)
		{
			ProtoWriter.WriteFieldHeader(25, WireType.String, P_1);
			BclHelpers.WriteNetObject(startRotationZ, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startRotationZMultiplier = P_0.startRotationZMultiplier;
		if (startRotationZMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(26, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startRotationZMultiplier, P_1);
		}
		PersistentMinMaxCurve startSize = P_0.startSize;
		if (startSize != null)
		{
			ProtoWriter.WriteFieldHeader(27, WireType.String, P_1);
			BclHelpers.WriteNetObject(startSize, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		bool startSize3D = P_0.startSize3D;
		if (startSize3D)
		{
			ProtoWriter.WriteFieldHeader(28, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(startSize3D, P_1);
		}
		float startSizeMultiplier = P_0.startSizeMultiplier;
		if (startSizeMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(29, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startSizeMultiplier, P_1);
		}
		PersistentMinMaxCurve startSizeX = P_0.startSizeX;
		if (startSizeX != null)
		{
			ProtoWriter.WriteFieldHeader(30, WireType.String, P_1);
			BclHelpers.WriteNetObject(startSizeX, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startSizeXMultiplier = P_0.startSizeXMultiplier;
		if (startSizeXMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(31, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startSizeXMultiplier, P_1);
		}
		PersistentMinMaxCurve startSizeY = P_0.startSizeY;
		if (startSizeY != null)
		{
			ProtoWriter.WriteFieldHeader(32, WireType.String, P_1);
			BclHelpers.WriteNetObject(startSizeY, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startSizeYMultiplier = P_0.startSizeYMultiplier;
		if (startSizeYMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(33, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startSizeYMultiplier, P_1);
		}
		PersistentMinMaxCurve startSizeZ = P_0.startSizeZ;
		if (startSizeZ != null)
		{
			ProtoWriter.WriteFieldHeader(34, WireType.String, P_1);
			BclHelpers.WriteNetObject(startSizeZ, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startSizeZMultiplier = P_0.startSizeZMultiplier;
		if (startSizeZMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(35, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startSizeZMultiplier, P_1);
		}
		PersistentMinMaxCurve startSpeed = P_0.startSpeed;
		if (startSpeed != null)
		{
			ProtoWriter.WriteFieldHeader(36, WireType.String, P_1);
			BclHelpers.WriteNetObject(startSpeed, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float startSpeedMultiplier = P_0.startSpeedMultiplier;
		if (startSpeedMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(37, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startSpeedMultiplier, P_1);
		}
	}

	private static PersistentMainModule Read(PersistentMainModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule12 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule12, P_1);
					P_0 = persistentMainModule12;
				}
				long customSimulationSpace = P_1.ReadInt64();
				P_0.customSimulationSpace = customSimulationSpace;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule6 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule6, P_1);
					P_0 = persistentMainModule6;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.duration = startSpeedMultiplier;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule36 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule36, P_1);
					P_0 = persistentMainModule36;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.gravityModifier, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.gravityModifier = persistentMinMaxCurve;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule31 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule31, P_1);
					P_0 = persistentMainModule31;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.gravityModifierMultiplier = startSpeedMultiplier;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule30 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule30, P_1);
					P_0 = persistentMainModule30;
				}
				bool startRotation3D = P_1.ReadBoolean();
				P_0.loop = startRotation3D;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule22 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule22, P_1);
					P_0 = persistentMainModule22;
				}
				int maxParticles = P_1.ReadInt32();
				P_0.maxParticles = maxParticles;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule33 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule33, P_1);
					P_0 = persistentMainModule33;
				}
				bool startRotation3D = P_1.ReadBoolean();
				P_0.playOnAwake = startRotation3D;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule24 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule24, P_1);
					P_0 = persistentMainModule24;
				}
				bool startRotation3D = P_1.ReadBoolean();
				P_0.prewarm = startRotation3D;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule16 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule16, P_1);
					P_0 = persistentMainModule16;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.randomizeRotationDirection = startSpeedMultiplier;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule8 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule8, P_1);
					P_0 = persistentMainModule8;
				}
				uint scalingMode = P_1.ReadUInt32();
				P_0.scalingMode = scalingMode;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule26 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule26, P_1);
					P_0 = persistentMainModule26;
				}
				uint scalingMode = P_1.ReadUInt32();
				P_0.simulationSpace = scalingMode;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule17 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule17, P_1);
					P_0 = persistentMainModule17;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.simulationSpeed = startSpeedMultiplier;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule13 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule13, P_1);
					P_0 = persistentMainModule13;
				}
				PersistentMinMaxGradient persistentMinMaxGradient = (PersistentMinMaxGradient)BclHelpers.ReadNetObject(P_0.startColor, P_1, 258, typeof(PersistentMinMaxGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxGradient != null)
				{
					P_0.startColor = persistentMinMaxGradient;
				}
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule2 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule2, P_1);
					P_0 = persistentMainModule2;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startDelay, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startDelay = persistentMinMaxCurve;
				}
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule34 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule34, P_1);
					P_0 = persistentMainModule34;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startDelayMultiplier = startSpeedMultiplier;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule23 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule23, P_1);
					P_0 = persistentMainModule23;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startLifetime, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startLifetime = persistentMinMaxCurve;
				}
				break;
			}
			case 17:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule20 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule20, P_1);
					P_0 = persistentMainModule20;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startLifetimeMultiplier = startSpeedMultiplier;
				break;
			}
			case 18:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule9 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule9, P_1);
					P_0 = persistentMainModule9;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startRotation, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startRotation = persistentMinMaxCurve;
				}
				break;
			}
			case 19:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule3 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule3, P_1);
					P_0 = persistentMainModule3;
				}
				bool startRotation3D = P_1.ReadBoolean();
				P_0.startRotation3D = startRotation3D;
				break;
			}
			case 20:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule37 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule37, P_1);
					P_0 = persistentMainModule37;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startRotationMultiplier = startSpeedMultiplier;
				break;
			}
			case 21:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule29 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule29, P_1);
					P_0 = persistentMainModule29;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startRotationX, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startRotationX = persistentMinMaxCurve;
				}
				break;
			}
			case 22:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule27 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule27, P_1);
					P_0 = persistentMainModule27;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startRotationXMultiplier = startSpeedMultiplier;
				break;
			}
			case 23:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule19 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule19, P_1);
					P_0 = persistentMainModule19;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startRotationY, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startRotationY = persistentMinMaxCurve;
				}
				break;
			}
			case 24:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule15 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule15, P_1);
					P_0 = persistentMainModule15;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startRotationYMultiplier = startSpeedMultiplier;
				break;
			}
			case 25:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule10 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule10, P_1);
					P_0 = persistentMainModule10;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startRotationZ, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startRotationZ = persistentMinMaxCurve;
				}
				break;
			}
			case 26:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule5 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule5, P_1);
					P_0 = persistentMainModule5;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startRotationZMultiplier = startSpeedMultiplier;
				break;
			}
			case 27:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule38 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule38, P_1);
					P_0 = persistentMainModule38;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startSize, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startSize = persistentMinMaxCurve;
				}
				break;
			}
			case 28:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule35 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule35, P_1);
					P_0 = persistentMainModule35;
				}
				bool startRotation3D = P_1.ReadBoolean();
				P_0.startSize3D = startRotation3D;
				break;
			}
			case 29:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule32 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule32, P_1);
					P_0 = persistentMainModule32;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startSizeMultiplier = startSpeedMultiplier;
				break;
			}
			case 30:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule28 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule28, P_1);
					P_0 = persistentMainModule28;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startSizeX, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startSizeX = persistentMinMaxCurve;
				}
				break;
			}
			case 31:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule25 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule25, P_1);
					P_0 = persistentMainModule25;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startSizeXMultiplier = startSpeedMultiplier;
				break;
			}
			case 32:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule21 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule21, P_1);
					P_0 = persistentMainModule21;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startSizeY, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startSizeY = persistentMinMaxCurve;
				}
				break;
			}
			case 33:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule18 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule18, P_1);
					P_0 = persistentMainModule18;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startSizeYMultiplier = startSpeedMultiplier;
				break;
			}
			case 34:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule14 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule14, P_1);
					P_0 = persistentMainModule14;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startSizeZ, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startSizeZ = persistentMinMaxCurve;
				}
				break;
			}
			case 35:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule11 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule11, P_1);
					P_0 = persistentMainModule11;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startSizeZMultiplier = startSpeedMultiplier;
				break;
			}
			case 36:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule7 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule7, P_1);
					P_0 = persistentMainModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.startSpeed, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.startSpeed = persistentMinMaxCurve;
				}
				break;
			}
			case 37:
			{
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule4 = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule4, P_1);
					P_0 = persistentMainModule4;
				}
				float startSpeedMultiplier = P_1.ReadSingle();
				P_0.startSpeedMultiplier = startSpeedMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentMainModule persistentMainModule = new PersistentMainModule();
					ProtoReader.NoteObject(persistentMainModule, P_1);
					P_0 = persistentMainModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentMainModule persistentMainModule39 = new PersistentMainModule();
			ProtoReader.NoteObject(persistentMainModule39, P_1);
			P_0 = persistentMainModule39;
		}
		return P_0;
	}

	private static void Write(PersistentLimitVelocityOverLifetimeModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLimitVelocityOverLifetimeModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLimitVelocityOverLifetimeModule), P_0.GetType());
		}
		float dampen = P_0.dampen;
		if (dampen != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dampen, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		PersistentMinMaxCurve limit = P_0.limit;
		if (limit != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(limit, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float limitMultiplier = P_0.limitMultiplier;
		if (limitMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(limitMultiplier, P_1);
		}
		PersistentMinMaxCurve limitX = P_0.limitX;
		if (limitX != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			BclHelpers.WriteNetObject(limitX, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float limitXMultiplier = P_0.limitXMultiplier;
		if (limitXMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(limitXMultiplier, P_1);
		}
		PersistentMinMaxCurve limitY = P_0.limitY;
		if (limitY != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			BclHelpers.WriteNetObject(limitY, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float limitYMultiplier = P_0.limitYMultiplier;
		if (limitYMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(limitYMultiplier, P_1);
		}
		PersistentMinMaxCurve limitZ = P_0.limitZ;
		if (limitZ != null)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
			BclHelpers.WriteNetObject(limitZ, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float limitZMultiplier = P_0.limitZMultiplier;
		if (limitZMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(limitZMultiplier, P_1);
		}
		bool separateAxes = P_0.separateAxes;
		if (separateAxes)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(separateAxes, P_1);
		}
		uint space = P_0.space;
		if (space != 0)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(space, P_1);
		}
	}

	private static PersistentLimitVelocityOverLifetimeModule Read(PersistentLimitVelocityOverLifetimeModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule3 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule3, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule3;
				}
				float dampen = P_1.ReadSingle();
				P_0.dampen = dampen;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule11 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule11, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule11;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.enabled = separateAxes;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule9 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule9, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule9;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.limit, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.limit = persistentMinMaxCurve;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule8 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule8, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule8;
				}
				float dampen = P_1.ReadSingle();
				P_0.limitMultiplier = dampen;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule2 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule2, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule2;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.limitX, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.limitX = persistentMinMaxCurve;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule6 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule6, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule6;
				}
				float dampen = P_1.ReadSingle();
				P_0.limitXMultiplier = dampen;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule12 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule12, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule12;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.limitY, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.limitY = persistentMinMaxCurve;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule5 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule5, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule5;
				}
				float dampen = P_1.ReadSingle();
				P_0.limitYMultiplier = dampen;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule13 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule13, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule13;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.limitZ, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.limitZ = persistentMinMaxCurve;
				}
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule10 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule10, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule10;
				}
				float dampen = P_1.ReadSingle();
				P_0.limitZMultiplier = dampen;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule7 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule7, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule7;
				}
				bool separateAxes = P_1.ReadBoolean();
				P_0.separateAxes = separateAxes;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule4 = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule4, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule4;
				}
				uint space = P_1.ReadUInt32();
				P_0.space = space;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule = new PersistentLimitVelocityOverLifetimeModule();
					ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule, P_1);
					P_0 = persistentLimitVelocityOverLifetimeModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLimitVelocityOverLifetimeModule persistentLimitVelocityOverLifetimeModule14 = new PersistentLimitVelocityOverLifetimeModule();
			ProtoReader.NoteObject(persistentLimitVelocityOverLifetimeModule14, P_1);
			P_0 = persistentLimitVelocityOverLifetimeModule14;
		}
		return P_0;
	}

	private static void Write(PersistentLightsModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentLightsModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentLightsModule), P_0.GetType());
		}
		bool alphaAffectsIntensity = P_0.alphaAffectsIntensity;
		if (alphaAffectsIntensity)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(alphaAffectsIntensity, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		PersistentMinMaxCurve intensity = P_0.intensity;
		if (intensity != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			BclHelpers.WriteNetObject(intensity, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float intensityMultiplier = P_0.intensityMultiplier;
		if (intensityMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(intensityMultiplier, P_1);
		}
		long light = P_0.light;
		if (light != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(light, P_1);
		}
		int maxLights = P_0.maxLights;
		if (maxLights != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(maxLights, P_1);
		}
		PersistentMinMaxCurve range = P_0.range;
		if (range != null)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
			BclHelpers.WriteNetObject(range, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float rangeMultiplier = P_0.rangeMultiplier;
		if (rangeMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rangeMultiplier, P_1);
		}
		float ratio = P_0.ratio;
		if (ratio != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(ratio, P_1);
		}
		bool sizeAffectsRange = P_0.sizeAffectsRange;
		if (sizeAffectsRange)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(sizeAffectsRange, P_1);
		}
		bool useParticleColor = P_0.useParticleColor;
		if (useParticleColor)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useParticleColor, P_1);
		}
		bool useRandomDistribution = P_0.useRandomDistribution;
		if (useRandomDistribution)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(useRandomDistribution, P_1);
		}
	}

	private static PersistentLightsModule Read(PersistentLightsModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule9 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule9, P_1);
					P_0 = persistentLightsModule9;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.alphaAffectsIntensity = enabled;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule2 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule2, P_1);
					P_0 = persistentLightsModule2;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule12 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule12, P_1);
					P_0 = persistentLightsModule12;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.intensity, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.intensity = persistentMinMaxCurve;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule5 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule5, P_1);
					P_0 = persistentLightsModule5;
				}
				float intensityMultiplier = P_1.ReadSingle();
				P_0.intensityMultiplier = intensityMultiplier;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule11 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule11, P_1);
					P_0 = persistentLightsModule11;
				}
				long light = P_1.ReadInt64();
				P_0.light = light;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule3 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule3, P_1);
					P_0 = persistentLightsModule3;
				}
				int maxLights = P_1.ReadInt32();
				P_0.maxLights = maxLights;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule8 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule8, P_1);
					P_0 = persistentLightsModule8;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.range, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.range = persistentMinMaxCurve;
				}
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule6 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule6, P_1);
					P_0 = persistentLightsModule6;
				}
				float intensityMultiplier = P_1.ReadSingle();
				P_0.rangeMultiplier = intensityMultiplier;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule13 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule13, P_1);
					P_0 = persistentLightsModule13;
				}
				float intensityMultiplier = P_1.ReadSingle();
				P_0.ratio = intensityMultiplier;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule10 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule10, P_1);
					P_0 = persistentLightsModule10;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.sizeAffectsRange = enabled;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule7 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule7, P_1);
					P_0 = persistentLightsModule7;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.useParticleColor = enabled;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule4 = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule4, P_1);
					P_0 = persistentLightsModule4;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.useRandomDistribution = enabled;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentLightsModule persistentLightsModule = new PersistentLightsModule();
					ProtoReader.NoteObject(persistentLightsModule, P_1);
					P_0 = persistentLightsModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentLightsModule persistentLightsModule14 = new PersistentLightsModule();
			ProtoReader.NoteObject(persistentLightsModule14, P_1);
			P_0 = persistentLightsModule14;
		}
		return P_0;
	}

	private static void Write(PersistentKeyframe P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentKeyframe))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentKeyframe), P_0.GetType());
		}
		float inTangent = P_0.inTangent;
		if (inTangent != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(inTangent, P_1);
		}
		float outTangent = P_0.outTangent;
		if (outTangent != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(outTangent, P_1);
		}
		int tangentMode = P_0.tangentMode;
		if (tangentMode != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(tangentMode, P_1);
		}
		float time = P_0.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
		float value = P_0.value;
		if (value != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(value, P_1);
		}
	}

	private static PersistentKeyframe Read(PersistentKeyframe P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentKeyframe persistentKeyframe6 = new PersistentKeyframe();
					ProtoReader.NoteObject(persistentKeyframe6, P_1);
					P_0 = persistentKeyframe6;
				}
				float outTangent = P_1.ReadSingle();
				P_0.inTangent = outTangent;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentKeyframe persistentKeyframe2 = new PersistentKeyframe();
					ProtoReader.NoteObject(persistentKeyframe2, P_1);
					P_0 = persistentKeyframe2;
				}
				float outTangent = P_1.ReadSingle();
				P_0.outTangent = outTangent;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentKeyframe persistentKeyframe5 = new PersistentKeyframe();
					ProtoReader.NoteObject(persistentKeyframe5, P_1);
					P_0 = persistentKeyframe5;
				}
				int tangentMode = P_1.ReadInt32();
				P_0.tangentMode = tangentMode;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentKeyframe persistentKeyframe3 = new PersistentKeyframe();
					ProtoReader.NoteObject(persistentKeyframe3, P_1);
					P_0 = persistentKeyframe3;
				}
				float outTangent = P_1.ReadSingle();
				P_0.time = outTangent;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentKeyframe persistentKeyframe4 = new PersistentKeyframe();
					ProtoReader.NoteObject(persistentKeyframe4, P_1);
					P_0 = persistentKeyframe4;
				}
				float outTangent = P_1.ReadSingle();
				P_0.value = outTangent;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentKeyframe persistentKeyframe = new PersistentKeyframe();
					ProtoReader.NoteObject(persistentKeyframe, P_1);
					P_0 = persistentKeyframe;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentKeyframe persistentKeyframe7 = new PersistentKeyframe();
			ProtoReader.NoteObject(persistentKeyframe7, P_1);
			P_0 = persistentKeyframe7;
		}
		return P_0;
	}

	private static void Write(PersistentInheritVelocityModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentInheritVelocityModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentInheritVelocityModule), P_0.GetType());
		}
		PersistentMinMaxCurve curve = P_0.curve;
		if (curve != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(curve, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float curveMultiplier = P_0.curveMultiplier;
		if (curveMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(curveMultiplier, P_1);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		uint mode = P_0.mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(mode, P_1);
		}
	}

	private static PersistentInheritVelocityModule Read(PersistentInheritVelocityModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentInheritVelocityModule persistentInheritVelocityModule3 = new PersistentInheritVelocityModule();
					ProtoReader.NoteObject(persistentInheritVelocityModule3, P_1);
					P_0 = persistentInheritVelocityModule3;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.curve, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.curve = persistentMinMaxCurve;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentInheritVelocityModule persistentInheritVelocityModule5 = new PersistentInheritVelocityModule();
					ProtoReader.NoteObject(persistentInheritVelocityModule5, P_1);
					P_0 = persistentInheritVelocityModule5;
				}
				float curveMultiplier = P_1.ReadSingle();
				P_0.curveMultiplier = curveMultiplier;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentInheritVelocityModule persistentInheritVelocityModule2 = new PersistentInheritVelocityModule();
					ProtoReader.NoteObject(persistentInheritVelocityModule2, P_1);
					P_0 = persistentInheritVelocityModule2;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentInheritVelocityModule persistentInheritVelocityModule4 = new PersistentInheritVelocityModule();
					ProtoReader.NoteObject(persistentInheritVelocityModule4, P_1);
					P_0 = persistentInheritVelocityModule4;
				}
				uint mode = P_1.ReadUInt32();
				P_0.mode = mode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentInheritVelocityModule persistentInheritVelocityModule = new PersistentInheritVelocityModule();
					ProtoReader.NoteObject(persistentInheritVelocityModule, P_1);
					P_0 = persistentInheritVelocityModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentInheritVelocityModule persistentInheritVelocityModule6 = new PersistentInheritVelocityModule();
			ProtoReader.NoteObject(persistentInheritVelocityModule6, P_1);
			P_0 = persistentInheritVelocityModule6;
		}
		return P_0;
	}

	private static void Write(PersistentGradient P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentGradient))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentGradient), P_0.GetType());
		}
		GradientAlphaKey[] alphaKeys = P_0.alphaKeys;
		if (alphaKeys != null)
		{
			GradientAlphaKey[] array = alphaKeys;
			foreach (GradientAlphaKey gradientAlphaKey in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(gradientAlphaKey, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		GradientColorKey[] colorKeys = P_0.colorKeys;
		if (colorKeys != null)
		{
			GradientColorKey[] array2 = colorKeys;
			foreach (GradientColorKey gradientColorKey in array2)
			{
				ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(gradientColorKey, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		uint mode = P_0.mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(mode, P_1);
		}
	}

	private static PersistentGradient Read(PersistentGradient P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentGradient persistentGradient3 = new PersistentGradient();
					ProtoReader.NoteObject(persistentGradient3, P_1);
					P_0 = persistentGradient3;
				}
				GradientAlphaKey[] alphaKeys = P_0.alphaKeys;
				List<GradientAlphaKey> list2 = new List<GradientAlphaKey>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientAlphaKey item2 = Read(default(GradientAlphaKey), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item2);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				GradientAlphaKey[] array2 = new GradientAlphaKey[(fieldNumber = ((alphaKeys != null) ? alphaKeys.Length : 0)) + list2.Count];
				if (fieldNumber != 0)
				{
					alphaKeys.CopyTo(array2, 0);
				}
				list2.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.alphaKeys = array2;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentGradient persistentGradient2 = new PersistentGradient();
					ProtoReader.NoteObject(persistentGradient2, P_1);
					P_0 = persistentGradient2;
				}
				GradientColorKey[] colorKeys = P_0.colorKeys;
				List<GradientColorKey> list = new List<GradientColorKey>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientColorKey item = Read(default(GradientColorKey), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				GradientColorKey[] array = new GradientColorKey[(fieldNumber = ((colorKeys != null) ? colorKeys.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					colorKeys.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.colorKeys = array;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentGradient persistentGradient4 = new PersistentGradient();
					ProtoReader.NoteObject(persistentGradient4, P_1);
					P_0 = persistentGradient4;
				}
				uint mode = P_1.ReadUInt32();
				P_0.mode = mode;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentGradient persistentGradient = new PersistentGradient();
					ProtoReader.NoteObject(persistentGradient, P_1);
					P_0 = persistentGradient;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentGradient persistentGradient5 = new PersistentGradient();
			ProtoReader.NoteObject(persistentGradient5, P_1);
			P_0 = persistentGradient5;
		}
		return P_0;
	}

	private static void Write(PersistentForceOverLifetimeModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentForceOverLifetimeModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentForceOverLifetimeModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		bool randomized = P_0.randomized;
		if (randomized)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(randomized, P_1);
		}
		uint space = P_0.space;
		if (space != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(space, P_1);
		}
		PersistentMinMaxCurve x = P_0.x;
		if (x != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			BclHelpers.WriteNetObject(x, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float xMultiplier = P_0.xMultiplier;
		if (xMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(xMultiplier, P_1);
		}
		PersistentMinMaxCurve y = P_0.y;
		if (y != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			BclHelpers.WriteNetObject(y, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float yMultiplier = P_0.yMultiplier;
		if (yMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(yMultiplier, P_1);
		}
		PersistentMinMaxCurve z = P_0.z;
		if (z != null)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
			BclHelpers.WriteNetObject(z, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		float zMultiplier = P_0.zMultiplier;
		if (zMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(zMultiplier, P_1);
		}
	}

	private static PersistentForceOverLifetimeModule Read(PersistentForceOverLifetimeModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule10 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule10, P_1);
					P_0 = persistentForceOverLifetimeModule10;
				}
				bool randomized = P_1.ReadBoolean();
				P_0.enabled = randomized;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule2 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule2, P_1);
					P_0 = persistentForceOverLifetimeModule2;
				}
				bool randomized = P_1.ReadBoolean();
				P_0.randomized = randomized;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule8 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule8, P_1);
					P_0 = persistentForceOverLifetimeModule8;
				}
				uint space = P_1.ReadUInt32();
				P_0.space = space;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule9 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule9, P_1);
					P_0 = persistentForceOverLifetimeModule9;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.x, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.x = persistentMinMaxCurve;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule6 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule6, P_1);
					P_0 = persistentForceOverLifetimeModule6;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.xMultiplier = yMultiplier;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule5 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule5, P_1);
					P_0 = persistentForceOverLifetimeModule5;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.y, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.y = persistentMinMaxCurve;
				}
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule3 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule3, P_1);
					P_0 = persistentForceOverLifetimeModule3;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.yMultiplier = yMultiplier;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule7 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule7, P_1);
					P_0 = persistentForceOverLifetimeModule7;
				}
				PersistentMinMaxCurve persistentMinMaxCurve = (PersistentMinMaxCurve)BclHelpers.ReadNetObject(P_0.z, P_1, 258, typeof(PersistentMinMaxCurve), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxCurve != null)
				{
					P_0.z = persistentMinMaxCurve;
				}
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule4 = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule4, P_1);
					P_0 = persistentForceOverLifetimeModule4;
				}
				float yMultiplier = P_1.ReadSingle();
				P_0.zMultiplier = yMultiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentForceOverLifetimeModule persistentForceOverLifetimeModule = new PersistentForceOverLifetimeModule();
					ProtoReader.NoteObject(persistentForceOverLifetimeModule, P_1);
					P_0 = persistentForceOverLifetimeModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentForceOverLifetimeModule persistentForceOverLifetimeModule11 = new PersistentForceOverLifetimeModule();
			ProtoReader.NoteObject(persistentForceOverLifetimeModule11, P_1);
			P_0 = persistentForceOverLifetimeModule11;
		}
		return P_0;
	}

	private static void Write(PersistentExternalForcesModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentExternalForcesModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentExternalForcesModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		float multiplier = P_0.multiplier;
		if (multiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(multiplier, P_1);
		}
	}

	private static PersistentExternalForcesModule Read(PersistentExternalForcesModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentExternalForcesModule persistentExternalForcesModule2 = new PersistentExternalForcesModule();
					ProtoReader.NoteObject(persistentExternalForcesModule2, P_1);
					P_0 = persistentExternalForcesModule2;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentExternalForcesModule persistentExternalForcesModule3 = new PersistentExternalForcesModule();
					ProtoReader.NoteObject(persistentExternalForcesModule3, P_1);
					P_0 = persistentExternalForcesModule3;
				}
				float multiplier = P_1.ReadSingle();
				P_0.multiplier = multiplier;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentExternalForcesModule persistentExternalForcesModule = new PersistentExternalForcesModule();
					ProtoReader.NoteObject(persistentExternalForcesModule, P_1);
					P_0 = persistentExternalForcesModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentExternalForcesModule persistentExternalForcesModule4 = new PersistentExternalForcesModule();
			ProtoReader.NoteObject(persistentExternalForcesModule4, P_1);
			P_0 = persistentExternalForcesModule4;
		}
		return P_0;
	}

	private static void Write(PersistentEmitParams P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentEmitParams))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentEmitParams), P_0.GetType());
		}
		float angularVelocity = P_0.angularVelocity;
		if (angularVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angularVelocity, P_1);
		}
		Vector3 angularVelocity3D = P_0.angularVelocity3D;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(angularVelocity3D, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		bool applyShapeToPosition = P_0.applyShapeToPosition;
		if (applyShapeToPosition)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(applyShapeToPosition, P_1);
		}
		Vector3 axisOfRotation = P_0.axisOfRotation;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(axisOfRotation, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 position = P_0.position;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(position, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		uint randomSeed = P_0.randomSeed;
		if (randomSeed != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(randomSeed, P_1);
		}
		float rotation = P_0.rotation;
		if (rotation != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rotation, P_1);
		}
		Vector3 rotation3D = P_0.rotation3D;
		ProtoWriter.WriteFieldHeader(8, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(rotation3D, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color32 startColor = P_0.startColor;
		ProtoWriter.WriteFieldHeader(9, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(startColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float startLifetime = P_0.startLifetime;
		if (startLifetime != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startLifetime, P_1);
		}
		float startSize = P_0.startSize;
		if (startSize != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(startSize, P_1);
		}
		Vector3 startSize3D = P_0.startSize3D;
		ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(startSize3D, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 velocity = P_0.velocity;
		ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(velocity, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentEmitParams Read(PersistentEmitParams P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams3 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams3, P_1);
					P_0 = persistentEmitParams3;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.angularVelocity = angularVelocity;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams6 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams6, P_1);
					P_0 = persistentEmitParams6;
				}
				Vector3 angularVelocity3D = P_0.angularVelocity3D;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(angularVelocity3D, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector2;
				P_0.angularVelocity3D = velocity2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams14 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams14, P_1);
					P_0 = persistentEmitParams14;
				}
				bool applyShapeToPosition = P_1.ReadBoolean();
				P_0.applyShapeToPosition = applyShapeToPosition;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams12 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams12, P_1);
					P_0 = persistentEmitParams12;
				}
				Vector3 axisOfRotation = P_0.axisOfRotation;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector6 = Read(axisOfRotation, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector6;
				P_0.axisOfRotation = velocity2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams8 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams8, P_1);
					P_0 = persistentEmitParams8;
				}
				Vector3 position = P_0.position;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector4 = Read(position, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector4;
				P_0.position = velocity2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams5 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams5, P_1);
					P_0 = persistentEmitParams5;
				}
				uint randomSeed = P_1.ReadUInt32();
				P_0.randomSeed = randomSeed;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams11 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams11, P_1);
					P_0 = persistentEmitParams11;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.rotation = angularVelocity;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams9 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams9, P_1);
					P_0 = persistentEmitParams9;
				}
				Vector3 rotation3D = P_0.rotation3D;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector5 = Read(rotation3D, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector5;
				P_0.rotation3D = velocity2;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams2 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams2, P_1);
					P_0 = persistentEmitParams2;
				}
				Color32 startColor = P_0.startColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color32 color = Read(startColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color32 startColor2 = color;
				P_0.startColor = startColor2;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams13 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams13, P_1);
					P_0 = persistentEmitParams13;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.startLifetime = angularVelocity;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams10 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams10, P_1);
					P_0 = persistentEmitParams10;
				}
				float angularVelocity = P_1.ReadSingle();
				P_0.startSize = angularVelocity;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams7 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams7, P_1);
					P_0 = persistentEmitParams7;
				}
				Vector3 startSize3D = P_0.startSize3D;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(startSize3D, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector3;
				P_0.startSize3D = velocity2;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams4 = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams4, P_1);
					P_0 = persistentEmitParams4;
				}
				Vector3 velocity = P_0.velocity;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(velocity, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 velocity2 = vector;
				P_0.velocity = velocity2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentEmitParams persistentEmitParams = new PersistentEmitParams();
					ProtoReader.NoteObject(persistentEmitParams, P_1);
					P_0 = persistentEmitParams;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentEmitParams persistentEmitParams15 = new PersistentEmitParams();
			ProtoReader.NoteObject(persistentEmitParams15, P_1);
			P_0 = persistentEmitParams15;
		}
		return P_0;
	}

	private static void Write(PersistentCustomDataModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentCustomDataModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentCustomDataModule), P_0.GetType());
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
	}

	private static PersistentCustomDataModule Read(PersistentCustomDataModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentCustomDataModule persistentCustomDataModule = new PersistentCustomDataModule();
					ProtoReader.NoteObject(persistentCustomDataModule, P_1);
					P_0 = persistentCustomDataModule;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
			}
			else
			{
				if (P_0 == null)
				{
					PersistentCustomDataModule persistentCustomDataModule2 = new PersistentCustomDataModule();
					ProtoReader.NoteObject(persistentCustomDataModule2, P_1);
					P_0 = persistentCustomDataModule2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentCustomDataModule persistentCustomDataModule3 = new PersistentCustomDataModule();
			ProtoReader.NoteObject(persistentCustomDataModule3, P_1);
			P_0 = persistentCustomDataModule3;
		}
		return P_0;
	}

	private static void Write(PersistentColorOverLifetimeModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentColorOverLifetimeModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentColorOverLifetimeModule), P_0.GetType());
		}
		PersistentMinMaxGradient color = P_0.color;
		if (color != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(color, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
	}

	private static PersistentColorOverLifetimeModule Read(PersistentColorOverLifetimeModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentColorOverLifetimeModule persistentColorOverLifetimeModule2 = new PersistentColorOverLifetimeModule();
					ProtoReader.NoteObject(persistentColorOverLifetimeModule2, P_1);
					P_0 = persistentColorOverLifetimeModule2;
				}
				PersistentMinMaxGradient persistentMinMaxGradient = (PersistentMinMaxGradient)BclHelpers.ReadNetObject(P_0.color, P_1, 258, typeof(PersistentMinMaxGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxGradient != null)
				{
					P_0.color = persistentMinMaxGradient;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentColorOverLifetimeModule persistentColorOverLifetimeModule3 = new PersistentColorOverLifetimeModule();
					ProtoReader.NoteObject(persistentColorOverLifetimeModule3, P_1);
					P_0 = persistentColorOverLifetimeModule3;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentColorOverLifetimeModule persistentColorOverLifetimeModule = new PersistentColorOverLifetimeModule();
					ProtoReader.NoteObject(persistentColorOverLifetimeModule, P_1);
					P_0 = persistentColorOverLifetimeModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentColorOverLifetimeModule persistentColorOverLifetimeModule4 = new PersistentColorOverLifetimeModule();
			ProtoReader.NoteObject(persistentColorOverLifetimeModule4, P_1);
			P_0 = persistentColorOverLifetimeModule4;
		}
		return P_0;
	}

	private static void Write(PersistentColorBySpeedModule P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentColorBySpeedModule))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentColorBySpeedModule), P_0.GetType());
		}
		PersistentMinMaxGradient color = P_0.color;
		if (color != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(color, P_1, 258, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		bool enabled = P_0.enabled;
		if (enabled)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(enabled, P_1);
		}
		Vector2 range = P_0.range;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(range, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentColorBySpeedModule Read(PersistentColorBySpeedModule P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentColorBySpeedModule persistentColorBySpeedModule3 = new PersistentColorBySpeedModule();
					ProtoReader.NoteObject(persistentColorBySpeedModule3, P_1);
					P_0 = persistentColorBySpeedModule3;
				}
				PersistentMinMaxGradient persistentMinMaxGradient = (PersistentMinMaxGradient)BclHelpers.ReadNetObject(P_0.color, P_1, 258, typeof(PersistentMinMaxGradient), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentMinMaxGradient != null)
				{
					P_0.color = persistentMinMaxGradient;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentColorBySpeedModule persistentColorBySpeedModule2 = new PersistentColorBySpeedModule();
					ProtoReader.NoteObject(persistentColorBySpeedModule2, P_1);
					P_0 = persistentColorBySpeedModule2;
				}
				bool enabled = P_1.ReadBoolean();
				P_0.enabled = enabled;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentColorBySpeedModule persistentColorBySpeedModule4 = new PersistentColorBySpeedModule();
					ProtoReader.NoteObject(persistentColorBySpeedModule4, P_1);
					P_0 = persistentColorBySpeedModule4;
				}
				Vector2 range = P_0.range;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(range, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 range2 = vector;
				P_0.range = range2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentColorBySpeedModule persistentColorBySpeedModule = new PersistentColorBySpeedModule();
					ProtoReader.NoteObject(persistentColorBySpeedModule, P_1);
					P_0 = persistentColorBySpeedModule;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentColorBySpeedModule persistentColorBySpeedModule5 = new PersistentColorBySpeedModule();
			ProtoReader.NoteObject(persistentColorBySpeedModule5, P_1);
			P_0 = persistentColorBySpeedModule5;
		}
		return P_0;
	}

	private static void Write(PersistentBurst P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentBurst))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentBurst), P_0.GetType());
		}
		int cycleCount = P_0.cycleCount;
		if (cycleCount != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(cycleCount, P_1);
		}
		short maxCount = P_0.maxCount;
		if (maxCount != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt16(maxCount, P_1);
		}
		short minCount = P_0.minCount;
		if (minCount != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt16(minCount, P_1);
		}
		float repeatInterval = P_0.repeatInterval;
		if (repeatInterval != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(repeatInterval, P_1);
		}
		float time = P_0.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
	}

	private static PersistentBurst Read(PersistentBurst P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentBurst persistentBurst6 = new PersistentBurst();
					ProtoReader.NoteObject(persistentBurst6, P_1);
					P_0 = persistentBurst6;
				}
				int cycleCount = P_1.ReadInt32();
				P_0.cycleCount = cycleCount;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentBurst persistentBurst2 = new PersistentBurst();
					ProtoReader.NoteObject(persistentBurst2, P_1);
					P_0 = persistentBurst2;
				}
				short maxCount = P_1.ReadInt16();
				P_0.maxCount = maxCount;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentBurst persistentBurst5 = new PersistentBurst();
					ProtoReader.NoteObject(persistentBurst5, P_1);
					P_0 = persistentBurst5;
				}
				short maxCount = P_1.ReadInt16();
				P_0.minCount = maxCount;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentBurst persistentBurst3 = new PersistentBurst();
					ProtoReader.NoteObject(persistentBurst3, P_1);
					P_0 = persistentBurst3;
				}
				float repeatInterval = P_1.ReadSingle();
				P_0.repeatInterval = repeatInterval;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentBurst persistentBurst4 = new PersistentBurst();
					ProtoReader.NoteObject(persistentBurst4, P_1);
					P_0 = persistentBurst4;
				}
				float repeatInterval = P_1.ReadSingle();
				P_0.time = repeatInterval;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentBurst persistentBurst = new PersistentBurst();
					ProtoReader.NoteObject(persistentBurst, P_1);
					P_0 = persistentBurst;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentBurst persistentBurst7 = new PersistentBurst();
			ProtoReader.NoteObject(persistentBurst7, P_1);
			P_0 = persistentBurst7;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAnimationCurve[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAnimationCurve[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAnimationCurve[]>), P_0.GetType());
		}
		PersistentAnimationCurve[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAnimationCurve[] array = value;
		foreach (PersistentAnimationCurve obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAnimationCurve[]> Read(PrimitiveContract<PersistentAnimationCurve[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimationCurve[]> primitiveContract = new PrimitiveContract<PersistentAnimationCurve[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAnimationCurve[] value = P_0.Value;
				List<PersistentAnimationCurve> list = new List<PersistentAnimationCurve>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimationCurve item = (PersistentAnimationCurve)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAnimationCurve[] array = new PersistentAnimationCurve[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimationCurve[]> primitiveContract2 = new PrimitiveContract<PersistentAnimationCurve[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAnimationCurve[]> primitiveContract3 = new PrimitiveContract<PersistentAnimationCurve[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract P_0, ProtoWriter P_1)
	{
		PrimitiveContract<bool> obj = P_0 as PrimitiveContract<bool>;
		if (obj != null)
		{
			ProtoWriter.WriteFieldHeader(101, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<char> obj2 = P_0 as PrimitiveContract<char>;
		if (obj2 != null)
		{
			ProtoWriter.WriteFieldHeader(102, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj2, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<byte> obj3 = P_0 as PrimitiveContract<byte>;
		if (obj3 != null)
		{
			ProtoWriter.WriteFieldHeader(103, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj3, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<short> obj4 = P_0 as PrimitiveContract<short>;
		if (obj4 != null)
		{
			ProtoWriter.WriteFieldHeader(104, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj4, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<int> obj5 = P_0 as PrimitiveContract<int>;
		if (obj5 != null)
		{
			ProtoWriter.WriteFieldHeader(105, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj5, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<long> obj6 = P_0 as PrimitiveContract<long>;
		if (obj6 != null)
		{
			ProtoWriter.WriteFieldHeader(106, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj6, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<ushort> obj7 = P_0 as PrimitiveContract<ushort>;
		if (obj7 != null)
		{
			ProtoWriter.WriteFieldHeader(107, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj7, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<uint> obj8 = P_0 as PrimitiveContract<uint>;
		if (obj8 != null)
		{
			ProtoWriter.WriteFieldHeader(108, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj8, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<ulong> obj9 = P_0 as PrimitiveContract<ulong>;
		if (obj9 != null)
		{
			ProtoWriter.WriteFieldHeader(110, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj9, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<string> obj10 = P_0 as PrimitiveContract<string>;
		if (obj10 != null)
		{
			ProtoWriter.WriteFieldHeader(111, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj10, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<float> obj11 = P_0 as PrimitiveContract<float>;
		if (obj11 != null)
		{
			ProtoWriter.WriteFieldHeader(112, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj11, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<double> obj12 = P_0 as PrimitiveContract<double>;
		if (obj12 != null)
		{
			ProtoWriter.WriteFieldHeader(113, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj12, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<decimal> obj13 = P_0 as PrimitiveContract<decimal>;
		if (obj13 != null)
		{
			ProtoWriter.WriteFieldHeader(114, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj13, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<bool[]> obj14 = P_0 as PrimitiveContract<bool[]>;
		if (obj14 != null)
		{
			ProtoWriter.WriteFieldHeader(115, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj14, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<char[]> obj15 = P_0 as PrimitiveContract<char[]>;
		if (obj15 != null)
		{
			ProtoWriter.WriteFieldHeader(116, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj15, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<byte[]> obj16 = P_0 as PrimitiveContract<byte[]>;
		if (obj16 != null)
		{
			ProtoWriter.WriteFieldHeader(117, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj16, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<short[]> obj17 = P_0 as PrimitiveContract<short[]>;
		if (obj17 != null)
		{
			ProtoWriter.WriteFieldHeader(118, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj17, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<int[]> obj18 = P_0 as PrimitiveContract<int[]>;
		if (obj18 != null)
		{
			ProtoWriter.WriteFieldHeader(119, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj18, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<long[]> obj19 = P_0 as PrimitiveContract<long[]>;
		if (obj19 != null)
		{
			ProtoWriter.WriteFieldHeader(120, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj19, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<ushort[]> obj20 = P_0 as PrimitiveContract<ushort[]>;
		if (obj20 != null)
		{
			ProtoWriter.WriteFieldHeader(121, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj20, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<uint[]> obj21 = P_0 as PrimitiveContract<uint[]>;
		if (obj21 != null)
		{
			ProtoWriter.WriteFieldHeader(122, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj21, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<ulong[]> obj22 = P_0 as PrimitiveContract<ulong[]>;
		if (obj22 != null)
		{
			ProtoWriter.WriteFieldHeader(123, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj22, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<string[]> obj23 = P_0 as PrimitiveContract<string[]>;
		if (obj23 != null)
		{
			ProtoWriter.WriteFieldHeader(124, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj23, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<float[]> obj24 = P_0 as PrimitiveContract<float[]>;
		if (obj24 != null)
		{
			ProtoWriter.WriteFieldHeader(125, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj24, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<double[]> obj25 = P_0 as PrimitiveContract<double[]>;
		if (obj25 != null)
		{
			ProtoWriter.WriteFieldHeader(126, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj25, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<decimal[]> obj26 = P_0 as PrimitiveContract<decimal[]>;
		if (obj26 != null)
		{
			ProtoWriter.WriteFieldHeader(127, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj26, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<Color> obj27 = P_0 as PrimitiveContract<Color>;
		if (obj27 != null)
		{
			ProtoWriter.WriteFieldHeader(128, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj27, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<Color[]> obj28 = P_0 as PrimitiveContract<Color[]>;
		if (obj28 != null)
		{
			ProtoWriter.WriteFieldHeader(129, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj28, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<Vector3> obj29 = P_0 as PrimitiveContract<Vector3>;
		if (obj29 != null)
		{
			ProtoWriter.WriteFieldHeader(130, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj29, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<Vector3[]> obj30 = P_0 as PrimitiveContract<Vector3[]>;
		if (obj30 != null)
		{
			ProtoWriter.WriteFieldHeader(131, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj30, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<Vector4> obj31 = P_0 as PrimitiveContract<Vector4>;
		if (obj31 != null)
		{
			ProtoWriter.WriteFieldHeader(132, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj31, P_1);
			ProtoWriter.EndSubItem(token, P_1);
			return;
		}
		PrimitiveContract<Vector4[]> obj32 = P_0 as PrimitiveContract<Vector4[]>;
		if (obj32 != null)
		{
			ProtoWriter.WriteFieldHeader(133, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(obj32, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		else if (P_0.GetType() != typeof(PrimitiveContract))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract), P_0.GetType());
		}
	}

	private static PrimitiveContract Read(PrimitiveContract P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 101:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<bool>))
				{
					PrimitiveContract from26 = P_0;
					PrimitiveContract<bool> primitiveContract51 = new PrimitiveContract<bool>();
					ProtoReader.NoteObject(primitiveContract51, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from26, primitiveContract51);
				}
				PrimitiveContract<bool> obj26 = (PrimitiveContract<bool>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<bool> primitiveContract52 = Read(obj26, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract52;
				break;
			}
			case 102:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<char>))
				{
					PrimitiveContract from4 = P_0;
					PrimitiveContract<char> primitiveContract7 = new PrimitiveContract<char>();
					ProtoReader.NoteObject(primitiveContract7, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from4, primitiveContract7);
				}
				PrimitiveContract<char> obj4 = (PrimitiveContract<char>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<char> primitiveContract8 = Read(obj4, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract8;
				break;
			}
			case 103:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<byte>))
				{
					PrimitiveContract from20 = P_0;
					PrimitiveContract<byte> primitiveContract39 = new PrimitiveContract<byte>();
					ProtoReader.NoteObject(primitiveContract39, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from20, primitiveContract39);
				}
				PrimitiveContract<byte> obj20 = (PrimitiveContract<byte>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<byte> primitiveContract40 = Read(obj20, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract40;
				break;
			}
			case 104:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<short>))
				{
					PrimitiveContract from14 = P_0;
					PrimitiveContract<short> primitiveContract27 = new PrimitiveContract<short>();
					ProtoReader.NoteObject(primitiveContract27, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from14, primitiveContract27);
				}
				PrimitiveContract<short> obj14 = (PrimitiveContract<short>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<short> primitiveContract28 = Read(obj14, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract28;
				break;
			}
			case 105:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<int>))
				{
					PrimitiveContract from32 = P_0;
					PrimitiveContract<int> primitiveContract63 = new PrimitiveContract<int>();
					ProtoReader.NoteObject(primitiveContract63, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from32, primitiveContract63);
				}
				PrimitiveContract<int> obj32 = (PrimitiveContract<int>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<int> primitiveContract64 = Read(obj32, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract64;
				break;
			}
			case 106:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<long>))
				{
					PrimitiveContract from17 = P_0;
					PrimitiveContract<long> primitiveContract33 = new PrimitiveContract<long>();
					ProtoReader.NoteObject(primitiveContract33, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from17, primitiveContract33);
				}
				PrimitiveContract<long> obj17 = (PrimitiveContract<long>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<long> primitiveContract34 = Read(obj17, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract34;
				break;
			}
			case 107:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<ushort>))
				{
					PrimitiveContract from18 = P_0;
					PrimitiveContract<ushort> primitiveContract35 = new PrimitiveContract<ushort>();
					ProtoReader.NoteObject(primitiveContract35, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from18, primitiveContract35);
				}
				PrimitiveContract<ushort> obj18 = (PrimitiveContract<ushort>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<ushort> primitiveContract36 = Read(obj18, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract36;
				break;
			}
			case 108:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<uint>))
				{
					PrimitiveContract from30 = P_0;
					PrimitiveContract<uint> primitiveContract59 = new PrimitiveContract<uint>();
					ProtoReader.NoteObject(primitiveContract59, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from30, primitiveContract59);
				}
				PrimitiveContract<uint> obj30 = (PrimitiveContract<uint>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<uint> primitiveContract60 = Read(obj30, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract60;
				break;
			}
			case 110:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<ulong>))
				{
					PrimitiveContract from2 = P_0;
					PrimitiveContract<ulong> primitiveContract3 = new PrimitiveContract<ulong>();
					ProtoReader.NoteObject(primitiveContract3, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from2, primitiveContract3);
				}
				PrimitiveContract<ulong> obj2 = (PrimitiveContract<ulong>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<ulong> primitiveContract4 = Read(obj2, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract4;
				break;
			}
			case 111:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<string>))
				{
					PrimitiveContract from12 = P_0;
					PrimitiveContract<string> primitiveContract23 = new PrimitiveContract<string>();
					ProtoReader.NoteObject(primitiveContract23, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from12, primitiveContract23);
				}
				PrimitiveContract<string> obj12 = (PrimitiveContract<string>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<string> primitiveContract24 = Read(obj12, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract24;
				break;
			}
			case 112:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<float>))
				{
					PrimitiveContract from25 = P_0;
					PrimitiveContract<float> primitiveContract49 = new PrimitiveContract<float>();
					ProtoReader.NoteObject(primitiveContract49, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from25, primitiveContract49);
				}
				PrimitiveContract<float> obj25 = (PrimitiveContract<float>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<float> primitiveContract50 = Read(obj25, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract50;
				break;
			}
			case 113:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<double>))
				{
					PrimitiveContract from21 = P_0;
					PrimitiveContract<double> primitiveContract41 = new PrimitiveContract<double>();
					ProtoReader.NoteObject(primitiveContract41, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from21, primitiveContract41);
				}
				PrimitiveContract<double> obj21 = (PrimitiveContract<double>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<double> primitiveContract42 = Read(obj21, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract42;
				break;
			}
			case 114:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<decimal>))
				{
					PrimitiveContract from5 = P_0;
					PrimitiveContract<decimal> primitiveContract9 = new PrimitiveContract<decimal>();
					ProtoReader.NoteObject(primitiveContract9, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from5, primitiveContract9);
				}
				PrimitiveContract<decimal> obj5 = (PrimitiveContract<decimal>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<decimal> primitiveContract10 = Read(obj5, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract10;
				break;
			}
			case 115:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<bool[]>))
				{
					PrimitiveContract from = P_0;
					PrimitiveContract<bool[]> primitiveContract = new PrimitiveContract<bool[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from, primitiveContract);
				}
				PrimitiveContract<bool[]> obj = (PrimitiveContract<bool[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<bool[]> primitiveContract2 = Read(obj, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract2;
				break;
			}
			case 116:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<char[]>))
				{
					PrimitiveContract from28 = P_0;
					PrimitiveContract<char[]> primitiveContract55 = new PrimitiveContract<char[]>();
					ProtoReader.NoteObject(primitiveContract55, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from28, primitiveContract55);
				}
				PrimitiveContract<char[]> obj28 = (PrimitiveContract<char[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<char[]> primitiveContract56 = Read(obj28, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract56;
				break;
			}
			case 117:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<byte[]>))
				{
					PrimitiveContract from16 = P_0;
					PrimitiveContract<byte[]> primitiveContract31 = new PrimitiveContract<byte[]>();
					ProtoReader.NoteObject(primitiveContract31, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from16, primitiveContract31);
				}
				PrimitiveContract<byte[]> obj16 = (PrimitiveContract<byte[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<byte[]> primitiveContract32 = Read(obj16, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract32;
				break;
			}
			case 118:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<short[]>))
				{
					PrimitiveContract from9 = P_0;
					PrimitiveContract<short[]> primitiveContract17 = new PrimitiveContract<short[]>();
					ProtoReader.NoteObject(primitiveContract17, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from9, primitiveContract17);
				}
				PrimitiveContract<short[]> obj9 = (PrimitiveContract<short[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<short[]> primitiveContract18 = Read(obj9, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract18;
				break;
			}
			case 119:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<int[]>))
				{
					PrimitiveContract from10 = P_0;
					PrimitiveContract<int[]> primitiveContract19 = new PrimitiveContract<int[]>();
					ProtoReader.NoteObject(primitiveContract19, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from10, primitiveContract19);
				}
				PrimitiveContract<int[]> obj10 = (PrimitiveContract<int[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<int[]> primitiveContract20 = Read(obj10, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract20;
				break;
			}
			case 120:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<long[]>))
				{
					PrimitiveContract from29 = P_0;
					PrimitiveContract<long[]> primitiveContract57 = new PrimitiveContract<long[]>();
					ProtoReader.NoteObject(primitiveContract57, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from29, primitiveContract57);
				}
				PrimitiveContract<long[]> obj29 = (PrimitiveContract<long[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<long[]> primitiveContract58 = Read(obj29, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract58;
				break;
			}
			case 121:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<ushort[]>))
				{
					PrimitiveContract from24 = P_0;
					PrimitiveContract<ushort[]> primitiveContract47 = new PrimitiveContract<ushort[]>();
					ProtoReader.NoteObject(primitiveContract47, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from24, primitiveContract47);
				}
				PrimitiveContract<ushort[]> obj24 = (PrimitiveContract<ushort[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<ushort[]> primitiveContract48 = Read(obj24, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract48;
				break;
			}
			case 122:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<uint[]>))
				{
					PrimitiveContract from22 = P_0;
					PrimitiveContract<uint[]> primitiveContract43 = new PrimitiveContract<uint[]>();
					ProtoReader.NoteObject(primitiveContract43, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from22, primitiveContract43);
				}
				PrimitiveContract<uint[]> obj22 = (PrimitiveContract<uint[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<uint[]> primitiveContract44 = Read(obj22, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract44;
				break;
			}
			case 123:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<ulong[]>))
				{
					PrimitiveContract from13 = P_0;
					PrimitiveContract<ulong[]> primitiveContract25 = new PrimitiveContract<ulong[]>();
					ProtoReader.NoteObject(primitiveContract25, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from13, primitiveContract25);
				}
				PrimitiveContract<ulong[]> obj13 = (PrimitiveContract<ulong[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<ulong[]> primitiveContract26 = Read(obj13, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract26;
				break;
			}
			case 124:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<string[]>))
				{
					PrimitiveContract from8 = P_0;
					PrimitiveContract<string[]> primitiveContract15 = new PrimitiveContract<string[]>();
					ProtoReader.NoteObject(primitiveContract15, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from8, primitiveContract15);
				}
				PrimitiveContract<string[]> obj8 = (PrimitiveContract<string[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<string[]> primitiveContract16 = Read(obj8, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract16;
				break;
			}
			case 125:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<float[]>))
				{
					PrimitiveContract from6 = P_0;
					PrimitiveContract<float[]> primitiveContract11 = new PrimitiveContract<float[]>();
					ProtoReader.NoteObject(primitiveContract11, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from6, primitiveContract11);
				}
				PrimitiveContract<float[]> obj6 = (PrimitiveContract<float[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<float[]> primitiveContract12 = Read(obj6, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract12;
				break;
			}
			case 126:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<double[]>))
				{
					PrimitiveContract from31 = P_0;
					PrimitiveContract<double[]> primitiveContract61 = new PrimitiveContract<double[]>();
					ProtoReader.NoteObject(primitiveContract61, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from31, primitiveContract61);
				}
				PrimitiveContract<double[]> obj31 = (PrimitiveContract<double[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<double[]> primitiveContract62 = Read(obj31, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract62;
				break;
			}
			case 127:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<decimal[]>))
				{
					PrimitiveContract from27 = P_0;
					PrimitiveContract<decimal[]> primitiveContract53 = new PrimitiveContract<decimal[]>();
					ProtoReader.NoteObject(primitiveContract53, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from27, primitiveContract53);
				}
				PrimitiveContract<decimal[]> obj27 = (PrimitiveContract<decimal[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<decimal[]> primitiveContract54 = Read(obj27, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract54;
				break;
			}
			case 128:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<Color>))
				{
					PrimitiveContract from23 = P_0;
					PrimitiveContract<Color> primitiveContract45 = new PrimitiveContract<Color>();
					ProtoReader.NoteObject(primitiveContract45, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from23, primitiveContract45);
				}
				PrimitiveContract<Color> obj23 = (PrimitiveContract<Color>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<Color> primitiveContract46 = Read(obj23, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract46;
				break;
			}
			case 129:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<Color[]>))
				{
					PrimitiveContract from19 = P_0;
					PrimitiveContract<Color[]> primitiveContract37 = new PrimitiveContract<Color[]>();
					ProtoReader.NoteObject(primitiveContract37, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from19, primitiveContract37);
				}
				PrimitiveContract<Color[]> obj19 = (PrimitiveContract<Color[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<Color[]> primitiveContract38 = Read(obj19, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract38;
				break;
			}
			case 130:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<Vector3>))
				{
					PrimitiveContract from15 = P_0;
					PrimitiveContract<Vector3> primitiveContract29 = new PrimitiveContract<Vector3>();
					ProtoReader.NoteObject(primitiveContract29, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from15, primitiveContract29);
				}
				PrimitiveContract<Vector3> obj15 = (PrimitiveContract<Vector3>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<Vector3> primitiveContract30 = Read(obj15, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract30;
				break;
			}
			case 131:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<Vector3[]>))
				{
					PrimitiveContract from11 = P_0;
					PrimitiveContract<Vector3[]> primitiveContract21 = new PrimitiveContract<Vector3[]>();
					ProtoReader.NoteObject(primitiveContract21, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from11, primitiveContract21);
				}
				PrimitiveContract<Vector3[]> obj11 = (PrimitiveContract<Vector3[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<Vector3[]> primitiveContract22 = Read(obj11, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract22;
				break;
			}
			case 132:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<Vector4>))
				{
					PrimitiveContract from7 = P_0;
					PrimitiveContract<Vector4> primitiveContract13 = new PrimitiveContract<Vector4>();
					ProtoReader.NoteObject(primitiveContract13, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from7, primitiveContract13);
				}
				PrimitiveContract<Vector4> obj7 = (PrimitiveContract<Vector4>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<Vector4> primitiveContract14 = Read(obj7, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract14;
				break;
			}
			case 133:
			{
				if (P_0 != null && !(P_0 is PrimitiveContract<Vector4[]>))
				{
					PrimitiveContract from3 = P_0;
					PrimitiveContract<Vector4[]> primitiveContract5 = new PrimitiveContract<Vector4[]>();
					ProtoReader.NoteObject(primitiveContract5, P_1);
					P_0 = (PrimitiveContract)ProtoReader.Merge(P_1, from3, primitiveContract5);
				}
				PrimitiveContract<Vector4[]> obj3 = (PrimitiveContract<Vector4[]>)P_0;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				PrimitiveContract<Vector4[]> primitiveContract6 = Read(obj3, P_1);
				ProtoReader.EndSubItem(token, P_1);
				P_0 = primitiveContract6;
				break;
			}
			default:
				if (P_0 == null)
				{
					TypeModel.ThrowCannotCreateInstance(typeof(PrimitiveContract));
					P_0 = null;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			TypeModel.ThrowCannotCreateInstance(typeof(PrimitiveContract));
			P_0 = null;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Vector4[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Vector4[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Vector4[]>), P_0.GetType());
		}
		Vector4[] value = P_0.Value;
		if (value != null)
		{
			Vector4[] array = value;
			foreach (Vector4 vector in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Vector4[]> Read(PrimitiveContract<Vector4[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector4[]> primitiveContract = new PrimitiveContract<Vector4[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Vector4[] value = P_0.Value;
				List<Vector4> list = new List<Vector4>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector4 item = Read(default(Vector4), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector4[] array = new Vector4[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector4[]> primitiveContract2 = new PrimitiveContract<Vector4[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Vector4[]> primitiveContract3 = new PrimitiveContract<Vector4[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Vector4> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Vector4>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Vector4>), P_0.GetType());
		}
		Vector4 value = P_0.Value;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(value, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PrimitiveContract<Vector4> Read(PrimitiveContract<Vector4> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector4> primitiveContract = new PrimitiveContract<Vector4>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Vector4 value = P_0.Value;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector4 vector = Read(value, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector4 value2 = vector;
				P_0.Value = value2;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector4> primitiveContract2 = new PrimitiveContract<Vector4>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Vector4> primitiveContract3 = new PrimitiveContract<Vector4>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Vector3[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Vector3[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Vector3[]>), P_0.GetType());
		}
		Vector3[] value = P_0.Value;
		if (value != null)
		{
			Vector3[] array = value;
			foreach (Vector3 vector in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Vector3[]> Read(PrimitiveContract<Vector3[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector3[]> primitiveContract = new PrimitiveContract<Vector3[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Vector3[] value = P_0.Value;
				List<Vector3> list = new List<Vector3>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector3 item = Read(default(Vector3), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector3[] array = new Vector3[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector3[]> primitiveContract2 = new PrimitiveContract<Vector3[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Vector3[]> primitiveContract3 = new PrimitiveContract<Vector3[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Vector3> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Vector3>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Vector3>), P_0.GetType());
		}
		Vector3 value = P_0.Value;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(value, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PrimitiveContract<Vector3> Read(PrimitiveContract<Vector3> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector3> primitiveContract = new PrimitiveContract<Vector3>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Vector3 value = P_0.Value;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(value, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 value2 = vector;
				P_0.Value = value2;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector3> primitiveContract2 = new PrimitiveContract<Vector3>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Vector3> primitiveContract3 = new PrimitiveContract<Vector3>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Color[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Color[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Color[]>), P_0.GetType());
		}
		Color[] value = P_0.Value;
		if (value != null)
		{
			Color[] array = value;
			foreach (Color color in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(color, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Color[]> Read(PrimitiveContract<Color[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Color[]> primitiveContract = new PrimitiveContract<Color[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Color[] value = P_0.Value;
				List<Color> list = new List<Color>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Color item = Read(default(Color), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Color[] array = new Color[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Color[]> primitiveContract2 = new PrimitiveContract<Color[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Color[]> primitiveContract3 = new PrimitiveContract<Color[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Color> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Color>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Color>), P_0.GetType());
		}
		Color value = P_0.Value;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(value, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PrimitiveContract<Color> Read(PrimitiveContract<Color> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Color> primitiveContract = new PrimitiveContract<Color>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Color value = P_0.Value;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(value, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color value2 = color;
				P_0.Value = value2;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Color> primitiveContract2 = new PrimitiveContract<Color>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Color> primitiveContract3 = new PrimitiveContract<Color>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<decimal[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<decimal[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<decimal[]>), P_0.GetType());
		}
		decimal[] value = P_0.Value;
		if (value != null)
		{
			decimal[] array = value;
			foreach (decimal value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				BclHelpers.WriteDecimal(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<decimal[]> Read(PrimitiveContract<decimal[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<decimal[]> primitiveContract = new PrimitiveContract<decimal[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				decimal[] value = P_0.Value;
				List<decimal> list = new List<decimal>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					list.Add(BclHelpers.ReadDecimal(P_1));
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				decimal[] array = new decimal[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<decimal[]> primitiveContract2 = new PrimitiveContract<decimal[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<decimal[]> primitiveContract3 = new PrimitiveContract<decimal[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<double[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<double[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<double[]>), P_0.GetType());
		}
		double[] value = P_0.Value;
		if (value != null)
		{
			double[] array = value;
			foreach (double value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Fixed64, P_1);
				ProtoWriter.WriteDouble(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<double[]> Read(PrimitiveContract<double[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<double[]> primitiveContract = new PrimitiveContract<double[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				double[] value = P_0.Value;
				List<double> list = new List<double>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadDouble());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Fixed64, P_1))
					{
						list.Add(P_1.ReadDouble());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				double[] array = new double[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<double[]> primitiveContract2 = new PrimitiveContract<double[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<double[]> primitiveContract3 = new PrimitiveContract<double[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<float[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<float[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<float[]>), P_0.GetType());
		}
		float[] value = P_0.Value;
		if (value != null)
		{
			float[] array = value;
			foreach (float value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
				ProtoWriter.WriteSingle(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<float[]> Read(PrimitiveContract<float[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<float[]> primitiveContract = new PrimitiveContract<float[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				float[] value = P_0.Value;
				List<float> list = new List<float>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadSingle());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Fixed32, P_1))
					{
						list.Add(P_1.ReadSingle());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				float[] array = new float[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<float[]> primitiveContract2 = new PrimitiveContract<float[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<float[]> primitiveContract3 = new PrimitiveContract<float[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<string[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<string[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<string[]>), P_0.GetType());
		}
		string[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		string[] array = value;
		foreach (string obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				ProtoWriter.WriteString(obj, P_1);
			}
		}
	}

	private static PrimitiveContract<string[]> Read(PrimitiveContract<string[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<string[]> primitiveContract = new PrimitiveContract<string[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				string[] value = P_0.Value;
				List<string> list = new List<string>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					list.Add(P_1.ReadString());
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				string[] array = new string[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<string[]> primitiveContract2 = new PrimitiveContract<string[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<string[]> primitiveContract3 = new PrimitiveContract<string[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ulong[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ulong[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ulong[]>), P_0.GetType());
		}
		ulong[] value = P_0.Value;
		if (value != null)
		{
			ulong[] array = value;
			foreach (ulong value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteUInt64(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<ulong[]> Read(PrimitiveContract<ulong[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ulong[]> primitiveContract = new PrimitiveContract<ulong[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ulong[] value = P_0.Value;
				List<ulong> list = new List<ulong>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadUInt64());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadUInt64());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				ulong[] array = new ulong[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ulong[]> primitiveContract2 = new PrimitiveContract<ulong[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ulong[]> primitiveContract3 = new PrimitiveContract<ulong[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<uint[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<uint[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<uint[]>), P_0.GetType());
		}
		uint[] value = P_0.Value;
		if (value != null)
		{
			uint[] array = value;
			foreach (uint value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteUInt32(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<uint[]> Read(PrimitiveContract<uint[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<uint[]> primitiveContract = new PrimitiveContract<uint[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				uint[] value = P_0.Value;
				List<uint> list = new List<uint>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadUInt32());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadUInt32());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				uint[] array = new uint[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<uint[]> primitiveContract2 = new PrimitiveContract<uint[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<uint[]> primitiveContract3 = new PrimitiveContract<uint[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ushort[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ushort[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ushort[]>), P_0.GetType());
		}
		ushort[] value = P_0.Value;
		if (value != null)
		{
			ushort[] array = value;
			foreach (ushort value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteUInt16(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<ushort[]> Read(PrimitiveContract<ushort[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ushort[]> primitiveContract = new PrimitiveContract<ushort[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ushort[] value = P_0.Value;
				List<ushort> list = new List<ushort>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadUInt16());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadUInt16());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				ushort[] array = new ushort[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ushort[]> primitiveContract2 = new PrimitiveContract<ushort[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ushort[]> primitiveContract3 = new PrimitiveContract<ushort[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<long[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<long[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<long[]>), P_0.GetType());
		}
		long[] value = P_0.Value;
		if (value != null)
		{
			long[] array = value;
			foreach (long value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteInt64(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<long[]> Read(PrimitiveContract<long[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<long[]> primitiveContract = new PrimitiveContract<long[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				long[] value = P_0.Value;
				List<long> list = new List<long>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt64());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt64());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				long[] array = new long[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<long[]> primitiveContract2 = new PrimitiveContract<long[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<long[]> primitiveContract3 = new PrimitiveContract<long[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<int[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<int[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<int[]>), P_0.GetType());
		}
		int[] value = P_0.Value;
		if (value != null)
		{
			int[] array = value;
			foreach (int value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteInt32(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<int[]> Read(PrimitiveContract<int[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<int[]> primitiveContract = new PrimitiveContract<int[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				int[] value = P_0.Value;
				List<int> list = new List<int>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt32());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt32());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				int[] array = new int[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<int[]> primitiveContract2 = new PrimitiveContract<int[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<int[]> primitiveContract3 = new PrimitiveContract<int[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<short[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<short[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<short[]>), P_0.GetType());
		}
		short[] value = P_0.Value;
		if (value != null)
		{
			short[] array = value;
			foreach (short value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteInt16(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<short[]> Read(PrimitiveContract<short[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<short[]> primitiveContract = new PrimitiveContract<short[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				short[] value = P_0.Value;
				List<short> list = new List<short>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt16());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt16());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				short[] array = new short[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<short[]> primitiveContract2 = new PrimitiveContract<short[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<short[]> primitiveContract3 = new PrimitiveContract<short[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<byte[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<byte[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<byte[]>), P_0.GetType());
		}
		byte[] value = P_0.Value;
		if (value != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteBytes(value, P_1);
		}
	}

	private static PrimitiveContract<byte[]> Read(PrimitiveContract<byte[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<byte[]> primitiveContract = new PrimitiveContract<byte[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				byte[] array = ProtoReader.AppendBytes(P_0.Value, P_1);
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<byte[]> primitiveContract2 = new PrimitiveContract<byte[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<byte[]> primitiveContract3 = new PrimitiveContract<byte[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<char[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<char[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<char[]>), P_0.GetType());
		}
		char[] value = P_0.Value;
		if (value != null)
		{
			char[] array = value;
			foreach (char value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteUInt16(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<char[]> Read(PrimitiveContract<char[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<char[]> primitiveContract = new PrimitiveContract<char[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				char[] value = P_0.Value;
				List<char> list = new List<char>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add((char)P_1.ReadUInt16());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add((char)P_1.ReadUInt16());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				char[] array = new char[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<char[]> primitiveContract2 = new PrimitiveContract<char[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<char[]> primitiveContract3 = new PrimitiveContract<char[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<bool[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<bool[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<bool[]>), P_0.GetType());
		}
		bool[] value = P_0.Value;
		if (value != null)
		{
			bool[] array = value;
			foreach (bool value2 in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteBoolean(value2, P_1);
			}
		}
	}

	private static PrimitiveContract<bool[]> Read(PrimitiveContract<bool[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<bool[]> primitiveContract = new PrimitiveContract<bool[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				bool[] value = P_0.Value;
				List<bool> list = new List<bool>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadBoolean());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadBoolean());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				bool[] array = new bool[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<bool[]> primitiveContract2 = new PrimitiveContract<bool[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<bool[]> primitiveContract3 = new PrimitiveContract<bool[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<decimal> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<decimal>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<decimal>), P_0.GetType());
		}
		decimal value = P_0.Value;
		if (!(value == 0m))
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteDecimal(value, P_1);
		}
	}

	private static PrimitiveContract<decimal> Read(PrimitiveContract<decimal> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<decimal> primitiveContract = new PrimitiveContract<decimal>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				decimal value = BclHelpers.ReadDecimal(P_1);
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<decimal> primitiveContract2 = new PrimitiveContract<decimal>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<decimal> primitiveContract3 = new PrimitiveContract<decimal>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<double> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<double>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<double>), P_0.GetType());
		}
		double value = P_0.Value;
		if (value != 0.0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed64, P_1);
			ProtoWriter.WriteDouble(value, P_1);
		}
	}

	private static PrimitiveContract<double> Read(PrimitiveContract<double> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<double> primitiveContract = new PrimitiveContract<double>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				double value = P_1.ReadDouble();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<double> primitiveContract2 = new PrimitiveContract<double>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<double> primitiveContract3 = new PrimitiveContract<double>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<float> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<float>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<float>), P_0.GetType());
		}
		float value = P_0.Value;
		if (value != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(value, P_1);
		}
	}

	private static PrimitiveContract<float> Read(PrimitiveContract<float> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<float> primitiveContract = new PrimitiveContract<float>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				float value = P_1.ReadSingle();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<float> primitiveContract2 = new PrimitiveContract<float>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<float> primitiveContract3 = new PrimitiveContract<float>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<string> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<string>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<string>), P_0.GetType());
		}
		string value = P_0.Value;
		if (value != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(value, P_1);
		}
	}

	private static PrimitiveContract<string> Read(PrimitiveContract<string> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<string> primitiveContract = new PrimitiveContract<string>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.Value = text;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<string> primitiveContract2 = new PrimitiveContract<string>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<string> primitiveContract3 = new PrimitiveContract<string>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ulong> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ulong>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ulong>), P_0.GetType());
		}
		ulong value = P_0.Value;
		if (value != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt64(value, P_1);
		}
	}

	private static PrimitiveContract<ulong> Read(PrimitiveContract<ulong> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ulong> primitiveContract = new PrimitiveContract<ulong>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ulong value = P_1.ReadUInt64();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ulong> primitiveContract2 = new PrimitiveContract<ulong>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ulong> primitiveContract3 = new PrimitiveContract<ulong>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<uint> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<uint>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<uint>), P_0.GetType());
		}
		uint value = P_0.Value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(value, P_1);
		}
	}

	private static PrimitiveContract<uint> Read(PrimitiveContract<uint> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<uint> primitiveContract = new PrimitiveContract<uint>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				uint value = P_1.ReadUInt32();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<uint> primitiveContract2 = new PrimitiveContract<uint>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<uint> primitiveContract3 = new PrimitiveContract<uint>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ushort> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ushort>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ushort>), P_0.GetType());
		}
		ushort value = P_0.Value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt16(value, P_1);
		}
	}

	private static PrimitiveContract<ushort> Read(PrimitiveContract<ushort> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ushort> primitiveContract = new PrimitiveContract<ushort>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ushort value = P_1.ReadUInt16();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ushort> primitiveContract2 = new PrimitiveContract<ushort>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ushort> primitiveContract3 = new PrimitiveContract<ushort>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<long> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<long>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<long>), P_0.GetType());
		}
		long value = P_0.Value;
		if (value != 0L)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(value, P_1);
		}
	}

	private static PrimitiveContract<long> Read(PrimitiveContract<long> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<long> primitiveContract = new PrimitiveContract<long>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				long value = P_1.ReadInt64();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<long> primitiveContract2 = new PrimitiveContract<long>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<long> primitiveContract3 = new PrimitiveContract<long>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<int> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<int>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<int>), P_0.GetType());
		}
		int value = P_0.Value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(value, P_1);
		}
	}

	private static PrimitiveContract<int> Read(PrimitiveContract<int> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<int> primitiveContract = new PrimitiveContract<int>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				int value = P_1.ReadInt32();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<int> primitiveContract2 = new PrimitiveContract<int>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<int> primitiveContract3 = new PrimitiveContract<int>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<short> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<short>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<short>), P_0.GetType());
		}
		short value = P_0.Value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt16(value, P_1);
		}
	}

	private static PrimitiveContract<short> Read(PrimitiveContract<short> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<short> primitiveContract = new PrimitiveContract<short>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				short value = P_1.ReadInt16();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<short> primitiveContract2 = new PrimitiveContract<short>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<short> primitiveContract3 = new PrimitiveContract<short>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<byte> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<byte>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<byte>), P_0.GetType());
		}
		byte value = P_0.Value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteByte(value, P_1);
		}
	}

	private static PrimitiveContract<byte> Read(PrimitiveContract<byte> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<byte> primitiveContract = new PrimitiveContract<byte>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				byte value = P_1.ReadByte();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<byte> primitiveContract2 = new PrimitiveContract<byte>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<byte> primitiveContract3 = new PrimitiveContract<byte>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<char> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<char>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<char>), P_0.GetType());
		}
		char value = P_0.Value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt16(value, P_1);
		}
	}

	private static PrimitiveContract<char> Read(PrimitiveContract<char> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<char> primitiveContract = new PrimitiveContract<char>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				char value = (char)P_1.ReadUInt16();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<char> primitiveContract2 = new PrimitiveContract<char>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<char> primitiveContract3 = new PrimitiveContract<char>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<bool> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<bool>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<bool>), P_0.GetType());
		}
		bool value = P_0.Value;
		if (value)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(value, P_1);
		}
	}

	private static PrimitiveContract<bool> Read(PrimitiveContract<bool> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<bool> primitiveContract = new PrimitiveContract<bool>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				bool value = P_1.ReadBoolean();
				P_0.Value = value;
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<bool> primitiveContract2 = new PrimitiveContract<bool>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<bool> primitiveContract3 = new PrimitiveContract<bool>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAnimationCurve> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAnimationCurve>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAnimationCurve>), P_0.GetType());
		}
		foreach (PersistentAnimationCurve item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAnimationCurve> Read(List<PersistentAnimationCurve> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAnimationCurve> list = new List<PersistentAnimationCurve>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAnimationCurve>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAnimationCurve> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimationCurve item = (PersistentAnimationCurve)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAnimationCurve> list3 = new List<PersistentAnimationCurve>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAnimationCurve> list4 = new List<PersistentAnimationCurve>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBurst[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBurst[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBurst[]>), P_0.GetType());
		}
		PersistentBurst[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBurst[] array = value;
		foreach (PersistentBurst obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBurst[]> Read(PrimitiveContract<PersistentBurst[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBurst[]> primitiveContract = new PrimitiveContract<PersistentBurst[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBurst[] value = P_0.Value;
				List<PersistentBurst> list = new List<PersistentBurst>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBurst item = (PersistentBurst)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBurst[] array = new PersistentBurst[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBurst[]> primitiveContract2 = new PrimitiveContract<PersistentBurst[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBurst[]> primitiveContract3 = new PrimitiveContract<PersistentBurst[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBurst> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBurst>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBurst>), P_0.GetType());
		}
		foreach (PersistentBurst item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBurst> Read(List<PersistentBurst> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBurst> list = new List<PersistentBurst>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBurst>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBurst> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBurst item = (PersistentBurst)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBurst> list3 = new List<PersistentBurst>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBurst> list4 = new List<PersistentBurst>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentColorBySpeedModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentColorBySpeedModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentColorBySpeedModule[]>), P_0.GetType());
		}
		PersistentColorBySpeedModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentColorBySpeedModule[] array = value;
		foreach (PersistentColorBySpeedModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentColorBySpeedModule[]> Read(PrimitiveContract<PersistentColorBySpeedModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentColorBySpeedModule[]> primitiveContract = new PrimitiveContract<PersistentColorBySpeedModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentColorBySpeedModule[] value = P_0.Value;
				List<PersistentColorBySpeedModule> list = new List<PersistentColorBySpeedModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentColorBySpeedModule item = (PersistentColorBySpeedModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentColorBySpeedModule[] array = new PersistentColorBySpeedModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentColorBySpeedModule[]> primitiveContract2 = new PrimitiveContract<PersistentColorBySpeedModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentColorBySpeedModule[]> primitiveContract3 = new PrimitiveContract<PersistentColorBySpeedModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentColorBySpeedModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentColorBySpeedModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentColorBySpeedModule>), P_0.GetType());
		}
		foreach (PersistentColorBySpeedModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentColorBySpeedModule> Read(List<PersistentColorBySpeedModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentColorBySpeedModule> list = new List<PersistentColorBySpeedModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentColorBySpeedModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentColorBySpeedModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentColorBySpeedModule item = (PersistentColorBySpeedModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentColorBySpeedModule> list3 = new List<PersistentColorBySpeedModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentColorBySpeedModule> list4 = new List<PersistentColorBySpeedModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentColorOverLifetimeModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentColorOverLifetimeModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentColorOverLifetimeModule[]>), P_0.GetType());
		}
		PersistentColorOverLifetimeModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentColorOverLifetimeModule[] array = value;
		foreach (PersistentColorOverLifetimeModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentColorOverLifetimeModule[]> Read(PrimitiveContract<PersistentColorOverLifetimeModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentColorOverLifetimeModule[]> primitiveContract = new PrimitiveContract<PersistentColorOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentColorOverLifetimeModule[] value = P_0.Value;
				List<PersistentColorOverLifetimeModule> list = new List<PersistentColorOverLifetimeModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentColorOverLifetimeModule item = (PersistentColorOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentColorOverLifetimeModule[] array = new PersistentColorOverLifetimeModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentColorOverLifetimeModule[]> primitiveContract2 = new PrimitiveContract<PersistentColorOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentColorOverLifetimeModule[]> primitiveContract3 = new PrimitiveContract<PersistentColorOverLifetimeModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentColorOverLifetimeModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentColorOverLifetimeModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentColorOverLifetimeModule>), P_0.GetType());
		}
		foreach (PersistentColorOverLifetimeModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentColorOverLifetimeModule> Read(List<PersistentColorOverLifetimeModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentColorOverLifetimeModule> list = new List<PersistentColorOverLifetimeModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentColorOverLifetimeModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentColorOverLifetimeModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentColorOverLifetimeModule item = (PersistentColorOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentColorOverLifetimeModule> list3 = new List<PersistentColorOverLifetimeModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentColorOverLifetimeModule> list4 = new List<PersistentColorOverLifetimeModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCustomDataModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCustomDataModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCustomDataModule[]>), P_0.GetType());
		}
		PersistentCustomDataModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCustomDataModule[] array = value;
		foreach (PersistentCustomDataModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCustomDataModule[]> Read(PrimitiveContract<PersistentCustomDataModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCustomDataModule[]> primitiveContract = new PrimitiveContract<PersistentCustomDataModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCustomDataModule[] value = P_0.Value;
				List<PersistentCustomDataModule> list = new List<PersistentCustomDataModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCustomDataModule item = (PersistentCustomDataModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCustomDataModule[] array = new PersistentCustomDataModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCustomDataModule[]> primitiveContract2 = new PrimitiveContract<PersistentCustomDataModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCustomDataModule[]> primitiveContract3 = new PrimitiveContract<PersistentCustomDataModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCustomDataModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCustomDataModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCustomDataModule>), P_0.GetType());
		}
		foreach (PersistentCustomDataModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCustomDataModule> Read(List<PersistentCustomDataModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCustomDataModule> list = new List<PersistentCustomDataModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCustomDataModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCustomDataModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCustomDataModule item = (PersistentCustomDataModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCustomDataModule> list3 = new List<PersistentCustomDataModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCustomDataModule> list4 = new List<PersistentCustomDataModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentEmitParams[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentEmitParams[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentEmitParams[]>), P_0.GetType());
		}
		PersistentEmitParams[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentEmitParams[] array = value;
		foreach (PersistentEmitParams obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentEmitParams[]> Read(PrimitiveContract<PersistentEmitParams[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEmitParams[]> primitiveContract = new PrimitiveContract<PersistentEmitParams[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentEmitParams[] value = P_0.Value;
				List<PersistentEmitParams> list = new List<PersistentEmitParams>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEmitParams item = (PersistentEmitParams)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentEmitParams[] array = new PersistentEmitParams[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEmitParams[]> primitiveContract2 = new PrimitiveContract<PersistentEmitParams[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentEmitParams[]> primitiveContract3 = new PrimitiveContract<PersistentEmitParams[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentEmitParams> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentEmitParams>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentEmitParams>), P_0.GetType());
		}
		foreach (PersistentEmitParams item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentEmitParams> Read(List<PersistentEmitParams> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentEmitParams> list = new List<PersistentEmitParams>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentEmitParams>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentEmitParams> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEmitParams item = (PersistentEmitParams)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentEmitParams> list3 = new List<PersistentEmitParams>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentEmitParams> list4 = new List<PersistentEmitParams>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentExternalForcesModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentExternalForcesModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentExternalForcesModule[]>), P_0.GetType());
		}
		PersistentExternalForcesModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentExternalForcesModule[] array = value;
		foreach (PersistentExternalForcesModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentExternalForcesModule[]> Read(PrimitiveContract<PersistentExternalForcesModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentExternalForcesModule[]> primitiveContract = new PrimitiveContract<PersistentExternalForcesModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentExternalForcesModule[] value = P_0.Value;
				List<PersistentExternalForcesModule> list = new List<PersistentExternalForcesModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentExternalForcesModule item = (PersistentExternalForcesModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentExternalForcesModule[] array = new PersistentExternalForcesModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentExternalForcesModule[]> primitiveContract2 = new PrimitiveContract<PersistentExternalForcesModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentExternalForcesModule[]> primitiveContract3 = new PrimitiveContract<PersistentExternalForcesModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentExternalForcesModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentExternalForcesModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentExternalForcesModule>), P_0.GetType());
		}
		foreach (PersistentExternalForcesModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentExternalForcesModule> Read(List<PersistentExternalForcesModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentExternalForcesModule> list = new List<PersistentExternalForcesModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentExternalForcesModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentExternalForcesModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentExternalForcesModule item = (PersistentExternalForcesModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentExternalForcesModule> list3 = new List<PersistentExternalForcesModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentExternalForcesModule> list4 = new List<PersistentExternalForcesModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentForceOverLifetimeModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentForceOverLifetimeModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentForceOverLifetimeModule[]>), P_0.GetType());
		}
		PersistentForceOverLifetimeModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentForceOverLifetimeModule[] array = value;
		foreach (PersistentForceOverLifetimeModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentForceOverLifetimeModule[]> Read(PrimitiveContract<PersistentForceOverLifetimeModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentForceOverLifetimeModule[]> primitiveContract = new PrimitiveContract<PersistentForceOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentForceOverLifetimeModule[] value = P_0.Value;
				List<PersistentForceOverLifetimeModule> list = new List<PersistentForceOverLifetimeModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentForceOverLifetimeModule item = (PersistentForceOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentForceOverLifetimeModule[] array = new PersistentForceOverLifetimeModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentForceOverLifetimeModule[]> primitiveContract2 = new PrimitiveContract<PersistentForceOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentForceOverLifetimeModule[]> primitiveContract3 = new PrimitiveContract<PersistentForceOverLifetimeModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentForceOverLifetimeModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentForceOverLifetimeModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentForceOverLifetimeModule>), P_0.GetType());
		}
		foreach (PersistentForceOverLifetimeModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentForceOverLifetimeModule> Read(List<PersistentForceOverLifetimeModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentForceOverLifetimeModule> list = new List<PersistentForceOverLifetimeModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentForceOverLifetimeModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentForceOverLifetimeModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentForceOverLifetimeModule item = (PersistentForceOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentForceOverLifetimeModule> list3 = new List<PersistentForceOverLifetimeModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentForceOverLifetimeModule> list4 = new List<PersistentForceOverLifetimeModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGradient[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGradient[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGradient[]>), P_0.GetType());
		}
		PersistentGradient[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGradient[] array = value;
		foreach (PersistentGradient obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGradient[]> Read(PrimitiveContract<PersistentGradient[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGradient[]> primitiveContract = new PrimitiveContract<PersistentGradient[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGradient[] value = P_0.Value;
				List<PersistentGradient> list = new List<PersistentGradient>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGradient item = (PersistentGradient)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGradient[] array = new PersistentGradient[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGradient[]> primitiveContract2 = new PrimitiveContract<PersistentGradient[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGradient[]> primitiveContract3 = new PrimitiveContract<PersistentGradient[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGradient> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGradient>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGradient>), P_0.GetType());
		}
		foreach (PersistentGradient item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGradient> Read(List<PersistentGradient> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGradient> list = new List<PersistentGradient>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGradient>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGradient> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGradient item = (PersistentGradient)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGradient> list3 = new List<PersistentGradient>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGradient> list4 = new List<PersistentGradient>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentInheritVelocityModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentInheritVelocityModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentInheritVelocityModule[]>), P_0.GetType());
		}
		PersistentInheritVelocityModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentInheritVelocityModule[] array = value;
		foreach (PersistentInheritVelocityModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentInheritVelocityModule[]> Read(PrimitiveContract<PersistentInheritVelocityModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentInheritVelocityModule[]> primitiveContract = new PrimitiveContract<PersistentInheritVelocityModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentInheritVelocityModule[] value = P_0.Value;
				List<PersistentInheritVelocityModule> list = new List<PersistentInheritVelocityModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentInheritVelocityModule item = (PersistentInheritVelocityModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentInheritVelocityModule[] array = new PersistentInheritVelocityModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentInheritVelocityModule[]> primitiveContract2 = new PrimitiveContract<PersistentInheritVelocityModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentInheritVelocityModule[]> primitiveContract3 = new PrimitiveContract<PersistentInheritVelocityModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentInheritVelocityModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentInheritVelocityModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentInheritVelocityModule>), P_0.GetType());
		}
		foreach (PersistentInheritVelocityModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentInheritVelocityModule> Read(List<PersistentInheritVelocityModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentInheritVelocityModule> list = new List<PersistentInheritVelocityModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentInheritVelocityModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentInheritVelocityModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentInheritVelocityModule item = (PersistentInheritVelocityModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentInheritVelocityModule> list3 = new List<PersistentInheritVelocityModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentInheritVelocityModule> list4 = new List<PersistentInheritVelocityModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentKeyframe[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentKeyframe[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentKeyframe[]>), P_0.GetType());
		}
		PersistentKeyframe[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentKeyframe[] array = value;
		foreach (PersistentKeyframe obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentKeyframe[]> Read(PrimitiveContract<PersistentKeyframe[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentKeyframe[]> primitiveContract = new PrimitiveContract<PersistentKeyframe[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentKeyframe[] value = P_0.Value;
				List<PersistentKeyframe> list = new List<PersistentKeyframe>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentKeyframe item = (PersistentKeyframe)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentKeyframe[] array = new PersistentKeyframe[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentKeyframe[]> primitiveContract2 = new PrimitiveContract<PersistentKeyframe[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentKeyframe[]> primitiveContract3 = new PrimitiveContract<PersistentKeyframe[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentKeyframe> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentKeyframe>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentKeyframe>), P_0.GetType());
		}
		foreach (PersistentKeyframe item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentKeyframe> Read(List<PersistentKeyframe> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentKeyframe> list = new List<PersistentKeyframe>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentKeyframe>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentKeyframe> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentKeyframe item = (PersistentKeyframe)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentKeyframe> list3 = new List<PersistentKeyframe>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentKeyframe> list4 = new List<PersistentKeyframe>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLightsModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLightsModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLightsModule[]>), P_0.GetType());
		}
		PersistentLightsModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLightsModule[] array = value;
		foreach (PersistentLightsModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLightsModule[]> Read(PrimitiveContract<PersistentLightsModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightsModule[]> primitiveContract = new PrimitiveContract<PersistentLightsModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLightsModule[] value = P_0.Value;
				List<PersistentLightsModule> list = new List<PersistentLightsModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightsModule item = (PersistentLightsModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLightsModule[] array = new PersistentLightsModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightsModule[]> primitiveContract2 = new PrimitiveContract<PersistentLightsModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLightsModule[]> primitiveContract3 = new PrimitiveContract<PersistentLightsModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLightsModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLightsModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLightsModule>), P_0.GetType());
		}
		foreach (PersistentLightsModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLightsModule> Read(List<PersistentLightsModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLightsModule> list = new List<PersistentLightsModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLightsModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLightsModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightsModule item = (PersistentLightsModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLightsModule> list3 = new List<PersistentLightsModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLightsModule> list4 = new List<PersistentLightsModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]>), P_0.GetType());
		}
		PersistentLimitVelocityOverLifetimeModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLimitVelocityOverLifetimeModule[] array = value;
		foreach (PersistentLimitVelocityOverLifetimeModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]> Read(PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]> primitiveContract = new PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLimitVelocityOverLifetimeModule[] value = P_0.Value;
				List<PersistentLimitVelocityOverLifetimeModule> list = new List<PersistentLimitVelocityOverLifetimeModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLimitVelocityOverLifetimeModule item = (PersistentLimitVelocityOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLimitVelocityOverLifetimeModule[] array = new PersistentLimitVelocityOverLifetimeModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]> primitiveContract2 = new PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]> primitiveContract3 = new PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLimitVelocityOverLifetimeModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLimitVelocityOverLifetimeModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLimitVelocityOverLifetimeModule>), P_0.GetType());
		}
		foreach (PersistentLimitVelocityOverLifetimeModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLimitVelocityOverLifetimeModule> Read(List<PersistentLimitVelocityOverLifetimeModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLimitVelocityOverLifetimeModule> list = new List<PersistentLimitVelocityOverLifetimeModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLimitVelocityOverLifetimeModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLimitVelocityOverLifetimeModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLimitVelocityOverLifetimeModule item = (PersistentLimitVelocityOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLimitVelocityOverLifetimeModule> list3 = new List<PersistentLimitVelocityOverLifetimeModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLimitVelocityOverLifetimeModule> list4 = new List<PersistentLimitVelocityOverLifetimeModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMainModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMainModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMainModule[]>), P_0.GetType());
		}
		PersistentMainModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMainModule[] array = value;
		foreach (PersistentMainModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMainModule[]> Read(PrimitiveContract<PersistentMainModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMainModule[]> primitiveContract = new PrimitiveContract<PersistentMainModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMainModule[] value = P_0.Value;
				List<PersistentMainModule> list = new List<PersistentMainModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMainModule item = (PersistentMainModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMainModule[] array = new PersistentMainModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMainModule[]> primitiveContract2 = new PrimitiveContract<PersistentMainModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMainModule[]> primitiveContract3 = new PrimitiveContract<PersistentMainModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMainModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMainModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMainModule>), P_0.GetType());
		}
		foreach (PersistentMainModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMainModule> Read(List<PersistentMainModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMainModule> list = new List<PersistentMainModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMainModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMainModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMainModule item = (PersistentMainModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMainModule> list3 = new List<PersistentMainModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMainModule> list4 = new List<PersistentMainModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMinMaxCurve[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMinMaxCurve[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMinMaxCurve[]>), P_0.GetType());
		}
		PersistentMinMaxCurve[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMinMaxCurve[] array = value;
		foreach (PersistentMinMaxCurve obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMinMaxCurve[]> Read(PrimitiveContract<PersistentMinMaxCurve[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMinMaxCurve[]> primitiveContract = new PrimitiveContract<PersistentMinMaxCurve[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMinMaxCurve[] value = P_0.Value;
				List<PersistentMinMaxCurve> list = new List<PersistentMinMaxCurve>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMinMaxCurve item = (PersistentMinMaxCurve)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMinMaxCurve[] array = new PersistentMinMaxCurve[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMinMaxCurve[]> primitiveContract2 = new PrimitiveContract<PersistentMinMaxCurve[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMinMaxCurve[]> primitiveContract3 = new PrimitiveContract<PersistentMinMaxCurve[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMinMaxCurve> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMinMaxCurve>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMinMaxCurve>), P_0.GetType());
		}
		foreach (PersistentMinMaxCurve item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMinMaxCurve> Read(List<PersistentMinMaxCurve> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMinMaxCurve> list = new List<PersistentMinMaxCurve>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMinMaxCurve>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMinMaxCurve> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMinMaxCurve item = (PersistentMinMaxCurve)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMinMaxCurve> list3 = new List<PersistentMinMaxCurve>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMinMaxCurve> list4 = new List<PersistentMinMaxCurve>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMinMaxGradient[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMinMaxGradient[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMinMaxGradient[]>), P_0.GetType());
		}
		PersistentMinMaxGradient[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMinMaxGradient[] array = value;
		foreach (PersistentMinMaxGradient obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMinMaxGradient[]> Read(PrimitiveContract<PersistentMinMaxGradient[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMinMaxGradient[]> primitiveContract = new PrimitiveContract<PersistentMinMaxGradient[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMinMaxGradient[] value = P_0.Value;
				List<PersistentMinMaxGradient> list = new List<PersistentMinMaxGradient>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMinMaxGradient item = (PersistentMinMaxGradient)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMinMaxGradient[] array = new PersistentMinMaxGradient[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMinMaxGradient[]> primitiveContract2 = new PrimitiveContract<PersistentMinMaxGradient[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMinMaxGradient[]> primitiveContract3 = new PrimitiveContract<PersistentMinMaxGradient[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMinMaxGradient> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMinMaxGradient>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMinMaxGradient>), P_0.GetType());
		}
		foreach (PersistentMinMaxGradient item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMinMaxGradient> Read(List<PersistentMinMaxGradient> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMinMaxGradient> list = new List<PersistentMinMaxGradient>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMinMaxGradient>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMinMaxGradient> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMinMaxGradient item = (PersistentMinMaxGradient)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMinMaxGradient> list3 = new List<PersistentMinMaxGradient>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMinMaxGradient> list4 = new List<PersistentMinMaxGradient>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentNoiseModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentNoiseModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentNoiseModule[]>), P_0.GetType());
		}
		PersistentNoiseModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentNoiseModule[] array = value;
		foreach (PersistentNoiseModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentNoiseModule[]> Read(PrimitiveContract<PersistentNoiseModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNoiseModule[]> primitiveContract = new PrimitiveContract<PersistentNoiseModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentNoiseModule[] value = P_0.Value;
				List<PersistentNoiseModule> list = new List<PersistentNoiseModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNoiseModule item = (PersistentNoiseModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentNoiseModule[] array = new PersistentNoiseModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNoiseModule[]> primitiveContract2 = new PrimitiveContract<PersistentNoiseModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentNoiseModule[]> primitiveContract3 = new PrimitiveContract<PersistentNoiseModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentNoiseModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentNoiseModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentNoiseModule>), P_0.GetType());
		}
		foreach (PersistentNoiseModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentNoiseModule> Read(List<PersistentNoiseModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentNoiseModule> list = new List<PersistentNoiseModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentNoiseModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentNoiseModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNoiseModule item = (PersistentNoiseModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentNoiseModule> list3 = new List<PersistentNoiseModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentNoiseModule> list4 = new List<PersistentNoiseModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentParticle[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentParticle[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentParticle[]>), P_0.GetType());
		}
		PersistentParticle[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentParticle[] array = value;
		foreach (PersistentParticle obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentParticle[]> Read(PrimitiveContract<PersistentParticle[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentParticle[]> primitiveContract = new PrimitiveContract<PersistentParticle[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentParticle[] value = P_0.Value;
				List<PersistentParticle> list = new List<PersistentParticle>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentParticle item = (PersistentParticle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentParticle[] array = new PersistentParticle[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentParticle[]> primitiveContract2 = new PrimitiveContract<PersistentParticle[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentParticle[]> primitiveContract3 = new PrimitiveContract<PersistentParticle[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentParticle> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentParticle>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentParticle>), P_0.GetType());
		}
		foreach (PersistentParticle item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentParticle> Read(List<PersistentParticle> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentParticle> list = new List<PersistentParticle>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentParticle>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentParticle> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentParticle item = (PersistentParticle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentParticle> list3 = new List<PersistentParticle>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentParticle> list4 = new List<PersistentParticle>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRotationBySpeedModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRotationBySpeedModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRotationBySpeedModule[]>), P_0.GetType());
		}
		PersistentRotationBySpeedModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRotationBySpeedModule[] array = value;
		foreach (PersistentRotationBySpeedModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRotationBySpeedModule[]> Read(PrimitiveContract<PersistentRotationBySpeedModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRotationBySpeedModule[]> primitiveContract = new PrimitiveContract<PersistentRotationBySpeedModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRotationBySpeedModule[] value = P_0.Value;
				List<PersistentRotationBySpeedModule> list = new List<PersistentRotationBySpeedModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRotationBySpeedModule item = (PersistentRotationBySpeedModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRotationBySpeedModule[] array = new PersistentRotationBySpeedModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRotationBySpeedModule[]> primitiveContract2 = new PrimitiveContract<PersistentRotationBySpeedModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRotationBySpeedModule[]> primitiveContract3 = new PrimitiveContract<PersistentRotationBySpeedModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRotationBySpeedModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRotationBySpeedModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRotationBySpeedModule>), P_0.GetType());
		}
		foreach (PersistentRotationBySpeedModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRotationBySpeedModule> Read(List<PersistentRotationBySpeedModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRotationBySpeedModule> list = new List<PersistentRotationBySpeedModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRotationBySpeedModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRotationBySpeedModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRotationBySpeedModule item = (PersistentRotationBySpeedModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRotationBySpeedModule> list3 = new List<PersistentRotationBySpeedModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRotationBySpeedModule> list4 = new List<PersistentRotationBySpeedModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRotationOverLifetimeModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRotationOverLifetimeModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRotationOverLifetimeModule[]>), P_0.GetType());
		}
		PersistentRotationOverLifetimeModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRotationOverLifetimeModule[] array = value;
		foreach (PersistentRotationOverLifetimeModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRotationOverLifetimeModule[]> Read(PrimitiveContract<PersistentRotationOverLifetimeModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRotationOverLifetimeModule[]> primitiveContract = new PrimitiveContract<PersistentRotationOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRotationOverLifetimeModule[] value = P_0.Value;
				List<PersistentRotationOverLifetimeModule> list = new List<PersistentRotationOverLifetimeModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRotationOverLifetimeModule item = (PersistentRotationOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRotationOverLifetimeModule[] array = new PersistentRotationOverLifetimeModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRotationOverLifetimeModule[]> primitiveContract2 = new PrimitiveContract<PersistentRotationOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRotationOverLifetimeModule[]> primitiveContract3 = new PrimitiveContract<PersistentRotationOverLifetimeModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRotationOverLifetimeModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRotationOverLifetimeModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRotationOverLifetimeModule>), P_0.GetType());
		}
		foreach (PersistentRotationOverLifetimeModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRotationOverLifetimeModule> Read(List<PersistentRotationOverLifetimeModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRotationOverLifetimeModule> list = new List<PersistentRotationOverLifetimeModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRotationOverLifetimeModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRotationOverLifetimeModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRotationOverLifetimeModule item = (PersistentRotationOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRotationOverLifetimeModule> list3 = new List<PersistentRotationOverLifetimeModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRotationOverLifetimeModule> list4 = new List<PersistentRotationOverLifetimeModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentShapeModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentShapeModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentShapeModule[]>), P_0.GetType());
		}
		PersistentShapeModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentShapeModule[] array = value;
		foreach (PersistentShapeModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentShapeModule[]> Read(PrimitiveContract<PersistentShapeModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentShapeModule[]> primitiveContract = new PrimitiveContract<PersistentShapeModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentShapeModule[] value = P_0.Value;
				List<PersistentShapeModule> list = new List<PersistentShapeModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentShapeModule item = (PersistentShapeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentShapeModule[] array = new PersistentShapeModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentShapeModule[]> primitiveContract2 = new PrimitiveContract<PersistentShapeModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentShapeModule[]> primitiveContract3 = new PrimitiveContract<PersistentShapeModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentShapeModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentShapeModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentShapeModule>), P_0.GetType());
		}
		foreach (PersistentShapeModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentShapeModule> Read(List<PersistentShapeModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentShapeModule> list = new List<PersistentShapeModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentShapeModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentShapeModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentShapeModule item = (PersistentShapeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentShapeModule> list3 = new List<PersistentShapeModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentShapeModule> list4 = new List<PersistentShapeModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSizeBySpeedModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSizeBySpeedModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSizeBySpeedModule[]>), P_0.GetType());
		}
		PersistentSizeBySpeedModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSizeBySpeedModule[] array = value;
		foreach (PersistentSizeBySpeedModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSizeBySpeedModule[]> Read(PrimitiveContract<PersistentSizeBySpeedModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSizeBySpeedModule[]> primitiveContract = new PrimitiveContract<PersistentSizeBySpeedModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSizeBySpeedModule[] value = P_0.Value;
				List<PersistentSizeBySpeedModule> list = new List<PersistentSizeBySpeedModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSizeBySpeedModule item = (PersistentSizeBySpeedModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSizeBySpeedModule[] array = new PersistentSizeBySpeedModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSizeBySpeedModule[]> primitiveContract2 = new PrimitiveContract<PersistentSizeBySpeedModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSizeBySpeedModule[]> primitiveContract3 = new PrimitiveContract<PersistentSizeBySpeedModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSizeBySpeedModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSizeBySpeedModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSizeBySpeedModule>), P_0.GetType());
		}
		foreach (PersistentSizeBySpeedModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSizeBySpeedModule> Read(List<PersistentSizeBySpeedModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSizeBySpeedModule> list = new List<PersistentSizeBySpeedModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSizeBySpeedModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSizeBySpeedModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSizeBySpeedModule item = (PersistentSizeBySpeedModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSizeBySpeedModule> list3 = new List<PersistentSizeBySpeedModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSizeBySpeedModule> list4 = new List<PersistentSizeBySpeedModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSizeOverLifetimeModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSizeOverLifetimeModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSizeOverLifetimeModule[]>), P_0.GetType());
		}
		PersistentSizeOverLifetimeModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSizeOverLifetimeModule[] array = value;
		foreach (PersistentSizeOverLifetimeModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSizeOverLifetimeModule[]> Read(PrimitiveContract<PersistentSizeOverLifetimeModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSizeOverLifetimeModule[]> primitiveContract = new PrimitiveContract<PersistentSizeOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSizeOverLifetimeModule[] value = P_0.Value;
				List<PersistentSizeOverLifetimeModule> list = new List<PersistentSizeOverLifetimeModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSizeOverLifetimeModule item = (PersistentSizeOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSizeOverLifetimeModule[] array = new PersistentSizeOverLifetimeModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSizeOverLifetimeModule[]> primitiveContract2 = new PrimitiveContract<PersistentSizeOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSizeOverLifetimeModule[]> primitiveContract3 = new PrimitiveContract<PersistentSizeOverLifetimeModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSizeOverLifetimeModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSizeOverLifetimeModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSizeOverLifetimeModule>), P_0.GetType());
		}
		foreach (PersistentSizeOverLifetimeModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSizeOverLifetimeModule> Read(List<PersistentSizeOverLifetimeModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSizeOverLifetimeModule> list = new List<PersistentSizeOverLifetimeModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSizeOverLifetimeModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSizeOverLifetimeModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSizeOverLifetimeModule item = (PersistentSizeOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSizeOverLifetimeModule> list3 = new List<PersistentSizeOverLifetimeModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSizeOverLifetimeModule> list4 = new List<PersistentSizeOverLifetimeModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSubEmittersModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSubEmittersModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSubEmittersModule[]>), P_0.GetType());
		}
		PersistentSubEmittersModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSubEmittersModule[] array = value;
		foreach (PersistentSubEmittersModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSubEmittersModule[]> Read(PrimitiveContract<PersistentSubEmittersModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSubEmittersModule[]> primitiveContract = new PrimitiveContract<PersistentSubEmittersModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSubEmittersModule[] value = P_0.Value;
				List<PersistentSubEmittersModule> list = new List<PersistentSubEmittersModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSubEmittersModule item = (PersistentSubEmittersModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSubEmittersModule[] array = new PersistentSubEmittersModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSubEmittersModule[]> primitiveContract2 = new PrimitiveContract<PersistentSubEmittersModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSubEmittersModule[]> primitiveContract3 = new PrimitiveContract<PersistentSubEmittersModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSubEmittersModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSubEmittersModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSubEmittersModule>), P_0.GetType());
		}
		foreach (PersistentSubEmittersModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSubEmittersModule> Read(List<PersistentSubEmittersModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSubEmittersModule> list = new List<PersistentSubEmittersModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSubEmittersModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSubEmittersModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSubEmittersModule item = (PersistentSubEmittersModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSubEmittersModule> list3 = new List<PersistentSubEmittersModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSubEmittersModule> list4 = new List<PersistentSubEmittersModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTextureSheetAnimationModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTextureSheetAnimationModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTextureSheetAnimationModule[]>), P_0.GetType());
		}
		PersistentTextureSheetAnimationModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTextureSheetAnimationModule[] array = value;
		foreach (PersistentTextureSheetAnimationModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTextureSheetAnimationModule[]> Read(PrimitiveContract<PersistentTextureSheetAnimationModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTextureSheetAnimationModule[]> primitiveContract = new PrimitiveContract<PersistentTextureSheetAnimationModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTextureSheetAnimationModule[] value = P_0.Value;
				List<PersistentTextureSheetAnimationModule> list = new List<PersistentTextureSheetAnimationModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTextureSheetAnimationModule item = (PersistentTextureSheetAnimationModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTextureSheetAnimationModule[] array = new PersistentTextureSheetAnimationModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTextureSheetAnimationModule[]> primitiveContract2 = new PrimitiveContract<PersistentTextureSheetAnimationModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTextureSheetAnimationModule[]> primitiveContract3 = new PrimitiveContract<PersistentTextureSheetAnimationModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTextureSheetAnimationModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTextureSheetAnimationModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTextureSheetAnimationModule>), P_0.GetType());
		}
		foreach (PersistentTextureSheetAnimationModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTextureSheetAnimationModule> Read(List<PersistentTextureSheetAnimationModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTextureSheetAnimationModule> list = new List<PersistentTextureSheetAnimationModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTextureSheetAnimationModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTextureSheetAnimationModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTextureSheetAnimationModule item = (PersistentTextureSheetAnimationModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTextureSheetAnimationModule> list3 = new List<PersistentTextureSheetAnimationModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTextureSheetAnimationModule> list4 = new List<PersistentTextureSheetAnimationModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTrailModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTrailModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTrailModule[]>), P_0.GetType());
		}
		PersistentTrailModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTrailModule[] array = value;
		foreach (PersistentTrailModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTrailModule[]> Read(PrimitiveContract<PersistentTrailModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTrailModule[]> primitiveContract = new PrimitiveContract<PersistentTrailModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTrailModule[] value = P_0.Value;
				List<PersistentTrailModule> list = new List<PersistentTrailModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTrailModule item = (PersistentTrailModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTrailModule[] array = new PersistentTrailModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTrailModule[]> primitiveContract2 = new PrimitiveContract<PersistentTrailModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTrailModule[]> primitiveContract3 = new PrimitiveContract<PersistentTrailModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTrailModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTrailModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTrailModule>), P_0.GetType());
		}
		foreach (PersistentTrailModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTrailModule> Read(List<PersistentTrailModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTrailModule> list = new List<PersistentTrailModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTrailModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTrailModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTrailModule item = (PersistentTrailModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTrailModule> list3 = new List<PersistentTrailModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTrailModule> list4 = new List<PersistentTrailModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentVelocityOverLifetimeModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentVelocityOverLifetimeModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentVelocityOverLifetimeModule[]>), P_0.GetType());
		}
		PersistentVelocityOverLifetimeModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentVelocityOverLifetimeModule[] array = value;
		foreach (PersistentVelocityOverLifetimeModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentVelocityOverLifetimeModule[]> Read(PrimitiveContract<PersistentVelocityOverLifetimeModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentVelocityOverLifetimeModule[]> primitiveContract = new PrimitiveContract<PersistentVelocityOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentVelocityOverLifetimeModule[] value = P_0.Value;
				List<PersistentVelocityOverLifetimeModule> list = new List<PersistentVelocityOverLifetimeModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentVelocityOverLifetimeModule item = (PersistentVelocityOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentVelocityOverLifetimeModule[] array = new PersistentVelocityOverLifetimeModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentVelocityOverLifetimeModule[]> primitiveContract2 = new PrimitiveContract<PersistentVelocityOverLifetimeModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentVelocityOverLifetimeModule[]> primitiveContract3 = new PrimitiveContract<PersistentVelocityOverLifetimeModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentVelocityOverLifetimeModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentVelocityOverLifetimeModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentVelocityOverLifetimeModule>), P_0.GetType());
		}
		foreach (PersistentVelocityOverLifetimeModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentVelocityOverLifetimeModule> Read(List<PersistentVelocityOverLifetimeModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentVelocityOverLifetimeModule> list = new List<PersistentVelocityOverLifetimeModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentVelocityOverLifetimeModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentVelocityOverLifetimeModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentVelocityOverLifetimeModule item = (PersistentVelocityOverLifetimeModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentVelocityOverLifetimeModule> list3 = new List<PersistentVelocityOverLifetimeModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentVelocityOverLifetimeModule> list4 = new List<PersistentVelocityOverLifetimeModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAnchoredJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAnchoredJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAnchoredJoint2D[]>), P_0.GetType());
		}
		PersistentAnchoredJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAnchoredJoint2D[] array = value;
		foreach (PersistentAnchoredJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAnchoredJoint2D[]> Read(PrimitiveContract<PersistentAnchoredJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnchoredJoint2D[]> primitiveContract = new PrimitiveContract<PersistentAnchoredJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAnchoredJoint2D[] value = P_0.Value;
				List<PersistentAnchoredJoint2D> list = new List<PersistentAnchoredJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnchoredJoint2D item = (PersistentAnchoredJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAnchoredJoint2D[] array = new PersistentAnchoredJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnchoredJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentAnchoredJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAnchoredJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentAnchoredJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAnchoredJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAnchoredJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAnchoredJoint2D>), P_0.GetType());
		}
		foreach (PersistentAnchoredJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAnchoredJoint2D> Read(List<PersistentAnchoredJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAnchoredJoint2D> list = new List<PersistentAnchoredJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAnchoredJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAnchoredJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnchoredJoint2D item = (PersistentAnchoredJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAnchoredJoint2D> list3 = new List<PersistentAnchoredJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAnchoredJoint2D> list4 = new List<PersistentAnchoredJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAnimation[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAnimation[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAnimation[]>), P_0.GetType());
		}
		PersistentAnimation[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAnimation[] array = value;
		foreach (PersistentAnimation obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAnimation[]> Read(PrimitiveContract<PersistentAnimation[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimation[]> primitiveContract = new PrimitiveContract<PersistentAnimation[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAnimation[] value = P_0.Value;
				List<PersistentAnimation> list = new List<PersistentAnimation>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimation item = (PersistentAnimation)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAnimation[] array = new PersistentAnimation[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimation[]> primitiveContract2 = new PrimitiveContract<PersistentAnimation[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAnimation[]> primitiveContract3 = new PrimitiveContract<PersistentAnimation[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAnimation> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAnimation>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAnimation>), P_0.GetType());
		}
		foreach (PersistentAnimation item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAnimation> Read(List<PersistentAnimation> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAnimation> list = new List<PersistentAnimation>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAnimation>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAnimation> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimation item = (PersistentAnimation)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAnimation> list3 = new List<PersistentAnimation>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAnimation> list4 = new List<PersistentAnimation>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAnimationClip[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAnimationClip[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAnimationClip[]>), P_0.GetType());
		}
		PersistentAnimationClip[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAnimationClip[] array = value;
		foreach (PersistentAnimationClip obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAnimationClip[]> Read(PrimitiveContract<PersistentAnimationClip[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimationClip[]> primitiveContract = new PrimitiveContract<PersistentAnimationClip[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAnimationClip[] value = P_0.Value;
				List<PersistentAnimationClip> list = new List<PersistentAnimationClip>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimationClip item = (PersistentAnimationClip)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAnimationClip[] array = new PersistentAnimationClip[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimationClip[]> primitiveContract2 = new PrimitiveContract<PersistentAnimationClip[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAnimationClip[]> primitiveContract3 = new PrimitiveContract<PersistentAnimationClip[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAnimationClip> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAnimationClip>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAnimationClip>), P_0.GetType());
		}
		foreach (PersistentAnimationClip item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAnimationClip> Read(List<PersistentAnimationClip> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAnimationClip> list = new List<PersistentAnimationClip>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAnimationClip>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAnimationClip> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimationClip item = (PersistentAnimationClip)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAnimationClip> list3 = new List<PersistentAnimationClip>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAnimationClip> list4 = new List<PersistentAnimationClip>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAnimator[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAnimator[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAnimator[]>), P_0.GetType());
		}
		PersistentAnimator[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAnimator[] array = value;
		foreach (PersistentAnimator obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAnimator[]> Read(PrimitiveContract<PersistentAnimator[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimator[]> primitiveContract = new PrimitiveContract<PersistentAnimator[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAnimator[] value = P_0.Value;
				List<PersistentAnimator> list = new List<PersistentAnimator>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimator item = (PersistentAnimator)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAnimator[] array = new PersistentAnimator[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimator[]> primitiveContract2 = new PrimitiveContract<PersistentAnimator[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAnimator[]> primitiveContract3 = new PrimitiveContract<PersistentAnimator[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAnimator> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAnimator>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAnimator>), P_0.GetType());
		}
		foreach (PersistentAnimator item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAnimator> Read(List<PersistentAnimator> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAnimator> list = new List<PersistentAnimator>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAnimator>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAnimator> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimator item = (PersistentAnimator)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAnimator> list3 = new List<PersistentAnimator>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAnimator> list4 = new List<PersistentAnimator>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAnimatorOverrideController[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAnimatorOverrideController[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAnimatorOverrideController[]>), P_0.GetType());
		}
		PersistentAnimatorOverrideController[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAnimatorOverrideController[] array = value;
		foreach (PersistentAnimatorOverrideController obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAnimatorOverrideController[]> Read(PrimitiveContract<PersistentAnimatorOverrideController[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimatorOverrideController[]> primitiveContract = new PrimitiveContract<PersistentAnimatorOverrideController[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAnimatorOverrideController[] value = P_0.Value;
				List<PersistentAnimatorOverrideController> list = new List<PersistentAnimatorOverrideController>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimatorOverrideController item = (PersistentAnimatorOverrideController)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAnimatorOverrideController[] array = new PersistentAnimatorOverrideController[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAnimatorOverrideController[]> primitiveContract2 = new PrimitiveContract<PersistentAnimatorOverrideController[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAnimatorOverrideController[]> primitiveContract3 = new PrimitiveContract<PersistentAnimatorOverrideController[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAnimatorOverrideController> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAnimatorOverrideController>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAnimatorOverrideController>), P_0.GetType());
		}
		foreach (PersistentAnimatorOverrideController item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAnimatorOverrideController> Read(List<PersistentAnimatorOverrideController> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAnimatorOverrideController> list = new List<PersistentAnimatorOverrideController>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAnimatorOverrideController>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAnimatorOverrideController> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAnimatorOverrideController item = (PersistentAnimatorOverrideController)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAnimatorOverrideController> list3 = new List<PersistentAnimatorOverrideController>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAnimatorOverrideController> list4 = new List<PersistentAnimatorOverrideController>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAreaEffector2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAreaEffector2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAreaEffector2D[]>), P_0.GetType());
		}
		PersistentAreaEffector2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAreaEffector2D[] array = value;
		foreach (PersistentAreaEffector2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAreaEffector2D[]> Read(PrimitiveContract<PersistentAreaEffector2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAreaEffector2D[]> primitiveContract = new PrimitiveContract<PersistentAreaEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAreaEffector2D[] value = P_0.Value;
				List<PersistentAreaEffector2D> list = new List<PersistentAreaEffector2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAreaEffector2D item = (PersistentAreaEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAreaEffector2D[] array = new PersistentAreaEffector2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAreaEffector2D[]> primitiveContract2 = new PrimitiveContract<PersistentAreaEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAreaEffector2D[]> primitiveContract3 = new PrimitiveContract<PersistentAreaEffector2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAreaEffector2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAreaEffector2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAreaEffector2D>), P_0.GetType());
		}
		foreach (PersistentAreaEffector2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAreaEffector2D> Read(List<PersistentAreaEffector2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAreaEffector2D> list = new List<PersistentAreaEffector2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAreaEffector2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAreaEffector2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAreaEffector2D item = (PersistentAreaEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAreaEffector2D> list3 = new List<PersistentAreaEffector2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAreaEffector2D> list4 = new List<PersistentAreaEffector2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAspectRatioFitter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAspectRatioFitter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAspectRatioFitter[]>), P_0.GetType());
		}
		PersistentAspectRatioFitter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAspectRatioFitter[] array = value;
		foreach (PersistentAspectRatioFitter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAspectRatioFitter[]> Read(PrimitiveContract<PersistentAspectRatioFitter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAspectRatioFitter[]> primitiveContract = new PrimitiveContract<PersistentAspectRatioFitter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAspectRatioFitter[] value = P_0.Value;
				List<PersistentAspectRatioFitter> list = new List<PersistentAspectRatioFitter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAspectRatioFitter item = (PersistentAspectRatioFitter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAspectRatioFitter[] array = new PersistentAspectRatioFitter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAspectRatioFitter[]> primitiveContract2 = new PrimitiveContract<PersistentAspectRatioFitter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAspectRatioFitter[]> primitiveContract3 = new PrimitiveContract<PersistentAspectRatioFitter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAspectRatioFitter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAspectRatioFitter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAspectRatioFitter>), P_0.GetType());
		}
		foreach (PersistentAspectRatioFitter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAspectRatioFitter> Read(List<PersistentAspectRatioFitter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAspectRatioFitter> list = new List<PersistentAspectRatioFitter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAspectRatioFitter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAspectRatioFitter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAspectRatioFitter item = (PersistentAspectRatioFitter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAspectRatioFitter> list3 = new List<PersistentAspectRatioFitter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAspectRatioFitter> list4 = new List<PersistentAspectRatioFitter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAssetBundle[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAssetBundle[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAssetBundle[]>), P_0.GetType());
		}
		PersistentAssetBundle[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAssetBundle[] array = value;
		foreach (PersistentAssetBundle obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAssetBundle[]> Read(PrimitiveContract<PersistentAssetBundle[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAssetBundle[]> primitiveContract = new PrimitiveContract<PersistentAssetBundle[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAssetBundle[] value = P_0.Value;
				List<PersistentAssetBundle> list = new List<PersistentAssetBundle>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAssetBundle item = (PersistentAssetBundle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAssetBundle[] array = new PersistentAssetBundle[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAssetBundle[]> primitiveContract2 = new PrimitiveContract<PersistentAssetBundle[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAssetBundle[]> primitiveContract3 = new PrimitiveContract<PersistentAssetBundle[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAssetBundle> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAssetBundle>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAssetBundle>), P_0.GetType());
		}
		foreach (PersistentAssetBundle item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAssetBundle> Read(List<PersistentAssetBundle> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAssetBundle> list = new List<PersistentAssetBundle>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAssetBundle>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAssetBundle> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAssetBundle item = (PersistentAssetBundle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAssetBundle> list3 = new List<PersistentAssetBundle>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAssetBundle> list4 = new List<PersistentAssetBundle>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAssetBundleManifest[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAssetBundleManifest[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAssetBundleManifest[]>), P_0.GetType());
		}
		PersistentAssetBundleManifest[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAssetBundleManifest[] array = value;
		foreach (PersistentAssetBundleManifest obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAssetBundleManifest[]> Read(PrimitiveContract<PersistentAssetBundleManifest[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAssetBundleManifest[]> primitiveContract = new PrimitiveContract<PersistentAssetBundleManifest[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAssetBundleManifest[] value = P_0.Value;
				List<PersistentAssetBundleManifest> list = new List<PersistentAssetBundleManifest>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAssetBundleManifest item = (PersistentAssetBundleManifest)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAssetBundleManifest[] array = new PersistentAssetBundleManifest[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAssetBundleManifest[]> primitiveContract2 = new PrimitiveContract<PersistentAssetBundleManifest[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAssetBundleManifest[]> primitiveContract3 = new PrimitiveContract<PersistentAssetBundleManifest[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAssetBundleManifest> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAssetBundleManifest>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAssetBundleManifest>), P_0.GetType());
		}
		foreach (PersistentAssetBundleManifest item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAssetBundleManifest> Read(List<PersistentAssetBundleManifest> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAssetBundleManifest> list = new List<PersistentAssetBundleManifest>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAssetBundleManifest>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAssetBundleManifest> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAssetBundleManifest item = (PersistentAssetBundleManifest)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAssetBundleManifest> list3 = new List<PersistentAssetBundleManifest>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAssetBundleManifest> list4 = new List<PersistentAssetBundleManifest>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioBehaviour[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioBehaviour[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioBehaviour[]>), P_0.GetType());
		}
		PersistentAudioBehaviour[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioBehaviour[] array = value;
		foreach (PersistentAudioBehaviour obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioBehaviour[]> Read(PrimitiveContract<PersistentAudioBehaviour[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioBehaviour[]> primitiveContract = new PrimitiveContract<PersistentAudioBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioBehaviour[] value = P_0.Value;
				List<PersistentAudioBehaviour> list = new List<PersistentAudioBehaviour>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioBehaviour item = (PersistentAudioBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioBehaviour[] array = new PersistentAudioBehaviour[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioBehaviour[]> primitiveContract2 = new PrimitiveContract<PersistentAudioBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioBehaviour[]> primitiveContract3 = new PrimitiveContract<PersistentAudioBehaviour[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioBehaviour> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioBehaviour>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioBehaviour>), P_0.GetType());
		}
		foreach (PersistentAudioBehaviour item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioBehaviour> Read(List<PersistentAudioBehaviour> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioBehaviour> list = new List<PersistentAudioBehaviour>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioBehaviour>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioBehaviour> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioBehaviour item = (PersistentAudioBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioBehaviour> list3 = new List<PersistentAudioBehaviour>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioBehaviour> list4 = new List<PersistentAudioBehaviour>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioChorusFilter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioChorusFilter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioChorusFilter[]>), P_0.GetType());
		}
		PersistentAudioChorusFilter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioChorusFilter[] array = value;
		foreach (PersistentAudioChorusFilter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioChorusFilter[]> Read(PrimitiveContract<PersistentAudioChorusFilter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioChorusFilter[]> primitiveContract = new PrimitiveContract<PersistentAudioChorusFilter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioChorusFilter[] value = P_0.Value;
				List<PersistentAudioChorusFilter> list = new List<PersistentAudioChorusFilter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioChorusFilter item = (PersistentAudioChorusFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioChorusFilter[] array = new PersistentAudioChorusFilter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioChorusFilter[]> primitiveContract2 = new PrimitiveContract<PersistentAudioChorusFilter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioChorusFilter[]> primitiveContract3 = new PrimitiveContract<PersistentAudioChorusFilter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioChorusFilter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioChorusFilter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioChorusFilter>), P_0.GetType());
		}
		foreach (PersistentAudioChorusFilter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioChorusFilter> Read(List<PersistentAudioChorusFilter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioChorusFilter> list = new List<PersistentAudioChorusFilter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioChorusFilter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioChorusFilter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioChorusFilter item = (PersistentAudioChorusFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioChorusFilter> list3 = new List<PersistentAudioChorusFilter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioChorusFilter> list4 = new List<PersistentAudioChorusFilter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioClip[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioClip[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioClip[]>), P_0.GetType());
		}
		PersistentAudioClip[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioClip[] array = value;
		foreach (PersistentAudioClip obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioClip[]> Read(PrimitiveContract<PersistentAudioClip[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioClip[]> primitiveContract = new PrimitiveContract<PersistentAudioClip[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioClip[] value = P_0.Value;
				List<PersistentAudioClip> list = new List<PersistentAudioClip>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioClip item = (PersistentAudioClip)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioClip[] array = new PersistentAudioClip[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioClip[]> primitiveContract2 = new PrimitiveContract<PersistentAudioClip[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioClip[]> primitiveContract3 = new PrimitiveContract<PersistentAudioClip[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioClip> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioClip>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioClip>), P_0.GetType());
		}
		foreach (PersistentAudioClip item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioClip> Read(List<PersistentAudioClip> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioClip> list = new List<PersistentAudioClip>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioClip>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioClip> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioClip item = (PersistentAudioClip)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioClip> list3 = new List<PersistentAudioClip>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioClip> list4 = new List<PersistentAudioClip>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioDistortionFilter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioDistortionFilter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioDistortionFilter[]>), P_0.GetType());
		}
		PersistentAudioDistortionFilter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioDistortionFilter[] array = value;
		foreach (PersistentAudioDistortionFilter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioDistortionFilter[]> Read(PrimitiveContract<PersistentAudioDistortionFilter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioDistortionFilter[]> primitiveContract = new PrimitiveContract<PersistentAudioDistortionFilter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioDistortionFilter[] value = P_0.Value;
				List<PersistentAudioDistortionFilter> list = new List<PersistentAudioDistortionFilter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioDistortionFilter item = (PersistentAudioDistortionFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioDistortionFilter[] array = new PersistentAudioDistortionFilter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioDistortionFilter[]> primitiveContract2 = new PrimitiveContract<PersistentAudioDistortionFilter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioDistortionFilter[]> primitiveContract3 = new PrimitiveContract<PersistentAudioDistortionFilter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioDistortionFilter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioDistortionFilter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioDistortionFilter>), P_0.GetType());
		}
		foreach (PersistentAudioDistortionFilter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioDistortionFilter> Read(List<PersistentAudioDistortionFilter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioDistortionFilter> list = new List<PersistentAudioDistortionFilter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioDistortionFilter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioDistortionFilter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioDistortionFilter item = (PersistentAudioDistortionFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioDistortionFilter> list3 = new List<PersistentAudioDistortionFilter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioDistortionFilter> list4 = new List<PersistentAudioDistortionFilter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioEchoFilter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioEchoFilter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioEchoFilter[]>), P_0.GetType());
		}
		PersistentAudioEchoFilter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioEchoFilter[] array = value;
		foreach (PersistentAudioEchoFilter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioEchoFilter[]> Read(PrimitiveContract<PersistentAudioEchoFilter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioEchoFilter[]> primitiveContract = new PrimitiveContract<PersistentAudioEchoFilter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioEchoFilter[] value = P_0.Value;
				List<PersistentAudioEchoFilter> list = new List<PersistentAudioEchoFilter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioEchoFilter item = (PersistentAudioEchoFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioEchoFilter[] array = new PersistentAudioEchoFilter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioEchoFilter[]> primitiveContract2 = new PrimitiveContract<PersistentAudioEchoFilter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioEchoFilter[]> primitiveContract3 = new PrimitiveContract<PersistentAudioEchoFilter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioEchoFilter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioEchoFilter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioEchoFilter>), P_0.GetType());
		}
		foreach (PersistentAudioEchoFilter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioEchoFilter> Read(List<PersistentAudioEchoFilter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioEchoFilter> list = new List<PersistentAudioEchoFilter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioEchoFilter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioEchoFilter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioEchoFilter item = (PersistentAudioEchoFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioEchoFilter> list3 = new List<PersistentAudioEchoFilter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioEchoFilter> list4 = new List<PersistentAudioEchoFilter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioHighPassFilter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioHighPassFilter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioHighPassFilter[]>), P_0.GetType());
		}
		PersistentAudioHighPassFilter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioHighPassFilter[] array = value;
		foreach (PersistentAudioHighPassFilter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioHighPassFilter[]> Read(PrimitiveContract<PersistentAudioHighPassFilter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioHighPassFilter[]> primitiveContract = new PrimitiveContract<PersistentAudioHighPassFilter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioHighPassFilter[] value = P_0.Value;
				List<PersistentAudioHighPassFilter> list = new List<PersistentAudioHighPassFilter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioHighPassFilter item = (PersistentAudioHighPassFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioHighPassFilter[] array = new PersistentAudioHighPassFilter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioHighPassFilter[]> primitiveContract2 = new PrimitiveContract<PersistentAudioHighPassFilter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioHighPassFilter[]> primitiveContract3 = new PrimitiveContract<PersistentAudioHighPassFilter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioHighPassFilter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioHighPassFilter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioHighPassFilter>), P_0.GetType());
		}
		foreach (PersistentAudioHighPassFilter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioHighPassFilter> Read(List<PersistentAudioHighPassFilter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioHighPassFilter> list = new List<PersistentAudioHighPassFilter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioHighPassFilter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioHighPassFilter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioHighPassFilter item = (PersistentAudioHighPassFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioHighPassFilter> list3 = new List<PersistentAudioHighPassFilter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioHighPassFilter> list4 = new List<PersistentAudioHighPassFilter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioListener[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioListener[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioListener[]>), P_0.GetType());
		}
		PersistentAudioListener[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioListener[] array = value;
		foreach (PersistentAudioListener obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioListener[]> Read(PrimitiveContract<PersistentAudioListener[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioListener[]> primitiveContract = new PrimitiveContract<PersistentAudioListener[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioListener[] value = P_0.Value;
				List<PersistentAudioListener> list = new List<PersistentAudioListener>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioListener item = (PersistentAudioListener)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioListener[] array = new PersistentAudioListener[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioListener[]> primitiveContract2 = new PrimitiveContract<PersistentAudioListener[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioListener[]> primitiveContract3 = new PrimitiveContract<PersistentAudioListener[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioListener> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioListener>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioListener>), P_0.GetType());
		}
		foreach (PersistentAudioListener item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioListener> Read(List<PersistentAudioListener> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioListener> list = new List<PersistentAudioListener>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioListener>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioListener> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioListener item = (PersistentAudioListener)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioListener> list3 = new List<PersistentAudioListener>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioListener> list4 = new List<PersistentAudioListener>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioLowPassFilter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioLowPassFilter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioLowPassFilter[]>), P_0.GetType());
		}
		PersistentAudioLowPassFilter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioLowPassFilter[] array = value;
		foreach (PersistentAudioLowPassFilter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioLowPassFilter[]> Read(PrimitiveContract<PersistentAudioLowPassFilter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioLowPassFilter[]> primitiveContract = new PrimitiveContract<PersistentAudioLowPassFilter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioLowPassFilter[] value = P_0.Value;
				List<PersistentAudioLowPassFilter> list = new List<PersistentAudioLowPassFilter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioLowPassFilter item = (PersistentAudioLowPassFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioLowPassFilter[] array = new PersistentAudioLowPassFilter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioLowPassFilter[]> primitiveContract2 = new PrimitiveContract<PersistentAudioLowPassFilter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioLowPassFilter[]> primitiveContract3 = new PrimitiveContract<PersistentAudioLowPassFilter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioLowPassFilter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioLowPassFilter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioLowPassFilter>), P_0.GetType());
		}
		foreach (PersistentAudioLowPassFilter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioLowPassFilter> Read(List<PersistentAudioLowPassFilter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioLowPassFilter> list = new List<PersistentAudioLowPassFilter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioLowPassFilter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioLowPassFilter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioLowPassFilter item = (PersistentAudioLowPassFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioLowPassFilter> list3 = new List<PersistentAudioLowPassFilter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioLowPassFilter> list4 = new List<PersistentAudioLowPassFilter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioMixer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioMixer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioMixer[]>), P_0.GetType());
		}
		PersistentAudioMixer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioMixer[] array = value;
		foreach (PersistentAudioMixer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioMixer[]> Read(PrimitiveContract<PersistentAudioMixer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioMixer[]> primitiveContract = new PrimitiveContract<PersistentAudioMixer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioMixer[] value = P_0.Value;
				List<PersistentAudioMixer> list = new List<PersistentAudioMixer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioMixer item = (PersistentAudioMixer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioMixer[] array = new PersistentAudioMixer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioMixer[]> primitiveContract2 = new PrimitiveContract<PersistentAudioMixer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioMixer[]> primitiveContract3 = new PrimitiveContract<PersistentAudioMixer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioMixer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioMixer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioMixer>), P_0.GetType());
		}
		foreach (PersistentAudioMixer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioMixer> Read(List<PersistentAudioMixer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioMixer> list = new List<PersistentAudioMixer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioMixer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioMixer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioMixer item = (PersistentAudioMixer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioMixer> list3 = new List<PersistentAudioMixer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioMixer> list4 = new List<PersistentAudioMixer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioMixerGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioMixerGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioMixerGroup[]>), P_0.GetType());
		}
		PersistentAudioMixerGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioMixerGroup[] array = value;
		foreach (PersistentAudioMixerGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioMixerGroup[]> Read(PrimitiveContract<PersistentAudioMixerGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioMixerGroup[]> primitiveContract = new PrimitiveContract<PersistentAudioMixerGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioMixerGroup[] value = P_0.Value;
				List<PersistentAudioMixerGroup> list = new List<PersistentAudioMixerGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioMixerGroup item = (PersistentAudioMixerGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioMixerGroup[] array = new PersistentAudioMixerGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioMixerGroup[]> primitiveContract2 = new PrimitiveContract<PersistentAudioMixerGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioMixerGroup[]> primitiveContract3 = new PrimitiveContract<PersistentAudioMixerGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioMixerGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioMixerGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioMixerGroup>), P_0.GetType());
		}
		foreach (PersistentAudioMixerGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioMixerGroup> Read(List<PersistentAudioMixerGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioMixerGroup> list = new List<PersistentAudioMixerGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioMixerGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioMixerGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioMixerGroup item = (PersistentAudioMixerGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioMixerGroup> list3 = new List<PersistentAudioMixerGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioMixerGroup> list4 = new List<PersistentAudioMixerGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioMixerSnapshot[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioMixerSnapshot[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioMixerSnapshot[]>), P_0.GetType());
		}
		PersistentAudioMixerSnapshot[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioMixerSnapshot[] array = value;
		foreach (PersistentAudioMixerSnapshot obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioMixerSnapshot[]> Read(PrimitiveContract<PersistentAudioMixerSnapshot[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioMixerSnapshot[]> primitiveContract = new PrimitiveContract<PersistentAudioMixerSnapshot[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioMixerSnapshot[] value = P_0.Value;
				List<PersistentAudioMixerSnapshot> list = new List<PersistentAudioMixerSnapshot>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioMixerSnapshot item = (PersistentAudioMixerSnapshot)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioMixerSnapshot[] array = new PersistentAudioMixerSnapshot[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioMixerSnapshot[]> primitiveContract2 = new PrimitiveContract<PersistentAudioMixerSnapshot[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioMixerSnapshot[]> primitiveContract3 = new PrimitiveContract<PersistentAudioMixerSnapshot[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioMixerSnapshot> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioMixerSnapshot>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioMixerSnapshot>), P_0.GetType());
		}
		foreach (PersistentAudioMixerSnapshot item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioMixerSnapshot> Read(List<PersistentAudioMixerSnapshot> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioMixerSnapshot> list = new List<PersistentAudioMixerSnapshot>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioMixerSnapshot>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioMixerSnapshot> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioMixerSnapshot item = (PersistentAudioMixerSnapshot)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioMixerSnapshot> list3 = new List<PersistentAudioMixerSnapshot>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioMixerSnapshot> list4 = new List<PersistentAudioMixerSnapshot>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioReverbFilter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioReverbFilter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioReverbFilter[]>), P_0.GetType());
		}
		PersistentAudioReverbFilter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioReverbFilter[] array = value;
		foreach (PersistentAudioReverbFilter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioReverbFilter[]> Read(PrimitiveContract<PersistentAudioReverbFilter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioReverbFilter[]> primitiveContract = new PrimitiveContract<PersistentAudioReverbFilter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioReverbFilter[] value = P_0.Value;
				List<PersistentAudioReverbFilter> list = new List<PersistentAudioReverbFilter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioReverbFilter item = (PersistentAudioReverbFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioReverbFilter[] array = new PersistentAudioReverbFilter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioReverbFilter[]> primitiveContract2 = new PrimitiveContract<PersistentAudioReverbFilter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioReverbFilter[]> primitiveContract3 = new PrimitiveContract<PersistentAudioReverbFilter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioReverbFilter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioReverbFilter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioReverbFilter>), P_0.GetType());
		}
		foreach (PersistentAudioReverbFilter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioReverbFilter> Read(List<PersistentAudioReverbFilter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioReverbFilter> list = new List<PersistentAudioReverbFilter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioReverbFilter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioReverbFilter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioReverbFilter item = (PersistentAudioReverbFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioReverbFilter> list3 = new List<PersistentAudioReverbFilter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioReverbFilter> list4 = new List<PersistentAudioReverbFilter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioReverbZone[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioReverbZone[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioReverbZone[]>), P_0.GetType());
		}
		PersistentAudioReverbZone[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioReverbZone[] array = value;
		foreach (PersistentAudioReverbZone obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioReverbZone[]> Read(PrimitiveContract<PersistentAudioReverbZone[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioReverbZone[]> primitiveContract = new PrimitiveContract<PersistentAudioReverbZone[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioReverbZone[] value = P_0.Value;
				List<PersistentAudioReverbZone> list = new List<PersistentAudioReverbZone>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioReverbZone item = (PersistentAudioReverbZone)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioReverbZone[] array = new PersistentAudioReverbZone[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioReverbZone[]> primitiveContract2 = new PrimitiveContract<PersistentAudioReverbZone[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioReverbZone[]> primitiveContract3 = new PrimitiveContract<PersistentAudioReverbZone[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioReverbZone> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioReverbZone>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioReverbZone>), P_0.GetType());
		}
		foreach (PersistentAudioReverbZone item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioReverbZone> Read(List<PersistentAudioReverbZone> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioReverbZone> list = new List<PersistentAudioReverbZone>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioReverbZone>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioReverbZone> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioReverbZone item = (PersistentAudioReverbZone)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioReverbZone> list3 = new List<PersistentAudioReverbZone>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioReverbZone> list4 = new List<PersistentAudioReverbZone>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAudioSource[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAudioSource[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAudioSource[]>), P_0.GetType());
		}
		PersistentAudioSource[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAudioSource[] array = value;
		foreach (PersistentAudioSource obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAudioSource[]> Read(PrimitiveContract<PersistentAudioSource[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioSource[]> primitiveContract = new PrimitiveContract<PersistentAudioSource[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAudioSource[] value = P_0.Value;
				List<PersistentAudioSource> list = new List<PersistentAudioSource>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioSource item = (PersistentAudioSource)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAudioSource[] array = new PersistentAudioSource[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAudioSource[]> primitiveContract2 = new PrimitiveContract<PersistentAudioSource[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAudioSource[]> primitiveContract3 = new PrimitiveContract<PersistentAudioSource[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAudioSource> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAudioSource>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAudioSource>), P_0.GetType());
		}
		foreach (PersistentAudioSource item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAudioSource> Read(List<PersistentAudioSource> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAudioSource> list = new List<PersistentAudioSource>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAudioSource>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAudioSource> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAudioSource item = (PersistentAudioSource)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAudioSource> list3 = new List<PersistentAudioSource>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAudioSource> list4 = new List<PersistentAudioSource>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAvatar[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAvatar[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAvatar[]>), P_0.GetType());
		}
		PersistentAvatar[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAvatar[] array = value;
		foreach (PersistentAvatar obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAvatar[]> Read(PrimitiveContract<PersistentAvatar[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAvatar[]> primitiveContract = new PrimitiveContract<PersistentAvatar[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAvatar[] value = P_0.Value;
				List<PersistentAvatar> list = new List<PersistentAvatar>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAvatar item = (PersistentAvatar)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAvatar[] array = new PersistentAvatar[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAvatar[]> primitiveContract2 = new PrimitiveContract<PersistentAvatar[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAvatar[]> primitiveContract3 = new PrimitiveContract<PersistentAvatar[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAvatar> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAvatar>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAvatar>), P_0.GetType());
		}
		foreach (PersistentAvatar item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAvatar> Read(List<PersistentAvatar> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAvatar> list = new List<PersistentAvatar>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAvatar>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAvatar> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAvatar item = (PersistentAvatar)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAvatar> list3 = new List<PersistentAvatar>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAvatar> list4 = new List<PersistentAvatar>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentAvatarMask[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentAvatarMask[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentAvatarMask[]>), P_0.GetType());
		}
		PersistentAvatarMask[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentAvatarMask[] array = value;
		foreach (PersistentAvatarMask obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentAvatarMask[]> Read(PrimitiveContract<PersistentAvatarMask[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAvatarMask[]> primitiveContract = new PrimitiveContract<PersistentAvatarMask[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentAvatarMask[] value = P_0.Value;
				List<PersistentAvatarMask> list = new List<PersistentAvatarMask>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAvatarMask item = (PersistentAvatarMask)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentAvatarMask[] array = new PersistentAvatarMask[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentAvatarMask[]> primitiveContract2 = new PrimitiveContract<PersistentAvatarMask[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentAvatarMask[]> primitiveContract3 = new PrimitiveContract<PersistentAvatarMask[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentAvatarMask> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentAvatarMask>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentAvatarMask>), P_0.GetType());
		}
		foreach (PersistentAvatarMask item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentAvatarMask> Read(List<PersistentAvatarMask> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentAvatarMask> list = new List<PersistentAvatarMask>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentAvatarMask>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentAvatarMask> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentAvatarMask item = (PersistentAvatarMask)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentAvatarMask> list3 = new List<PersistentAvatarMask>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentAvatarMask> list4 = new List<PersistentAvatarMask>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBaseInput[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBaseInput[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBaseInput[]>), P_0.GetType());
		}
		PersistentBaseInput[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBaseInput[] array = value;
		foreach (PersistentBaseInput obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBaseInput[]> Read(PrimitiveContract<PersistentBaseInput[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBaseInput[]> primitiveContract = new PrimitiveContract<PersistentBaseInput[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBaseInput[] value = P_0.Value;
				List<PersistentBaseInput> list = new List<PersistentBaseInput>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBaseInput item = (PersistentBaseInput)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBaseInput[] array = new PersistentBaseInput[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBaseInput[]> primitiveContract2 = new PrimitiveContract<PersistentBaseInput[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBaseInput[]> primitiveContract3 = new PrimitiveContract<PersistentBaseInput[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBaseInput> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBaseInput>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBaseInput>), P_0.GetType());
		}
		foreach (PersistentBaseInput item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBaseInput> Read(List<PersistentBaseInput> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBaseInput> list = new List<PersistentBaseInput>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBaseInput>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBaseInput> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBaseInput item = (PersistentBaseInput)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBaseInput> list3 = new List<PersistentBaseInput>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBaseInput> list4 = new List<PersistentBaseInput>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBaseInputModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBaseInputModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBaseInputModule[]>), P_0.GetType());
		}
		PersistentBaseInputModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBaseInputModule[] array = value;
		foreach (PersistentBaseInputModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBaseInputModule[]> Read(PrimitiveContract<PersistentBaseInputModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBaseInputModule[]> primitiveContract = new PrimitiveContract<PersistentBaseInputModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBaseInputModule[] value = P_0.Value;
				List<PersistentBaseInputModule> list = new List<PersistentBaseInputModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBaseInputModule item = (PersistentBaseInputModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBaseInputModule[] array = new PersistentBaseInputModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBaseInputModule[]> primitiveContract2 = new PrimitiveContract<PersistentBaseInputModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBaseInputModule[]> primitiveContract3 = new PrimitiveContract<PersistentBaseInputModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBaseInputModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBaseInputModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBaseInputModule>), P_0.GetType());
		}
		foreach (PersistentBaseInputModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBaseInputModule> Read(List<PersistentBaseInputModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBaseInputModule> list = new List<PersistentBaseInputModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBaseInputModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBaseInputModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBaseInputModule item = (PersistentBaseInputModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBaseInputModule> list3 = new List<PersistentBaseInputModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBaseInputModule> list4 = new List<PersistentBaseInputModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBaseMeshEffect[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBaseMeshEffect[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBaseMeshEffect[]>), P_0.GetType());
		}
		PersistentBaseMeshEffect[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBaseMeshEffect[] array = value;
		foreach (PersistentBaseMeshEffect obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBaseMeshEffect[]> Read(PrimitiveContract<PersistentBaseMeshEffect[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBaseMeshEffect[]> primitiveContract = new PrimitiveContract<PersistentBaseMeshEffect[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBaseMeshEffect[] value = P_0.Value;
				List<PersistentBaseMeshEffect> list = new List<PersistentBaseMeshEffect>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBaseMeshEffect item = (PersistentBaseMeshEffect)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBaseMeshEffect[] array = new PersistentBaseMeshEffect[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBaseMeshEffect[]> primitiveContract2 = new PrimitiveContract<PersistentBaseMeshEffect[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBaseMeshEffect[]> primitiveContract3 = new PrimitiveContract<PersistentBaseMeshEffect[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBaseMeshEffect> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBaseMeshEffect>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBaseMeshEffect>), P_0.GetType());
		}
		foreach (PersistentBaseMeshEffect item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBaseMeshEffect> Read(List<PersistentBaseMeshEffect> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBaseMeshEffect> list = new List<PersistentBaseMeshEffect>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBaseMeshEffect>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBaseMeshEffect> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBaseMeshEffect item = (PersistentBaseMeshEffect)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBaseMeshEffect> list3 = new List<PersistentBaseMeshEffect>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBaseMeshEffect> list4 = new List<PersistentBaseMeshEffect>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBaseRaycaster[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBaseRaycaster[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBaseRaycaster[]>), P_0.GetType());
		}
		PersistentBaseRaycaster[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBaseRaycaster[] array = value;
		foreach (PersistentBaseRaycaster obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBaseRaycaster[]> Read(PrimitiveContract<PersistentBaseRaycaster[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBaseRaycaster[]> primitiveContract = new PrimitiveContract<PersistentBaseRaycaster[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBaseRaycaster[] value = P_0.Value;
				List<PersistentBaseRaycaster> list = new List<PersistentBaseRaycaster>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBaseRaycaster item = (PersistentBaseRaycaster)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBaseRaycaster[] array = new PersistentBaseRaycaster[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBaseRaycaster[]> primitiveContract2 = new PrimitiveContract<PersistentBaseRaycaster[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBaseRaycaster[]> primitiveContract3 = new PrimitiveContract<PersistentBaseRaycaster[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBaseRaycaster> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBaseRaycaster>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBaseRaycaster>), P_0.GetType());
		}
		foreach (PersistentBaseRaycaster item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBaseRaycaster> Read(List<PersistentBaseRaycaster> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBaseRaycaster> list = new List<PersistentBaseRaycaster>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBaseRaycaster>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBaseRaycaster> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBaseRaycaster item = (PersistentBaseRaycaster)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBaseRaycaster> list3 = new List<PersistentBaseRaycaster>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBaseRaycaster> list4 = new List<PersistentBaseRaycaster>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBehaviour[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBehaviour[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBehaviour[]>), P_0.GetType());
		}
		PersistentBehaviour[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBehaviour[] array = value;
		foreach (PersistentBehaviour obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBehaviour[]> Read(PrimitiveContract<PersistentBehaviour[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBehaviour[]> primitiveContract = new PrimitiveContract<PersistentBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBehaviour[] value = P_0.Value;
				List<PersistentBehaviour> list = new List<PersistentBehaviour>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBehaviour item = (PersistentBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBehaviour[] array = new PersistentBehaviour[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBehaviour[]> primitiveContract2 = new PrimitiveContract<PersistentBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBehaviour[]> primitiveContract3 = new PrimitiveContract<PersistentBehaviour[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBehaviour> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBehaviour>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBehaviour>), P_0.GetType());
		}
		foreach (PersistentBehaviour item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBehaviour> Read(List<PersistentBehaviour> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBehaviour> list = new List<PersistentBehaviour>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBehaviour>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBehaviour> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBehaviour item = (PersistentBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBehaviour> list3 = new List<PersistentBehaviour>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBehaviour> list4 = new List<PersistentBehaviour>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBillboardAsset[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBillboardAsset[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBillboardAsset[]>), P_0.GetType());
		}
		PersistentBillboardAsset[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBillboardAsset[] array = value;
		foreach (PersistentBillboardAsset obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBillboardAsset[]> Read(PrimitiveContract<PersistentBillboardAsset[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBillboardAsset[]> primitiveContract = new PrimitiveContract<PersistentBillboardAsset[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBillboardAsset[] value = P_0.Value;
				List<PersistentBillboardAsset> list = new List<PersistentBillboardAsset>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBillboardAsset item = (PersistentBillboardAsset)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBillboardAsset[] array = new PersistentBillboardAsset[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBillboardAsset[]> primitiveContract2 = new PrimitiveContract<PersistentBillboardAsset[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBillboardAsset[]> primitiveContract3 = new PrimitiveContract<PersistentBillboardAsset[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBillboardAsset> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBillboardAsset>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBillboardAsset>), P_0.GetType());
		}
		foreach (PersistentBillboardAsset item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBillboardAsset> Read(List<PersistentBillboardAsset> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBillboardAsset> list = new List<PersistentBillboardAsset>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBillboardAsset>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBillboardAsset> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBillboardAsset item = (PersistentBillboardAsset)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBillboardAsset> list3 = new List<PersistentBillboardAsset>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBillboardAsset> list4 = new List<PersistentBillboardAsset>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBillboardRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBillboardRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBillboardRenderer[]>), P_0.GetType());
		}
		PersistentBillboardRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBillboardRenderer[] array = value;
		foreach (PersistentBillboardRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBillboardRenderer[]> Read(PrimitiveContract<PersistentBillboardRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBillboardRenderer[]> primitiveContract = new PrimitiveContract<PersistentBillboardRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBillboardRenderer[] value = P_0.Value;
				List<PersistentBillboardRenderer> list = new List<PersistentBillboardRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBillboardRenderer item = (PersistentBillboardRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBillboardRenderer[] array = new PersistentBillboardRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBillboardRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentBillboardRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBillboardRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentBillboardRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBillboardRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBillboardRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBillboardRenderer>), P_0.GetType());
		}
		foreach (PersistentBillboardRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBillboardRenderer> Read(List<PersistentBillboardRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBillboardRenderer> list = new List<PersistentBillboardRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBillboardRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBillboardRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBillboardRenderer item = (PersistentBillboardRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBillboardRenderer> list3 = new List<PersistentBillboardRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBillboardRenderer> list4 = new List<PersistentBillboardRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBoxCollider[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBoxCollider[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBoxCollider[]>), P_0.GetType());
		}
		PersistentBoxCollider[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBoxCollider[] array = value;
		foreach (PersistentBoxCollider obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBoxCollider[]> Read(PrimitiveContract<PersistentBoxCollider[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBoxCollider[]> primitiveContract = new PrimitiveContract<PersistentBoxCollider[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBoxCollider[] value = P_0.Value;
				List<PersistentBoxCollider> list = new List<PersistentBoxCollider>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBoxCollider item = (PersistentBoxCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBoxCollider[] array = new PersistentBoxCollider[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBoxCollider[]> primitiveContract2 = new PrimitiveContract<PersistentBoxCollider[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBoxCollider[]> primitiveContract3 = new PrimitiveContract<PersistentBoxCollider[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBoxCollider> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBoxCollider>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBoxCollider>), P_0.GetType());
		}
		foreach (PersistentBoxCollider item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBoxCollider> Read(List<PersistentBoxCollider> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBoxCollider> list = new List<PersistentBoxCollider>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBoxCollider>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBoxCollider> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBoxCollider item = (PersistentBoxCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBoxCollider> list3 = new List<PersistentBoxCollider>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBoxCollider> list4 = new List<PersistentBoxCollider>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBoxCollider2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBoxCollider2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBoxCollider2D[]>), P_0.GetType());
		}
		PersistentBoxCollider2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBoxCollider2D[] array = value;
		foreach (PersistentBoxCollider2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBoxCollider2D[]> Read(PrimitiveContract<PersistentBoxCollider2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBoxCollider2D[]> primitiveContract = new PrimitiveContract<PersistentBoxCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBoxCollider2D[] value = P_0.Value;
				List<PersistentBoxCollider2D> list = new List<PersistentBoxCollider2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBoxCollider2D item = (PersistentBoxCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBoxCollider2D[] array = new PersistentBoxCollider2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBoxCollider2D[]> primitiveContract2 = new PrimitiveContract<PersistentBoxCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBoxCollider2D[]> primitiveContract3 = new PrimitiveContract<PersistentBoxCollider2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBoxCollider2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBoxCollider2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBoxCollider2D>), P_0.GetType());
		}
		foreach (PersistentBoxCollider2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBoxCollider2D> Read(List<PersistentBoxCollider2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBoxCollider2D> list = new List<PersistentBoxCollider2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBoxCollider2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBoxCollider2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBoxCollider2D item = (PersistentBoxCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBoxCollider2D> list3 = new List<PersistentBoxCollider2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBoxCollider2D> list4 = new List<PersistentBoxCollider2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentBuoyancyEffector2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentBuoyancyEffector2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentBuoyancyEffector2D[]>), P_0.GetType());
		}
		PersistentBuoyancyEffector2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentBuoyancyEffector2D[] array = value;
		foreach (PersistentBuoyancyEffector2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentBuoyancyEffector2D[]> Read(PrimitiveContract<PersistentBuoyancyEffector2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBuoyancyEffector2D[]> primitiveContract = new PrimitiveContract<PersistentBuoyancyEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentBuoyancyEffector2D[] value = P_0.Value;
				List<PersistentBuoyancyEffector2D> list = new List<PersistentBuoyancyEffector2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBuoyancyEffector2D item = (PersistentBuoyancyEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentBuoyancyEffector2D[] array = new PersistentBuoyancyEffector2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentBuoyancyEffector2D[]> primitiveContract2 = new PrimitiveContract<PersistentBuoyancyEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentBuoyancyEffector2D[]> primitiveContract3 = new PrimitiveContract<PersistentBuoyancyEffector2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentBuoyancyEffector2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentBuoyancyEffector2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentBuoyancyEffector2D>), P_0.GetType());
		}
		foreach (PersistentBuoyancyEffector2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentBuoyancyEffector2D> Read(List<PersistentBuoyancyEffector2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentBuoyancyEffector2D> list = new List<PersistentBuoyancyEffector2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentBuoyancyEffector2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentBuoyancyEffector2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentBuoyancyEffector2D item = (PersistentBuoyancyEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentBuoyancyEffector2D> list3 = new List<PersistentBuoyancyEffector2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentBuoyancyEffector2D> list4 = new List<PersistentBuoyancyEffector2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCamera[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCamera[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCamera[]>), P_0.GetType());
		}
		PersistentCamera[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCamera[] array = value;
		foreach (PersistentCamera obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCamera[]> Read(PrimitiveContract<PersistentCamera[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCamera[]> primitiveContract = new PrimitiveContract<PersistentCamera[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCamera[] value = P_0.Value;
				List<PersistentCamera> list = new List<PersistentCamera>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCamera item = (PersistentCamera)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCamera[] array = new PersistentCamera[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCamera[]> primitiveContract2 = new PrimitiveContract<PersistentCamera[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCamera[]> primitiveContract3 = new PrimitiveContract<PersistentCamera[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCamera> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCamera>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCamera>), P_0.GetType());
		}
		foreach (PersistentCamera item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCamera> Read(List<PersistentCamera> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCamera> list = new List<PersistentCamera>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCamera>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCamera> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCamera item = (PersistentCamera)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCamera> list3 = new List<PersistentCamera>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCamera> list4 = new List<PersistentCamera>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCanvas[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCanvas[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCanvas[]>), P_0.GetType());
		}
		PersistentCanvas[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCanvas[] array = value;
		foreach (PersistentCanvas obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCanvas[]> Read(PrimitiveContract<PersistentCanvas[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCanvas[]> primitiveContract = new PrimitiveContract<PersistentCanvas[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCanvas[] value = P_0.Value;
				List<PersistentCanvas> list = new List<PersistentCanvas>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCanvas item = (PersistentCanvas)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCanvas[] array = new PersistentCanvas[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCanvas[]> primitiveContract2 = new PrimitiveContract<PersistentCanvas[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCanvas[]> primitiveContract3 = new PrimitiveContract<PersistentCanvas[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCanvas> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCanvas>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCanvas>), P_0.GetType());
		}
		foreach (PersistentCanvas item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCanvas> Read(List<PersistentCanvas> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCanvas> list = new List<PersistentCanvas>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCanvas>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCanvas> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCanvas item = (PersistentCanvas)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCanvas> list3 = new List<PersistentCanvas>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCanvas> list4 = new List<PersistentCanvas>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCanvasGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCanvasGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCanvasGroup[]>), P_0.GetType());
		}
		PersistentCanvasGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCanvasGroup[] array = value;
		foreach (PersistentCanvasGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCanvasGroup[]> Read(PrimitiveContract<PersistentCanvasGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCanvasGroup[]> primitiveContract = new PrimitiveContract<PersistentCanvasGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCanvasGroup[] value = P_0.Value;
				List<PersistentCanvasGroup> list = new List<PersistentCanvasGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCanvasGroup item = (PersistentCanvasGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCanvasGroup[] array = new PersistentCanvasGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCanvasGroup[]> primitiveContract2 = new PrimitiveContract<PersistentCanvasGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCanvasGroup[]> primitiveContract3 = new PrimitiveContract<PersistentCanvasGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCanvasGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCanvasGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCanvasGroup>), P_0.GetType());
		}
		foreach (PersistentCanvasGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCanvasGroup> Read(List<PersistentCanvasGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCanvasGroup> list = new List<PersistentCanvasGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCanvasGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCanvasGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCanvasGroup item = (PersistentCanvasGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCanvasGroup> list3 = new List<PersistentCanvasGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCanvasGroup> list4 = new List<PersistentCanvasGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCanvasRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCanvasRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCanvasRenderer[]>), P_0.GetType());
		}
		PersistentCanvasRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCanvasRenderer[] array = value;
		foreach (PersistentCanvasRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCanvasRenderer[]> Read(PrimitiveContract<PersistentCanvasRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCanvasRenderer[]> primitiveContract = new PrimitiveContract<PersistentCanvasRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCanvasRenderer[] value = P_0.Value;
				List<PersistentCanvasRenderer> list = new List<PersistentCanvasRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCanvasRenderer item = (PersistentCanvasRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCanvasRenderer[] array = new PersistentCanvasRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCanvasRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentCanvasRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCanvasRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentCanvasRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCanvasRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCanvasRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCanvasRenderer>), P_0.GetType());
		}
		foreach (PersistentCanvasRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCanvasRenderer> Read(List<PersistentCanvasRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCanvasRenderer> list = new List<PersistentCanvasRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCanvasRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCanvasRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCanvasRenderer item = (PersistentCanvasRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCanvasRenderer> list3 = new List<PersistentCanvasRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCanvasRenderer> list4 = new List<PersistentCanvasRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCanvasScaler[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCanvasScaler[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCanvasScaler[]>), P_0.GetType());
		}
		PersistentCanvasScaler[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCanvasScaler[] array = value;
		foreach (PersistentCanvasScaler obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCanvasScaler[]> Read(PrimitiveContract<PersistentCanvasScaler[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCanvasScaler[]> primitiveContract = new PrimitiveContract<PersistentCanvasScaler[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCanvasScaler[] value = P_0.Value;
				List<PersistentCanvasScaler> list = new List<PersistentCanvasScaler>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCanvasScaler item = (PersistentCanvasScaler)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCanvasScaler[] array = new PersistentCanvasScaler[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCanvasScaler[]> primitiveContract2 = new PrimitiveContract<PersistentCanvasScaler[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCanvasScaler[]> primitiveContract3 = new PrimitiveContract<PersistentCanvasScaler[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCanvasScaler> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCanvasScaler>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCanvasScaler>), P_0.GetType());
		}
		foreach (PersistentCanvasScaler item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCanvasScaler> Read(List<PersistentCanvasScaler> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCanvasScaler> list = new List<PersistentCanvasScaler>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCanvasScaler>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCanvasScaler> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCanvasScaler item = (PersistentCanvasScaler)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCanvasScaler> list3 = new List<PersistentCanvasScaler>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCanvasScaler> list4 = new List<PersistentCanvasScaler>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCapsuleCollider[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCapsuleCollider[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCapsuleCollider[]>), P_0.GetType());
		}
		PersistentCapsuleCollider[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCapsuleCollider[] array = value;
		foreach (PersistentCapsuleCollider obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCapsuleCollider[]> Read(PrimitiveContract<PersistentCapsuleCollider[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCapsuleCollider[]> primitiveContract = new PrimitiveContract<PersistentCapsuleCollider[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCapsuleCollider[] value = P_0.Value;
				List<PersistentCapsuleCollider> list = new List<PersistentCapsuleCollider>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCapsuleCollider item = (PersistentCapsuleCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCapsuleCollider[] array = new PersistentCapsuleCollider[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCapsuleCollider[]> primitiveContract2 = new PrimitiveContract<PersistentCapsuleCollider[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCapsuleCollider[]> primitiveContract3 = new PrimitiveContract<PersistentCapsuleCollider[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCapsuleCollider> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCapsuleCollider>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCapsuleCollider>), P_0.GetType());
		}
		foreach (PersistentCapsuleCollider item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCapsuleCollider> Read(List<PersistentCapsuleCollider> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCapsuleCollider> list = new List<PersistentCapsuleCollider>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCapsuleCollider>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCapsuleCollider> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCapsuleCollider item = (PersistentCapsuleCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCapsuleCollider> list3 = new List<PersistentCapsuleCollider>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCapsuleCollider> list4 = new List<PersistentCapsuleCollider>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCapsuleCollider2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCapsuleCollider2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCapsuleCollider2D[]>), P_0.GetType());
		}
		PersistentCapsuleCollider2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCapsuleCollider2D[] array = value;
		foreach (PersistentCapsuleCollider2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCapsuleCollider2D[]> Read(PrimitiveContract<PersistentCapsuleCollider2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCapsuleCollider2D[]> primitiveContract = new PrimitiveContract<PersistentCapsuleCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCapsuleCollider2D[] value = P_0.Value;
				List<PersistentCapsuleCollider2D> list = new List<PersistentCapsuleCollider2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCapsuleCollider2D item = (PersistentCapsuleCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCapsuleCollider2D[] array = new PersistentCapsuleCollider2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCapsuleCollider2D[]> primitiveContract2 = new PrimitiveContract<PersistentCapsuleCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCapsuleCollider2D[]> primitiveContract3 = new PrimitiveContract<PersistentCapsuleCollider2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCapsuleCollider2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCapsuleCollider2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCapsuleCollider2D>), P_0.GetType());
		}
		foreach (PersistentCapsuleCollider2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCapsuleCollider2D> Read(List<PersistentCapsuleCollider2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCapsuleCollider2D> list = new List<PersistentCapsuleCollider2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCapsuleCollider2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCapsuleCollider2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCapsuleCollider2D item = (PersistentCapsuleCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCapsuleCollider2D> list3 = new List<PersistentCapsuleCollider2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCapsuleCollider2D> list4 = new List<PersistentCapsuleCollider2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCharacterController[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCharacterController[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCharacterController[]>), P_0.GetType());
		}
		PersistentCharacterController[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCharacterController[] array = value;
		foreach (PersistentCharacterController obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCharacterController[]> Read(PrimitiveContract<PersistentCharacterController[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCharacterController[]> primitiveContract = new PrimitiveContract<PersistentCharacterController[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCharacterController[] value = P_0.Value;
				List<PersistentCharacterController> list = new List<PersistentCharacterController>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCharacterController item = (PersistentCharacterController)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCharacterController[] array = new PersistentCharacterController[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCharacterController[]> primitiveContract2 = new PrimitiveContract<PersistentCharacterController[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCharacterController[]> primitiveContract3 = new PrimitiveContract<PersistentCharacterController[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCharacterController> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCharacterController>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCharacterController>), P_0.GetType());
		}
		foreach (PersistentCharacterController item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCharacterController> Read(List<PersistentCharacterController> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCharacterController> list = new List<PersistentCharacterController>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCharacterController>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCharacterController> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCharacterController item = (PersistentCharacterController)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCharacterController> list3 = new List<PersistentCharacterController>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCharacterController> list4 = new List<PersistentCharacterController>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCharacterJoint[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCharacterJoint[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCharacterJoint[]>), P_0.GetType());
		}
		PersistentCharacterJoint[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCharacterJoint[] array = value;
		foreach (PersistentCharacterJoint obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCharacterJoint[]> Read(PrimitiveContract<PersistentCharacterJoint[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCharacterJoint[]> primitiveContract = new PrimitiveContract<PersistentCharacterJoint[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCharacterJoint[] value = P_0.Value;
				List<PersistentCharacterJoint> list = new List<PersistentCharacterJoint>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCharacterJoint item = (PersistentCharacterJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCharacterJoint[] array = new PersistentCharacterJoint[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCharacterJoint[]> primitiveContract2 = new PrimitiveContract<PersistentCharacterJoint[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCharacterJoint[]> primitiveContract3 = new PrimitiveContract<PersistentCharacterJoint[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCharacterJoint> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCharacterJoint>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCharacterJoint>), P_0.GetType());
		}
		foreach (PersistentCharacterJoint item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCharacterJoint> Read(List<PersistentCharacterJoint> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCharacterJoint> list = new List<PersistentCharacterJoint>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCharacterJoint>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCharacterJoint> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCharacterJoint item = (PersistentCharacterJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCharacterJoint> list3 = new List<PersistentCharacterJoint>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCharacterJoint> list4 = new List<PersistentCharacterJoint>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCircleCollider2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCircleCollider2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCircleCollider2D[]>), P_0.GetType());
		}
		PersistentCircleCollider2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCircleCollider2D[] array = value;
		foreach (PersistentCircleCollider2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCircleCollider2D[]> Read(PrimitiveContract<PersistentCircleCollider2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCircleCollider2D[]> primitiveContract = new PrimitiveContract<PersistentCircleCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCircleCollider2D[] value = P_0.Value;
				List<PersistentCircleCollider2D> list = new List<PersistentCircleCollider2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCircleCollider2D item = (PersistentCircleCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCircleCollider2D[] array = new PersistentCircleCollider2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCircleCollider2D[]> primitiveContract2 = new PrimitiveContract<PersistentCircleCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCircleCollider2D[]> primitiveContract3 = new PrimitiveContract<PersistentCircleCollider2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCircleCollider2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCircleCollider2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCircleCollider2D>), P_0.GetType());
		}
		foreach (PersistentCircleCollider2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCircleCollider2D> Read(List<PersistentCircleCollider2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCircleCollider2D> list = new List<PersistentCircleCollider2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCircleCollider2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCircleCollider2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCircleCollider2D item = (PersistentCircleCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCircleCollider2D> list3 = new List<PersistentCircleCollider2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCircleCollider2D> list4 = new List<PersistentCircleCollider2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCollider[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCollider[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCollider[]>), P_0.GetType());
		}
		PersistentCollider[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCollider[] array = value;
		foreach (PersistentCollider obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCollider[]> Read(PrimitiveContract<PersistentCollider[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCollider[]> primitiveContract = new PrimitiveContract<PersistentCollider[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCollider[] value = P_0.Value;
				List<PersistentCollider> list = new List<PersistentCollider>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCollider item = (PersistentCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCollider[] array = new PersistentCollider[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCollider[]> primitiveContract2 = new PrimitiveContract<PersistentCollider[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCollider[]> primitiveContract3 = new PrimitiveContract<PersistentCollider[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCollider> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCollider>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCollider>), P_0.GetType());
		}
		foreach (PersistentCollider item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCollider> Read(List<PersistentCollider> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCollider> list = new List<PersistentCollider>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCollider>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCollider> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCollider item = (PersistentCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCollider> list3 = new List<PersistentCollider>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCollider> list4 = new List<PersistentCollider>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCollider2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCollider2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCollider2D[]>), P_0.GetType());
		}
		PersistentCollider2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCollider2D[] array = value;
		foreach (PersistentCollider2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCollider2D[]> Read(PrimitiveContract<PersistentCollider2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCollider2D[]> primitiveContract = new PrimitiveContract<PersistentCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCollider2D[] value = P_0.Value;
				List<PersistentCollider2D> list = new List<PersistentCollider2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCollider2D item = (PersistentCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCollider2D[] array = new PersistentCollider2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCollider2D[]> primitiveContract2 = new PrimitiveContract<PersistentCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCollider2D[]> primitiveContract3 = new PrimitiveContract<PersistentCollider2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCollider2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCollider2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCollider2D>), P_0.GetType());
		}
		foreach (PersistentCollider2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCollider2D> Read(List<PersistentCollider2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCollider2D> list = new List<PersistentCollider2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCollider2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCollider2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCollider2D item = (PersistentCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCollider2D> list3 = new List<PersistentCollider2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCollider2D> list4 = new List<PersistentCollider2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentComponent[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentComponent[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentComponent[]>), P_0.GetType());
		}
		PersistentComponent[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentComponent[] array = value;
		foreach (PersistentComponent obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentComponent[]> Read(PrimitiveContract<PersistentComponent[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentComponent[]> primitiveContract = new PrimitiveContract<PersistentComponent[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentComponent[] value = P_0.Value;
				List<PersistentComponent> list = new List<PersistentComponent>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentComponent item = (PersistentComponent)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentComponent[] array = new PersistentComponent[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentComponent[]> primitiveContract2 = new PrimitiveContract<PersistentComponent[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentComponent[]> primitiveContract3 = new PrimitiveContract<PersistentComponent[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentComponent> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentComponent>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentComponent>), P_0.GetType());
		}
		foreach (PersistentComponent item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentComponent> Read(List<PersistentComponent> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentComponent> list = new List<PersistentComponent>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentComponent>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentComponent> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentComponent item = (PersistentComponent)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentComponent> list3 = new List<PersistentComponent>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentComponent> list4 = new List<PersistentComponent>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCompositeCollider2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCompositeCollider2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCompositeCollider2D[]>), P_0.GetType());
		}
		PersistentCompositeCollider2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCompositeCollider2D[] array = value;
		foreach (PersistentCompositeCollider2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCompositeCollider2D[]> Read(PrimitiveContract<PersistentCompositeCollider2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCompositeCollider2D[]> primitiveContract = new PrimitiveContract<PersistentCompositeCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCompositeCollider2D[] value = P_0.Value;
				List<PersistentCompositeCollider2D> list = new List<PersistentCompositeCollider2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCompositeCollider2D item = (PersistentCompositeCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCompositeCollider2D[] array = new PersistentCompositeCollider2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCompositeCollider2D[]> primitiveContract2 = new PrimitiveContract<PersistentCompositeCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCompositeCollider2D[]> primitiveContract3 = new PrimitiveContract<PersistentCompositeCollider2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCompositeCollider2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCompositeCollider2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCompositeCollider2D>), P_0.GetType());
		}
		foreach (PersistentCompositeCollider2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCompositeCollider2D> Read(List<PersistentCompositeCollider2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCompositeCollider2D> list = new List<PersistentCompositeCollider2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCompositeCollider2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCompositeCollider2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCompositeCollider2D item = (PersistentCompositeCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCompositeCollider2D> list3 = new List<PersistentCompositeCollider2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCompositeCollider2D> list4 = new List<PersistentCompositeCollider2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentComputeShader[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentComputeShader[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentComputeShader[]>), P_0.GetType());
		}
		PersistentComputeShader[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentComputeShader[] array = value;
		foreach (PersistentComputeShader obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentComputeShader[]> Read(PrimitiveContract<PersistentComputeShader[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentComputeShader[]> primitiveContract = new PrimitiveContract<PersistentComputeShader[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentComputeShader[] value = P_0.Value;
				List<PersistentComputeShader> list = new List<PersistentComputeShader>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentComputeShader item = (PersistentComputeShader)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentComputeShader[] array = new PersistentComputeShader[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentComputeShader[]> primitiveContract2 = new PrimitiveContract<PersistentComputeShader[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentComputeShader[]> primitiveContract3 = new PrimitiveContract<PersistentComputeShader[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentComputeShader> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentComputeShader>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentComputeShader>), P_0.GetType());
		}
		foreach (PersistentComputeShader item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentComputeShader> Read(List<PersistentComputeShader> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentComputeShader> list = new List<PersistentComputeShader>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentComputeShader>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentComputeShader> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentComputeShader item = (PersistentComputeShader)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentComputeShader> list3 = new List<PersistentComputeShader>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentComputeShader> list4 = new List<PersistentComputeShader>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentConfigurableJoint[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentConfigurableJoint[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentConfigurableJoint[]>), P_0.GetType());
		}
		PersistentConfigurableJoint[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentConfigurableJoint[] array = value;
		foreach (PersistentConfigurableJoint obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentConfigurableJoint[]> Read(PrimitiveContract<PersistentConfigurableJoint[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentConfigurableJoint[]> primitiveContract = new PrimitiveContract<PersistentConfigurableJoint[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentConfigurableJoint[] value = P_0.Value;
				List<PersistentConfigurableJoint> list = new List<PersistentConfigurableJoint>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentConfigurableJoint item = (PersistentConfigurableJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentConfigurableJoint[] array = new PersistentConfigurableJoint[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentConfigurableJoint[]> primitiveContract2 = new PrimitiveContract<PersistentConfigurableJoint[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentConfigurableJoint[]> primitiveContract3 = new PrimitiveContract<PersistentConfigurableJoint[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentConfigurableJoint> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentConfigurableJoint>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentConfigurableJoint>), P_0.GetType());
		}
		foreach (PersistentConfigurableJoint item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentConfigurableJoint> Read(List<PersistentConfigurableJoint> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentConfigurableJoint> list = new List<PersistentConfigurableJoint>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentConfigurableJoint>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentConfigurableJoint> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentConfigurableJoint item = (PersistentConfigurableJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentConfigurableJoint> list3 = new List<PersistentConfigurableJoint>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentConfigurableJoint> list4 = new List<PersistentConfigurableJoint>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentConstantForce[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentConstantForce[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentConstantForce[]>), P_0.GetType());
		}
		PersistentConstantForce[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentConstantForce[] array = value;
		foreach (PersistentConstantForce obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentConstantForce[]> Read(PrimitiveContract<PersistentConstantForce[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentConstantForce[]> primitiveContract = new PrimitiveContract<PersistentConstantForce[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentConstantForce[] value = P_0.Value;
				List<PersistentConstantForce> list = new List<PersistentConstantForce>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentConstantForce item = (PersistentConstantForce)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentConstantForce[] array = new PersistentConstantForce[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentConstantForce[]> primitiveContract2 = new PrimitiveContract<PersistentConstantForce[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentConstantForce[]> primitiveContract3 = new PrimitiveContract<PersistentConstantForce[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentConstantForce> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentConstantForce>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentConstantForce>), P_0.GetType());
		}
		foreach (PersistentConstantForce item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentConstantForce> Read(List<PersistentConstantForce> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentConstantForce> list = new List<PersistentConstantForce>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentConstantForce>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentConstantForce> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentConstantForce item = (PersistentConstantForce)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentConstantForce> list3 = new List<PersistentConstantForce>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentConstantForce> list4 = new List<PersistentConstantForce>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentConstantForce2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentConstantForce2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentConstantForce2D[]>), P_0.GetType());
		}
		PersistentConstantForce2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentConstantForce2D[] array = value;
		foreach (PersistentConstantForce2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentConstantForce2D[]> Read(PrimitiveContract<PersistentConstantForce2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentConstantForce2D[]> primitiveContract = new PrimitiveContract<PersistentConstantForce2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentConstantForce2D[] value = P_0.Value;
				List<PersistentConstantForce2D> list = new List<PersistentConstantForce2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentConstantForce2D item = (PersistentConstantForce2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentConstantForce2D[] array = new PersistentConstantForce2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentConstantForce2D[]> primitiveContract2 = new PrimitiveContract<PersistentConstantForce2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentConstantForce2D[]> primitiveContract3 = new PrimitiveContract<PersistentConstantForce2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentConstantForce2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentConstantForce2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentConstantForce2D>), P_0.GetType());
		}
		foreach (PersistentConstantForce2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentConstantForce2D> Read(List<PersistentConstantForce2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentConstantForce2D> list = new List<PersistentConstantForce2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentConstantForce2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentConstantForce2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentConstantForce2D item = (PersistentConstantForce2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentConstantForce2D> list3 = new List<PersistentConstantForce2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentConstantForce2D> list4 = new List<PersistentConstantForce2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentContentSizeFitter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentContentSizeFitter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentContentSizeFitter[]>), P_0.GetType());
		}
		PersistentContentSizeFitter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentContentSizeFitter[] array = value;
		foreach (PersistentContentSizeFitter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentContentSizeFitter[]> Read(PrimitiveContract<PersistentContentSizeFitter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentContentSizeFitter[]> primitiveContract = new PrimitiveContract<PersistentContentSizeFitter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentContentSizeFitter[] value = P_0.Value;
				List<PersistentContentSizeFitter> list = new List<PersistentContentSizeFitter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentContentSizeFitter item = (PersistentContentSizeFitter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentContentSizeFitter[] array = new PersistentContentSizeFitter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentContentSizeFitter[]> primitiveContract2 = new PrimitiveContract<PersistentContentSizeFitter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentContentSizeFitter[]> primitiveContract3 = new PrimitiveContract<PersistentContentSizeFitter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentContentSizeFitter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentContentSizeFitter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentContentSizeFitter>), P_0.GetType());
		}
		foreach (PersistentContentSizeFitter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentContentSizeFitter> Read(List<PersistentContentSizeFitter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentContentSizeFitter> list = new List<PersistentContentSizeFitter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentContentSizeFitter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentContentSizeFitter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentContentSizeFitter item = (PersistentContentSizeFitter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentContentSizeFitter> list3 = new List<PersistentContentSizeFitter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentContentSizeFitter> list4 = new List<PersistentContentSizeFitter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCubemap[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCubemap[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCubemap[]>), P_0.GetType());
		}
		PersistentCubemap[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCubemap[] array = value;
		foreach (PersistentCubemap obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCubemap[]> Read(PrimitiveContract<PersistentCubemap[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCubemap[]> primitiveContract = new PrimitiveContract<PersistentCubemap[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCubemap[] value = P_0.Value;
				List<PersistentCubemap> list = new List<PersistentCubemap>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCubemap item = (PersistentCubemap)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCubemap[] array = new PersistentCubemap[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCubemap[]> primitiveContract2 = new PrimitiveContract<PersistentCubemap[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCubemap[]> primitiveContract3 = new PrimitiveContract<PersistentCubemap[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCubemap> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCubemap>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCubemap>), P_0.GetType());
		}
		foreach (PersistentCubemap item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCubemap> Read(List<PersistentCubemap> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCubemap> list = new List<PersistentCubemap>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCubemap>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCubemap> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCubemap item = (PersistentCubemap)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCubemap> list3 = new List<PersistentCubemap>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCubemap> list4 = new List<PersistentCubemap>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCubemapArray[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCubemapArray[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCubemapArray[]>), P_0.GetType());
		}
		PersistentCubemapArray[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCubemapArray[] array = value;
		foreach (PersistentCubemapArray obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCubemapArray[]> Read(PrimitiveContract<PersistentCubemapArray[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCubemapArray[]> primitiveContract = new PrimitiveContract<PersistentCubemapArray[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCubemapArray[] value = P_0.Value;
				List<PersistentCubemapArray> list = new List<PersistentCubemapArray>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCubemapArray item = (PersistentCubemapArray)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCubemapArray[] array = new PersistentCubemapArray[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCubemapArray[]> primitiveContract2 = new PrimitiveContract<PersistentCubemapArray[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCubemapArray[]> primitiveContract3 = new PrimitiveContract<PersistentCubemapArray[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCubemapArray> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCubemapArray>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCubemapArray>), P_0.GetType());
		}
		foreach (PersistentCubemapArray item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCubemapArray> Read(List<PersistentCubemapArray> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCubemapArray> list = new List<PersistentCubemapArray>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCubemapArray>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCubemapArray> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCubemapArray item = (PersistentCubemapArray)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCubemapArray> list3 = new List<PersistentCubemapArray>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCubemapArray> list4 = new List<PersistentCubemapArray>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentData[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentData[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentData[]>), P_0.GetType());
		}
		PersistentData[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentData[] array = value;
		foreach (PersistentData obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentData[]> Read(PrimitiveContract<PersistentData[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentData[]> primitiveContract = new PrimitiveContract<PersistentData[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentData[] value = P_0.Value;
				List<PersistentData> list = new List<PersistentData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentData item = Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentData[] array = new PersistentData[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentData[]> primitiveContract2 = new PrimitiveContract<PersistentData[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentData[]> primitiveContract3 = new PrimitiveContract<PersistentData[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentData> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentData>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentData>), P_0.GetType());
		}
		foreach (PersistentData item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentData> Read(List<PersistentData> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentData> list = new List<PersistentData>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentData>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentData> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentData item = Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentData> list3 = new List<PersistentData>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentData> list4 = new List<PersistentData>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PersistentDetailPrototype P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentDetailPrototype))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentDetailPrototype), P_0.GetType());
		}
		float bendFactor = P_0.bendFactor;
		if (bendFactor != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bendFactor, P_1);
		}
		Color dryColor = P_0.dryColor;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(dryColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color healthyColor = P_0.healthyColor;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(healthyColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float maxHeight = P_0.maxHeight;
		if (maxHeight != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxHeight, P_1);
		}
		float maxWidth = P_0.maxWidth;
		if (maxWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxWidth, P_1);
		}
		float minHeight = P_0.minHeight;
		if (minHeight != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minHeight, P_1);
		}
		float minWidth = P_0.minWidth;
		if (minWidth != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(minWidth, P_1);
		}
		float noiseSpread = P_0.noiseSpread;
		if (noiseSpread != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(noiseSpread, P_1);
		}
		long prototype = P_0.prototype;
		if (prototype != 0L)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(prototype, P_1);
		}
		long prototypeTexture = P_0.prototypeTexture;
		if (prototypeTexture != 0L)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(prototypeTexture, P_1);
		}
		uint renderMode = P_0.renderMode;
		if (renderMode != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(renderMode, P_1);
		}
		bool usePrototypeMesh = P_0.usePrototypeMesh;
		if (usePrototypeMesh)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(usePrototypeMesh, P_1);
		}
	}

	private static PersistentDetailPrototype Read(PersistentDetailPrototype P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype12 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype12, P_1);
					P_0 = persistentDetailPrototype12;
				}
				float minHeight = P_1.ReadSingle();
				P_0.bendFactor = minHeight;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype3 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype3, P_1);
					P_0 = persistentDetailPrototype3;
				}
				Color dryColor = P_0.dryColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(dryColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color dryColor2 = color;
				P_0.dryColor = dryColor2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype11 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype11, P_1);
					P_0 = persistentDetailPrototype11;
				}
				Color healthyColor = P_0.healthyColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(healthyColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color dryColor2 = color2;
				P_0.healthyColor = dryColor2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype9 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype9, P_1);
					P_0 = persistentDetailPrototype9;
				}
				float minHeight = P_1.ReadSingle();
				P_0.maxHeight = minHeight;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype5 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype5, P_1);
					P_0 = persistentDetailPrototype5;
				}
				float minHeight = P_1.ReadSingle();
				P_0.maxWidth = minHeight;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype2 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype2, P_1);
					P_0 = persistentDetailPrototype2;
				}
				float minHeight = P_1.ReadSingle();
				P_0.minHeight = minHeight;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype8 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype8, P_1);
					P_0 = persistentDetailPrototype8;
				}
				float minHeight = P_1.ReadSingle();
				P_0.minWidth = minHeight;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype6 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype6, P_1);
					P_0 = persistentDetailPrototype6;
				}
				float minHeight = P_1.ReadSingle();
				P_0.noiseSpread = minHeight;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype13 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype13, P_1);
					P_0 = persistentDetailPrototype13;
				}
				long prototypeTexture = P_1.ReadInt64();
				P_0.prototype = prototypeTexture;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype10 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype10, P_1);
					P_0 = persistentDetailPrototype10;
				}
				long prototypeTexture = P_1.ReadInt64();
				P_0.prototypeTexture = prototypeTexture;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype7 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype7, P_1);
					P_0 = persistentDetailPrototype7;
				}
				uint renderMode = P_1.ReadUInt32();
				P_0.renderMode = renderMode;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype4 = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype4, P_1);
					P_0 = persistentDetailPrototype4;
				}
				bool usePrototypeMesh = P_1.ReadBoolean();
				P_0.usePrototypeMesh = usePrototypeMesh;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentDetailPrototype persistentDetailPrototype = new PersistentDetailPrototype();
					ProtoReader.NoteObject(persistentDetailPrototype, P_1);
					P_0 = persistentDetailPrototype;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentDetailPrototype persistentDetailPrototype14 = new PersistentDetailPrototype();
			ProtoReader.NoteObject(persistentDetailPrototype14, P_1);
			P_0 = persistentDetailPrototype14;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentDetailPrototype[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentDetailPrototype[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentDetailPrototype[]>), P_0.GetType());
		}
		PersistentDetailPrototype[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentDetailPrototype[] array = value;
		foreach (PersistentDetailPrototype obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentDetailPrototype[]> Read(PrimitiveContract<PersistentDetailPrototype[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentDetailPrototype[]> primitiveContract = new PrimitiveContract<PersistentDetailPrototype[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentDetailPrototype[] value = P_0.Value;
				List<PersistentDetailPrototype> list = new List<PersistentDetailPrototype>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDetailPrototype item = Read((PersistentDetailPrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentDetailPrototype[] array = new PersistentDetailPrototype[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentDetailPrototype[]> primitiveContract2 = new PrimitiveContract<PersistentDetailPrototype[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentDetailPrototype[]> primitiveContract3 = new PrimitiveContract<PersistentDetailPrototype[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentDetailPrototype> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentDetailPrototype>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentDetailPrototype>), P_0.GetType());
		}
		foreach (PersistentDetailPrototype item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentDetailPrototype> Read(List<PersistentDetailPrototype> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentDetailPrototype> list = new List<PersistentDetailPrototype>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentDetailPrototype>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentDetailPrototype> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDetailPrototype item = Read((PersistentDetailPrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentDetailPrototype> list3 = new List<PersistentDetailPrototype>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentDetailPrototype> list4 = new List<PersistentDetailPrototype>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentDistanceJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentDistanceJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentDistanceJoint2D[]>), P_0.GetType());
		}
		PersistentDistanceJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentDistanceJoint2D[] array = value;
		foreach (PersistentDistanceJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentDistanceJoint2D[]> Read(PrimitiveContract<PersistentDistanceJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentDistanceJoint2D[]> primitiveContract = new PrimitiveContract<PersistentDistanceJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentDistanceJoint2D[] value = P_0.Value;
				List<PersistentDistanceJoint2D> list = new List<PersistentDistanceJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDistanceJoint2D item = (PersistentDistanceJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentDistanceJoint2D[] array = new PersistentDistanceJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentDistanceJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentDistanceJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentDistanceJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentDistanceJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentDistanceJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentDistanceJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentDistanceJoint2D>), P_0.GetType());
		}
		foreach (PersistentDistanceJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentDistanceJoint2D> Read(List<PersistentDistanceJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentDistanceJoint2D> list = new List<PersistentDistanceJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentDistanceJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentDistanceJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDistanceJoint2D item = (PersistentDistanceJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentDistanceJoint2D> list3 = new List<PersistentDistanceJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentDistanceJoint2D> list4 = new List<PersistentDistanceJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentEdgeCollider2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentEdgeCollider2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentEdgeCollider2D[]>), P_0.GetType());
		}
		PersistentEdgeCollider2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentEdgeCollider2D[] array = value;
		foreach (PersistentEdgeCollider2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentEdgeCollider2D[]> Read(PrimitiveContract<PersistentEdgeCollider2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEdgeCollider2D[]> primitiveContract = new PrimitiveContract<PersistentEdgeCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentEdgeCollider2D[] value = P_0.Value;
				List<PersistentEdgeCollider2D> list = new List<PersistentEdgeCollider2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEdgeCollider2D item = (PersistentEdgeCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentEdgeCollider2D[] array = new PersistentEdgeCollider2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEdgeCollider2D[]> primitiveContract2 = new PrimitiveContract<PersistentEdgeCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentEdgeCollider2D[]> primitiveContract3 = new PrimitiveContract<PersistentEdgeCollider2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentEdgeCollider2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentEdgeCollider2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentEdgeCollider2D>), P_0.GetType());
		}
		foreach (PersistentEdgeCollider2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentEdgeCollider2D> Read(List<PersistentEdgeCollider2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentEdgeCollider2D> list = new List<PersistentEdgeCollider2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentEdgeCollider2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentEdgeCollider2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEdgeCollider2D item = (PersistentEdgeCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentEdgeCollider2D> list3 = new List<PersistentEdgeCollider2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentEdgeCollider2D> list4 = new List<PersistentEdgeCollider2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentEffector2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentEffector2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentEffector2D[]>), P_0.GetType());
		}
		PersistentEffector2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentEffector2D[] array = value;
		foreach (PersistentEffector2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentEffector2D[]> Read(PrimitiveContract<PersistentEffector2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEffector2D[]> primitiveContract = new PrimitiveContract<PersistentEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentEffector2D[] value = P_0.Value;
				List<PersistentEffector2D> list = new List<PersistentEffector2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEffector2D item = (PersistentEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentEffector2D[] array = new PersistentEffector2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEffector2D[]> primitiveContract2 = new PrimitiveContract<PersistentEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentEffector2D[]> primitiveContract3 = new PrimitiveContract<PersistentEffector2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentEffector2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentEffector2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentEffector2D>), P_0.GetType());
		}
		foreach (PersistentEffector2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentEffector2D> Read(List<PersistentEffector2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentEffector2D> list = new List<PersistentEffector2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentEffector2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentEffector2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEffector2D item = (PersistentEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentEffector2D> list3 = new List<PersistentEffector2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentEffector2D> list4 = new List<PersistentEffector2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentEventSystem[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentEventSystem[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentEventSystem[]>), P_0.GetType());
		}
		PersistentEventSystem[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentEventSystem[] array = value;
		foreach (PersistentEventSystem obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentEventSystem[]> Read(PrimitiveContract<PersistentEventSystem[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEventSystem[]> primitiveContract = new PrimitiveContract<PersistentEventSystem[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentEventSystem[] value = P_0.Value;
				List<PersistentEventSystem> list = new List<PersistentEventSystem>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEventSystem item = (PersistentEventSystem)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentEventSystem[] array = new PersistentEventSystem[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEventSystem[]> primitiveContract2 = new PrimitiveContract<PersistentEventSystem[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentEventSystem[]> primitiveContract3 = new PrimitiveContract<PersistentEventSystem[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentEventSystem> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentEventSystem>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentEventSystem>), P_0.GetType());
		}
		foreach (PersistentEventSystem item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentEventSystem> Read(List<PersistentEventSystem> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentEventSystem> list = new List<PersistentEventSystem>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentEventSystem>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentEventSystem> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEventSystem item = (PersistentEventSystem)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentEventSystem> list3 = new List<PersistentEventSystem>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentEventSystem> list4 = new List<PersistentEventSystem>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentEventTrigger[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentEventTrigger[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentEventTrigger[]>), P_0.GetType());
		}
		PersistentEventTrigger[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentEventTrigger[] array = value;
		foreach (PersistentEventTrigger obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentEventTrigger[]> Read(PrimitiveContract<PersistentEventTrigger[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEventTrigger[]> primitiveContract = new PrimitiveContract<PersistentEventTrigger[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentEventTrigger[] value = P_0.Value;
				List<PersistentEventTrigger> list = new List<PersistentEventTrigger>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEventTrigger item = (PersistentEventTrigger)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentEventTrigger[] array = new PersistentEventTrigger[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEventTrigger[]> primitiveContract2 = new PrimitiveContract<PersistentEventTrigger[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentEventTrigger[]> primitiveContract3 = new PrimitiveContract<PersistentEventTrigger[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentEventTrigger> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentEventTrigger>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentEventTrigger>), P_0.GetType());
		}
		foreach (PersistentEventTrigger item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentEventTrigger> Read(List<PersistentEventTrigger> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentEventTrigger> list = new List<PersistentEventTrigger>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentEventTrigger>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentEventTrigger> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEventTrigger item = (PersistentEventTrigger)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentEventTrigger> list3 = new List<PersistentEventTrigger>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentEventTrigger> list4 = new List<PersistentEventTrigger>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentFixedJoint[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentFixedJoint[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentFixedJoint[]>), P_0.GetType());
		}
		PersistentFixedJoint[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentFixedJoint[] array = value;
		foreach (PersistentFixedJoint obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentFixedJoint[]> Read(PrimitiveContract<PersistentFixedJoint[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFixedJoint[]> primitiveContract = new PrimitiveContract<PersistentFixedJoint[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentFixedJoint[] value = P_0.Value;
				List<PersistentFixedJoint> list = new List<PersistentFixedJoint>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFixedJoint item = (PersistentFixedJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentFixedJoint[] array = new PersistentFixedJoint[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFixedJoint[]> primitiveContract2 = new PrimitiveContract<PersistentFixedJoint[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentFixedJoint[]> primitiveContract3 = new PrimitiveContract<PersistentFixedJoint[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentFixedJoint> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentFixedJoint>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentFixedJoint>), P_0.GetType());
		}
		foreach (PersistentFixedJoint item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentFixedJoint> Read(List<PersistentFixedJoint> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentFixedJoint> list = new List<PersistentFixedJoint>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentFixedJoint>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentFixedJoint> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFixedJoint item = (PersistentFixedJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentFixedJoint> list3 = new List<PersistentFixedJoint>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentFixedJoint> list4 = new List<PersistentFixedJoint>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentFixedJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentFixedJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentFixedJoint2D[]>), P_0.GetType());
		}
		PersistentFixedJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentFixedJoint2D[] array = value;
		foreach (PersistentFixedJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentFixedJoint2D[]> Read(PrimitiveContract<PersistentFixedJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFixedJoint2D[]> primitiveContract = new PrimitiveContract<PersistentFixedJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentFixedJoint2D[] value = P_0.Value;
				List<PersistentFixedJoint2D> list = new List<PersistentFixedJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFixedJoint2D item = (PersistentFixedJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentFixedJoint2D[] array = new PersistentFixedJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFixedJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentFixedJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentFixedJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentFixedJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentFixedJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentFixedJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentFixedJoint2D>), P_0.GetType());
		}
		foreach (PersistentFixedJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentFixedJoint2D> Read(List<PersistentFixedJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentFixedJoint2D> list = new List<PersistentFixedJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentFixedJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentFixedJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFixedJoint2D item = (PersistentFixedJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentFixedJoint2D> list3 = new List<PersistentFixedJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentFixedJoint2D> list4 = new List<PersistentFixedJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentFlare[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentFlare[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentFlare[]>), P_0.GetType());
		}
		PersistentFlare[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentFlare[] array = value;
		foreach (PersistentFlare obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentFlare[]> Read(PrimitiveContract<PersistentFlare[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFlare[]> primitiveContract = new PrimitiveContract<PersistentFlare[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentFlare[] value = P_0.Value;
				List<PersistentFlare> list = new List<PersistentFlare>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFlare item = (PersistentFlare)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentFlare[] array = new PersistentFlare[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFlare[]> primitiveContract2 = new PrimitiveContract<PersistentFlare[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentFlare[]> primitiveContract3 = new PrimitiveContract<PersistentFlare[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentFlare> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentFlare>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentFlare>), P_0.GetType());
		}
		foreach (PersistentFlare item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentFlare> Read(List<PersistentFlare> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentFlare> list = new List<PersistentFlare>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentFlare>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentFlare> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFlare item = (PersistentFlare)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentFlare> list3 = new List<PersistentFlare>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentFlare> list4 = new List<PersistentFlare>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentFlareLayer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentFlareLayer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentFlareLayer[]>), P_0.GetType());
		}
		PersistentFlareLayer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentFlareLayer[] array = value;
		foreach (PersistentFlareLayer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentFlareLayer[]> Read(PrimitiveContract<PersistentFlareLayer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFlareLayer[]> primitiveContract = new PrimitiveContract<PersistentFlareLayer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentFlareLayer[] value = P_0.Value;
				List<PersistentFlareLayer> list = new List<PersistentFlareLayer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFlareLayer item = (PersistentFlareLayer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentFlareLayer[] array = new PersistentFlareLayer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFlareLayer[]> primitiveContract2 = new PrimitiveContract<PersistentFlareLayer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentFlareLayer[]> primitiveContract3 = new PrimitiveContract<PersistentFlareLayer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentFlareLayer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentFlareLayer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentFlareLayer>), P_0.GetType());
		}
		foreach (PersistentFlareLayer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentFlareLayer> Read(List<PersistentFlareLayer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentFlareLayer> list = new List<PersistentFlareLayer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentFlareLayer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentFlareLayer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFlareLayer item = (PersistentFlareLayer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentFlareLayer> list3 = new List<PersistentFlareLayer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentFlareLayer> list4 = new List<PersistentFlareLayer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentFont[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentFont[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentFont[]>), P_0.GetType());
		}
		PersistentFont[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentFont[] array = value;
		foreach (PersistentFont obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentFont[]> Read(PrimitiveContract<PersistentFont[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFont[]> primitiveContract = new PrimitiveContract<PersistentFont[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentFont[] value = P_0.Value;
				List<PersistentFont> list = new List<PersistentFont>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFont item = (PersistentFont)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentFont[] array = new PersistentFont[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFont[]> primitiveContract2 = new PrimitiveContract<PersistentFont[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentFont[]> primitiveContract3 = new PrimitiveContract<PersistentFont[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentFont> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentFont>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentFont>), P_0.GetType());
		}
		foreach (PersistentFont item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentFont> Read(List<PersistentFont> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentFont> list = new List<PersistentFont>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentFont>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentFont> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFont item = (PersistentFont)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentFont> list3 = new List<PersistentFont>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentFont> list4 = new List<PersistentFont>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentFrictionJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentFrictionJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentFrictionJoint2D[]>), P_0.GetType());
		}
		PersistentFrictionJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentFrictionJoint2D[] array = value;
		foreach (PersistentFrictionJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentFrictionJoint2D[]> Read(PrimitiveContract<PersistentFrictionJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFrictionJoint2D[]> primitiveContract = new PrimitiveContract<PersistentFrictionJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentFrictionJoint2D[] value = P_0.Value;
				List<PersistentFrictionJoint2D> list = new List<PersistentFrictionJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFrictionJoint2D item = (PersistentFrictionJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentFrictionJoint2D[] array = new PersistentFrictionJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentFrictionJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentFrictionJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentFrictionJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentFrictionJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentFrictionJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentFrictionJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentFrictionJoint2D>), P_0.GetType());
		}
		foreach (PersistentFrictionJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentFrictionJoint2D> Read(List<PersistentFrictionJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentFrictionJoint2D> list = new List<PersistentFrictionJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentFrictionJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentFrictionJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentFrictionJoint2D item = (PersistentFrictionJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentFrictionJoint2D> list3 = new List<PersistentFrictionJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentFrictionJoint2D> list4 = new List<PersistentFrictionJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGameObject[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGameObject[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGameObject[]>), P_0.GetType());
		}
		PersistentGameObject[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGameObject[] array = value;
		foreach (PersistentGameObject obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGameObject[]> Read(PrimitiveContract<PersistentGameObject[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGameObject[]> primitiveContract = new PrimitiveContract<PersistentGameObject[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGameObject[] value = P_0.Value;
				List<PersistentGameObject> list = new List<PersistentGameObject>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGameObject item = (PersistentGameObject)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGameObject[] array = new PersistentGameObject[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGameObject[]> primitiveContract2 = new PrimitiveContract<PersistentGameObject[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGameObject[]> primitiveContract3 = new PrimitiveContract<PersistentGameObject[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGameObject> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGameObject>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGameObject>), P_0.GetType());
		}
		foreach (PersistentGameObject item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGameObject> Read(List<PersistentGameObject> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGameObject> list = new List<PersistentGameObject>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGameObject>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGameObject> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGameObject item = (PersistentGameObject)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGameObject> list3 = new List<PersistentGameObject>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGameObject> list4 = new List<PersistentGameObject>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGraphic[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGraphic[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGraphic[]>), P_0.GetType());
		}
		PersistentGraphic[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGraphic[] array = value;
		foreach (PersistentGraphic obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGraphic[]> Read(PrimitiveContract<PersistentGraphic[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGraphic[]> primitiveContract = new PrimitiveContract<PersistentGraphic[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGraphic[] value = P_0.Value;
				List<PersistentGraphic> list = new List<PersistentGraphic>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGraphic item = (PersistentGraphic)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGraphic[] array = new PersistentGraphic[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGraphic[]> primitiveContract2 = new PrimitiveContract<PersistentGraphic[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGraphic[]> primitiveContract3 = new PrimitiveContract<PersistentGraphic[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGraphic> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGraphic>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGraphic>), P_0.GetType());
		}
		foreach (PersistentGraphic item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGraphic> Read(List<PersistentGraphic> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGraphic> list = new List<PersistentGraphic>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGraphic>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGraphic> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGraphic item = (PersistentGraphic)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGraphic> list3 = new List<PersistentGraphic>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGraphic> list4 = new List<PersistentGraphic>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGraphicRaycaster[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGraphicRaycaster[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGraphicRaycaster[]>), P_0.GetType());
		}
		PersistentGraphicRaycaster[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGraphicRaycaster[] array = value;
		foreach (PersistentGraphicRaycaster obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGraphicRaycaster[]> Read(PrimitiveContract<PersistentGraphicRaycaster[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGraphicRaycaster[]> primitiveContract = new PrimitiveContract<PersistentGraphicRaycaster[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGraphicRaycaster[] value = P_0.Value;
				List<PersistentGraphicRaycaster> list = new List<PersistentGraphicRaycaster>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGraphicRaycaster item = (PersistentGraphicRaycaster)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGraphicRaycaster[] array = new PersistentGraphicRaycaster[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGraphicRaycaster[]> primitiveContract2 = new PrimitiveContract<PersistentGraphicRaycaster[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGraphicRaycaster[]> primitiveContract3 = new PrimitiveContract<PersistentGraphicRaycaster[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGraphicRaycaster> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGraphicRaycaster>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGraphicRaycaster>), P_0.GetType());
		}
		foreach (PersistentGraphicRaycaster item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGraphicRaycaster> Read(List<PersistentGraphicRaycaster> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGraphicRaycaster> list = new List<PersistentGraphicRaycaster>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGraphicRaycaster>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGraphicRaycaster> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGraphicRaycaster item = (PersistentGraphicRaycaster)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGraphicRaycaster> list3 = new List<PersistentGraphicRaycaster>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGraphicRaycaster> list4 = new List<PersistentGraphicRaycaster>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGraphicsSettings[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGraphicsSettings[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGraphicsSettings[]>), P_0.GetType());
		}
		PersistentGraphicsSettings[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGraphicsSettings[] array = value;
		foreach (PersistentGraphicsSettings obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGraphicsSettings[]> Read(PrimitiveContract<PersistentGraphicsSettings[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGraphicsSettings[]> primitiveContract = new PrimitiveContract<PersistentGraphicsSettings[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGraphicsSettings[] value = P_0.Value;
				List<PersistentGraphicsSettings> list = new List<PersistentGraphicsSettings>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGraphicsSettings item = (PersistentGraphicsSettings)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGraphicsSettings[] array = new PersistentGraphicsSettings[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGraphicsSettings[]> primitiveContract2 = new PrimitiveContract<PersistentGraphicsSettings[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGraphicsSettings[]> primitiveContract3 = new PrimitiveContract<PersistentGraphicsSettings[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGraphicsSettings> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGraphicsSettings>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGraphicsSettings>), P_0.GetType());
		}
		foreach (PersistentGraphicsSettings item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGraphicsSettings> Read(List<PersistentGraphicsSettings> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGraphicsSettings> list = new List<PersistentGraphicsSettings>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGraphicsSettings>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGraphicsSettings> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGraphicsSettings item = (PersistentGraphicsSettings)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGraphicsSettings> list3 = new List<PersistentGraphicsSettings>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGraphicsSettings> list4 = new List<PersistentGraphicsSettings>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGridLayoutGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGridLayoutGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGridLayoutGroup[]>), P_0.GetType());
		}
		PersistentGridLayoutGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGridLayoutGroup[] array = value;
		foreach (PersistentGridLayoutGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGridLayoutGroup[]> Read(PrimitiveContract<PersistentGridLayoutGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGridLayoutGroup[]> primitiveContract = new PrimitiveContract<PersistentGridLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGridLayoutGroup[] value = P_0.Value;
				List<PersistentGridLayoutGroup> list = new List<PersistentGridLayoutGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGridLayoutGroup item = (PersistentGridLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGridLayoutGroup[] array = new PersistentGridLayoutGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGridLayoutGroup[]> primitiveContract2 = new PrimitiveContract<PersistentGridLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGridLayoutGroup[]> primitiveContract3 = new PrimitiveContract<PersistentGridLayoutGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGridLayoutGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGridLayoutGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGridLayoutGroup>), P_0.GetType());
		}
		foreach (PersistentGridLayoutGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGridLayoutGroup> Read(List<PersistentGridLayoutGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGridLayoutGroup> list = new List<PersistentGridLayoutGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGridLayoutGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGridLayoutGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGridLayoutGroup item = (PersistentGridLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGridLayoutGroup> list3 = new List<PersistentGridLayoutGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGridLayoutGroup> list4 = new List<PersistentGridLayoutGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGUIElement[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGUIElement[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGUIElement[]>), P_0.GetType());
		}
		PersistentGUIElement[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGUIElement[] array = value;
		foreach (PersistentGUIElement obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGUIElement[]> Read(PrimitiveContract<PersistentGUIElement[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUIElement[]> primitiveContract = new PrimitiveContract<PersistentGUIElement[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGUIElement[] value = P_0.Value;
				List<PersistentGUIElement> list = new List<PersistentGUIElement>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUIElement item = (PersistentGUIElement)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGUIElement[] array = new PersistentGUIElement[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUIElement[]> primitiveContract2 = new PrimitiveContract<PersistentGUIElement[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGUIElement[]> primitiveContract3 = new PrimitiveContract<PersistentGUIElement[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGUIElement> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGUIElement>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGUIElement>), P_0.GetType());
		}
		foreach (PersistentGUIElement item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGUIElement> Read(List<PersistentGUIElement> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGUIElement> list = new List<PersistentGUIElement>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGUIElement>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGUIElement> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUIElement item = (PersistentGUIElement)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGUIElement> list3 = new List<PersistentGUIElement>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGUIElement> list4 = new List<PersistentGUIElement>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGUILayer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGUILayer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGUILayer[]>), P_0.GetType());
		}
		PersistentGUILayer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGUILayer[] array = value;
		foreach (PersistentGUILayer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGUILayer[]> Read(PrimitiveContract<PersistentGUILayer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUILayer[]> primitiveContract = new PrimitiveContract<PersistentGUILayer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGUILayer[] value = P_0.Value;
				List<PersistentGUILayer> list = new List<PersistentGUILayer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUILayer item = (PersistentGUILayer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGUILayer[] array = new PersistentGUILayer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUILayer[]> primitiveContract2 = new PrimitiveContract<PersistentGUILayer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGUILayer[]> primitiveContract3 = new PrimitiveContract<PersistentGUILayer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGUILayer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGUILayer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGUILayer>), P_0.GetType());
		}
		foreach (PersistentGUILayer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGUILayer> Read(List<PersistentGUILayer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGUILayer> list = new List<PersistentGUILayer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGUILayer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGUILayer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUILayer item = (PersistentGUILayer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGUILayer> list3 = new List<PersistentGUILayer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGUILayer> list4 = new List<PersistentGUILayer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGUISkin[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGUISkin[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGUISkin[]>), P_0.GetType());
		}
		PersistentGUISkin[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGUISkin[] array = value;
		foreach (PersistentGUISkin obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGUISkin[]> Read(PrimitiveContract<PersistentGUISkin[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUISkin[]> primitiveContract = new PrimitiveContract<PersistentGUISkin[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGUISkin[] value = P_0.Value;
				List<PersistentGUISkin> list = new List<PersistentGUISkin>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUISkin item = (PersistentGUISkin)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGUISkin[] array = new PersistentGUISkin[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUISkin[]> primitiveContract2 = new PrimitiveContract<PersistentGUISkin[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGUISkin[]> primitiveContract3 = new PrimitiveContract<PersistentGUISkin[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGUISkin> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGUISkin>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGUISkin>), P_0.GetType());
		}
		foreach (PersistentGUISkin item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGUISkin> Read(List<PersistentGUISkin> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGUISkin> list = new List<PersistentGUISkin>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGUISkin>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGUISkin> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUISkin item = (PersistentGUISkin)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGUISkin> list3 = new List<PersistentGUISkin>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGUISkin> list4 = new List<PersistentGUISkin>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGUIStyle[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGUIStyle[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGUIStyle[]>), P_0.GetType());
		}
		PersistentGUIStyle[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGUIStyle[] array = value;
		foreach (PersistentGUIStyle obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGUIStyle[]> Read(PrimitiveContract<PersistentGUIStyle[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUIStyle[]> primitiveContract = new PrimitiveContract<PersistentGUIStyle[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGUIStyle[] value = P_0.Value;
				List<PersistentGUIStyle> list = new List<PersistentGUIStyle>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUIStyle item = (PersistentGUIStyle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGUIStyle[] array = new PersistentGUIStyle[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUIStyle[]> primitiveContract2 = new PrimitiveContract<PersistentGUIStyle[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGUIStyle[]> primitiveContract3 = new PrimitiveContract<PersistentGUIStyle[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGUIStyle> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGUIStyle>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGUIStyle>), P_0.GetType());
		}
		foreach (PersistentGUIStyle item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGUIStyle> Read(List<PersistentGUIStyle> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGUIStyle> list = new List<PersistentGUIStyle>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGUIStyle>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGUIStyle> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUIStyle item = (PersistentGUIStyle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGUIStyle> list3 = new List<PersistentGUIStyle>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGUIStyle> list4 = new List<PersistentGUIStyle>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentGUIStyleState[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentGUIStyleState[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentGUIStyleState[]>), P_0.GetType());
		}
		PersistentGUIStyleState[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentGUIStyleState[] array = value;
		foreach (PersistentGUIStyleState obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentGUIStyleState[]> Read(PrimitiveContract<PersistentGUIStyleState[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUIStyleState[]> primitiveContract = new PrimitiveContract<PersistentGUIStyleState[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentGUIStyleState[] value = P_0.Value;
				List<PersistentGUIStyleState> list = new List<PersistentGUIStyleState>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUIStyleState item = (PersistentGUIStyleState)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentGUIStyleState[] array = new PersistentGUIStyleState[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentGUIStyleState[]> primitiveContract2 = new PrimitiveContract<PersistentGUIStyleState[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentGUIStyleState[]> primitiveContract3 = new PrimitiveContract<PersistentGUIStyleState[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentGUIStyleState> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentGUIStyleState>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentGUIStyleState>), P_0.GetType());
		}
		foreach (PersistentGUIStyleState item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentGUIStyleState> Read(List<PersistentGUIStyleState> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentGUIStyleState> list = new List<PersistentGUIStyleState>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentGUIStyleState>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentGUIStyleState> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentGUIStyleState item = (PersistentGUIStyleState)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentGUIStyleState> list3 = new List<PersistentGUIStyleState>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentGUIStyleState> list4 = new List<PersistentGUIStyleState>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentHingeJoint[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentHingeJoint[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentHingeJoint[]>), P_0.GetType());
		}
		PersistentHingeJoint[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentHingeJoint[] array = value;
		foreach (PersistentHingeJoint obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentHingeJoint[]> Read(PrimitiveContract<PersistentHingeJoint[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentHingeJoint[]> primitiveContract = new PrimitiveContract<PersistentHingeJoint[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentHingeJoint[] value = P_0.Value;
				List<PersistentHingeJoint> list = new List<PersistentHingeJoint>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentHingeJoint item = (PersistentHingeJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentHingeJoint[] array = new PersistentHingeJoint[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentHingeJoint[]> primitiveContract2 = new PrimitiveContract<PersistentHingeJoint[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentHingeJoint[]> primitiveContract3 = new PrimitiveContract<PersistentHingeJoint[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentHingeJoint> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentHingeJoint>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentHingeJoint>), P_0.GetType());
		}
		foreach (PersistentHingeJoint item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentHingeJoint> Read(List<PersistentHingeJoint> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentHingeJoint> list = new List<PersistentHingeJoint>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentHingeJoint>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentHingeJoint> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentHingeJoint item = (PersistentHingeJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentHingeJoint> list3 = new List<PersistentHingeJoint>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentHingeJoint> list4 = new List<PersistentHingeJoint>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentHingeJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentHingeJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentHingeJoint2D[]>), P_0.GetType());
		}
		PersistentHingeJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentHingeJoint2D[] array = value;
		foreach (PersistentHingeJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentHingeJoint2D[]> Read(PrimitiveContract<PersistentHingeJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentHingeJoint2D[]> primitiveContract = new PrimitiveContract<PersistentHingeJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentHingeJoint2D[] value = P_0.Value;
				List<PersistentHingeJoint2D> list = new List<PersistentHingeJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentHingeJoint2D item = (PersistentHingeJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentHingeJoint2D[] array = new PersistentHingeJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentHingeJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentHingeJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentHingeJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentHingeJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentHingeJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentHingeJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentHingeJoint2D>), P_0.GetType());
		}
		foreach (PersistentHingeJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentHingeJoint2D> Read(List<PersistentHingeJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentHingeJoint2D> list = new List<PersistentHingeJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentHingeJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentHingeJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentHingeJoint2D item = (PersistentHingeJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentHingeJoint2D> list3 = new List<PersistentHingeJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentHingeJoint2D> list4 = new List<PersistentHingeJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentHorizontalLayoutGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentHorizontalLayoutGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentHorizontalLayoutGroup[]>), P_0.GetType());
		}
		PersistentHorizontalLayoutGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentHorizontalLayoutGroup[] array = value;
		foreach (PersistentHorizontalLayoutGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentHorizontalLayoutGroup[]> Read(PrimitiveContract<PersistentHorizontalLayoutGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentHorizontalLayoutGroup[]> primitiveContract = new PrimitiveContract<PersistentHorizontalLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentHorizontalLayoutGroup[] value = P_0.Value;
				List<PersistentHorizontalLayoutGroup> list = new List<PersistentHorizontalLayoutGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentHorizontalLayoutGroup item = (PersistentHorizontalLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentHorizontalLayoutGroup[] array = new PersistentHorizontalLayoutGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentHorizontalLayoutGroup[]> primitiveContract2 = new PrimitiveContract<PersistentHorizontalLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentHorizontalLayoutGroup[]> primitiveContract3 = new PrimitiveContract<PersistentHorizontalLayoutGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentHorizontalLayoutGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentHorizontalLayoutGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentHorizontalLayoutGroup>), P_0.GetType());
		}
		foreach (PersistentHorizontalLayoutGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentHorizontalLayoutGroup> Read(List<PersistentHorizontalLayoutGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentHorizontalLayoutGroup> list = new List<PersistentHorizontalLayoutGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentHorizontalLayoutGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentHorizontalLayoutGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentHorizontalLayoutGroup item = (PersistentHorizontalLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentHorizontalLayoutGroup> list3 = new List<PersistentHorizontalLayoutGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentHorizontalLayoutGroup> list4 = new List<PersistentHorizontalLayoutGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]>), P_0.GetType());
		}
		PersistentHorizontalOrVerticalLayoutGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentHorizontalOrVerticalLayoutGroup[] array = value;
		foreach (PersistentHorizontalOrVerticalLayoutGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]> Read(PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]> primitiveContract = new PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentHorizontalOrVerticalLayoutGroup[] value = P_0.Value;
				List<PersistentHorizontalOrVerticalLayoutGroup> list = new List<PersistentHorizontalOrVerticalLayoutGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentHorizontalOrVerticalLayoutGroup item = (PersistentHorizontalOrVerticalLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentHorizontalOrVerticalLayoutGroup[] array = new PersistentHorizontalOrVerticalLayoutGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]> primitiveContract2 = new PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]> primitiveContract3 = new PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentHorizontalOrVerticalLayoutGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentHorizontalOrVerticalLayoutGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentHorizontalOrVerticalLayoutGroup>), P_0.GetType());
		}
		foreach (PersistentHorizontalOrVerticalLayoutGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentHorizontalOrVerticalLayoutGroup> Read(List<PersistentHorizontalOrVerticalLayoutGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentHorizontalOrVerticalLayoutGroup> list = new List<PersistentHorizontalOrVerticalLayoutGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentHorizontalOrVerticalLayoutGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentHorizontalOrVerticalLayoutGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentHorizontalOrVerticalLayoutGroup item = (PersistentHorizontalOrVerticalLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentHorizontalOrVerticalLayoutGroup> list3 = new List<PersistentHorizontalOrVerticalLayoutGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentHorizontalOrVerticalLayoutGroup> list4 = new List<PersistentHorizontalOrVerticalLayoutGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentImage[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentImage[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentImage[]>), P_0.GetType());
		}
		PersistentImage[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentImage[] array = value;
		foreach (PersistentImage obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentImage[]> Read(PrimitiveContract<PersistentImage[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentImage[]> primitiveContract = new PrimitiveContract<PersistentImage[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentImage[] value = P_0.Value;
				List<PersistentImage> list = new List<PersistentImage>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentImage item = (PersistentImage)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentImage[] array = new PersistentImage[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentImage[]> primitiveContract2 = new PrimitiveContract<PersistentImage[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentImage[]> primitiveContract3 = new PrimitiveContract<PersistentImage[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentImage> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentImage>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentImage>), P_0.GetType());
		}
		foreach (PersistentImage item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentImage> Read(List<PersistentImage> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentImage> list = new List<PersistentImage>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentImage>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentImage> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentImage item = (PersistentImage)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentImage> list3 = new List<PersistentImage>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentImage> list4 = new List<PersistentImage>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentJoint[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentJoint[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentJoint[]>), P_0.GetType());
		}
		PersistentJoint[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentJoint[] array = value;
		foreach (PersistentJoint obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentJoint[]> Read(PrimitiveContract<PersistentJoint[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentJoint[]> primitiveContract = new PrimitiveContract<PersistentJoint[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentJoint[] value = P_0.Value;
				List<PersistentJoint> list = new List<PersistentJoint>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentJoint item = (PersistentJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentJoint[] array = new PersistentJoint[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentJoint[]> primitiveContract2 = new PrimitiveContract<PersistentJoint[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentJoint[]> primitiveContract3 = new PrimitiveContract<PersistentJoint[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentJoint> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentJoint>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentJoint>), P_0.GetType());
		}
		foreach (PersistentJoint item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentJoint> Read(List<PersistentJoint> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentJoint> list = new List<PersistentJoint>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentJoint>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentJoint> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentJoint item = (PersistentJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentJoint> list3 = new List<PersistentJoint>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentJoint> list4 = new List<PersistentJoint>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentJoint2D[]>), P_0.GetType());
		}
		PersistentJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentJoint2D[] array = value;
		foreach (PersistentJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentJoint2D[]> Read(PrimitiveContract<PersistentJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentJoint2D[]> primitiveContract = new PrimitiveContract<PersistentJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentJoint2D[] value = P_0.Value;
				List<PersistentJoint2D> list = new List<PersistentJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentJoint2D item = (PersistentJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentJoint2D[] array = new PersistentJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentJoint2D>), P_0.GetType());
		}
		foreach (PersistentJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentJoint2D> Read(List<PersistentJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentJoint2D> list = new List<PersistentJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentJoint2D item = (PersistentJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentJoint2D> list3 = new List<PersistentJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentJoint2D> list4 = new List<PersistentJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLayoutElement[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLayoutElement[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLayoutElement[]>), P_0.GetType());
		}
		PersistentLayoutElement[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLayoutElement[] array = value;
		foreach (PersistentLayoutElement obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLayoutElement[]> Read(PrimitiveContract<PersistentLayoutElement[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLayoutElement[]> primitiveContract = new PrimitiveContract<PersistentLayoutElement[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLayoutElement[] value = P_0.Value;
				List<PersistentLayoutElement> list = new List<PersistentLayoutElement>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLayoutElement item = (PersistentLayoutElement)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLayoutElement[] array = new PersistentLayoutElement[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLayoutElement[]> primitiveContract2 = new PrimitiveContract<PersistentLayoutElement[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLayoutElement[]> primitiveContract3 = new PrimitiveContract<PersistentLayoutElement[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLayoutElement> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLayoutElement>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLayoutElement>), P_0.GetType());
		}
		foreach (PersistentLayoutElement item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLayoutElement> Read(List<PersistentLayoutElement> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLayoutElement> list = new List<PersistentLayoutElement>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLayoutElement>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLayoutElement> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLayoutElement item = (PersistentLayoutElement)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLayoutElement> list3 = new List<PersistentLayoutElement>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLayoutElement> list4 = new List<PersistentLayoutElement>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLayoutGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLayoutGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLayoutGroup[]>), P_0.GetType());
		}
		PersistentLayoutGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLayoutGroup[] array = value;
		foreach (PersistentLayoutGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLayoutGroup[]> Read(PrimitiveContract<PersistentLayoutGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLayoutGroup[]> primitiveContract = new PrimitiveContract<PersistentLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLayoutGroup[] value = P_0.Value;
				List<PersistentLayoutGroup> list = new List<PersistentLayoutGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLayoutGroup item = (PersistentLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLayoutGroup[] array = new PersistentLayoutGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLayoutGroup[]> primitiveContract2 = new PrimitiveContract<PersistentLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLayoutGroup[]> primitiveContract3 = new PrimitiveContract<PersistentLayoutGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLayoutGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLayoutGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLayoutGroup>), P_0.GetType());
		}
		foreach (PersistentLayoutGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLayoutGroup> Read(List<PersistentLayoutGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLayoutGroup> list = new List<PersistentLayoutGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLayoutGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLayoutGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLayoutGroup item = (PersistentLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLayoutGroup> list3 = new List<PersistentLayoutGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLayoutGroup> list4 = new List<PersistentLayoutGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLensFlare[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLensFlare[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLensFlare[]>), P_0.GetType());
		}
		PersistentLensFlare[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLensFlare[] array = value;
		foreach (PersistentLensFlare obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLensFlare[]> Read(PrimitiveContract<PersistentLensFlare[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLensFlare[]> primitiveContract = new PrimitiveContract<PersistentLensFlare[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLensFlare[] value = P_0.Value;
				List<PersistentLensFlare> list = new List<PersistentLensFlare>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLensFlare item = (PersistentLensFlare)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLensFlare[] array = new PersistentLensFlare[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLensFlare[]> primitiveContract2 = new PrimitiveContract<PersistentLensFlare[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLensFlare[]> primitiveContract3 = new PrimitiveContract<PersistentLensFlare[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLensFlare> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLensFlare>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLensFlare>), P_0.GetType());
		}
		foreach (PersistentLensFlare item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLensFlare> Read(List<PersistentLensFlare> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLensFlare> list = new List<PersistentLensFlare>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLensFlare>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLensFlare> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLensFlare item = (PersistentLensFlare)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLensFlare> list3 = new List<PersistentLensFlare>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLensFlare> list4 = new List<PersistentLensFlare>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLight[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLight[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLight[]>), P_0.GetType());
		}
		PersistentLight[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLight[] array = value;
		foreach (PersistentLight obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLight[]> Read(PrimitiveContract<PersistentLight[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLight[]> primitiveContract = new PrimitiveContract<PersistentLight[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLight[] value = P_0.Value;
				List<PersistentLight> list = new List<PersistentLight>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLight item = (PersistentLight)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLight[] array = new PersistentLight[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLight[]> primitiveContract2 = new PrimitiveContract<PersistentLight[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLight[]> primitiveContract3 = new PrimitiveContract<PersistentLight[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLight> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLight>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLight>), P_0.GetType());
		}
		foreach (PersistentLight item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLight> Read(List<PersistentLight> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLight> list = new List<PersistentLight>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLight>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLight> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLight item = (PersistentLight)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLight> list3 = new List<PersistentLight>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLight> list4 = new List<PersistentLight>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLightmapSettings[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLightmapSettings[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLightmapSettings[]>), P_0.GetType());
		}
		PersistentLightmapSettings[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLightmapSettings[] array = value;
		foreach (PersistentLightmapSettings obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLightmapSettings[]> Read(PrimitiveContract<PersistentLightmapSettings[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightmapSettings[]> primitiveContract = new PrimitiveContract<PersistentLightmapSettings[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLightmapSettings[] value = P_0.Value;
				List<PersistentLightmapSettings> list = new List<PersistentLightmapSettings>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightmapSettings item = (PersistentLightmapSettings)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLightmapSettings[] array = new PersistentLightmapSettings[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightmapSettings[]> primitiveContract2 = new PrimitiveContract<PersistentLightmapSettings[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLightmapSettings[]> primitiveContract3 = new PrimitiveContract<PersistentLightmapSettings[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLightmapSettings> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLightmapSettings>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLightmapSettings>), P_0.GetType());
		}
		foreach (PersistentLightmapSettings item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLightmapSettings> Read(List<PersistentLightmapSettings> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLightmapSettings> list = new List<PersistentLightmapSettings>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLightmapSettings>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLightmapSettings> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightmapSettings item = (PersistentLightmapSettings)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLightmapSettings> list3 = new List<PersistentLightmapSettings>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLightmapSettings> list4 = new List<PersistentLightmapSettings>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLightProbeGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLightProbeGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLightProbeGroup[]>), P_0.GetType());
		}
		PersistentLightProbeGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLightProbeGroup[] array = value;
		foreach (PersistentLightProbeGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLightProbeGroup[]> Read(PrimitiveContract<PersistentLightProbeGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightProbeGroup[]> primitiveContract = new PrimitiveContract<PersistentLightProbeGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLightProbeGroup[] value = P_0.Value;
				List<PersistentLightProbeGroup> list = new List<PersistentLightProbeGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightProbeGroup item = (PersistentLightProbeGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLightProbeGroup[] array = new PersistentLightProbeGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightProbeGroup[]> primitiveContract2 = new PrimitiveContract<PersistentLightProbeGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLightProbeGroup[]> primitiveContract3 = new PrimitiveContract<PersistentLightProbeGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLightProbeGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLightProbeGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLightProbeGroup>), P_0.GetType());
		}
		foreach (PersistentLightProbeGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLightProbeGroup> Read(List<PersistentLightProbeGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLightProbeGroup> list = new List<PersistentLightProbeGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLightProbeGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLightProbeGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightProbeGroup item = (PersistentLightProbeGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLightProbeGroup> list3 = new List<PersistentLightProbeGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLightProbeGroup> list4 = new List<PersistentLightProbeGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLightProbeProxyVolume[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLightProbeProxyVolume[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLightProbeProxyVolume[]>), P_0.GetType());
		}
		PersistentLightProbeProxyVolume[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLightProbeProxyVolume[] array = value;
		foreach (PersistentLightProbeProxyVolume obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLightProbeProxyVolume[]> Read(PrimitiveContract<PersistentLightProbeProxyVolume[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightProbeProxyVolume[]> primitiveContract = new PrimitiveContract<PersistentLightProbeProxyVolume[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLightProbeProxyVolume[] value = P_0.Value;
				List<PersistentLightProbeProxyVolume> list = new List<PersistentLightProbeProxyVolume>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightProbeProxyVolume item = (PersistentLightProbeProxyVolume)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLightProbeProxyVolume[] array = new PersistentLightProbeProxyVolume[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightProbeProxyVolume[]> primitiveContract2 = new PrimitiveContract<PersistentLightProbeProxyVolume[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLightProbeProxyVolume[]> primitiveContract3 = new PrimitiveContract<PersistentLightProbeProxyVolume[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLightProbeProxyVolume> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLightProbeProxyVolume>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLightProbeProxyVolume>), P_0.GetType());
		}
		foreach (PersistentLightProbeProxyVolume item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLightProbeProxyVolume> Read(List<PersistentLightProbeProxyVolume> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLightProbeProxyVolume> list = new List<PersistentLightProbeProxyVolume>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLightProbeProxyVolume>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLightProbeProxyVolume> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightProbeProxyVolume item = (PersistentLightProbeProxyVolume)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLightProbeProxyVolume> list3 = new List<PersistentLightProbeProxyVolume>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLightProbeProxyVolume> list4 = new List<PersistentLightProbeProxyVolume>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLightProbes[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLightProbes[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLightProbes[]>), P_0.GetType());
		}
		PersistentLightProbes[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLightProbes[] array = value;
		foreach (PersistentLightProbes obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLightProbes[]> Read(PrimitiveContract<PersistentLightProbes[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightProbes[]> primitiveContract = new PrimitiveContract<PersistentLightProbes[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLightProbes[] value = P_0.Value;
				List<PersistentLightProbes> list = new List<PersistentLightProbes>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightProbes item = (PersistentLightProbes)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLightProbes[] array = new PersistentLightProbes[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLightProbes[]> primitiveContract2 = new PrimitiveContract<PersistentLightProbes[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLightProbes[]> primitiveContract3 = new PrimitiveContract<PersistentLightProbes[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLightProbes> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLightProbes>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLightProbes>), P_0.GetType());
		}
		foreach (PersistentLightProbes item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLightProbes> Read(List<PersistentLightProbes> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLightProbes> list = new List<PersistentLightProbes>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLightProbes>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLightProbes> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLightProbes item = (PersistentLightProbes)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLightProbes> list3 = new List<PersistentLightProbes>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLightProbes> list4 = new List<PersistentLightProbes>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLineRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLineRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLineRenderer[]>), P_0.GetType());
		}
		PersistentLineRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLineRenderer[] array = value;
		foreach (PersistentLineRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLineRenderer[]> Read(PrimitiveContract<PersistentLineRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLineRenderer[]> primitiveContract = new PrimitiveContract<PersistentLineRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLineRenderer[] value = P_0.Value;
				List<PersistentLineRenderer> list = new List<PersistentLineRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLineRenderer item = (PersistentLineRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLineRenderer[] array = new PersistentLineRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLineRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentLineRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLineRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentLineRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLineRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLineRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLineRenderer>), P_0.GetType());
		}
		foreach (PersistentLineRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLineRenderer> Read(List<PersistentLineRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLineRenderer> list = new List<PersistentLineRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLineRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLineRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLineRenderer item = (PersistentLineRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLineRenderer> list3 = new List<PersistentLineRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLineRenderer> list4 = new List<PersistentLineRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentLODGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentLODGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentLODGroup[]>), P_0.GetType());
		}
		PersistentLODGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentLODGroup[] array = value;
		foreach (PersistentLODGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentLODGroup[]> Read(PrimitiveContract<PersistentLODGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLODGroup[]> primitiveContract = new PrimitiveContract<PersistentLODGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentLODGroup[] value = P_0.Value;
				List<PersistentLODGroup> list = new List<PersistentLODGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLODGroup item = (PersistentLODGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentLODGroup[] array = new PersistentLODGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentLODGroup[]> primitiveContract2 = new PrimitiveContract<PersistentLODGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentLODGroup[]> primitiveContract3 = new PrimitiveContract<PersistentLODGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentLODGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentLODGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentLODGroup>), P_0.GetType());
		}
		foreach (PersistentLODGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentLODGroup> Read(List<PersistentLODGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentLODGroup> list = new List<PersistentLODGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentLODGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentLODGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentLODGroup item = (PersistentLODGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentLODGroup> list3 = new List<PersistentLODGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentLODGroup> list4 = new List<PersistentLODGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMask[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMask[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMask[]>), P_0.GetType());
		}
		PersistentMask[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMask[] array = value;
		foreach (PersistentMask obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMask[]> Read(PrimitiveContract<PersistentMask[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMask[]> primitiveContract = new PrimitiveContract<PersistentMask[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMask[] value = P_0.Value;
				List<PersistentMask> list = new List<PersistentMask>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMask item = (PersistentMask)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMask[] array = new PersistentMask[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMask[]> primitiveContract2 = new PrimitiveContract<PersistentMask[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMask[]> primitiveContract3 = new PrimitiveContract<PersistentMask[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMask> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMask>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMask>), P_0.GetType());
		}
		foreach (PersistentMask item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMask> Read(List<PersistentMask> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMask> list = new List<PersistentMask>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMask>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMask> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMask item = (PersistentMask)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMask> list3 = new List<PersistentMask>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMask> list4 = new List<PersistentMask>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMeshCollider[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMeshCollider[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMeshCollider[]>), P_0.GetType());
		}
		PersistentMeshCollider[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMeshCollider[] array = value;
		foreach (PersistentMeshCollider obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMeshCollider[]> Read(PrimitiveContract<PersistentMeshCollider[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMeshCollider[]> primitiveContract = new PrimitiveContract<PersistentMeshCollider[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMeshCollider[] value = P_0.Value;
				List<PersistentMeshCollider> list = new List<PersistentMeshCollider>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMeshCollider item = (PersistentMeshCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMeshCollider[] array = new PersistentMeshCollider[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMeshCollider[]> primitiveContract2 = new PrimitiveContract<PersistentMeshCollider[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMeshCollider[]> primitiveContract3 = new PrimitiveContract<PersistentMeshCollider[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMeshCollider> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMeshCollider>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMeshCollider>), P_0.GetType());
		}
		foreach (PersistentMeshCollider item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMeshCollider> Read(List<PersistentMeshCollider> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMeshCollider> list = new List<PersistentMeshCollider>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMeshCollider>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMeshCollider> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMeshCollider item = (PersistentMeshCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMeshCollider> list3 = new List<PersistentMeshCollider>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMeshCollider> list4 = new List<PersistentMeshCollider>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMeshFilter[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMeshFilter[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMeshFilter[]>), P_0.GetType());
		}
		PersistentMeshFilter[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMeshFilter[] array = value;
		foreach (PersistentMeshFilter obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMeshFilter[]> Read(PrimitiveContract<PersistentMeshFilter[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMeshFilter[]> primitiveContract = new PrimitiveContract<PersistentMeshFilter[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMeshFilter[] value = P_0.Value;
				List<PersistentMeshFilter> list = new List<PersistentMeshFilter>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMeshFilter item = (PersistentMeshFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMeshFilter[] array = new PersistentMeshFilter[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMeshFilter[]> primitiveContract2 = new PrimitiveContract<PersistentMeshFilter[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMeshFilter[]> primitiveContract3 = new PrimitiveContract<PersistentMeshFilter[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMeshFilter> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMeshFilter>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMeshFilter>), P_0.GetType());
		}
		foreach (PersistentMeshFilter item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMeshFilter> Read(List<PersistentMeshFilter> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMeshFilter> list = new List<PersistentMeshFilter>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMeshFilter>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMeshFilter> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMeshFilter item = (PersistentMeshFilter)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMeshFilter> list3 = new List<PersistentMeshFilter>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMeshFilter> list4 = new List<PersistentMeshFilter>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMeshRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMeshRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMeshRenderer[]>), P_0.GetType());
		}
		PersistentMeshRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMeshRenderer[] array = value;
		foreach (PersistentMeshRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMeshRenderer[]> Read(PrimitiveContract<PersistentMeshRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMeshRenderer[]> primitiveContract = new PrimitiveContract<PersistentMeshRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMeshRenderer[] value = P_0.Value;
				List<PersistentMeshRenderer> list = new List<PersistentMeshRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMeshRenderer item = (PersistentMeshRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMeshRenderer[] array = new PersistentMeshRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMeshRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentMeshRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMeshRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentMeshRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMeshRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMeshRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMeshRenderer>), P_0.GetType());
		}
		foreach (PersistentMeshRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMeshRenderer> Read(List<PersistentMeshRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMeshRenderer> list = new List<PersistentMeshRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMeshRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMeshRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMeshRenderer item = (PersistentMeshRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMeshRenderer> list3 = new List<PersistentMeshRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMeshRenderer> list4 = new List<PersistentMeshRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMonoBehaviour[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMonoBehaviour[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMonoBehaviour[]>), P_0.GetType());
		}
		PersistentMonoBehaviour[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMonoBehaviour[] array = value;
		foreach (PersistentMonoBehaviour obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMonoBehaviour[]> Read(PrimitiveContract<PersistentMonoBehaviour[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMonoBehaviour[]> primitiveContract = new PrimitiveContract<PersistentMonoBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMonoBehaviour[] value = P_0.Value;
				List<PersistentMonoBehaviour> list = new List<PersistentMonoBehaviour>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMonoBehaviour item = (PersistentMonoBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMonoBehaviour[] array = new PersistentMonoBehaviour[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMonoBehaviour[]> primitiveContract2 = new PrimitiveContract<PersistentMonoBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMonoBehaviour[]> primitiveContract3 = new PrimitiveContract<PersistentMonoBehaviour[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMonoBehaviour> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMonoBehaviour>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMonoBehaviour>), P_0.GetType());
		}
		foreach (PersistentMonoBehaviour item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMonoBehaviour> Read(List<PersistentMonoBehaviour> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMonoBehaviour> list = new List<PersistentMonoBehaviour>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMonoBehaviour>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMonoBehaviour> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMonoBehaviour item = (PersistentMonoBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMonoBehaviour> list3 = new List<PersistentMonoBehaviour>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMonoBehaviour> list4 = new List<PersistentMonoBehaviour>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMotion[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMotion[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMotion[]>), P_0.GetType());
		}
		PersistentMotion[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMotion[] array = value;
		foreach (PersistentMotion obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMotion[]> Read(PrimitiveContract<PersistentMotion[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMotion[]> primitiveContract = new PrimitiveContract<PersistentMotion[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMotion[] value = P_0.Value;
				List<PersistentMotion> list = new List<PersistentMotion>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMotion item = (PersistentMotion)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMotion[] array = new PersistentMotion[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMotion[]> primitiveContract2 = new PrimitiveContract<PersistentMotion[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMotion[]> primitiveContract3 = new PrimitiveContract<PersistentMotion[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMotion> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMotion>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMotion>), P_0.GetType());
		}
		foreach (PersistentMotion item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMotion> Read(List<PersistentMotion> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMotion> list = new List<PersistentMotion>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMotion>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMotion> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMotion item = (PersistentMotion)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMotion> list3 = new List<PersistentMotion>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMotion> list4 = new List<PersistentMotion>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMovieTexture[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMovieTexture[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMovieTexture[]>), P_0.GetType());
		}
		PersistentMovieTexture[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMovieTexture[] array = value;
		foreach (PersistentMovieTexture obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMovieTexture[]> Read(PrimitiveContract<PersistentMovieTexture[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMovieTexture[]> primitiveContract = new PrimitiveContract<PersistentMovieTexture[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMovieTexture[] value = P_0.Value;
				List<PersistentMovieTexture> list = new List<PersistentMovieTexture>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMovieTexture item = (PersistentMovieTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMovieTexture[] array = new PersistentMovieTexture[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMovieTexture[]> primitiveContract2 = new PrimitiveContract<PersistentMovieTexture[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMovieTexture[]> primitiveContract3 = new PrimitiveContract<PersistentMovieTexture[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMovieTexture> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMovieTexture>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMovieTexture>), P_0.GetType());
		}
		foreach (PersistentMovieTexture item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMovieTexture> Read(List<PersistentMovieTexture> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMovieTexture> list = new List<PersistentMovieTexture>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMovieTexture>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMovieTexture> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMovieTexture item = (PersistentMovieTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMovieTexture> list3 = new List<PersistentMovieTexture>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMovieTexture> list4 = new List<PersistentMovieTexture>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentNavMeshAgent[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentNavMeshAgent[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentNavMeshAgent[]>), P_0.GetType());
		}
		PersistentNavMeshAgent[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentNavMeshAgent[] array = value;
		foreach (PersistentNavMeshAgent obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentNavMeshAgent[]> Read(PrimitiveContract<PersistentNavMeshAgent[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNavMeshAgent[]> primitiveContract = new PrimitiveContract<PersistentNavMeshAgent[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentNavMeshAgent[] value = P_0.Value;
				List<PersistentNavMeshAgent> list = new List<PersistentNavMeshAgent>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNavMeshAgent item = (PersistentNavMeshAgent)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentNavMeshAgent[] array = new PersistentNavMeshAgent[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNavMeshAgent[]> primitiveContract2 = new PrimitiveContract<PersistentNavMeshAgent[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentNavMeshAgent[]> primitiveContract3 = new PrimitiveContract<PersistentNavMeshAgent[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentNavMeshAgent> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentNavMeshAgent>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentNavMeshAgent>), P_0.GetType());
		}
		foreach (PersistentNavMeshAgent item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentNavMeshAgent> Read(List<PersistentNavMeshAgent> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentNavMeshAgent> list = new List<PersistentNavMeshAgent>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentNavMeshAgent>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentNavMeshAgent> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNavMeshAgent item = (PersistentNavMeshAgent)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentNavMeshAgent> list3 = new List<PersistentNavMeshAgent>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentNavMeshAgent> list4 = new List<PersistentNavMeshAgent>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentNavMeshData[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentNavMeshData[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentNavMeshData[]>), P_0.GetType());
		}
		PersistentNavMeshData[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentNavMeshData[] array = value;
		foreach (PersistentNavMeshData obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentNavMeshData[]> Read(PrimitiveContract<PersistentNavMeshData[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNavMeshData[]> primitiveContract = new PrimitiveContract<PersistentNavMeshData[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentNavMeshData[] value = P_0.Value;
				List<PersistentNavMeshData> list = new List<PersistentNavMeshData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNavMeshData item = (PersistentNavMeshData)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentNavMeshData[] array = new PersistentNavMeshData[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNavMeshData[]> primitiveContract2 = new PrimitiveContract<PersistentNavMeshData[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentNavMeshData[]> primitiveContract3 = new PrimitiveContract<PersistentNavMeshData[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentNavMeshData> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentNavMeshData>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentNavMeshData>), P_0.GetType());
		}
		foreach (PersistentNavMeshData item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentNavMeshData> Read(List<PersistentNavMeshData> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentNavMeshData> list = new List<PersistentNavMeshData>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentNavMeshData>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentNavMeshData> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNavMeshData item = (PersistentNavMeshData)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentNavMeshData> list3 = new List<PersistentNavMeshData>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentNavMeshData> list4 = new List<PersistentNavMeshData>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentNavMeshObstacle[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentNavMeshObstacle[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentNavMeshObstacle[]>), P_0.GetType());
		}
		PersistentNavMeshObstacle[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentNavMeshObstacle[] array = value;
		foreach (PersistentNavMeshObstacle obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentNavMeshObstacle[]> Read(PrimitiveContract<PersistentNavMeshObstacle[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNavMeshObstacle[]> primitiveContract = new PrimitiveContract<PersistentNavMeshObstacle[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentNavMeshObstacle[] value = P_0.Value;
				List<PersistentNavMeshObstacle> list = new List<PersistentNavMeshObstacle>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNavMeshObstacle item = (PersistentNavMeshObstacle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentNavMeshObstacle[] array = new PersistentNavMeshObstacle[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNavMeshObstacle[]> primitiveContract2 = new PrimitiveContract<PersistentNavMeshObstacle[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentNavMeshObstacle[]> primitiveContract3 = new PrimitiveContract<PersistentNavMeshObstacle[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentNavMeshObstacle> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentNavMeshObstacle>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentNavMeshObstacle>), P_0.GetType());
		}
		foreach (PersistentNavMeshObstacle item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentNavMeshObstacle> Read(List<PersistentNavMeshObstacle> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentNavMeshObstacle> list = new List<PersistentNavMeshObstacle>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentNavMeshObstacle>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentNavMeshObstacle> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNavMeshObstacle item = (PersistentNavMeshObstacle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentNavMeshObstacle> list3 = new List<PersistentNavMeshObstacle>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentNavMeshObstacle> list4 = new List<PersistentNavMeshObstacle>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentNetworkMatch[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentNetworkMatch[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentNetworkMatch[]>), P_0.GetType());
		}
		PersistentNetworkMatch[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentNetworkMatch[] array = value;
		foreach (PersistentNetworkMatch obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentNetworkMatch[]> Read(PrimitiveContract<PersistentNetworkMatch[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNetworkMatch[]> primitiveContract = new PrimitiveContract<PersistentNetworkMatch[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentNetworkMatch[] value = P_0.Value;
				List<PersistentNetworkMatch> list = new List<PersistentNetworkMatch>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNetworkMatch item = (PersistentNetworkMatch)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentNetworkMatch[] array = new PersistentNetworkMatch[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNetworkMatch[]> primitiveContract2 = new PrimitiveContract<PersistentNetworkMatch[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentNetworkMatch[]> primitiveContract3 = new PrimitiveContract<PersistentNetworkMatch[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentNetworkMatch> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentNetworkMatch>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentNetworkMatch>), P_0.GetType());
		}
		foreach (PersistentNetworkMatch item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentNetworkMatch> Read(List<PersistentNetworkMatch> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentNetworkMatch> list = new List<PersistentNetworkMatch>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentNetworkMatch>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentNetworkMatch> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNetworkMatch item = (PersistentNetworkMatch)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentNetworkMatch> list3 = new List<PersistentNetworkMatch>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentNetworkMatch> list4 = new List<PersistentNetworkMatch>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentNetworkView[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentNetworkView[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentNetworkView[]>), P_0.GetType());
		}
		PersistentNetworkView[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentNetworkView[] array = value;
		foreach (PersistentNetworkView obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentNetworkView[]> Read(PrimitiveContract<PersistentNetworkView[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNetworkView[]> primitiveContract = new PrimitiveContract<PersistentNetworkView[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentNetworkView[] value = P_0.Value;
				List<PersistentNetworkView> list = new List<PersistentNetworkView>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNetworkView item = (PersistentNetworkView)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentNetworkView[] array = new PersistentNetworkView[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNetworkView[]> primitiveContract2 = new PrimitiveContract<PersistentNetworkView[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentNetworkView[]> primitiveContract3 = new PrimitiveContract<PersistentNetworkView[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentNetworkView> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentNetworkView>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentNetworkView>), P_0.GetType());
		}
		foreach (PersistentNetworkView item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentNetworkView> Read(List<PersistentNetworkView> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentNetworkView> list = new List<PersistentNetworkView>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentNetworkView>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentNetworkView> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNetworkView item = (PersistentNetworkView)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentNetworkView> list3 = new List<PersistentNetworkView>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentNetworkView> list4 = new List<PersistentNetworkView>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentOcclusionArea[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentOcclusionArea[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentOcclusionArea[]>), P_0.GetType());
		}
		PersistentOcclusionArea[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentOcclusionArea[] array = value;
		foreach (PersistentOcclusionArea obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentOcclusionArea[]> Read(PrimitiveContract<PersistentOcclusionArea[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOcclusionArea[]> primitiveContract = new PrimitiveContract<PersistentOcclusionArea[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentOcclusionArea[] value = P_0.Value;
				List<PersistentOcclusionArea> list = new List<PersistentOcclusionArea>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOcclusionArea item = (PersistentOcclusionArea)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentOcclusionArea[] array = new PersistentOcclusionArea[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOcclusionArea[]> primitiveContract2 = new PrimitiveContract<PersistentOcclusionArea[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentOcclusionArea[]> primitiveContract3 = new PrimitiveContract<PersistentOcclusionArea[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentOcclusionArea> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentOcclusionArea>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentOcclusionArea>), P_0.GetType());
		}
		foreach (PersistentOcclusionArea item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentOcclusionArea> Read(List<PersistentOcclusionArea> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentOcclusionArea> list = new List<PersistentOcclusionArea>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentOcclusionArea>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentOcclusionArea> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOcclusionArea item = (PersistentOcclusionArea)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentOcclusionArea> list3 = new List<PersistentOcclusionArea>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentOcclusionArea> list4 = new List<PersistentOcclusionArea>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentOcclusionPortal[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentOcclusionPortal[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentOcclusionPortal[]>), P_0.GetType());
		}
		PersistentOcclusionPortal[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentOcclusionPortal[] array = value;
		foreach (PersistentOcclusionPortal obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentOcclusionPortal[]> Read(PrimitiveContract<PersistentOcclusionPortal[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOcclusionPortal[]> primitiveContract = new PrimitiveContract<PersistentOcclusionPortal[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentOcclusionPortal[] value = P_0.Value;
				List<PersistentOcclusionPortal> list = new List<PersistentOcclusionPortal>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOcclusionPortal item = (PersistentOcclusionPortal)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentOcclusionPortal[] array = new PersistentOcclusionPortal[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOcclusionPortal[]> primitiveContract2 = new PrimitiveContract<PersistentOcclusionPortal[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentOcclusionPortal[]> primitiveContract3 = new PrimitiveContract<PersistentOcclusionPortal[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentOcclusionPortal> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentOcclusionPortal>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentOcclusionPortal>), P_0.GetType());
		}
		foreach (PersistentOcclusionPortal item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentOcclusionPortal> Read(List<PersistentOcclusionPortal> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentOcclusionPortal> list = new List<PersistentOcclusionPortal>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentOcclusionPortal>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentOcclusionPortal> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOcclusionPortal item = (PersistentOcclusionPortal)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentOcclusionPortal> list3 = new List<PersistentOcclusionPortal>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentOcclusionPortal> list4 = new List<PersistentOcclusionPortal>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentOffMeshLink[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentOffMeshLink[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentOffMeshLink[]>), P_0.GetType());
		}
		PersistentOffMeshLink[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentOffMeshLink[] array = value;
		foreach (PersistentOffMeshLink obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentOffMeshLink[]> Read(PrimitiveContract<PersistentOffMeshLink[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOffMeshLink[]> primitiveContract = new PrimitiveContract<PersistentOffMeshLink[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentOffMeshLink[] value = P_0.Value;
				List<PersistentOffMeshLink> list = new List<PersistentOffMeshLink>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOffMeshLink item = (PersistentOffMeshLink)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentOffMeshLink[] array = new PersistentOffMeshLink[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOffMeshLink[]> primitiveContract2 = new PrimitiveContract<PersistentOffMeshLink[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentOffMeshLink[]> primitiveContract3 = new PrimitiveContract<PersistentOffMeshLink[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentOffMeshLink> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentOffMeshLink>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentOffMeshLink>), P_0.GetType());
		}
		foreach (PersistentOffMeshLink item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentOffMeshLink> Read(List<PersistentOffMeshLink> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentOffMeshLink> list = new List<PersistentOffMeshLink>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentOffMeshLink>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentOffMeshLink> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOffMeshLink item = (PersistentOffMeshLink)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentOffMeshLink> list3 = new List<PersistentOffMeshLink>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentOffMeshLink> list4 = new List<PersistentOffMeshLink>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentOutline[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentOutline[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentOutline[]>), P_0.GetType());
		}
		PersistentOutline[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentOutline[] array = value;
		foreach (PersistentOutline obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentOutline[]> Read(PrimitiveContract<PersistentOutline[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOutline[]> primitiveContract = new PrimitiveContract<PersistentOutline[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentOutline[] value = P_0.Value;
				List<PersistentOutline> list = new List<PersistentOutline>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOutline item = (PersistentOutline)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentOutline[] array = new PersistentOutline[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOutline[]> primitiveContract2 = new PrimitiveContract<PersistentOutline[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentOutline[]> primitiveContract3 = new PrimitiveContract<PersistentOutline[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentOutline> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentOutline>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentOutline>), P_0.GetType());
		}
		foreach (PersistentOutline item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentOutline> Read(List<PersistentOutline> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentOutline> list = new List<PersistentOutline>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentOutline>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentOutline> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOutline item = (PersistentOutline)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentOutline> list3 = new List<PersistentOutline>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentOutline> list4 = new List<PersistentOutline>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentParticleSystemRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentParticleSystemRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentParticleSystemRenderer[]>), P_0.GetType());
		}
		PersistentParticleSystemRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentParticleSystemRenderer[] array = value;
		foreach (PersistentParticleSystemRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentParticleSystemRenderer[]> Read(PrimitiveContract<PersistentParticleSystemRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentParticleSystemRenderer[]> primitiveContract = new PrimitiveContract<PersistentParticleSystemRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentParticleSystemRenderer[] value = P_0.Value;
				List<PersistentParticleSystemRenderer> list = new List<PersistentParticleSystemRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentParticleSystemRenderer item = (PersistentParticleSystemRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentParticleSystemRenderer[] array = new PersistentParticleSystemRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentParticleSystemRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentParticleSystemRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentParticleSystemRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentParticleSystemRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentParticleSystemRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentParticleSystemRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentParticleSystemRenderer>), P_0.GetType());
		}
		foreach (PersistentParticleSystemRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentParticleSystemRenderer> Read(List<PersistentParticleSystemRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentParticleSystemRenderer> list = new List<PersistentParticleSystemRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentParticleSystemRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentParticleSystemRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentParticleSystemRenderer item = (PersistentParticleSystemRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentParticleSystemRenderer> list3 = new List<PersistentParticleSystemRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentParticleSystemRenderer> list4 = new List<PersistentParticleSystemRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPhysicMaterial[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPhysicMaterial[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPhysicMaterial[]>), P_0.GetType());
		}
		PersistentPhysicMaterial[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPhysicMaterial[] array = value;
		foreach (PersistentPhysicMaterial obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPhysicMaterial[]> Read(PrimitiveContract<PersistentPhysicMaterial[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysicMaterial[]> primitiveContract = new PrimitiveContract<PersistentPhysicMaterial[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPhysicMaterial[] value = P_0.Value;
				List<PersistentPhysicMaterial> list = new List<PersistentPhysicMaterial>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysicMaterial item = (PersistentPhysicMaterial)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPhysicMaterial[] array = new PersistentPhysicMaterial[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysicMaterial[]> primitiveContract2 = new PrimitiveContract<PersistentPhysicMaterial[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPhysicMaterial[]> primitiveContract3 = new PrimitiveContract<PersistentPhysicMaterial[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPhysicMaterial> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPhysicMaterial>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPhysicMaterial>), P_0.GetType());
		}
		foreach (PersistentPhysicMaterial item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPhysicMaterial> Read(List<PersistentPhysicMaterial> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPhysicMaterial> list = new List<PersistentPhysicMaterial>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPhysicMaterial>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPhysicMaterial> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysicMaterial item = (PersistentPhysicMaterial)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPhysicMaterial> list3 = new List<PersistentPhysicMaterial>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPhysicMaterial> list4 = new List<PersistentPhysicMaterial>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPhysics2DRaycaster[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPhysics2DRaycaster[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPhysics2DRaycaster[]>), P_0.GetType());
		}
		PersistentPhysics2DRaycaster[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPhysics2DRaycaster[] array = value;
		foreach (PersistentPhysics2DRaycaster obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPhysics2DRaycaster[]> Read(PrimitiveContract<PersistentPhysics2DRaycaster[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysics2DRaycaster[]> primitiveContract = new PrimitiveContract<PersistentPhysics2DRaycaster[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPhysics2DRaycaster[] value = P_0.Value;
				List<PersistentPhysics2DRaycaster> list = new List<PersistentPhysics2DRaycaster>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysics2DRaycaster item = (PersistentPhysics2DRaycaster)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPhysics2DRaycaster[] array = new PersistentPhysics2DRaycaster[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysics2DRaycaster[]> primitiveContract2 = new PrimitiveContract<PersistentPhysics2DRaycaster[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPhysics2DRaycaster[]> primitiveContract3 = new PrimitiveContract<PersistentPhysics2DRaycaster[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPhysics2DRaycaster> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPhysics2DRaycaster>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPhysics2DRaycaster>), P_0.GetType());
		}
		foreach (PersistentPhysics2DRaycaster item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPhysics2DRaycaster> Read(List<PersistentPhysics2DRaycaster> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPhysics2DRaycaster> list = new List<PersistentPhysics2DRaycaster>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPhysics2DRaycaster>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPhysics2DRaycaster> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysics2DRaycaster item = (PersistentPhysics2DRaycaster)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPhysics2DRaycaster> list3 = new List<PersistentPhysics2DRaycaster>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPhysics2DRaycaster> list4 = new List<PersistentPhysics2DRaycaster>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPhysicsMaterial2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPhysicsMaterial2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPhysicsMaterial2D[]>), P_0.GetType());
		}
		PersistentPhysicsMaterial2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPhysicsMaterial2D[] array = value;
		foreach (PersistentPhysicsMaterial2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPhysicsMaterial2D[]> Read(PrimitiveContract<PersistentPhysicsMaterial2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysicsMaterial2D[]> primitiveContract = new PrimitiveContract<PersistentPhysicsMaterial2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPhysicsMaterial2D[] value = P_0.Value;
				List<PersistentPhysicsMaterial2D> list = new List<PersistentPhysicsMaterial2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysicsMaterial2D item = (PersistentPhysicsMaterial2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPhysicsMaterial2D[] array = new PersistentPhysicsMaterial2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysicsMaterial2D[]> primitiveContract2 = new PrimitiveContract<PersistentPhysicsMaterial2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPhysicsMaterial2D[]> primitiveContract3 = new PrimitiveContract<PersistentPhysicsMaterial2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPhysicsMaterial2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPhysicsMaterial2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPhysicsMaterial2D>), P_0.GetType());
		}
		foreach (PersistentPhysicsMaterial2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPhysicsMaterial2D> Read(List<PersistentPhysicsMaterial2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPhysicsMaterial2D> list = new List<PersistentPhysicsMaterial2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPhysicsMaterial2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPhysicsMaterial2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysicsMaterial2D item = (PersistentPhysicsMaterial2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPhysicsMaterial2D> list3 = new List<PersistentPhysicsMaterial2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPhysicsMaterial2D> list4 = new List<PersistentPhysicsMaterial2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPhysicsRaycaster[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPhysicsRaycaster[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPhysicsRaycaster[]>), P_0.GetType());
		}
		PersistentPhysicsRaycaster[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPhysicsRaycaster[] array = value;
		foreach (PersistentPhysicsRaycaster obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPhysicsRaycaster[]> Read(PrimitiveContract<PersistentPhysicsRaycaster[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysicsRaycaster[]> primitiveContract = new PrimitiveContract<PersistentPhysicsRaycaster[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPhysicsRaycaster[] value = P_0.Value;
				List<PersistentPhysicsRaycaster> list = new List<PersistentPhysicsRaycaster>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysicsRaycaster item = (PersistentPhysicsRaycaster)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPhysicsRaycaster[] array = new PersistentPhysicsRaycaster[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysicsRaycaster[]> primitiveContract2 = new PrimitiveContract<PersistentPhysicsRaycaster[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPhysicsRaycaster[]> primitiveContract3 = new PrimitiveContract<PersistentPhysicsRaycaster[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPhysicsRaycaster> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPhysicsRaycaster>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPhysicsRaycaster>), P_0.GetType());
		}
		foreach (PersistentPhysicsRaycaster item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPhysicsRaycaster> Read(List<PersistentPhysicsRaycaster> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPhysicsRaycaster> list = new List<PersistentPhysicsRaycaster>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPhysicsRaycaster>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPhysicsRaycaster> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysicsRaycaster item = (PersistentPhysicsRaycaster)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPhysicsRaycaster> list3 = new List<PersistentPhysicsRaycaster>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPhysicsRaycaster> list4 = new List<PersistentPhysicsRaycaster>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]>), P_0.GetType());
		}
		PersistentPhysicsUpdateBehaviour2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPhysicsUpdateBehaviour2D[] array = value;
		foreach (PersistentPhysicsUpdateBehaviour2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]> Read(PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]> primitiveContract = new PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPhysicsUpdateBehaviour2D[] value = P_0.Value;
				List<PersistentPhysicsUpdateBehaviour2D> list = new List<PersistentPhysicsUpdateBehaviour2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysicsUpdateBehaviour2D item = (PersistentPhysicsUpdateBehaviour2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPhysicsUpdateBehaviour2D[] array = new PersistentPhysicsUpdateBehaviour2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]> primitiveContract2 = new PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]> primitiveContract3 = new PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPhysicsUpdateBehaviour2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPhysicsUpdateBehaviour2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPhysicsUpdateBehaviour2D>), P_0.GetType());
		}
		foreach (PersistentPhysicsUpdateBehaviour2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPhysicsUpdateBehaviour2D> Read(List<PersistentPhysicsUpdateBehaviour2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPhysicsUpdateBehaviour2D> list = new List<PersistentPhysicsUpdateBehaviour2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPhysicsUpdateBehaviour2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPhysicsUpdateBehaviour2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPhysicsUpdateBehaviour2D item = (PersistentPhysicsUpdateBehaviour2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPhysicsUpdateBehaviour2D> list3 = new List<PersistentPhysicsUpdateBehaviour2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPhysicsUpdateBehaviour2D> list4 = new List<PersistentPhysicsUpdateBehaviour2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPlatformEffector2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPlatformEffector2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPlatformEffector2D[]>), P_0.GetType());
		}
		PersistentPlatformEffector2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPlatformEffector2D[] array = value;
		foreach (PersistentPlatformEffector2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPlatformEffector2D[]> Read(PrimitiveContract<PersistentPlatformEffector2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPlatformEffector2D[]> primitiveContract = new PrimitiveContract<PersistentPlatformEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPlatformEffector2D[] value = P_0.Value;
				List<PersistentPlatformEffector2D> list = new List<PersistentPlatformEffector2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPlatformEffector2D item = (PersistentPlatformEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPlatformEffector2D[] array = new PersistentPlatformEffector2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPlatformEffector2D[]> primitiveContract2 = new PrimitiveContract<PersistentPlatformEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPlatformEffector2D[]> primitiveContract3 = new PrimitiveContract<PersistentPlatformEffector2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPlatformEffector2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPlatformEffector2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPlatformEffector2D>), P_0.GetType());
		}
		foreach (PersistentPlatformEffector2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPlatformEffector2D> Read(List<PersistentPlatformEffector2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPlatformEffector2D> list = new List<PersistentPlatformEffector2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPlatformEffector2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPlatformEffector2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPlatformEffector2D item = (PersistentPlatformEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPlatformEffector2D> list3 = new List<PersistentPlatformEffector2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPlatformEffector2D> list4 = new List<PersistentPlatformEffector2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPlayerConnection[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPlayerConnection[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPlayerConnection[]>), P_0.GetType());
		}
		PersistentPlayerConnection[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPlayerConnection[] array = value;
		foreach (PersistentPlayerConnection obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPlayerConnection[]> Read(PrimitiveContract<PersistentPlayerConnection[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPlayerConnection[]> primitiveContract = new PrimitiveContract<PersistentPlayerConnection[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPlayerConnection[] value = P_0.Value;
				List<PersistentPlayerConnection> list = new List<PersistentPlayerConnection>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPlayerConnection item = (PersistentPlayerConnection)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPlayerConnection[] array = new PersistentPlayerConnection[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPlayerConnection[]> primitiveContract2 = new PrimitiveContract<PersistentPlayerConnection[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPlayerConnection[]> primitiveContract3 = new PrimitiveContract<PersistentPlayerConnection[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPlayerConnection> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPlayerConnection>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPlayerConnection>), P_0.GetType());
		}
		foreach (PersistentPlayerConnection item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPlayerConnection> Read(List<PersistentPlayerConnection> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPlayerConnection> list = new List<PersistentPlayerConnection>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPlayerConnection>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPlayerConnection> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPlayerConnection item = (PersistentPlayerConnection)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPlayerConnection> list3 = new List<PersistentPlayerConnection>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPlayerConnection> list4 = new List<PersistentPlayerConnection>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPointEffector2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPointEffector2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPointEffector2D[]>), P_0.GetType());
		}
		PersistentPointEffector2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPointEffector2D[] array = value;
		foreach (PersistentPointEffector2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPointEffector2D[]> Read(PrimitiveContract<PersistentPointEffector2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPointEffector2D[]> primitiveContract = new PrimitiveContract<PersistentPointEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPointEffector2D[] value = P_0.Value;
				List<PersistentPointEffector2D> list = new List<PersistentPointEffector2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPointEffector2D item = (PersistentPointEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPointEffector2D[] array = new PersistentPointEffector2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPointEffector2D[]> primitiveContract2 = new PrimitiveContract<PersistentPointEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPointEffector2D[]> primitiveContract3 = new PrimitiveContract<PersistentPointEffector2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPointEffector2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPointEffector2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPointEffector2D>), P_0.GetType());
		}
		foreach (PersistentPointEffector2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPointEffector2D> Read(List<PersistentPointEffector2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPointEffector2D> list = new List<PersistentPointEffector2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPointEffector2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPointEffector2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPointEffector2D item = (PersistentPointEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPointEffector2D> list3 = new List<PersistentPointEffector2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPointEffector2D> list4 = new List<PersistentPointEffector2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPointerInputModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPointerInputModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPointerInputModule[]>), P_0.GetType());
		}
		PersistentPointerInputModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPointerInputModule[] array = value;
		foreach (PersistentPointerInputModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPointerInputModule[]> Read(PrimitiveContract<PersistentPointerInputModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPointerInputModule[]> primitiveContract = new PrimitiveContract<PersistentPointerInputModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPointerInputModule[] value = P_0.Value;
				List<PersistentPointerInputModule> list = new List<PersistentPointerInputModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPointerInputModule item = (PersistentPointerInputModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPointerInputModule[] array = new PersistentPointerInputModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPointerInputModule[]> primitiveContract2 = new PrimitiveContract<PersistentPointerInputModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPointerInputModule[]> primitiveContract3 = new PrimitiveContract<PersistentPointerInputModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPointerInputModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPointerInputModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPointerInputModule>), P_0.GetType());
		}
		foreach (PersistentPointerInputModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPointerInputModule> Read(List<PersistentPointerInputModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPointerInputModule> list = new List<PersistentPointerInputModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPointerInputModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPointerInputModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPointerInputModule item = (PersistentPointerInputModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPointerInputModule> list3 = new List<PersistentPointerInputModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPointerInputModule> list4 = new List<PersistentPointerInputModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPolygonCollider2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPolygonCollider2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPolygonCollider2D[]>), P_0.GetType());
		}
		PersistentPolygonCollider2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPolygonCollider2D[] array = value;
		foreach (PersistentPolygonCollider2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPolygonCollider2D[]> Read(PrimitiveContract<PersistentPolygonCollider2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPolygonCollider2D[]> primitiveContract = new PrimitiveContract<PersistentPolygonCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPolygonCollider2D[] value = P_0.Value;
				List<PersistentPolygonCollider2D> list = new List<PersistentPolygonCollider2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPolygonCollider2D item = (PersistentPolygonCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPolygonCollider2D[] array = new PersistentPolygonCollider2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPolygonCollider2D[]> primitiveContract2 = new PrimitiveContract<PersistentPolygonCollider2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPolygonCollider2D[]> primitiveContract3 = new PrimitiveContract<PersistentPolygonCollider2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPolygonCollider2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPolygonCollider2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPolygonCollider2D>), P_0.GetType());
		}
		foreach (PersistentPolygonCollider2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPolygonCollider2D> Read(List<PersistentPolygonCollider2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPolygonCollider2D> list = new List<PersistentPolygonCollider2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPolygonCollider2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPolygonCollider2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPolygonCollider2D item = (PersistentPolygonCollider2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPolygonCollider2D> list3 = new List<PersistentPolygonCollider2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPolygonCollider2D> list4 = new List<PersistentPolygonCollider2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPositionAsUV1[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPositionAsUV1[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPositionAsUV1[]>), P_0.GetType());
		}
		PersistentPositionAsUV1[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPositionAsUV1[] array = value;
		foreach (PersistentPositionAsUV1 obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPositionAsUV1[]> Read(PrimitiveContract<PersistentPositionAsUV1[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPositionAsUV1[]> primitiveContract = new PrimitiveContract<PersistentPositionAsUV1[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPositionAsUV1[] value = P_0.Value;
				List<PersistentPositionAsUV1> list = new List<PersistentPositionAsUV1>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPositionAsUV1 item = (PersistentPositionAsUV1)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPositionAsUV1[] array = new PersistentPositionAsUV1[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPositionAsUV1[]> primitiveContract2 = new PrimitiveContract<PersistentPositionAsUV1[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPositionAsUV1[]> primitiveContract3 = new PrimitiveContract<PersistentPositionAsUV1[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPositionAsUV1> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPositionAsUV1>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPositionAsUV1>), P_0.GetType());
		}
		foreach (PersistentPositionAsUV1 item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPositionAsUV1> Read(List<PersistentPositionAsUV1> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPositionAsUV1> list = new List<PersistentPositionAsUV1>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPositionAsUV1>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPositionAsUV1> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPositionAsUV1 item = (PersistentPositionAsUV1)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPositionAsUV1> list3 = new List<PersistentPositionAsUV1>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPositionAsUV1> list4 = new List<PersistentPositionAsUV1>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentProceduralTexture[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentProceduralTexture[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentProceduralTexture[]>), P_0.GetType());
		}
		PersistentProceduralTexture[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentProceduralTexture[] array = value;
		foreach (PersistentProceduralTexture obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentProceduralTexture[]> Read(PrimitiveContract<PersistentProceduralTexture[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentProceduralTexture[]> primitiveContract = new PrimitiveContract<PersistentProceduralTexture[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentProceduralTexture[] value = P_0.Value;
				List<PersistentProceduralTexture> list = new List<PersistentProceduralTexture>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentProceduralTexture item = (PersistentProceduralTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentProceduralTexture[] array = new PersistentProceduralTexture[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentProceduralTexture[]> primitiveContract2 = new PrimitiveContract<PersistentProceduralTexture[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentProceduralTexture[]> primitiveContract3 = new PrimitiveContract<PersistentProceduralTexture[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentProceduralTexture> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentProceduralTexture>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentProceduralTexture>), P_0.GetType());
		}
		foreach (PersistentProceduralTexture item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentProceduralTexture> Read(List<PersistentProceduralTexture> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentProceduralTexture> list = new List<PersistentProceduralTexture>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentProceduralTexture>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentProceduralTexture> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentProceduralTexture item = (PersistentProceduralTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentProceduralTexture> list3 = new List<PersistentProceduralTexture>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentProceduralTexture> list4 = new List<PersistentProceduralTexture>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentProjector[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentProjector[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentProjector[]>), P_0.GetType());
		}
		PersistentProjector[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentProjector[] array = value;
		foreach (PersistentProjector obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentProjector[]> Read(PrimitiveContract<PersistentProjector[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentProjector[]> primitiveContract = new PrimitiveContract<PersistentProjector[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentProjector[] value = P_0.Value;
				List<PersistentProjector> list = new List<PersistentProjector>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentProjector item = (PersistentProjector)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentProjector[] array = new PersistentProjector[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentProjector[]> primitiveContract2 = new PrimitiveContract<PersistentProjector[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentProjector[]> primitiveContract3 = new PrimitiveContract<PersistentProjector[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentProjector> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentProjector>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentProjector>), P_0.GetType());
		}
		foreach (PersistentProjector item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentProjector> Read(List<PersistentProjector> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentProjector> list = new List<PersistentProjector>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentProjector>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentProjector> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentProjector item = (PersistentProjector)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentProjector> list3 = new List<PersistentProjector>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentProjector> list4 = new List<PersistentProjector>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentQualitySettings[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentQualitySettings[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentQualitySettings[]>), P_0.GetType());
		}
		PersistentQualitySettings[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentQualitySettings[] array = value;
		foreach (PersistentQualitySettings obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentQualitySettings[]> Read(PrimitiveContract<PersistentQualitySettings[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentQualitySettings[]> primitiveContract = new PrimitiveContract<PersistentQualitySettings[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentQualitySettings[] value = P_0.Value;
				List<PersistentQualitySettings> list = new List<PersistentQualitySettings>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentQualitySettings item = (PersistentQualitySettings)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentQualitySettings[] array = new PersistentQualitySettings[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentQualitySettings[]> primitiveContract2 = new PrimitiveContract<PersistentQualitySettings[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentQualitySettings[]> primitiveContract3 = new PrimitiveContract<PersistentQualitySettings[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentQualitySettings> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentQualitySettings>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentQualitySettings>), P_0.GetType());
		}
		foreach (PersistentQualitySettings item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentQualitySettings> Read(List<PersistentQualitySettings> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentQualitySettings> list = new List<PersistentQualitySettings>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentQualitySettings>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentQualitySettings> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentQualitySettings item = (PersistentQualitySettings)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentQualitySettings> list3 = new List<PersistentQualitySettings>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentQualitySettings> list4 = new List<PersistentQualitySettings>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRawImage[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRawImage[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRawImage[]>), P_0.GetType());
		}
		PersistentRawImage[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRawImage[] array = value;
		foreach (PersistentRawImage obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRawImage[]> Read(PrimitiveContract<PersistentRawImage[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRawImage[]> primitiveContract = new PrimitiveContract<PersistentRawImage[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRawImage[] value = P_0.Value;
				List<PersistentRawImage> list = new List<PersistentRawImage>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRawImage item = (PersistentRawImage)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRawImage[] array = new PersistentRawImage[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRawImage[]> primitiveContract2 = new PrimitiveContract<PersistentRawImage[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRawImage[]> primitiveContract3 = new PrimitiveContract<PersistentRawImage[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRawImage> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRawImage>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRawImage>), P_0.GetType());
		}
		foreach (PersistentRawImage item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRawImage> Read(List<PersistentRawImage> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRawImage> list = new List<PersistentRawImage>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRawImage>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRawImage> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRawImage item = (PersistentRawImage)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRawImage> list3 = new List<PersistentRawImage>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRawImage> list4 = new List<PersistentRawImage>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRectMask2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRectMask2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRectMask2D[]>), P_0.GetType());
		}
		PersistentRectMask2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRectMask2D[] array = value;
		foreach (PersistentRectMask2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRectMask2D[]> Read(PrimitiveContract<PersistentRectMask2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRectMask2D[]> primitiveContract = new PrimitiveContract<PersistentRectMask2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRectMask2D[] value = P_0.Value;
				List<PersistentRectMask2D> list = new List<PersistentRectMask2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRectMask2D item = (PersistentRectMask2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRectMask2D[] array = new PersistentRectMask2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRectMask2D[]> primitiveContract2 = new PrimitiveContract<PersistentRectMask2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRectMask2D[]> primitiveContract3 = new PrimitiveContract<PersistentRectMask2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRectMask2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRectMask2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRectMask2D>), P_0.GetType());
		}
		foreach (PersistentRectMask2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRectMask2D> Read(List<PersistentRectMask2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRectMask2D> list = new List<PersistentRectMask2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRectMask2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRectMask2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRectMask2D item = (PersistentRectMask2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRectMask2D> list3 = new List<PersistentRectMask2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRectMask2D> list4 = new List<PersistentRectMask2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRectTransform[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRectTransform[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRectTransform[]>), P_0.GetType());
		}
		PersistentRectTransform[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRectTransform[] array = value;
		foreach (PersistentRectTransform obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRectTransform[]> Read(PrimitiveContract<PersistentRectTransform[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRectTransform[]> primitiveContract = new PrimitiveContract<PersistentRectTransform[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRectTransform[] value = P_0.Value;
				List<PersistentRectTransform> list = new List<PersistentRectTransform>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRectTransform item = (PersistentRectTransform)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRectTransform[] array = new PersistentRectTransform[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRectTransform[]> primitiveContract2 = new PrimitiveContract<PersistentRectTransform[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRectTransform[]> primitiveContract3 = new PrimitiveContract<PersistentRectTransform[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRectTransform> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRectTransform>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRectTransform>), P_0.GetType());
		}
		foreach (PersistentRectTransform item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRectTransform> Read(List<PersistentRectTransform> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRectTransform> list = new List<PersistentRectTransform>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRectTransform>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRectTransform> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRectTransform item = (PersistentRectTransform)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRectTransform> list3 = new List<PersistentRectTransform>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRectTransform> list4 = new List<PersistentRectTransform>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentReflectionProbe[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentReflectionProbe[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentReflectionProbe[]>), P_0.GetType());
		}
		PersistentReflectionProbe[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentReflectionProbe[] array = value;
		foreach (PersistentReflectionProbe obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentReflectionProbe[]> Read(PrimitiveContract<PersistentReflectionProbe[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentReflectionProbe[]> primitiveContract = new PrimitiveContract<PersistentReflectionProbe[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentReflectionProbe[] value = P_0.Value;
				List<PersistentReflectionProbe> list = new List<PersistentReflectionProbe>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentReflectionProbe item = (PersistentReflectionProbe)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentReflectionProbe[] array = new PersistentReflectionProbe[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentReflectionProbe[]> primitiveContract2 = new PrimitiveContract<PersistentReflectionProbe[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentReflectionProbe[]> primitiveContract3 = new PrimitiveContract<PersistentReflectionProbe[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentReflectionProbe> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentReflectionProbe>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentReflectionProbe>), P_0.GetType());
		}
		foreach (PersistentReflectionProbe item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentReflectionProbe> Read(List<PersistentReflectionProbe> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentReflectionProbe> list = new List<PersistentReflectionProbe>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentReflectionProbe>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentReflectionProbe> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentReflectionProbe item = (PersistentReflectionProbe)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentReflectionProbe> list3 = new List<PersistentReflectionProbe>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentReflectionProbe> list4 = new List<PersistentReflectionProbe>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRelativeJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRelativeJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRelativeJoint2D[]>), P_0.GetType());
		}
		PersistentRelativeJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRelativeJoint2D[] array = value;
		foreach (PersistentRelativeJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRelativeJoint2D[]> Read(PrimitiveContract<PersistentRelativeJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRelativeJoint2D[]> primitiveContract = new PrimitiveContract<PersistentRelativeJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRelativeJoint2D[] value = P_0.Value;
				List<PersistentRelativeJoint2D> list = new List<PersistentRelativeJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRelativeJoint2D item = (PersistentRelativeJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRelativeJoint2D[] array = new PersistentRelativeJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRelativeJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentRelativeJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRelativeJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentRelativeJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRelativeJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRelativeJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRelativeJoint2D>), P_0.GetType());
		}
		foreach (PersistentRelativeJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRelativeJoint2D> Read(List<PersistentRelativeJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRelativeJoint2D> list = new List<PersistentRelativeJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRelativeJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRelativeJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRelativeJoint2D item = (PersistentRelativeJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRelativeJoint2D> list3 = new List<PersistentRelativeJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRelativeJoint2D> list4 = new List<PersistentRelativeJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRenderer[]>), P_0.GetType());
		}
		PersistentRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRenderer[] array = value;
		foreach (PersistentRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRenderer[]> Read(PrimitiveContract<PersistentRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRenderer[]> primitiveContract = new PrimitiveContract<PersistentRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRenderer[] value = P_0.Value;
				List<PersistentRenderer> list = new List<PersistentRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRenderer item = (PersistentRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRenderer[] array = new PersistentRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRenderer>), P_0.GetType());
		}
		foreach (PersistentRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRenderer> Read(List<PersistentRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRenderer> list = new List<PersistentRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRenderer item = (PersistentRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRenderer> list3 = new List<PersistentRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRenderer> list4 = new List<PersistentRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRenderPipelineAsset[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRenderPipelineAsset[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRenderPipelineAsset[]>), P_0.GetType());
		}
		PersistentRenderPipelineAsset[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRenderPipelineAsset[] array = value;
		foreach (PersistentRenderPipelineAsset obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRenderPipelineAsset[]> Read(PrimitiveContract<PersistentRenderPipelineAsset[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRenderPipelineAsset[]> primitiveContract = new PrimitiveContract<PersistentRenderPipelineAsset[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRenderPipelineAsset[] value = P_0.Value;
				List<PersistentRenderPipelineAsset> list = new List<PersistentRenderPipelineAsset>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRenderPipelineAsset item = (PersistentRenderPipelineAsset)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRenderPipelineAsset[] array = new PersistentRenderPipelineAsset[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRenderPipelineAsset[]> primitiveContract2 = new PrimitiveContract<PersistentRenderPipelineAsset[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRenderPipelineAsset[]> primitiveContract3 = new PrimitiveContract<PersistentRenderPipelineAsset[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRenderPipelineAsset> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRenderPipelineAsset>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRenderPipelineAsset>), P_0.GetType());
		}
		foreach (PersistentRenderPipelineAsset item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRenderPipelineAsset> Read(List<PersistentRenderPipelineAsset> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRenderPipelineAsset> list = new List<PersistentRenderPipelineAsset>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRenderPipelineAsset>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRenderPipelineAsset> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRenderPipelineAsset item = (PersistentRenderPipelineAsset)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRenderPipelineAsset> list3 = new List<PersistentRenderPipelineAsset>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRenderPipelineAsset> list4 = new List<PersistentRenderPipelineAsset>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRenderSettings[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRenderSettings[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRenderSettings[]>), P_0.GetType());
		}
		PersistentRenderSettings[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRenderSettings[] array = value;
		foreach (PersistentRenderSettings obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRenderSettings[]> Read(PrimitiveContract<PersistentRenderSettings[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRenderSettings[]> primitiveContract = new PrimitiveContract<PersistentRenderSettings[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRenderSettings[] value = P_0.Value;
				List<PersistentRenderSettings> list = new List<PersistentRenderSettings>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRenderSettings item = (PersistentRenderSettings)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRenderSettings[] array = new PersistentRenderSettings[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRenderSettings[]> primitiveContract2 = new PrimitiveContract<PersistentRenderSettings[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRenderSettings[]> primitiveContract3 = new PrimitiveContract<PersistentRenderSettings[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRenderSettings> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRenderSettings>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRenderSettings>), P_0.GetType());
		}
		foreach (PersistentRenderSettings item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRenderSettings> Read(List<PersistentRenderSettings> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRenderSettings> list = new List<PersistentRenderSettings>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRenderSettings>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRenderSettings> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRenderSettings item = (PersistentRenderSettings)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRenderSettings> list3 = new List<PersistentRenderSettings>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRenderSettings> list4 = new List<PersistentRenderSettings>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRenderTexture[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRenderTexture[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRenderTexture[]>), P_0.GetType());
		}
		PersistentRenderTexture[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRenderTexture[] array = value;
		foreach (PersistentRenderTexture obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRenderTexture[]> Read(PrimitiveContract<PersistentRenderTexture[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRenderTexture[]> primitiveContract = new PrimitiveContract<PersistentRenderTexture[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRenderTexture[] value = P_0.Value;
				List<PersistentRenderTexture> list = new List<PersistentRenderTexture>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRenderTexture item = (PersistentRenderTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRenderTexture[] array = new PersistentRenderTexture[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRenderTexture[]> primitiveContract2 = new PrimitiveContract<PersistentRenderTexture[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRenderTexture[]> primitiveContract3 = new PrimitiveContract<PersistentRenderTexture[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRenderTexture> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRenderTexture>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRenderTexture>), P_0.GetType());
		}
		foreach (PersistentRenderTexture item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRenderTexture> Read(List<PersistentRenderTexture> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRenderTexture> list = new List<PersistentRenderTexture>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRenderTexture>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRenderTexture> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRenderTexture item = (PersistentRenderTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRenderTexture> list3 = new List<PersistentRenderTexture>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRenderTexture> list4 = new List<PersistentRenderTexture>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRigidbody[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRigidbody[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRigidbody[]>), P_0.GetType());
		}
		PersistentRigidbody[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRigidbody[] array = value;
		foreach (PersistentRigidbody obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRigidbody[]> Read(PrimitiveContract<PersistentRigidbody[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRigidbody[]> primitiveContract = new PrimitiveContract<PersistentRigidbody[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRigidbody[] value = P_0.Value;
				List<PersistentRigidbody> list = new List<PersistentRigidbody>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRigidbody item = (PersistentRigidbody)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRigidbody[] array = new PersistentRigidbody[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRigidbody[]> primitiveContract2 = new PrimitiveContract<PersistentRigidbody[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRigidbody[]> primitiveContract3 = new PrimitiveContract<PersistentRigidbody[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRigidbody> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRigidbody>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRigidbody>), P_0.GetType());
		}
		foreach (PersistentRigidbody item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRigidbody> Read(List<PersistentRigidbody> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRigidbody> list = new List<PersistentRigidbody>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRigidbody>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRigidbody> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRigidbody item = (PersistentRigidbody)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRigidbody> list3 = new List<PersistentRigidbody>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRigidbody> list4 = new List<PersistentRigidbody>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRigidbody2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRigidbody2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRigidbody2D[]>), P_0.GetType());
		}
		PersistentRigidbody2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRigidbody2D[] array = value;
		foreach (PersistentRigidbody2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRigidbody2D[]> Read(PrimitiveContract<PersistentRigidbody2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRigidbody2D[]> primitiveContract = new PrimitiveContract<PersistentRigidbody2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRigidbody2D[] value = P_0.Value;
				List<PersistentRigidbody2D> list = new List<PersistentRigidbody2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRigidbody2D item = (PersistentRigidbody2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRigidbody2D[] array = new PersistentRigidbody2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRigidbody2D[]> primitiveContract2 = new PrimitiveContract<PersistentRigidbody2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRigidbody2D[]> primitiveContract3 = new PrimitiveContract<PersistentRigidbody2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRigidbody2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRigidbody2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRigidbody2D>), P_0.GetType());
		}
		foreach (PersistentRigidbody2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRigidbody2D> Read(List<PersistentRigidbody2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRigidbody2D> list = new List<PersistentRigidbody2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRigidbody2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRigidbody2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRigidbody2D item = (PersistentRigidbody2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRigidbody2D> list3 = new List<PersistentRigidbody2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRigidbody2D> list4 = new List<PersistentRigidbody2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentRuntimeAnimatorController[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentRuntimeAnimatorController[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentRuntimeAnimatorController[]>), P_0.GetType());
		}
		PersistentRuntimeAnimatorController[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentRuntimeAnimatorController[] array = value;
		foreach (PersistentRuntimeAnimatorController obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentRuntimeAnimatorController[]> Read(PrimitiveContract<PersistentRuntimeAnimatorController[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRuntimeAnimatorController[]> primitiveContract = new PrimitiveContract<PersistentRuntimeAnimatorController[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentRuntimeAnimatorController[] value = P_0.Value;
				List<PersistentRuntimeAnimatorController> list = new List<PersistentRuntimeAnimatorController>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRuntimeAnimatorController item = (PersistentRuntimeAnimatorController)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentRuntimeAnimatorController[] array = new PersistentRuntimeAnimatorController[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentRuntimeAnimatorController[]> primitiveContract2 = new PrimitiveContract<PersistentRuntimeAnimatorController[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentRuntimeAnimatorController[]> primitiveContract3 = new PrimitiveContract<PersistentRuntimeAnimatorController[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentRuntimeAnimatorController> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentRuntimeAnimatorController>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentRuntimeAnimatorController>), P_0.GetType());
		}
		foreach (PersistentRuntimeAnimatorController item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentRuntimeAnimatorController> Read(List<PersistentRuntimeAnimatorController> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentRuntimeAnimatorController> list = new List<PersistentRuntimeAnimatorController>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentRuntimeAnimatorController>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentRuntimeAnimatorController> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentRuntimeAnimatorController item = (PersistentRuntimeAnimatorController)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentRuntimeAnimatorController> list3 = new List<PersistentRuntimeAnimatorController>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentRuntimeAnimatorController> list4 = new List<PersistentRuntimeAnimatorController>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentScriptableObject[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentScriptableObject[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentScriptableObject[]>), P_0.GetType());
		}
		PersistentScriptableObject[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentScriptableObject[] array = value;
		foreach (PersistentScriptableObject obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentScriptableObject[]> Read(PrimitiveContract<PersistentScriptableObject[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScriptableObject[]> primitiveContract = new PrimitiveContract<PersistentScriptableObject[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentScriptableObject[] value = P_0.Value;
				List<PersistentScriptableObject> list = new List<PersistentScriptableObject>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScriptableObject item = (PersistentScriptableObject)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentScriptableObject[] array = new PersistentScriptableObject[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScriptableObject[]> primitiveContract2 = new PrimitiveContract<PersistentScriptableObject[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentScriptableObject[]> primitiveContract3 = new PrimitiveContract<PersistentScriptableObject[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentScriptableObject> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentScriptableObject>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentScriptableObject>), P_0.GetType());
		}
		foreach (PersistentScriptableObject item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentScriptableObject> Read(List<PersistentScriptableObject> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentScriptableObject> list = new List<PersistentScriptableObject>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentScriptableObject>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentScriptableObject> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScriptableObject item = (PersistentScriptableObject)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentScriptableObject> list3 = new List<PersistentScriptableObject>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentScriptableObject> list4 = new List<PersistentScriptableObject>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentShader[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentShader[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentShader[]>), P_0.GetType());
		}
		PersistentShader[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentShader[] array = value;
		foreach (PersistentShader obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentShader[]> Read(PrimitiveContract<PersistentShader[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentShader[]> primitiveContract = new PrimitiveContract<PersistentShader[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentShader[] value = P_0.Value;
				List<PersistentShader> list = new List<PersistentShader>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentShader item = (PersistentShader)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentShader[] array = new PersistentShader[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentShader[]> primitiveContract2 = new PrimitiveContract<PersistentShader[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentShader[]> primitiveContract3 = new PrimitiveContract<PersistentShader[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentShader> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentShader>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentShader>), P_0.GetType());
		}
		foreach (PersistentShader item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentShader> Read(List<PersistentShader> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentShader> list = new List<PersistentShader>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentShader>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentShader> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentShader item = (PersistentShader)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentShader> list3 = new List<PersistentShader>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentShader> list4 = new List<PersistentShader>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentShaderVariantCollection[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentShaderVariantCollection[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentShaderVariantCollection[]>), P_0.GetType());
		}
		PersistentShaderVariantCollection[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentShaderVariantCollection[] array = value;
		foreach (PersistentShaderVariantCollection obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentShaderVariantCollection[]> Read(PrimitiveContract<PersistentShaderVariantCollection[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentShaderVariantCollection[]> primitiveContract = new PrimitiveContract<PersistentShaderVariantCollection[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentShaderVariantCollection[] value = P_0.Value;
				List<PersistentShaderVariantCollection> list = new List<PersistentShaderVariantCollection>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentShaderVariantCollection item = (PersistentShaderVariantCollection)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentShaderVariantCollection[] array = new PersistentShaderVariantCollection[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentShaderVariantCollection[]> primitiveContract2 = new PrimitiveContract<PersistentShaderVariantCollection[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentShaderVariantCollection[]> primitiveContract3 = new PrimitiveContract<PersistentShaderVariantCollection[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentShaderVariantCollection> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentShaderVariantCollection>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentShaderVariantCollection>), P_0.GetType());
		}
		foreach (PersistentShaderVariantCollection item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentShaderVariantCollection> Read(List<PersistentShaderVariantCollection> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentShaderVariantCollection> list = new List<PersistentShaderVariantCollection>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentShaderVariantCollection>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentShaderVariantCollection> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentShaderVariantCollection item = (PersistentShaderVariantCollection)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentShaderVariantCollection> list3 = new List<PersistentShaderVariantCollection>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentShaderVariantCollection> list4 = new List<PersistentShaderVariantCollection>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentShadow[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentShadow[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentShadow[]>), P_0.GetType());
		}
		PersistentShadow[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentShadow[] array = value;
		foreach (PersistentShadow obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentShadow[]> Read(PrimitiveContract<PersistentShadow[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentShadow[]> primitiveContract = new PrimitiveContract<PersistentShadow[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentShadow[] value = P_0.Value;
				List<PersistentShadow> list = new List<PersistentShadow>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentShadow item = (PersistentShadow)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentShadow[] array = new PersistentShadow[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentShadow[]> primitiveContract2 = new PrimitiveContract<PersistentShadow[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentShadow[]> primitiveContract3 = new PrimitiveContract<PersistentShadow[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentShadow> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentShadow>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentShadow>), P_0.GetType());
		}
		foreach (PersistentShadow item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentShadow> Read(List<PersistentShadow> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentShadow> list = new List<PersistentShadow>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentShadow>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentShadow> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentShadow item = (PersistentShadow)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentShadow> list3 = new List<PersistentShadow>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentShadow> list4 = new List<PersistentShadow>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSkinnedMeshRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSkinnedMeshRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSkinnedMeshRenderer[]>), P_0.GetType());
		}
		PersistentSkinnedMeshRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSkinnedMeshRenderer[] array = value;
		foreach (PersistentSkinnedMeshRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSkinnedMeshRenderer[]> Read(PrimitiveContract<PersistentSkinnedMeshRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSkinnedMeshRenderer[]> primitiveContract = new PrimitiveContract<PersistentSkinnedMeshRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSkinnedMeshRenderer[] value = P_0.Value;
				List<PersistentSkinnedMeshRenderer> list = new List<PersistentSkinnedMeshRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSkinnedMeshRenderer item = (PersistentSkinnedMeshRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSkinnedMeshRenderer[] array = new PersistentSkinnedMeshRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSkinnedMeshRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentSkinnedMeshRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSkinnedMeshRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentSkinnedMeshRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSkinnedMeshRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSkinnedMeshRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSkinnedMeshRenderer>), P_0.GetType());
		}
		foreach (PersistentSkinnedMeshRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSkinnedMeshRenderer> Read(List<PersistentSkinnedMeshRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSkinnedMeshRenderer> list = new List<PersistentSkinnedMeshRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSkinnedMeshRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSkinnedMeshRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSkinnedMeshRenderer item = (PersistentSkinnedMeshRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSkinnedMeshRenderer> list3 = new List<PersistentSkinnedMeshRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSkinnedMeshRenderer> list4 = new List<PersistentSkinnedMeshRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSkybox[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSkybox[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSkybox[]>), P_0.GetType());
		}
		PersistentSkybox[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSkybox[] array = value;
		foreach (PersistentSkybox obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSkybox[]> Read(PrimitiveContract<PersistentSkybox[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSkybox[]> primitiveContract = new PrimitiveContract<PersistentSkybox[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSkybox[] value = P_0.Value;
				List<PersistentSkybox> list = new List<PersistentSkybox>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSkybox item = (PersistentSkybox)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSkybox[] array = new PersistentSkybox[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSkybox[]> primitiveContract2 = new PrimitiveContract<PersistentSkybox[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSkybox[]> primitiveContract3 = new PrimitiveContract<PersistentSkybox[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSkybox> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSkybox>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSkybox>), P_0.GetType());
		}
		foreach (PersistentSkybox item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSkybox> Read(List<PersistentSkybox> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSkybox> list = new List<PersistentSkybox>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSkybox>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSkybox> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSkybox item = (PersistentSkybox)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSkybox> list3 = new List<PersistentSkybox>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSkybox> list4 = new List<PersistentSkybox>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSliderJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSliderJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSliderJoint2D[]>), P_0.GetType());
		}
		PersistentSliderJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSliderJoint2D[] array = value;
		foreach (PersistentSliderJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSliderJoint2D[]> Read(PrimitiveContract<PersistentSliderJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSliderJoint2D[]> primitiveContract = new PrimitiveContract<PersistentSliderJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSliderJoint2D[] value = P_0.Value;
				List<PersistentSliderJoint2D> list = new List<PersistentSliderJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSliderJoint2D item = (PersistentSliderJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSliderJoint2D[] array = new PersistentSliderJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSliderJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentSliderJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSliderJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentSliderJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSliderJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSliderJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSliderJoint2D>), P_0.GetType());
		}
		foreach (PersistentSliderJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSliderJoint2D> Read(List<PersistentSliderJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSliderJoint2D> list = new List<PersistentSliderJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSliderJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSliderJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSliderJoint2D item = (PersistentSliderJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSliderJoint2D> list3 = new List<PersistentSliderJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSliderJoint2D> list4 = new List<PersistentSliderJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSortingGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSortingGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSortingGroup[]>), P_0.GetType());
		}
		PersistentSortingGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSortingGroup[] array = value;
		foreach (PersistentSortingGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSortingGroup[]> Read(PrimitiveContract<PersistentSortingGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSortingGroup[]> primitiveContract = new PrimitiveContract<PersistentSortingGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSortingGroup[] value = P_0.Value;
				List<PersistentSortingGroup> list = new List<PersistentSortingGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSortingGroup item = (PersistentSortingGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSortingGroup[] array = new PersistentSortingGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSortingGroup[]> primitiveContract2 = new PrimitiveContract<PersistentSortingGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSortingGroup[]> primitiveContract3 = new PrimitiveContract<PersistentSortingGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSortingGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSortingGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSortingGroup>), P_0.GetType());
		}
		foreach (PersistentSortingGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSortingGroup> Read(List<PersistentSortingGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSortingGroup> list = new List<PersistentSortingGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSortingGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSortingGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSortingGroup item = (PersistentSortingGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSortingGroup> list3 = new List<PersistentSortingGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSortingGroup> list4 = new List<PersistentSortingGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSparseTexture[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSparseTexture[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSparseTexture[]>), P_0.GetType());
		}
		PersistentSparseTexture[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSparseTexture[] array = value;
		foreach (PersistentSparseTexture obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSparseTexture[]> Read(PrimitiveContract<PersistentSparseTexture[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSparseTexture[]> primitiveContract = new PrimitiveContract<PersistentSparseTexture[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSparseTexture[] value = P_0.Value;
				List<PersistentSparseTexture> list = new List<PersistentSparseTexture>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSparseTexture item = (PersistentSparseTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSparseTexture[] array = new PersistentSparseTexture[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSparseTexture[]> primitiveContract2 = new PrimitiveContract<PersistentSparseTexture[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSparseTexture[]> primitiveContract3 = new PrimitiveContract<PersistentSparseTexture[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSparseTexture> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSparseTexture>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSparseTexture>), P_0.GetType());
		}
		foreach (PersistentSparseTexture item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSparseTexture> Read(List<PersistentSparseTexture> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSparseTexture> list = new List<PersistentSparseTexture>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSparseTexture>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSparseTexture> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSparseTexture item = (PersistentSparseTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSparseTexture> list3 = new List<PersistentSparseTexture>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSparseTexture> list4 = new List<PersistentSparseTexture>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSphereCollider[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSphereCollider[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSphereCollider[]>), P_0.GetType());
		}
		PersistentSphereCollider[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSphereCollider[] array = value;
		foreach (PersistentSphereCollider obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSphereCollider[]> Read(PrimitiveContract<PersistentSphereCollider[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSphereCollider[]> primitiveContract = new PrimitiveContract<PersistentSphereCollider[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSphereCollider[] value = P_0.Value;
				List<PersistentSphereCollider> list = new List<PersistentSphereCollider>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSphereCollider item = (PersistentSphereCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSphereCollider[] array = new PersistentSphereCollider[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSphereCollider[]> primitiveContract2 = new PrimitiveContract<PersistentSphereCollider[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSphereCollider[]> primitiveContract3 = new PrimitiveContract<PersistentSphereCollider[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSphereCollider> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSphereCollider>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSphereCollider>), P_0.GetType());
		}
		foreach (PersistentSphereCollider item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSphereCollider> Read(List<PersistentSphereCollider> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSphereCollider> list = new List<PersistentSphereCollider>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSphereCollider>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSphereCollider> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSphereCollider item = (PersistentSphereCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSphereCollider> list3 = new List<PersistentSphereCollider>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSphereCollider> list4 = new List<PersistentSphereCollider>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PersistentSplatPrototype P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentSplatPrototype))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentSplatPrototype), P_0.GetType());
		}
		float metallic = P_0.metallic;
		if (metallic != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(metallic, P_1);
		}
		long normalMap = P_0.normalMap;
		if (normalMap != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(normalMap, P_1);
		}
		float smoothness = P_0.smoothness;
		if (smoothness != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(smoothness, P_1);
		}
		Color specular = P_0.specular;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(specular, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		long texture = P_0.texture;
		if (texture != 0L)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(texture, P_1);
		}
		Vector2 tileOffset = P_0.tileOffset;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(tileOffset, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 tileSize = P_0.tileSize;
		ProtoWriter.WriteFieldHeader(7, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(tileSize, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static PersistentSplatPrototype Read(PersistentSplatPrototype P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentSplatPrototype persistentSplatPrototype5 = new PersistentSplatPrototype();
					ProtoReader.NoteObject(persistentSplatPrototype5, P_1);
					P_0 = persistentSplatPrototype5;
				}
				float metallic = P_1.ReadSingle();
				P_0.metallic = metallic;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentSplatPrototype persistentSplatPrototype8 = new PersistentSplatPrototype();
					ProtoReader.NoteObject(persistentSplatPrototype8, P_1);
					P_0 = persistentSplatPrototype8;
				}
				long texture = P_1.ReadInt64();
				P_0.normalMap = texture;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentSplatPrototype persistentSplatPrototype6 = new PersistentSplatPrototype();
					ProtoReader.NoteObject(persistentSplatPrototype6, P_1);
					P_0 = persistentSplatPrototype6;
				}
				float metallic = P_1.ReadSingle();
				P_0.smoothness = metallic;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentSplatPrototype persistentSplatPrototype3 = new PersistentSplatPrototype();
					ProtoReader.NoteObject(persistentSplatPrototype3, P_1);
					P_0 = persistentSplatPrototype3;
				}
				Color specular = P_0.specular;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(specular, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color specular2 = color;
				P_0.specular = specular2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentSplatPrototype persistentSplatPrototype2 = new PersistentSplatPrototype();
					ProtoReader.NoteObject(persistentSplatPrototype2, P_1);
					P_0 = persistentSplatPrototype2;
				}
				long texture = P_1.ReadInt64();
				P_0.texture = texture;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentSplatPrototype persistentSplatPrototype7 = new PersistentSplatPrototype();
					ProtoReader.NoteObject(persistentSplatPrototype7, P_1);
					P_0 = persistentSplatPrototype7;
				}
				Vector2 tileOffset = P_0.tileOffset;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(tileOffset, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 tileSize2 = vector2;
				P_0.tileOffset = tileSize2;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					PersistentSplatPrototype persistentSplatPrototype4 = new PersistentSplatPrototype();
					ProtoReader.NoteObject(persistentSplatPrototype4, P_1);
					P_0 = persistentSplatPrototype4;
				}
				Vector2 tileSize = P_0.tileSize;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(tileSize, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 tileSize2 = vector;
				P_0.tileSize = tileSize2;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentSplatPrototype persistentSplatPrototype = new PersistentSplatPrototype();
					ProtoReader.NoteObject(persistentSplatPrototype, P_1);
					P_0 = persistentSplatPrototype;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentSplatPrototype persistentSplatPrototype9 = new PersistentSplatPrototype();
			ProtoReader.NoteObject(persistentSplatPrototype9, P_1);
			P_0 = persistentSplatPrototype9;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSplatPrototype[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSplatPrototype[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSplatPrototype[]>), P_0.GetType());
		}
		PersistentSplatPrototype[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSplatPrototype[] array = value;
		foreach (PersistentSplatPrototype obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSplatPrototype[]> Read(PrimitiveContract<PersistentSplatPrototype[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSplatPrototype[]> primitiveContract = new PrimitiveContract<PersistentSplatPrototype[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSplatPrototype[] value = P_0.Value;
				List<PersistentSplatPrototype> list = new List<PersistentSplatPrototype>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSplatPrototype item = Read((PersistentSplatPrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSplatPrototype[] array = new PersistentSplatPrototype[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSplatPrototype[]> primitiveContract2 = new PrimitiveContract<PersistentSplatPrototype[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSplatPrototype[]> primitiveContract3 = new PrimitiveContract<PersistentSplatPrototype[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSplatPrototype> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSplatPrototype>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSplatPrototype>), P_0.GetType());
		}
		foreach (PersistentSplatPrototype item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSplatPrototype> Read(List<PersistentSplatPrototype> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSplatPrototype> list = new List<PersistentSplatPrototype>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSplatPrototype>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSplatPrototype> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSplatPrototype item = Read((PersistentSplatPrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSplatPrototype> list3 = new List<PersistentSplatPrototype>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSplatPrototype> list4 = new List<PersistentSplatPrototype>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSpringJoint[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSpringJoint[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSpringJoint[]>), P_0.GetType());
		}
		PersistentSpringJoint[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSpringJoint[] array = value;
		foreach (PersistentSpringJoint obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSpringJoint[]> Read(PrimitiveContract<PersistentSpringJoint[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSpringJoint[]> primitiveContract = new PrimitiveContract<PersistentSpringJoint[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSpringJoint[] value = P_0.Value;
				List<PersistentSpringJoint> list = new List<PersistentSpringJoint>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSpringJoint item = (PersistentSpringJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSpringJoint[] array = new PersistentSpringJoint[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSpringJoint[]> primitiveContract2 = new PrimitiveContract<PersistentSpringJoint[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSpringJoint[]> primitiveContract3 = new PrimitiveContract<PersistentSpringJoint[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSpringJoint> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSpringJoint>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSpringJoint>), P_0.GetType());
		}
		foreach (PersistentSpringJoint item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSpringJoint> Read(List<PersistentSpringJoint> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSpringJoint> list = new List<PersistentSpringJoint>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSpringJoint>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSpringJoint> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSpringJoint item = (PersistentSpringJoint)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSpringJoint> list3 = new List<PersistentSpringJoint>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSpringJoint> list4 = new List<PersistentSpringJoint>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSpringJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSpringJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSpringJoint2D[]>), P_0.GetType());
		}
		PersistentSpringJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSpringJoint2D[] array = value;
		foreach (PersistentSpringJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSpringJoint2D[]> Read(PrimitiveContract<PersistentSpringJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSpringJoint2D[]> primitiveContract = new PrimitiveContract<PersistentSpringJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSpringJoint2D[] value = P_0.Value;
				List<PersistentSpringJoint2D> list = new List<PersistentSpringJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSpringJoint2D item = (PersistentSpringJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSpringJoint2D[] array = new PersistentSpringJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSpringJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentSpringJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSpringJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentSpringJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSpringJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSpringJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSpringJoint2D>), P_0.GetType());
		}
		foreach (PersistentSpringJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSpringJoint2D> Read(List<PersistentSpringJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSpringJoint2D> list = new List<PersistentSpringJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSpringJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSpringJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSpringJoint2D item = (PersistentSpringJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSpringJoint2D> list3 = new List<PersistentSpringJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSpringJoint2D> list4 = new List<PersistentSpringJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSprite[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSprite[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSprite[]>), P_0.GetType());
		}
		PersistentSprite[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSprite[] array = value;
		foreach (PersistentSprite obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSprite[]> Read(PrimitiveContract<PersistentSprite[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSprite[]> primitiveContract = new PrimitiveContract<PersistentSprite[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSprite[] value = P_0.Value;
				List<PersistentSprite> list = new List<PersistentSprite>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSprite item = (PersistentSprite)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSprite[] array = new PersistentSprite[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSprite[]> primitiveContract2 = new PrimitiveContract<PersistentSprite[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSprite[]> primitiveContract3 = new PrimitiveContract<PersistentSprite[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSprite> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSprite>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSprite>), P_0.GetType());
		}
		foreach (PersistentSprite item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSprite> Read(List<PersistentSprite> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSprite> list = new List<PersistentSprite>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSprite>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSprite> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSprite item = (PersistentSprite)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSprite> list3 = new List<PersistentSprite>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSprite> list4 = new List<PersistentSprite>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSpriteRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSpriteRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSpriteRenderer[]>), P_0.GetType());
		}
		PersistentSpriteRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSpriteRenderer[] array = value;
		foreach (PersistentSpriteRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSpriteRenderer[]> Read(PrimitiveContract<PersistentSpriteRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSpriteRenderer[]> primitiveContract = new PrimitiveContract<PersistentSpriteRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSpriteRenderer[] value = P_0.Value;
				List<PersistentSpriteRenderer> list = new List<PersistentSpriteRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSpriteRenderer item = (PersistentSpriteRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSpriteRenderer[] array = new PersistentSpriteRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSpriteRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentSpriteRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSpriteRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentSpriteRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSpriteRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSpriteRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSpriteRenderer>), P_0.GetType());
		}
		foreach (PersistentSpriteRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSpriteRenderer> Read(List<PersistentSpriteRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSpriteRenderer> list = new List<PersistentSpriteRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSpriteRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSpriteRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSpriteRenderer item = (PersistentSpriteRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSpriteRenderer> list3 = new List<PersistentSpriteRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSpriteRenderer> list4 = new List<PersistentSpriteRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentStandaloneInputModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentStandaloneInputModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentStandaloneInputModule[]>), P_0.GetType());
		}
		PersistentStandaloneInputModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentStandaloneInputModule[] array = value;
		foreach (PersistentStandaloneInputModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentStandaloneInputModule[]> Read(PrimitiveContract<PersistentStandaloneInputModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentStandaloneInputModule[]> primitiveContract = new PrimitiveContract<PersistentStandaloneInputModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentStandaloneInputModule[] value = P_0.Value;
				List<PersistentStandaloneInputModule> list = new List<PersistentStandaloneInputModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentStandaloneInputModule item = (PersistentStandaloneInputModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentStandaloneInputModule[] array = new PersistentStandaloneInputModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentStandaloneInputModule[]> primitiveContract2 = new PrimitiveContract<PersistentStandaloneInputModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentStandaloneInputModule[]> primitiveContract3 = new PrimitiveContract<PersistentStandaloneInputModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentStandaloneInputModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentStandaloneInputModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentStandaloneInputModule>), P_0.GetType());
		}
		foreach (PersistentStandaloneInputModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentStandaloneInputModule> Read(List<PersistentStandaloneInputModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentStandaloneInputModule> list = new List<PersistentStandaloneInputModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentStandaloneInputModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentStandaloneInputModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentStandaloneInputModule item = (PersistentStandaloneInputModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentStandaloneInputModule> list3 = new List<PersistentStandaloneInputModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentStandaloneInputModule> list4 = new List<PersistentStandaloneInputModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentStateMachineBehaviour[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentStateMachineBehaviour[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentStateMachineBehaviour[]>), P_0.GetType());
		}
		PersistentStateMachineBehaviour[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentStateMachineBehaviour[] array = value;
		foreach (PersistentStateMachineBehaviour obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentStateMachineBehaviour[]> Read(PrimitiveContract<PersistentStateMachineBehaviour[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentStateMachineBehaviour[]> primitiveContract = new PrimitiveContract<PersistentStateMachineBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentStateMachineBehaviour[] value = P_0.Value;
				List<PersistentStateMachineBehaviour> list = new List<PersistentStateMachineBehaviour>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentStateMachineBehaviour item = (PersistentStateMachineBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentStateMachineBehaviour[] array = new PersistentStateMachineBehaviour[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentStateMachineBehaviour[]> primitiveContract2 = new PrimitiveContract<PersistentStateMachineBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentStateMachineBehaviour[]> primitiveContract3 = new PrimitiveContract<PersistentStateMachineBehaviour[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentStateMachineBehaviour> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentStateMachineBehaviour>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentStateMachineBehaviour>), P_0.GetType());
		}
		foreach (PersistentStateMachineBehaviour item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentStateMachineBehaviour> Read(List<PersistentStateMachineBehaviour> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentStateMachineBehaviour> list = new List<PersistentStateMachineBehaviour>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentStateMachineBehaviour>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentStateMachineBehaviour> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentStateMachineBehaviour item = (PersistentStateMachineBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentStateMachineBehaviour> list3 = new List<PersistentStateMachineBehaviour>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentStateMachineBehaviour> list4 = new List<PersistentStateMachineBehaviour>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSurfaceEffector2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSurfaceEffector2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSurfaceEffector2D[]>), P_0.GetType());
		}
		PersistentSurfaceEffector2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSurfaceEffector2D[] array = value;
		foreach (PersistentSurfaceEffector2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSurfaceEffector2D[]> Read(PrimitiveContract<PersistentSurfaceEffector2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSurfaceEffector2D[]> primitiveContract = new PrimitiveContract<PersistentSurfaceEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSurfaceEffector2D[] value = P_0.Value;
				List<PersistentSurfaceEffector2D> list = new List<PersistentSurfaceEffector2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSurfaceEffector2D item = (PersistentSurfaceEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSurfaceEffector2D[] array = new PersistentSurfaceEffector2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSurfaceEffector2D[]> primitiveContract2 = new PrimitiveContract<PersistentSurfaceEffector2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSurfaceEffector2D[]> primitiveContract3 = new PrimitiveContract<PersistentSurfaceEffector2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSurfaceEffector2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSurfaceEffector2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSurfaceEffector2D>), P_0.GetType());
		}
		foreach (PersistentSurfaceEffector2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSurfaceEffector2D> Read(List<PersistentSurfaceEffector2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSurfaceEffector2D> list = new List<PersistentSurfaceEffector2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSurfaceEffector2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSurfaceEffector2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSurfaceEffector2D item = (PersistentSurfaceEffector2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSurfaceEffector2D> list3 = new List<PersistentSurfaceEffector2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSurfaceEffector2D> list4 = new List<PersistentSurfaceEffector2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTargetJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTargetJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTargetJoint2D[]>), P_0.GetType());
		}
		PersistentTargetJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTargetJoint2D[] array = value;
		foreach (PersistentTargetJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTargetJoint2D[]> Read(PrimitiveContract<PersistentTargetJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTargetJoint2D[]> primitiveContract = new PrimitiveContract<PersistentTargetJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTargetJoint2D[] value = P_0.Value;
				List<PersistentTargetJoint2D> list = new List<PersistentTargetJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTargetJoint2D item = (PersistentTargetJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTargetJoint2D[] array = new PersistentTargetJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTargetJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentTargetJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTargetJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentTargetJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTargetJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTargetJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTargetJoint2D>), P_0.GetType());
		}
		foreach (PersistentTargetJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTargetJoint2D> Read(List<PersistentTargetJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTargetJoint2D> list = new List<PersistentTargetJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTargetJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTargetJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTargetJoint2D item = (PersistentTargetJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTargetJoint2D> list3 = new List<PersistentTargetJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTargetJoint2D> list4 = new List<PersistentTargetJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTerrain[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTerrain[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTerrain[]>), P_0.GetType());
		}
		PersistentTerrain[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTerrain[] array = value;
		foreach (PersistentTerrain obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTerrain[]> Read(PrimitiveContract<PersistentTerrain[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTerrain[]> primitiveContract = new PrimitiveContract<PersistentTerrain[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTerrain[] value = P_0.Value;
				List<PersistentTerrain> list = new List<PersistentTerrain>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTerrain item = (PersistentTerrain)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTerrain[] array = new PersistentTerrain[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTerrain[]> primitiveContract2 = new PrimitiveContract<PersistentTerrain[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTerrain[]> primitiveContract3 = new PrimitiveContract<PersistentTerrain[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTerrain> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTerrain>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTerrain>), P_0.GetType());
		}
		foreach (PersistentTerrain item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTerrain> Read(List<PersistentTerrain> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTerrain> list = new List<PersistentTerrain>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTerrain>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTerrain> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTerrain item = (PersistentTerrain)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTerrain> list3 = new List<PersistentTerrain>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTerrain> list4 = new List<PersistentTerrain>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTerrainCollider[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTerrainCollider[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTerrainCollider[]>), P_0.GetType());
		}
		PersistentTerrainCollider[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTerrainCollider[] array = value;
		foreach (PersistentTerrainCollider obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTerrainCollider[]> Read(PrimitiveContract<PersistentTerrainCollider[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTerrainCollider[]> primitiveContract = new PrimitiveContract<PersistentTerrainCollider[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTerrainCollider[] value = P_0.Value;
				List<PersistentTerrainCollider> list = new List<PersistentTerrainCollider>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTerrainCollider item = (PersistentTerrainCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTerrainCollider[] array = new PersistentTerrainCollider[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTerrainCollider[]> primitiveContract2 = new PrimitiveContract<PersistentTerrainCollider[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTerrainCollider[]> primitiveContract3 = new PrimitiveContract<PersistentTerrainCollider[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTerrainCollider> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTerrainCollider>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTerrainCollider>), P_0.GetType());
		}
		foreach (PersistentTerrainCollider item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTerrainCollider> Read(List<PersistentTerrainCollider> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTerrainCollider> list = new List<PersistentTerrainCollider>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTerrainCollider>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTerrainCollider> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTerrainCollider item = (PersistentTerrainCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTerrainCollider> list3 = new List<PersistentTerrainCollider>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTerrainCollider> list4 = new List<PersistentTerrainCollider>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTerrainData[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTerrainData[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTerrainData[]>), P_0.GetType());
		}
		PersistentTerrainData[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTerrainData[] array = value;
		foreach (PersistentTerrainData obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTerrainData[]> Read(PrimitiveContract<PersistentTerrainData[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTerrainData[]> primitiveContract = new PrimitiveContract<PersistentTerrainData[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTerrainData[] value = P_0.Value;
				List<PersistentTerrainData> list = new List<PersistentTerrainData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTerrainData item = (PersistentTerrainData)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTerrainData[] array = new PersistentTerrainData[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTerrainData[]> primitiveContract2 = new PrimitiveContract<PersistentTerrainData[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTerrainData[]> primitiveContract3 = new PrimitiveContract<PersistentTerrainData[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTerrainData> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTerrainData>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTerrainData>), P_0.GetType());
		}
		foreach (PersistentTerrainData item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTerrainData> Read(List<PersistentTerrainData> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTerrainData> list = new List<PersistentTerrainData>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTerrainData>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTerrainData> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTerrainData item = (PersistentTerrainData)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTerrainData> list3 = new List<PersistentTerrainData>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTerrainData> list4 = new List<PersistentTerrainData>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentText[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentText[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentText[]>), P_0.GetType());
		}
		PersistentText[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentText[] array = value;
		foreach (PersistentText obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentText[]> Read(PrimitiveContract<PersistentText[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentText[]> primitiveContract = new PrimitiveContract<PersistentText[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentText[] value = P_0.Value;
				List<PersistentText> list = new List<PersistentText>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentText item = (PersistentText)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentText[] array = new PersistentText[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentText[]> primitiveContract2 = new PrimitiveContract<PersistentText[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentText[]> primitiveContract3 = new PrimitiveContract<PersistentText[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentText> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentText>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentText>), P_0.GetType());
		}
		foreach (PersistentText item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentText> Read(List<PersistentText> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentText> list = new List<PersistentText>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentText>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentText> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentText item = (PersistentText)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentText> list3 = new List<PersistentText>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentText> list4 = new List<PersistentText>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTextAsset[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTextAsset[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTextAsset[]>), P_0.GetType());
		}
		PersistentTextAsset[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTextAsset[] array = value;
		foreach (PersistentTextAsset obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTextAsset[]> Read(PrimitiveContract<PersistentTextAsset[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTextAsset[]> primitiveContract = new PrimitiveContract<PersistentTextAsset[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTextAsset[] value = P_0.Value;
				List<PersistentTextAsset> list = new List<PersistentTextAsset>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTextAsset item = (PersistentTextAsset)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTextAsset[] array = new PersistentTextAsset[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTextAsset[]> primitiveContract2 = new PrimitiveContract<PersistentTextAsset[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTextAsset[]> primitiveContract3 = new PrimitiveContract<PersistentTextAsset[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTextAsset> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTextAsset>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTextAsset>), P_0.GetType());
		}
		foreach (PersistentTextAsset item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTextAsset> Read(List<PersistentTextAsset> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTextAsset> list = new List<PersistentTextAsset>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTextAsset>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTextAsset> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTextAsset item = (PersistentTextAsset)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTextAsset> list3 = new List<PersistentTextAsset>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTextAsset> list4 = new List<PersistentTextAsset>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTextMesh[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTextMesh[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTextMesh[]>), P_0.GetType());
		}
		PersistentTextMesh[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTextMesh[] array = value;
		foreach (PersistentTextMesh obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTextMesh[]> Read(PrimitiveContract<PersistentTextMesh[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTextMesh[]> primitiveContract = new PrimitiveContract<PersistentTextMesh[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTextMesh[] value = P_0.Value;
				List<PersistentTextMesh> list = new List<PersistentTextMesh>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTextMesh item = (PersistentTextMesh)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTextMesh[] array = new PersistentTextMesh[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTextMesh[]> primitiveContract2 = new PrimitiveContract<PersistentTextMesh[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTextMesh[]> primitiveContract3 = new PrimitiveContract<PersistentTextMesh[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTextMesh> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTextMesh>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTextMesh>), P_0.GetType());
		}
		foreach (PersistentTextMesh item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTextMesh> Read(List<PersistentTextMesh> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTextMesh> list = new List<PersistentTextMesh>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTextMesh>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTextMesh> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTextMesh item = (PersistentTextMesh)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTextMesh> list3 = new List<PersistentTextMesh>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTextMesh> list4 = new List<PersistentTextMesh>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTexture2DArray[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTexture2DArray[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTexture2DArray[]>), P_0.GetType());
		}
		PersistentTexture2DArray[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTexture2DArray[] array = value;
		foreach (PersistentTexture2DArray obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTexture2DArray[]> Read(PrimitiveContract<PersistentTexture2DArray[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTexture2DArray[]> primitiveContract = new PrimitiveContract<PersistentTexture2DArray[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTexture2DArray[] value = P_0.Value;
				List<PersistentTexture2DArray> list = new List<PersistentTexture2DArray>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTexture2DArray item = (PersistentTexture2DArray)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTexture2DArray[] array = new PersistentTexture2DArray[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTexture2DArray[]> primitiveContract2 = new PrimitiveContract<PersistentTexture2DArray[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTexture2DArray[]> primitiveContract3 = new PrimitiveContract<PersistentTexture2DArray[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTexture2DArray> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTexture2DArray>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTexture2DArray>), P_0.GetType());
		}
		foreach (PersistentTexture2DArray item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTexture2DArray> Read(List<PersistentTexture2DArray> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTexture2DArray> list = new List<PersistentTexture2DArray>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTexture2DArray>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTexture2DArray> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTexture2DArray item = (PersistentTexture2DArray)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTexture2DArray> list3 = new List<PersistentTexture2DArray>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTexture2DArray> list4 = new List<PersistentTexture2DArray>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTexture3D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTexture3D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTexture3D[]>), P_0.GetType());
		}
		PersistentTexture3D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTexture3D[] array = value;
		foreach (PersistentTexture3D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTexture3D[]> Read(PrimitiveContract<PersistentTexture3D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTexture3D[]> primitiveContract = new PrimitiveContract<PersistentTexture3D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTexture3D[] value = P_0.Value;
				List<PersistentTexture3D> list = new List<PersistentTexture3D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTexture3D item = (PersistentTexture3D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTexture3D[] array = new PersistentTexture3D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTexture3D[]> primitiveContract2 = new PrimitiveContract<PersistentTexture3D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTexture3D[]> primitiveContract3 = new PrimitiveContract<PersistentTexture3D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTexture3D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTexture3D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTexture3D>), P_0.GetType());
		}
		foreach (PersistentTexture3D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTexture3D> Read(List<PersistentTexture3D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTexture3D> list = new List<PersistentTexture3D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTexture3D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTexture3D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTexture3D item = (PersistentTexture3D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTexture3D> list3 = new List<PersistentTexture3D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTexture3D> list4 = new List<PersistentTexture3D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentToggle[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentToggle[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentToggle[]>), P_0.GetType());
		}
		PersistentToggle[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentToggle[] array = value;
		foreach (PersistentToggle obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentToggle[]> Read(PrimitiveContract<PersistentToggle[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentToggle[]> primitiveContract = new PrimitiveContract<PersistentToggle[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentToggle[] value = P_0.Value;
				List<PersistentToggle> list = new List<PersistentToggle>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentToggle item = (PersistentToggle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentToggle[] array = new PersistentToggle[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentToggle[]> primitiveContract2 = new PrimitiveContract<PersistentToggle[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentToggle[]> primitiveContract3 = new PrimitiveContract<PersistentToggle[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentToggle> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentToggle>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentToggle>), P_0.GetType());
		}
		foreach (PersistentToggle item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentToggle> Read(List<PersistentToggle> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentToggle> list = new List<PersistentToggle>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentToggle>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentToggle> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentToggle item = (PersistentToggle)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentToggle> list3 = new List<PersistentToggle>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentToggle> list4 = new List<PersistentToggle>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentToggleGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentToggleGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentToggleGroup[]>), P_0.GetType());
		}
		PersistentToggleGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentToggleGroup[] array = value;
		foreach (PersistentToggleGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentToggleGroup[]> Read(PrimitiveContract<PersistentToggleGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentToggleGroup[]> primitiveContract = new PrimitiveContract<PersistentToggleGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentToggleGroup[] value = P_0.Value;
				List<PersistentToggleGroup> list = new List<PersistentToggleGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentToggleGroup item = (PersistentToggleGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentToggleGroup[] array = new PersistentToggleGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentToggleGroup[]> primitiveContract2 = new PrimitiveContract<PersistentToggleGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentToggleGroup[]> primitiveContract3 = new PrimitiveContract<PersistentToggleGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentToggleGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentToggleGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentToggleGroup>), P_0.GetType());
		}
		foreach (PersistentToggleGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentToggleGroup> Read(List<PersistentToggleGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentToggleGroup> list = new List<PersistentToggleGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentToggleGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentToggleGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentToggleGroup item = (PersistentToggleGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentToggleGroup> list3 = new List<PersistentToggleGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentToggleGroup> list4 = new List<PersistentToggleGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTrailRenderer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTrailRenderer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTrailRenderer[]>), P_0.GetType());
		}
		PersistentTrailRenderer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTrailRenderer[] array = value;
		foreach (PersistentTrailRenderer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTrailRenderer[]> Read(PrimitiveContract<PersistentTrailRenderer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTrailRenderer[]> primitiveContract = new PrimitiveContract<PersistentTrailRenderer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTrailRenderer[] value = P_0.Value;
				List<PersistentTrailRenderer> list = new List<PersistentTrailRenderer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTrailRenderer item = (PersistentTrailRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTrailRenderer[] array = new PersistentTrailRenderer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTrailRenderer[]> primitiveContract2 = new PrimitiveContract<PersistentTrailRenderer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTrailRenderer[]> primitiveContract3 = new PrimitiveContract<PersistentTrailRenderer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTrailRenderer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTrailRenderer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTrailRenderer>), P_0.GetType());
		}
		foreach (PersistentTrailRenderer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTrailRenderer> Read(List<PersistentTrailRenderer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTrailRenderer> list = new List<PersistentTrailRenderer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTrailRenderer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTrailRenderer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTrailRenderer item = (PersistentTrailRenderer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTrailRenderer> list3 = new List<PersistentTrailRenderer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTrailRenderer> list4 = new List<PersistentTrailRenderer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTree[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTree[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTree[]>), P_0.GetType());
		}
		PersistentTree[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTree[] array = value;
		foreach (PersistentTree obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTree[]> Read(PrimitiveContract<PersistentTree[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTree[]> primitiveContract = new PrimitiveContract<PersistentTree[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTree[] value = P_0.Value;
				List<PersistentTree> list = new List<PersistentTree>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTree item = (PersistentTree)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTree[] array = new PersistentTree[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTree[]> primitiveContract2 = new PrimitiveContract<PersistentTree[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTree[]> primitiveContract3 = new PrimitiveContract<PersistentTree[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTree> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTree>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTree>), P_0.GetType());
		}
		foreach (PersistentTree item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTree> Read(List<PersistentTree> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTree> list = new List<PersistentTree>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTree>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTree> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTree item = (PersistentTree)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTree> list3 = new List<PersistentTree>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTree> list4 = new List<PersistentTree>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PersistentTreePrototype P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentTreePrototype))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentTreePrototype), P_0.GetType());
		}
		float bendFactor = P_0.bendFactor;
		if (bendFactor != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bendFactor, P_1);
		}
		long prefab = P_0.prefab;
		if (prefab != 0L)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(prefab, P_1);
		}
	}

	private static PersistentTreePrototype Read(PersistentTreePrototype P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentTreePrototype persistentTreePrototype2 = new PersistentTreePrototype();
					ProtoReader.NoteObject(persistentTreePrototype2, P_1);
					P_0 = persistentTreePrototype2;
				}
				float bendFactor = P_1.ReadSingle();
				P_0.bendFactor = bendFactor;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentTreePrototype persistentTreePrototype3 = new PersistentTreePrototype();
					ProtoReader.NoteObject(persistentTreePrototype3, P_1);
					P_0 = persistentTreePrototype3;
				}
				long prefab = P_1.ReadInt64();
				P_0.prefab = prefab;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentTreePrototype persistentTreePrototype = new PersistentTreePrototype();
					ProtoReader.NoteObject(persistentTreePrototype, P_1);
					P_0 = persistentTreePrototype;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentTreePrototype persistentTreePrototype4 = new PersistentTreePrototype();
			ProtoReader.NoteObject(persistentTreePrototype4, P_1);
			P_0 = persistentTreePrototype4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTreePrototype[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTreePrototype[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTreePrototype[]>), P_0.GetType());
		}
		PersistentTreePrototype[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTreePrototype[] array = value;
		foreach (PersistentTreePrototype obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTreePrototype[]> Read(PrimitiveContract<PersistentTreePrototype[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTreePrototype[]> primitiveContract = new PrimitiveContract<PersistentTreePrototype[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTreePrototype[] value = P_0.Value;
				List<PersistentTreePrototype> list = new List<PersistentTreePrototype>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTreePrototype item = Read((PersistentTreePrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTreePrototype[] array = new PersistentTreePrototype[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTreePrototype[]> primitiveContract2 = new PrimitiveContract<PersistentTreePrototype[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTreePrototype[]> primitiveContract3 = new PrimitiveContract<PersistentTreePrototype[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTreePrototype> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTreePrototype>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTreePrototype>), P_0.GetType());
		}
		foreach (PersistentTreePrototype item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTreePrototype> Read(List<PersistentTreePrototype> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTreePrototype> list = new List<PersistentTreePrototype>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTreePrototype>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTreePrototype> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTreePrototype item = Read((PersistentTreePrototype)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTreePrototype> list3 = new List<PersistentTreePrototype>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTreePrototype> list4 = new List<PersistentTreePrototype>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentUIBehaviour[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentUIBehaviour[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentUIBehaviour[]>), P_0.GetType());
		}
		PersistentUIBehaviour[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentUIBehaviour[] array = value;
		foreach (PersistentUIBehaviour obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentUIBehaviour[]> Read(PrimitiveContract<PersistentUIBehaviour[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentUIBehaviour[]> primitiveContract = new PrimitiveContract<PersistentUIBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentUIBehaviour[] value = P_0.Value;
				List<PersistentUIBehaviour> list = new List<PersistentUIBehaviour>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentUIBehaviour item = (PersistentUIBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentUIBehaviour[] array = new PersistentUIBehaviour[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentUIBehaviour[]> primitiveContract2 = new PrimitiveContract<PersistentUIBehaviour[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentUIBehaviour[]> primitiveContract3 = new PrimitiveContract<PersistentUIBehaviour[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentUIBehaviour> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentUIBehaviour>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentUIBehaviour>), P_0.GetType());
		}
		foreach (PersistentUIBehaviour item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentUIBehaviour> Read(List<PersistentUIBehaviour> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentUIBehaviour> list = new List<PersistentUIBehaviour>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentUIBehaviour>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentUIBehaviour> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentUIBehaviour item = (PersistentUIBehaviour)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentUIBehaviour> list3 = new List<PersistentUIBehaviour>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentUIBehaviour> list4 = new List<PersistentUIBehaviour>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentVerticalLayoutGroup[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentVerticalLayoutGroup[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentVerticalLayoutGroup[]>), P_0.GetType());
		}
		PersistentVerticalLayoutGroup[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentVerticalLayoutGroup[] array = value;
		foreach (PersistentVerticalLayoutGroup obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentVerticalLayoutGroup[]> Read(PrimitiveContract<PersistentVerticalLayoutGroup[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentVerticalLayoutGroup[]> primitiveContract = new PrimitiveContract<PersistentVerticalLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentVerticalLayoutGroup[] value = P_0.Value;
				List<PersistentVerticalLayoutGroup> list = new List<PersistentVerticalLayoutGroup>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentVerticalLayoutGroup item = (PersistentVerticalLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentVerticalLayoutGroup[] array = new PersistentVerticalLayoutGroup[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentVerticalLayoutGroup[]> primitiveContract2 = new PrimitiveContract<PersistentVerticalLayoutGroup[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentVerticalLayoutGroup[]> primitiveContract3 = new PrimitiveContract<PersistentVerticalLayoutGroup[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentVerticalLayoutGroup> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentVerticalLayoutGroup>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentVerticalLayoutGroup>), P_0.GetType());
		}
		foreach (PersistentVerticalLayoutGroup item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentVerticalLayoutGroup> Read(List<PersistentVerticalLayoutGroup> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentVerticalLayoutGroup> list = new List<PersistentVerticalLayoutGroup>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentVerticalLayoutGroup>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentVerticalLayoutGroup> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentVerticalLayoutGroup item = (PersistentVerticalLayoutGroup)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentVerticalLayoutGroup> list3 = new List<PersistentVerticalLayoutGroup>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentVerticalLayoutGroup> list4 = new List<PersistentVerticalLayoutGroup>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentVideoClip[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentVideoClip[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentVideoClip[]>), P_0.GetType());
		}
		PersistentVideoClip[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentVideoClip[] array = value;
		foreach (PersistentVideoClip obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentVideoClip[]> Read(PrimitiveContract<PersistentVideoClip[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentVideoClip[]> primitiveContract = new PrimitiveContract<PersistentVideoClip[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentVideoClip[] value = P_0.Value;
				List<PersistentVideoClip> list = new List<PersistentVideoClip>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentVideoClip item = (PersistentVideoClip)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentVideoClip[] array = new PersistentVideoClip[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentVideoClip[]> primitiveContract2 = new PrimitiveContract<PersistentVideoClip[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentVideoClip[]> primitiveContract3 = new PrimitiveContract<PersistentVideoClip[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentVideoClip> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentVideoClip>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentVideoClip>), P_0.GetType());
		}
		foreach (PersistentVideoClip item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentVideoClip> Read(List<PersistentVideoClip> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentVideoClip> list = new List<PersistentVideoClip>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentVideoClip>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentVideoClip> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentVideoClip item = (PersistentVideoClip)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentVideoClip> list3 = new List<PersistentVideoClip>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentVideoClip> list4 = new List<PersistentVideoClip>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentVideoPlayer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentVideoPlayer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentVideoPlayer[]>), P_0.GetType());
		}
		PersistentVideoPlayer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentVideoPlayer[] array = value;
		foreach (PersistentVideoPlayer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentVideoPlayer[]> Read(PrimitiveContract<PersistentVideoPlayer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentVideoPlayer[]> primitiveContract = new PrimitiveContract<PersistentVideoPlayer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentVideoPlayer[] value = P_0.Value;
				List<PersistentVideoPlayer> list = new List<PersistentVideoPlayer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentVideoPlayer item = (PersistentVideoPlayer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentVideoPlayer[] array = new PersistentVideoPlayer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentVideoPlayer[]> primitiveContract2 = new PrimitiveContract<PersistentVideoPlayer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentVideoPlayer[]> primitiveContract3 = new PrimitiveContract<PersistentVideoPlayer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentVideoPlayer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentVideoPlayer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentVideoPlayer>), P_0.GetType());
		}
		foreach (PersistentVideoPlayer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentVideoPlayer> Read(List<PersistentVideoPlayer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentVideoPlayer> list = new List<PersistentVideoPlayer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentVideoPlayer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentVideoPlayer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentVideoPlayer item = (PersistentVideoPlayer)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentVideoPlayer> list3 = new List<PersistentVideoPlayer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentVideoPlayer> list4 = new List<PersistentVideoPlayer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentWebCamTexture[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentWebCamTexture[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentWebCamTexture[]>), P_0.GetType());
		}
		PersistentWebCamTexture[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentWebCamTexture[] array = value;
		foreach (PersistentWebCamTexture obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentWebCamTexture[]> Read(PrimitiveContract<PersistentWebCamTexture[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWebCamTexture[]> primitiveContract = new PrimitiveContract<PersistentWebCamTexture[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentWebCamTexture[] value = P_0.Value;
				List<PersistentWebCamTexture> list = new List<PersistentWebCamTexture>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWebCamTexture item = (PersistentWebCamTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentWebCamTexture[] array = new PersistentWebCamTexture[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWebCamTexture[]> primitiveContract2 = new PrimitiveContract<PersistentWebCamTexture[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentWebCamTexture[]> primitiveContract3 = new PrimitiveContract<PersistentWebCamTexture[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentWebCamTexture> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentWebCamTexture>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentWebCamTexture>), P_0.GetType());
		}
		foreach (PersistentWebCamTexture item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentWebCamTexture> Read(List<PersistentWebCamTexture> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentWebCamTexture> list = new List<PersistentWebCamTexture>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentWebCamTexture>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentWebCamTexture> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWebCamTexture item = (PersistentWebCamTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentWebCamTexture> list3 = new List<PersistentWebCamTexture>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentWebCamTexture> list4 = new List<PersistentWebCamTexture>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentWheelCollider[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentWheelCollider[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentWheelCollider[]>), P_0.GetType());
		}
		PersistentWheelCollider[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentWheelCollider[] array = value;
		foreach (PersistentWheelCollider obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentWheelCollider[]> Read(PrimitiveContract<PersistentWheelCollider[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWheelCollider[]> primitiveContract = new PrimitiveContract<PersistentWheelCollider[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentWheelCollider[] value = P_0.Value;
				List<PersistentWheelCollider> list = new List<PersistentWheelCollider>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWheelCollider item = (PersistentWheelCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentWheelCollider[] array = new PersistentWheelCollider[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWheelCollider[]> primitiveContract2 = new PrimitiveContract<PersistentWheelCollider[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentWheelCollider[]> primitiveContract3 = new PrimitiveContract<PersistentWheelCollider[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentWheelCollider> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentWheelCollider>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentWheelCollider>), P_0.GetType());
		}
		foreach (PersistentWheelCollider item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentWheelCollider> Read(List<PersistentWheelCollider> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentWheelCollider> list = new List<PersistentWheelCollider>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentWheelCollider>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentWheelCollider> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWheelCollider item = (PersistentWheelCollider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentWheelCollider> list3 = new List<PersistentWheelCollider>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentWheelCollider> list4 = new List<PersistentWheelCollider>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentWheelJoint2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentWheelJoint2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentWheelJoint2D[]>), P_0.GetType());
		}
		PersistentWheelJoint2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentWheelJoint2D[] array = value;
		foreach (PersistentWheelJoint2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentWheelJoint2D[]> Read(PrimitiveContract<PersistentWheelJoint2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWheelJoint2D[]> primitiveContract = new PrimitiveContract<PersistentWheelJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentWheelJoint2D[] value = P_0.Value;
				List<PersistentWheelJoint2D> list = new List<PersistentWheelJoint2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWheelJoint2D item = (PersistentWheelJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentWheelJoint2D[] array = new PersistentWheelJoint2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWheelJoint2D[]> primitiveContract2 = new PrimitiveContract<PersistentWheelJoint2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentWheelJoint2D[]> primitiveContract3 = new PrimitiveContract<PersistentWheelJoint2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentWheelJoint2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentWheelJoint2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentWheelJoint2D>), P_0.GetType());
		}
		foreach (PersistentWheelJoint2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentWheelJoint2D> Read(List<PersistentWheelJoint2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentWheelJoint2D> list = new List<PersistentWheelJoint2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentWheelJoint2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentWheelJoint2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWheelJoint2D item = (PersistentWheelJoint2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentWheelJoint2D> list3 = new List<PersistentWheelJoint2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentWheelJoint2D> list4 = new List<PersistentWheelJoint2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentWindZone[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentWindZone[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentWindZone[]>), P_0.GetType());
		}
		PersistentWindZone[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentWindZone[] array = value;
		foreach (PersistentWindZone obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentWindZone[]> Read(PrimitiveContract<PersistentWindZone[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWindZone[]> primitiveContract = new PrimitiveContract<PersistentWindZone[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentWindZone[] value = P_0.Value;
				List<PersistentWindZone> list = new List<PersistentWindZone>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWindZone item = (PersistentWindZone)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentWindZone[] array = new PersistentWindZone[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWindZone[]> primitiveContract2 = new PrimitiveContract<PersistentWindZone[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentWindZone[]> primitiveContract3 = new PrimitiveContract<PersistentWindZone[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentWindZone> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentWindZone>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentWindZone>), P_0.GetType());
		}
		foreach (PersistentWindZone item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentWindZone> Read(List<PersistentWindZone> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentWindZone> list = new List<PersistentWindZone>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentWindZone>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentWindZone> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWindZone item = (PersistentWindZone)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentWindZone> list3 = new List<PersistentWindZone>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentWindZone> list4 = new List<PersistentWindZone>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentWorldAnchor[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentWorldAnchor[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentWorldAnchor[]>), P_0.GetType());
		}
		PersistentWorldAnchor[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentWorldAnchor[] array = value;
		foreach (PersistentWorldAnchor obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentWorldAnchor[]> Read(PrimitiveContract<PersistentWorldAnchor[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWorldAnchor[]> primitiveContract = new PrimitiveContract<PersistentWorldAnchor[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentWorldAnchor[] value = P_0.Value;
				List<PersistentWorldAnchor> list = new List<PersistentWorldAnchor>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWorldAnchor item = (PersistentWorldAnchor)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentWorldAnchor[] array = new PersistentWorldAnchor[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentWorldAnchor[]> primitiveContract2 = new PrimitiveContract<PersistentWorldAnchor[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentWorldAnchor[]> primitiveContract3 = new PrimitiveContract<PersistentWorldAnchor[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentWorldAnchor> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentWorldAnchor>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentWorldAnchor>), P_0.GetType());
		}
		foreach (PersistentWorldAnchor item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentWorldAnchor> Read(List<PersistentWorldAnchor> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentWorldAnchor> list = new List<PersistentWorldAnchor>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentWorldAnchor>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentWorldAnchor> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentWorldAnchor item = (PersistentWorldAnchor)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentWorldAnchor> list3 = new List<PersistentWorldAnchor>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentWorldAnchor> list4 = new List<PersistentWorldAnchor>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(GradientAlphaKeySurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(GradientAlphaKeySurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(GradientAlphaKeySurrogate), P_0.GetType());
		}
		float alpha = P_0.alpha;
		if (alpha != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(alpha, P_1);
		}
		float time = P_0.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
	}

	private static GradientAlphaKeySurrogate Read(GradientAlphaKeySurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					GradientAlphaKeySurrogate gradientAlphaKeySurrogate2 = new GradientAlphaKeySurrogate();
					ProtoReader.NoteObject(gradientAlphaKeySurrogate2, P_1);
					P_0 = gradientAlphaKeySurrogate2;
				}
				float alpha = P_1.ReadSingle();
				P_0.alpha = alpha;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					GradientAlphaKeySurrogate gradientAlphaKeySurrogate3 = new GradientAlphaKeySurrogate();
					ProtoReader.NoteObject(gradientAlphaKeySurrogate3, P_1);
					P_0 = gradientAlphaKeySurrogate3;
				}
				float alpha = P_1.ReadSingle();
				P_0.time = alpha;
				break;
			}
			default:
				if (P_0 == null)
				{
					GradientAlphaKeySurrogate gradientAlphaKeySurrogate = new GradientAlphaKeySurrogate();
					ProtoReader.NoteObject(gradientAlphaKeySurrogate, P_1);
					P_0 = gradientAlphaKeySurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			GradientAlphaKeySurrogate gradientAlphaKeySurrogate4 = new GradientAlphaKeySurrogate();
			ProtoReader.NoteObject(gradientAlphaKeySurrogate4, P_1);
			P_0 = gradientAlphaKeySurrogate4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<GradientAlphaKeySurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<GradientAlphaKeySurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<GradientAlphaKeySurrogate[]>), P_0.GetType());
		}
		GradientAlphaKeySurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		GradientAlphaKeySurrogate[] array = value;
		foreach (GradientAlphaKeySurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<GradientAlphaKeySurrogate[]> Read(PrimitiveContract<GradientAlphaKeySurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<GradientAlphaKeySurrogate[]> primitiveContract = new PrimitiveContract<GradientAlphaKeySurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				GradientAlphaKeySurrogate[] value = P_0.Value;
				List<GradientAlphaKeySurrogate> list = new List<GradientAlphaKeySurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientAlphaKeySurrogate item = Read((GradientAlphaKeySurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				GradientAlphaKeySurrogate[] array = new GradientAlphaKeySurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<GradientAlphaKeySurrogate[]> primitiveContract2 = new PrimitiveContract<GradientAlphaKeySurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<GradientAlphaKeySurrogate[]> primitiveContract3 = new PrimitiveContract<GradientAlphaKeySurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<GradientAlphaKeySurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<GradientAlphaKeySurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<GradientAlphaKeySurrogate>), P_0.GetType());
		}
		foreach (GradientAlphaKeySurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<GradientAlphaKeySurrogate> Read(List<GradientAlphaKeySurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<GradientAlphaKeySurrogate> list = new List<GradientAlphaKeySurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<GradientAlphaKeySurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<GradientAlphaKeySurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientAlphaKeySurrogate item = Read((GradientAlphaKeySurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<GradientAlphaKeySurrogate> list3 = new List<GradientAlphaKeySurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<GradientAlphaKeySurrogate> list4 = new List<GradientAlphaKeySurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(GradientColorKeySurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(GradientColorKeySurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(GradientColorKeySurrogate), P_0.GetType());
		}
		Color color = P_0.color;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float time = P_0.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
	}

	private static GradientColorKeySurrogate Read(GradientColorKeySurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					GradientColorKeySurrogate gradientColorKeySurrogate2 = new GradientColorKeySurrogate();
					ProtoReader.NoteObject(gradientColorKeySurrogate2, P_1);
					P_0 = gradientColorKeySurrogate2;
				}
				Color color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				P_0.color = color3;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					GradientColorKeySurrogate gradientColorKeySurrogate3 = new GradientColorKeySurrogate();
					ProtoReader.NoteObject(gradientColorKeySurrogate3, P_1);
					P_0 = gradientColorKeySurrogate3;
				}
				float time = P_1.ReadSingle();
				P_0.time = time;
				break;
			}
			default:
				if (P_0 == null)
				{
					GradientColorKeySurrogate gradientColorKeySurrogate = new GradientColorKeySurrogate();
					ProtoReader.NoteObject(gradientColorKeySurrogate, P_1);
					P_0 = gradientColorKeySurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			GradientColorKeySurrogate gradientColorKeySurrogate4 = new GradientColorKeySurrogate();
			ProtoReader.NoteObject(gradientColorKeySurrogate4, P_1);
			P_0 = gradientColorKeySurrogate4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<GradientColorKeySurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<GradientColorKeySurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<GradientColorKeySurrogate[]>), P_0.GetType());
		}
		GradientColorKeySurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		GradientColorKeySurrogate[] array = value;
		foreach (GradientColorKeySurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<GradientColorKeySurrogate[]> Read(PrimitiveContract<GradientColorKeySurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<GradientColorKeySurrogate[]> primitiveContract = new PrimitiveContract<GradientColorKeySurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				GradientColorKeySurrogate[] value = P_0.Value;
				List<GradientColorKeySurrogate> list = new List<GradientColorKeySurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientColorKeySurrogate item = Read((GradientColorKeySurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				GradientColorKeySurrogate[] array = new GradientColorKeySurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<GradientColorKeySurrogate[]> primitiveContract2 = new PrimitiveContract<GradientColorKeySurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<GradientColorKeySurrogate[]> primitiveContract3 = new PrimitiveContract<GradientColorKeySurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<GradientColorKeySurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<GradientColorKeySurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<GradientColorKeySurrogate>), P_0.GetType());
		}
		foreach (GradientColorKeySurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<GradientColorKeySurrogate> Read(List<GradientColorKeySurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<GradientColorKeySurrogate> list = new List<GradientColorKeySurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<GradientColorKeySurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<GradientColorKeySurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientColorKeySurrogate item = Read((GradientColorKeySurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<GradientColorKeySurrogate> list3 = new List<GradientColorKeySurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<GradientColorKeySurrogate> list4 = new List<GradientColorKeySurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(LayerMaskSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(LayerMaskSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(LayerMaskSurrogate), P_0.GetType());
		}
		int value = P_0.value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(value, P_1);
		}
	}

	private static LayerMaskSurrogate Read(LayerMaskSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					LayerMaskSurrogate layerMaskSurrogate = new LayerMaskSurrogate();
					ProtoReader.NoteObject(layerMaskSurrogate, P_1);
					P_0 = layerMaskSurrogate;
				}
				int value = P_1.ReadInt32();
				P_0.value = value;
			}
			else
			{
				if (P_0 == null)
				{
					LayerMaskSurrogate layerMaskSurrogate2 = new LayerMaskSurrogate();
					ProtoReader.NoteObject(layerMaskSurrogate2, P_1);
					P_0 = layerMaskSurrogate2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			LayerMaskSurrogate layerMaskSurrogate3 = new LayerMaskSurrogate();
			ProtoReader.NoteObject(layerMaskSurrogate3, P_1);
			P_0 = layerMaskSurrogate3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<LayerMaskSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<LayerMaskSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<LayerMaskSurrogate[]>), P_0.GetType());
		}
		LayerMaskSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		LayerMaskSurrogate[] array = value;
		foreach (LayerMaskSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<LayerMaskSurrogate[]> Read(PrimitiveContract<LayerMaskSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<LayerMaskSurrogate[]> primitiveContract = new PrimitiveContract<LayerMaskSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				LayerMaskSurrogate[] value = P_0.Value;
				List<LayerMaskSurrogate> list = new List<LayerMaskSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					LayerMaskSurrogate item = Read((LayerMaskSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				LayerMaskSurrogate[] array = new LayerMaskSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<LayerMaskSurrogate[]> primitiveContract2 = new PrimitiveContract<LayerMaskSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<LayerMaskSurrogate[]> primitiveContract3 = new PrimitiveContract<LayerMaskSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<LayerMaskSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<LayerMaskSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<LayerMaskSurrogate>), P_0.GetType());
		}
		foreach (LayerMaskSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<LayerMaskSurrogate> Read(List<LayerMaskSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<LayerMaskSurrogate> list = new List<LayerMaskSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<LayerMaskSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<LayerMaskSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					LayerMaskSurrogate item = Read((LayerMaskSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<LayerMaskSurrogate> list3 = new List<LayerMaskSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<LayerMaskSurrogate> list4 = new List<LayerMaskSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(RectOffsetSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(RectOffsetSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(RectOffsetSurrogate), P_0.GetType());
		}
		int bottom = P_0.bottom;
		if (bottom != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(bottom, P_1);
		}
		int left = P_0.left;
		if (left != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(left, P_1);
		}
		int right = P_0.right;
		if (right != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(right, P_1);
		}
		int top = P_0.top;
		if (top != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(top, P_1);
		}
	}

	private static RectOffsetSurrogate Read(RectOffsetSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate3 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate3, P_1);
					P_0 = rectOffsetSurrogate3;
				}
				int right = P_1.ReadInt32();
				P_0.bottom = right;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate5 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate5, P_1);
					P_0 = rectOffsetSurrogate5;
				}
				int right = P_1.ReadInt32();
				P_0.left = right;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate2 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate2, P_1);
					P_0 = rectOffsetSurrogate2;
				}
				int right = P_1.ReadInt32();
				P_0.right = right;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate4 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate4, P_1);
					P_0 = rectOffsetSurrogate4;
				}
				int right = P_1.ReadInt32();
				P_0.top = right;
				break;
			}
			default:
				if (P_0 == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate, P_1);
					P_0 = rectOffsetSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			RectOffsetSurrogate rectOffsetSurrogate6 = new RectOffsetSurrogate();
			ProtoReader.NoteObject(rectOffsetSurrogate6, P_1);
			P_0 = rectOffsetSurrogate6;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<RectOffsetSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<RectOffsetSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<RectOffsetSurrogate[]>), P_0.GetType());
		}
		RectOffsetSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		RectOffsetSurrogate[] array = value;
		foreach (RectOffsetSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<RectOffsetSurrogate[]> Read(PrimitiveContract<RectOffsetSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<RectOffsetSurrogate[]> primitiveContract = new PrimitiveContract<RectOffsetSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				RectOffsetSurrogate[] value = P_0.Value;
				List<RectOffsetSurrogate> list = new List<RectOffsetSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RectOffsetSurrogate item = Read((RectOffsetSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				RectOffsetSurrogate[] array = new RectOffsetSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<RectOffsetSurrogate[]> primitiveContract2 = new PrimitiveContract<RectOffsetSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<RectOffsetSurrogate[]> primitiveContract3 = new PrimitiveContract<RectOffsetSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<RectOffsetSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<RectOffsetSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<RectOffsetSurrogate>), P_0.GetType());
		}
		foreach (RectOffsetSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<RectOffsetSurrogate> Read(List<RectOffsetSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<RectOffsetSurrogate> list = new List<RectOffsetSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<RectOffsetSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<RectOffsetSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RectOffsetSurrogate item = Read((RectOffsetSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<RectOffsetSurrogate> list3 = new List<RectOffsetSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<RectOffsetSurrogate> list4 = new List<RectOffsetSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(AnimationTriggersSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(AnimationTriggersSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(AnimationTriggersSurrogate), P_0.GetType());
		}
		string disabledTrigger = P_0.disabledTrigger;
		if (disabledTrigger != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(disabledTrigger, P_1);
		}
		string highlightedTrigger = P_0.highlightedTrigger;
		if (highlightedTrigger != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			ProtoWriter.WriteString(highlightedTrigger, P_1);
		}
		string normalTrigger = P_0.normalTrigger;
		if (normalTrigger != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			ProtoWriter.WriteString(normalTrigger, P_1);
		}
		string pressedTrigger = P_0.pressedTrigger;
		if (pressedTrigger != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			ProtoWriter.WriteString(pressedTrigger, P_1);
		}
	}

	private static AnimationTriggersSurrogate Read(AnimationTriggersSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate2 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate2, P_1);
					P_0 = animationTriggersSurrogate2;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.disabledTrigger = text;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate5 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate5, P_1);
					P_0 = animationTriggersSurrogate5;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.highlightedTrigger = text;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate3 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate3, P_1);
					P_0 = animationTriggersSurrogate3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.normalTrigger = text;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate4 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate4, P_1);
					P_0 = animationTriggersSurrogate4;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.pressedTrigger = text;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate, P_1);
					P_0 = animationTriggersSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			AnimationTriggersSurrogate animationTriggersSurrogate6 = new AnimationTriggersSurrogate();
			ProtoReader.NoteObject(animationTriggersSurrogate6, P_1);
			P_0 = animationTriggersSurrogate6;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<AnimationTriggersSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<AnimationTriggersSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<AnimationTriggersSurrogate[]>), P_0.GetType());
		}
		AnimationTriggersSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		AnimationTriggersSurrogate[] array = value;
		foreach (AnimationTriggersSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<AnimationTriggersSurrogate[]> Read(PrimitiveContract<AnimationTriggersSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<AnimationTriggersSurrogate[]> primitiveContract = new PrimitiveContract<AnimationTriggersSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				AnimationTriggersSurrogate[] value = P_0.Value;
				List<AnimationTriggersSurrogate> list = new List<AnimationTriggersSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					AnimationTriggersSurrogate item = Read((AnimationTriggersSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				AnimationTriggersSurrogate[] array = new AnimationTriggersSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<AnimationTriggersSurrogate[]> primitiveContract2 = new PrimitiveContract<AnimationTriggersSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<AnimationTriggersSurrogate[]> primitiveContract3 = new PrimitiveContract<AnimationTriggersSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<AnimationTriggersSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<AnimationTriggersSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<AnimationTriggersSurrogate>), P_0.GetType());
		}
		foreach (AnimationTriggersSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<AnimationTriggersSurrogate> Read(List<AnimationTriggersSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<AnimationTriggersSurrogate> list = new List<AnimationTriggersSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<AnimationTriggersSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<AnimationTriggersSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					AnimationTriggersSurrogate item = Read((AnimationTriggersSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<AnimationTriggersSurrogate> list3 = new List<AnimationTriggersSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<AnimationTriggersSurrogate> list4 = new List<AnimationTriggersSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ColorBlockSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(ColorBlockSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ColorBlockSurrogate), P_0.GetType());
		}
		float colorMultiplier = P_0.colorMultiplier;
		if (colorMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(colorMultiplier, P_1);
		}
		Color disabledColor = P_0.disabledColor;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(disabledColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float fadeDuration = P_0.fadeDuration;
		if (fadeDuration != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fadeDuration, P_1);
		}
		Color highlightedColor = P_0.highlightedColor;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(highlightedColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color normalColor = P_0.normalColor;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(normalColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color pressedColor = P_0.pressedColor;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(pressedColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static ColorBlockSurrogate Read(ColorBlockSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					ColorBlockSurrogate colorBlockSurrogate2 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate2, P_1);
					P_0 = colorBlockSurrogate2;
				}
				float colorMultiplier = P_1.ReadSingle();
				P_0.colorMultiplier = colorMultiplier;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					ColorBlockSurrogate colorBlockSurrogate5 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate5, P_1);
					P_0 = colorBlockSurrogate5;
				}
				Color disabledColor = P_0.disabledColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(disabledColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color pressedColor2 = color2;
				P_0.disabledColor = pressedColor2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					ColorBlockSurrogate colorBlockSurrogate3 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate3, P_1);
					P_0 = colorBlockSurrogate3;
				}
				float colorMultiplier = P_1.ReadSingle();
				P_0.fadeDuration = colorMultiplier;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					ColorBlockSurrogate colorBlockSurrogate6 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate6, P_1);
					P_0 = colorBlockSurrogate6;
				}
				Color highlightedColor = P_0.highlightedColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color3 = Read(highlightedColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color pressedColor2 = color3;
				P_0.highlightedColor = pressedColor2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					ColorBlockSurrogate colorBlockSurrogate7 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate7, P_1);
					P_0 = colorBlockSurrogate7;
				}
				Color normalColor = P_0.normalColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color4 = Read(normalColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color pressedColor2 = color4;
				P_0.normalColor = pressedColor2;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					ColorBlockSurrogate colorBlockSurrogate4 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate4, P_1);
					P_0 = colorBlockSurrogate4;
				}
				Color pressedColor = P_0.pressedColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(pressedColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color pressedColor2 = color;
				P_0.pressedColor = pressedColor2;
				break;
			}
			default:
				if (P_0 == null)
				{
					ColorBlockSurrogate colorBlockSurrogate = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate, P_1);
					P_0 = colorBlockSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			ColorBlockSurrogate colorBlockSurrogate8 = new ColorBlockSurrogate();
			ProtoReader.NoteObject(colorBlockSurrogate8, P_1);
			P_0 = colorBlockSurrogate8;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ColorBlockSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ColorBlockSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ColorBlockSurrogate[]>), P_0.GetType());
		}
		ColorBlockSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		ColorBlockSurrogate[] array = value;
		foreach (ColorBlockSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ColorBlockSurrogate[]> Read(PrimitiveContract<ColorBlockSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ColorBlockSurrogate[]> primitiveContract = new PrimitiveContract<ColorBlockSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ColorBlockSurrogate[] value = P_0.Value;
				List<ColorBlockSurrogate> list = new List<ColorBlockSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ColorBlockSurrogate item = Read((ColorBlockSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ColorBlockSurrogate[] array = new ColorBlockSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ColorBlockSurrogate[]> primitiveContract2 = new PrimitiveContract<ColorBlockSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ColorBlockSurrogate[]> primitiveContract3 = new PrimitiveContract<ColorBlockSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ColorBlockSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ColorBlockSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ColorBlockSurrogate>), P_0.GetType());
		}
		foreach (ColorBlockSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ColorBlockSurrogate> Read(List<ColorBlockSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ColorBlockSurrogate> list = new List<ColorBlockSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ColorBlockSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ColorBlockSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ColorBlockSurrogate item = Read((ColorBlockSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ColorBlockSurrogate> list3 = new List<ColorBlockSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ColorBlockSurrogate> list4 = new List<ColorBlockSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(NavMeshPathSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(NavMeshPathSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(NavMeshPathSurrogate), P_0.GetType());
		}
	}

	private static NavMeshPathSurrogate Read(NavMeshPathSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				NavMeshPathSurrogate navMeshPathSurrogate = new NavMeshPathSurrogate();
				ProtoReader.NoteObject(navMeshPathSurrogate, P_1);
				P_0 = navMeshPathSurrogate;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			NavMeshPathSurrogate navMeshPathSurrogate2 = new NavMeshPathSurrogate();
			ProtoReader.NoteObject(navMeshPathSurrogate2, P_1);
			P_0 = navMeshPathSurrogate2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<NavMeshPathSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<NavMeshPathSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<NavMeshPathSurrogate[]>), P_0.GetType());
		}
		NavMeshPathSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		NavMeshPathSurrogate[] array = value;
		foreach (NavMeshPathSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<NavMeshPathSurrogate[]> Read(PrimitiveContract<NavMeshPathSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<NavMeshPathSurrogate[]> primitiveContract = new PrimitiveContract<NavMeshPathSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				NavMeshPathSurrogate[] value = P_0.Value;
				List<NavMeshPathSurrogate> list = new List<NavMeshPathSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NavMeshPathSurrogate item = Read((NavMeshPathSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				NavMeshPathSurrogate[] array = new NavMeshPathSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<NavMeshPathSurrogate[]> primitiveContract2 = new PrimitiveContract<NavMeshPathSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<NavMeshPathSurrogate[]> primitiveContract3 = new PrimitiveContract<NavMeshPathSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<NavMeshPathSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<NavMeshPathSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<NavMeshPathSurrogate>), P_0.GetType());
		}
		foreach (NavMeshPathSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<NavMeshPathSurrogate> Read(List<NavMeshPathSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<NavMeshPathSurrogate> list = new List<NavMeshPathSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<NavMeshPathSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<NavMeshPathSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NavMeshPathSurrogate item = Read((NavMeshPathSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<NavMeshPathSurrogate> list3 = new List<NavMeshPathSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<NavMeshPathSurrogate> list4 = new List<NavMeshPathSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ClothSkinningCoefficientSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(ClothSkinningCoefficientSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ClothSkinningCoefficientSurrogate), P_0.GetType());
		}
		float collisionSphereDistance = P_0.collisionSphereDistance;
		if (collisionSphereDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(collisionSphereDistance, P_1);
		}
		float maxDistance = P_0.maxDistance;
		if (maxDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxDistance, P_1);
		}
	}

	private static ClothSkinningCoefficientSurrogate Read(ClothSkinningCoefficientSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate2 = new ClothSkinningCoefficientSurrogate();
					ProtoReader.NoteObject(clothSkinningCoefficientSurrogate2, P_1);
					P_0 = clothSkinningCoefficientSurrogate2;
				}
				float collisionSphereDistance = P_1.ReadSingle();
				P_0.collisionSphereDistance = collisionSphereDistance;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate3 = new ClothSkinningCoefficientSurrogate();
					ProtoReader.NoteObject(clothSkinningCoefficientSurrogate3, P_1);
					P_0 = clothSkinningCoefficientSurrogate3;
				}
				float collisionSphereDistance = P_1.ReadSingle();
				P_0.maxDistance = collisionSphereDistance;
				break;
			}
			default:
				if (P_0 == null)
				{
					ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate = new ClothSkinningCoefficientSurrogate();
					ProtoReader.NoteObject(clothSkinningCoefficientSurrogate, P_1);
					P_0 = clothSkinningCoefficientSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate4 = new ClothSkinningCoefficientSurrogate();
			ProtoReader.NoteObject(clothSkinningCoefficientSurrogate4, P_1);
			P_0 = clothSkinningCoefficientSurrogate4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ClothSkinningCoefficientSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ClothSkinningCoefficientSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ClothSkinningCoefficientSurrogate[]>), P_0.GetType());
		}
		ClothSkinningCoefficientSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		ClothSkinningCoefficientSurrogate[] array = value;
		foreach (ClothSkinningCoefficientSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ClothSkinningCoefficientSurrogate[]> Read(PrimitiveContract<ClothSkinningCoefficientSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ClothSkinningCoefficientSurrogate[]> primitiveContract = new PrimitiveContract<ClothSkinningCoefficientSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ClothSkinningCoefficientSurrogate[] value = P_0.Value;
				List<ClothSkinningCoefficientSurrogate> list = new List<ClothSkinningCoefficientSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ClothSkinningCoefficientSurrogate item = Read((ClothSkinningCoefficientSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ClothSkinningCoefficientSurrogate[] array = new ClothSkinningCoefficientSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ClothSkinningCoefficientSurrogate[]> primitiveContract2 = new PrimitiveContract<ClothSkinningCoefficientSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ClothSkinningCoefficientSurrogate[]> primitiveContract3 = new PrimitiveContract<ClothSkinningCoefficientSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ClothSkinningCoefficientSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ClothSkinningCoefficientSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ClothSkinningCoefficientSurrogate>), P_0.GetType());
		}
		foreach (ClothSkinningCoefficientSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ClothSkinningCoefficientSurrogate> Read(List<ClothSkinningCoefficientSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ClothSkinningCoefficientSurrogate> list = new List<ClothSkinningCoefficientSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ClothSkinningCoefficientSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ClothSkinningCoefficientSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ClothSkinningCoefficientSurrogate item = Read((ClothSkinningCoefficientSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ClothSkinningCoefficientSurrogate> list3 = new List<ClothSkinningCoefficientSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ClothSkinningCoefficientSurrogate> list4 = new List<ClothSkinningCoefficientSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(BoneWeightSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(BoneWeightSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(BoneWeightSurrogate), P_0.GetType());
		}
		int boneIndex = P_0.boneIndex0;
		if (boneIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(boneIndex, P_1);
		}
		int boneIndex2 = P_0.boneIndex1;
		if (boneIndex2 != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(boneIndex2, P_1);
		}
		int boneIndex3 = P_0.boneIndex2;
		if (boneIndex3 != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(boneIndex3, P_1);
		}
		int boneIndex4 = P_0.boneIndex3;
		if (boneIndex4 != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(boneIndex4, P_1);
		}
		float weight = P_0.weight0;
		if (weight != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(weight, P_1);
		}
		float weight2 = P_0.weight1;
		if (weight2 != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(weight2, P_1);
		}
		float weight3 = P_0.weight2;
		if (weight3 != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(weight3, P_1);
		}
		float weight4 = P_0.weight3;
		if (weight4 != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(weight4, P_1);
		}
	}

	private static BoneWeightSurrogate Read(BoneWeightSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate8 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate8, P_1);
					P_0 = boneWeightSurrogate8;
				}
				int boneIndex = P_1.ReadInt32();
				P_0.boneIndex0 = boneIndex;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate2 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate2, P_1);
					P_0 = boneWeightSurrogate2;
				}
				int boneIndex = P_1.ReadInt32();
				P_0.boneIndex1 = boneIndex;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate9 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate9, P_1);
					P_0 = boneWeightSurrogate9;
				}
				int boneIndex = P_1.ReadInt32();
				P_0.boneIndex2 = boneIndex;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate6 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate6, P_1);
					P_0 = boneWeightSurrogate6;
				}
				int boneIndex = P_1.ReadInt32();
				P_0.boneIndex3 = boneIndex;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate5 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate5, P_1);
					P_0 = boneWeightSurrogate5;
				}
				float weight = P_1.ReadSingle();
				P_0.weight0 = weight;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate3 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate3, P_1);
					P_0 = boneWeightSurrogate3;
				}
				float weight = P_1.ReadSingle();
				P_0.weight1 = weight;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate7 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate7, P_1);
					P_0 = boneWeightSurrogate7;
				}
				float weight = P_1.ReadSingle();
				P_0.weight2 = weight;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate4 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate4, P_1);
					P_0 = boneWeightSurrogate4;
				}
				float weight = P_1.ReadSingle();
				P_0.weight3 = weight;
				break;
			}
			default:
				if (P_0 == null)
				{
					BoneWeightSurrogate boneWeightSurrogate = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate, P_1);
					P_0 = boneWeightSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			BoneWeightSurrogate boneWeightSurrogate10 = new BoneWeightSurrogate();
			ProtoReader.NoteObject(boneWeightSurrogate10, P_1);
			P_0 = boneWeightSurrogate10;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<BoneWeightSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<BoneWeightSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<BoneWeightSurrogate[]>), P_0.GetType());
		}
		BoneWeightSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		BoneWeightSurrogate[] array = value;
		foreach (BoneWeightSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<BoneWeightSurrogate[]> Read(PrimitiveContract<BoneWeightSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<BoneWeightSurrogate[]> primitiveContract = new PrimitiveContract<BoneWeightSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				BoneWeightSurrogate[] value = P_0.Value;
				List<BoneWeightSurrogate> list = new List<BoneWeightSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					BoneWeightSurrogate item = Read((BoneWeightSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				BoneWeightSurrogate[] array = new BoneWeightSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<BoneWeightSurrogate[]> primitiveContract2 = new PrimitiveContract<BoneWeightSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<BoneWeightSurrogate[]> primitiveContract3 = new PrimitiveContract<BoneWeightSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<BoneWeightSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<BoneWeightSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<BoneWeightSurrogate>), P_0.GetType());
		}
		foreach (BoneWeightSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<BoneWeightSurrogate> Read(List<BoneWeightSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<BoneWeightSurrogate> list = new List<BoneWeightSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<BoneWeightSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<BoneWeightSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					BoneWeightSurrogate item = Read((BoneWeightSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<BoneWeightSurrogate> list3 = new List<BoneWeightSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<BoneWeightSurrogate> list4 = new List<BoneWeightSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(TreeInstanceSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(TreeInstanceSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(TreeInstanceSurrogate), P_0.GetType());
		}
		Color32 color = P_0.color;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float heightScale = P_0.heightScale;
		if (heightScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(heightScale, P_1);
		}
		Color32 lightmapColor = P_0.lightmapColor;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(lightmapColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 position = P_0.position;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(position, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		int prototypeIndex = P_0.prototypeIndex;
		if (prototypeIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(prototypeIndex, P_1);
		}
		float rotation = P_0.rotation;
		if (rotation != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rotation, P_1);
		}
		float widthScale = P_0.widthScale;
		if (widthScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(widthScale, P_1);
		}
	}

	private static TreeInstanceSurrogate Read(TreeInstanceSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate5 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate5, P_1);
					P_0 = treeInstanceSurrogate5;
				}
				Color32 color = P_0.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color32 color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color32 color3 = color2;
				P_0.color = color3;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate8 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate8, P_1);
					P_0 = treeInstanceSurrogate8;
				}
				float widthScale = P_1.ReadSingle();
				P_0.heightScale = widthScale;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate6 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate6, P_1);
					P_0 = treeInstanceSurrogate6;
				}
				Color32 lightmapColor = P_0.lightmapColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color32 color4 = Read(lightmapColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color32 color3 = color4;
				P_0.lightmapColor = color3;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate3 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate3, P_1);
					P_0 = treeInstanceSurrogate3;
				}
				Vector3 position = P_0.position;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(position, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 position2 = vector;
				P_0.position = position2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate2 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate2, P_1);
					P_0 = treeInstanceSurrogate2;
				}
				int prototypeIndex = P_1.ReadInt32();
				P_0.prototypeIndex = prototypeIndex;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate7 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate7, P_1);
					P_0 = treeInstanceSurrogate7;
				}
				float widthScale = P_1.ReadSingle();
				P_0.rotation = widthScale;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate4 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate4, P_1);
					P_0 = treeInstanceSurrogate4;
				}
				float widthScale = P_1.ReadSingle();
				P_0.widthScale = widthScale;
				break;
			}
			default:
				if (P_0 == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate, P_1);
					P_0 = treeInstanceSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			TreeInstanceSurrogate treeInstanceSurrogate9 = new TreeInstanceSurrogate();
			ProtoReader.NoteObject(treeInstanceSurrogate9, P_1);
			P_0 = treeInstanceSurrogate9;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<TreeInstanceSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<TreeInstanceSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<TreeInstanceSurrogate[]>), P_0.GetType());
		}
		TreeInstanceSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		TreeInstanceSurrogate[] array = value;
		foreach (TreeInstanceSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<TreeInstanceSurrogate[]> Read(PrimitiveContract<TreeInstanceSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<TreeInstanceSurrogate[]> primitiveContract = new PrimitiveContract<TreeInstanceSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				TreeInstanceSurrogate[] value = P_0.Value;
				List<TreeInstanceSurrogate> list = new List<TreeInstanceSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					TreeInstanceSurrogate item = Read((TreeInstanceSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				TreeInstanceSurrogate[] array = new TreeInstanceSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<TreeInstanceSurrogate[]> primitiveContract2 = new PrimitiveContract<TreeInstanceSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<TreeInstanceSurrogate[]> primitiveContract3 = new PrimitiveContract<TreeInstanceSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<TreeInstanceSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<TreeInstanceSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<TreeInstanceSurrogate>), P_0.GetType());
		}
		foreach (TreeInstanceSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<TreeInstanceSurrogate> Read(List<TreeInstanceSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<TreeInstanceSurrogate> list = new List<TreeInstanceSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<TreeInstanceSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<TreeInstanceSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					TreeInstanceSurrogate item = Read((TreeInstanceSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<TreeInstanceSurrogate> list3 = new List<TreeInstanceSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<TreeInstanceSurrogate> list4 = new List<TreeInstanceSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(CharacterInfoSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(CharacterInfoSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(CharacterInfoSurrogate), P_0.GetType());
		}
		int advance = P_0.advance;
		if (advance != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(advance, P_1);
		}
		int bearing = P_0.bearing;
		if (bearing != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(bearing, P_1);
		}
		int glyphHeight = P_0.glyphHeight;
		if (glyphHeight != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(glyphHeight, P_1);
		}
		int glyphWidth = P_0.glyphWidth;
		if (glyphWidth != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(glyphWidth, P_1);
		}
		int index = P_0.index;
		if (index != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(index, P_1);
		}
		int maxX = P_0.maxX;
		if (maxX != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(maxX, P_1);
		}
		int maxY = P_0.maxY;
		if (maxY != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(maxY, P_1);
		}
		int minX = P_0.minX;
		if (minX != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(minX, P_1);
		}
		int minY = P_0.minY;
		if (minY != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(minY, P_1);
		}
		int size = P_0.size;
		if (size != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(size, P_1);
		}
		uint style = P_0.style;
		if (style != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(style, P_1);
		}
		Vector2 uvBottomLeft = P_0.uvBottomLeft;
		ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvBottomLeft, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 uvBottomRight = P_0.uvBottomRight;
		ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvBottomRight, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 uvTopLeft = P_0.uvTopLeft;
		ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvTopLeft, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 uvTopRight = P_0.uvTopRight;
		ProtoWriter.WriteFieldHeader(15, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvTopRight, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static CharacterInfoSurrogate Read(CharacterInfoSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate9 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate9, P_1);
					P_0 = characterInfoSurrogate9;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.advance = glyphWidth;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate12 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate12, P_1);
					P_0 = characterInfoSurrogate12;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.bearing = glyphWidth;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate5 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate5, P_1);
					P_0 = characterInfoSurrogate5;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.glyphHeight = glyphWidth;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate2 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate2, P_1);
					P_0 = characterInfoSurrogate2;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.glyphWidth = glyphWidth;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate14 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate14, P_1);
					P_0 = characterInfoSurrogate14;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.index = glyphWidth;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate11 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate11, P_1);
					P_0 = characterInfoSurrogate11;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.maxX = glyphWidth;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate3 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate3, P_1);
					P_0 = characterInfoSurrogate3;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.maxY = glyphWidth;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate15 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate15, P_1);
					P_0 = characterInfoSurrogate15;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.minX = glyphWidth;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate8 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate8, P_1);
					P_0 = characterInfoSurrogate8;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.minY = glyphWidth;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate6 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate6, P_1);
					P_0 = characterInfoSurrogate6;
				}
				int glyphWidth = P_1.ReadInt32();
				P_0.size = glyphWidth;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate16 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate16, P_1);
					P_0 = characterInfoSurrogate16;
				}
				uint style = P_1.ReadUInt32();
				P_0.style = style;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate13 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate13, P_1);
					P_0 = characterInfoSurrogate13;
				}
				Vector2 uvBottomLeft = P_0.uvBottomLeft;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector4 = Read(uvBottomLeft, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 uvTopRight2 = vector4;
				P_0.uvBottomLeft = uvTopRight2;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate10 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate10, P_1);
					P_0 = characterInfoSurrogate10;
				}
				Vector2 uvBottomRight = P_0.uvBottomRight;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector3 = Read(uvBottomRight, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 uvTopRight2 = vector3;
				P_0.uvBottomRight = uvTopRight2;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate7 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate7, P_1);
					P_0 = characterInfoSurrogate7;
				}
				Vector2 uvTopLeft = P_0.uvTopLeft;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(uvTopLeft, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 uvTopRight2 = vector2;
				P_0.uvTopLeft = uvTopRight2;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate4 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate4, P_1);
					P_0 = characterInfoSurrogate4;
				}
				Vector2 uvTopRight = P_0.uvTopRight;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(uvTopRight, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 uvTopRight2 = vector;
				P_0.uvTopRight = uvTopRight2;
				break;
			}
			default:
				if (P_0 == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate, P_1);
					P_0 = characterInfoSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			CharacterInfoSurrogate characterInfoSurrogate17 = new CharacterInfoSurrogate();
			ProtoReader.NoteObject(characterInfoSurrogate17, P_1);
			P_0 = characterInfoSurrogate17;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<CharacterInfoSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<CharacterInfoSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<CharacterInfoSurrogate[]>), P_0.GetType());
		}
		CharacterInfoSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		CharacterInfoSurrogate[] array = value;
		foreach (CharacterInfoSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<CharacterInfoSurrogate[]> Read(PrimitiveContract<CharacterInfoSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<CharacterInfoSurrogate[]> primitiveContract = new PrimitiveContract<CharacterInfoSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				CharacterInfoSurrogate[] value = P_0.Value;
				List<CharacterInfoSurrogate> list = new List<CharacterInfoSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					CharacterInfoSurrogate item = Read((CharacterInfoSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				CharacterInfoSurrogate[] array = new CharacterInfoSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<CharacterInfoSurrogate[]> primitiveContract2 = new PrimitiveContract<CharacterInfoSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<CharacterInfoSurrogate[]> primitiveContract3 = new PrimitiveContract<CharacterInfoSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<CharacterInfoSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<CharacterInfoSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<CharacterInfoSurrogate>), P_0.GetType());
		}
		foreach (CharacterInfoSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<CharacterInfoSurrogate> Read(List<CharacterInfoSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<CharacterInfoSurrogate> list = new List<CharacterInfoSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<CharacterInfoSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<CharacterInfoSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					CharacterInfoSurrogate item = Read((CharacterInfoSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<CharacterInfoSurrogate> list3 = new List<CharacterInfoSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<CharacterInfoSurrogate> list4 = new List<CharacterInfoSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Vector3Surrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(Vector3Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Vector3Surrogate), P_0.GetType());
		}
		float x = P_0.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = P_0.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
		float z = P_0.z;
		if (z != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(z, P_1);
		}
	}

	private static Vector3Surrogate Read(Vector3Surrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					Vector3Surrogate vector3Surrogate3 = new Vector3Surrogate();
					ProtoReader.NoteObject(vector3Surrogate3, P_1);
					P_0 = vector3Surrogate3;
				}
				float y = P_1.ReadSingle();
				P_0.x = y;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					Vector3Surrogate vector3Surrogate2 = new Vector3Surrogate();
					ProtoReader.NoteObject(vector3Surrogate2, P_1);
					P_0 = vector3Surrogate2;
				}
				float y = P_1.ReadSingle();
				P_0.y = y;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					Vector3Surrogate vector3Surrogate4 = new Vector3Surrogate();
					ProtoReader.NoteObject(vector3Surrogate4, P_1);
					P_0 = vector3Surrogate4;
				}
				float y = P_1.ReadSingle();
				P_0.z = y;
				break;
			}
			default:
				if (P_0 == null)
				{
					Vector3Surrogate vector3Surrogate = new Vector3Surrogate();
					ProtoReader.NoteObject(vector3Surrogate, P_1);
					P_0 = vector3Surrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			Vector3Surrogate vector3Surrogate5 = new Vector3Surrogate();
			ProtoReader.NoteObject(vector3Surrogate5, P_1);
			P_0 = vector3Surrogate5;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Vector3Surrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Vector3Surrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Vector3Surrogate[]>), P_0.GetType());
		}
		Vector3Surrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		Vector3Surrogate[] array = value;
		foreach (Vector3Surrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Vector3Surrogate[]> Read(PrimitiveContract<Vector3Surrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector3Surrogate[]> primitiveContract = new PrimitiveContract<Vector3Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Vector3Surrogate[] value = P_0.Value;
				List<Vector3Surrogate> list = new List<Vector3Surrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector3Surrogate item = Read((Vector3Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector3Surrogate[] array = new Vector3Surrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector3Surrogate[]> primitiveContract2 = new PrimitiveContract<Vector3Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Vector3Surrogate[]> primitiveContract3 = new PrimitiveContract<Vector3Surrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Vector3Surrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Vector3Surrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Vector3Surrogate>), P_0.GetType());
		}
		foreach (Vector3Surrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Vector3Surrogate> Read(List<Vector3Surrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Vector3Surrogate> list = new List<Vector3Surrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Vector3Surrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector3Surrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector3Surrogate item = Read((Vector3Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Vector3Surrogate> list3 = new List<Vector3Surrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Vector3Surrogate> list4 = new List<Vector3Surrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ColorSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(ColorSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ColorSurrogate), P_0.GetType());
		}
		float a = P_0.a;
		if (a != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(a, P_1);
		}
		float b = P_0.b;
		if (b != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(b, P_1);
		}
		float g = P_0.g;
		if (g != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(g, P_1);
		}
		float r = P_0.r;
		if (r != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(r, P_1);
		}
	}

	private static ColorSurrogate Read(ColorSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					ColorSurrogate colorSurrogate3 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate3, P_1);
					P_0 = colorSurrogate3;
				}
				float g = P_1.ReadSingle();
				P_0.a = g;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					ColorSurrogate colorSurrogate5 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate5, P_1);
					P_0 = colorSurrogate5;
				}
				float g = P_1.ReadSingle();
				P_0.b = g;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					ColorSurrogate colorSurrogate2 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate2, P_1);
					P_0 = colorSurrogate2;
				}
				float g = P_1.ReadSingle();
				P_0.g = g;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					ColorSurrogate colorSurrogate4 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate4, P_1);
					P_0 = colorSurrogate4;
				}
				float g = P_1.ReadSingle();
				P_0.r = g;
				break;
			}
			default:
				if (P_0 == null)
				{
					ColorSurrogate colorSurrogate = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate, P_1);
					P_0 = colorSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			ColorSurrogate colorSurrogate6 = new ColorSurrogate();
			ProtoReader.NoteObject(colorSurrogate6, P_1);
			P_0 = colorSurrogate6;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ColorSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ColorSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ColorSurrogate[]>), P_0.GetType());
		}
		ColorSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		ColorSurrogate[] array = value;
		foreach (ColorSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ColorSurrogate[]> Read(PrimitiveContract<ColorSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ColorSurrogate[]> primitiveContract = new PrimitiveContract<ColorSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ColorSurrogate[] value = P_0.Value;
				List<ColorSurrogate> list = new List<ColorSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ColorSurrogate item = Read((ColorSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ColorSurrogate[] array = new ColorSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ColorSurrogate[]> primitiveContract2 = new PrimitiveContract<ColorSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ColorSurrogate[]> primitiveContract3 = new PrimitiveContract<ColorSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ColorSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ColorSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ColorSurrogate>), P_0.GetType());
		}
		foreach (ColorSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ColorSurrogate> Read(List<ColorSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ColorSurrogate> list = new List<ColorSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ColorSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ColorSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ColorSurrogate item = Read((ColorSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ColorSurrogate> list3 = new List<ColorSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ColorSurrogate> list4 = new List<ColorSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(RectSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(RectSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(RectSurrogate), P_0.GetType());
		}
		float height = P_0.height;
		if (height != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(height, P_1);
		}
		float width = P_0.width;
		if (width != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(width, P_1);
		}
		float x = P_0.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = P_0.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
	}

	private static RectSurrogate Read(RectSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					RectSurrogate rectSurrogate3 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate3, P_1);
					P_0 = rectSurrogate3;
				}
				float x = P_1.ReadSingle();
				P_0.height = x;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					RectSurrogate rectSurrogate5 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate5, P_1);
					P_0 = rectSurrogate5;
				}
				float x = P_1.ReadSingle();
				P_0.width = x;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					RectSurrogate rectSurrogate2 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate2, P_1);
					P_0 = rectSurrogate2;
				}
				float x = P_1.ReadSingle();
				P_0.x = x;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					RectSurrogate rectSurrogate4 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate4, P_1);
					P_0 = rectSurrogate4;
				}
				float x = P_1.ReadSingle();
				P_0.y = x;
				break;
			}
			default:
				if (P_0 == null)
				{
					RectSurrogate rectSurrogate = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate, P_1);
					P_0 = rectSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			RectSurrogate rectSurrogate6 = new RectSurrogate();
			ProtoReader.NoteObject(rectSurrogate6, P_1);
			P_0 = rectSurrogate6;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<RectSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<RectSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<RectSurrogate[]>), P_0.GetType());
		}
		RectSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		RectSurrogate[] array = value;
		foreach (RectSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<RectSurrogate[]> Read(PrimitiveContract<RectSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<RectSurrogate[]> primitiveContract = new PrimitiveContract<RectSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				RectSurrogate[] value = P_0.Value;
				List<RectSurrogate> list = new List<RectSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RectSurrogate item = Read((RectSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				RectSurrogate[] array = new RectSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<RectSurrogate[]> primitiveContract2 = new PrimitiveContract<RectSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<RectSurrogate[]> primitiveContract3 = new PrimitiveContract<RectSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<RectSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<RectSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<RectSurrogate>), P_0.GetType());
		}
		foreach (RectSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<RectSurrogate> Read(List<RectSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<RectSurrogate> list = new List<RectSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<RectSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<RectSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RectSurrogate item = Read((RectSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<RectSurrogate> list3 = new List<RectSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<RectSurrogate> list4 = new List<RectSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Matrix4x4Surrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(Matrix4x4Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Matrix4x4Surrogate), P_0.GetType());
		}
		float m = P_0.m00;
		if (m != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m, P_1);
		}
		float m2 = P_0.m01;
		if (m2 != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m2, P_1);
		}
		float m3 = P_0.m02;
		if (m3 != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m3, P_1);
		}
		float m4 = P_0.m03;
		if (m4 != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m4, P_1);
		}
		float m5 = P_0.m10;
		if (m5 != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m5, P_1);
		}
		float m6 = P_0.m11;
		if (m6 != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m6, P_1);
		}
		float m7 = P_0.m12;
		if (m7 != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m7, P_1);
		}
		float m8 = P_0.m13;
		if (m8 != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m8, P_1);
		}
		float m9 = P_0.m20;
		if (m9 != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m9, P_1);
		}
		float m10 = P_0.m21;
		if (m10 != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m10, P_1);
		}
		float m11 = P_0.m22;
		if (m11 != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m11, P_1);
		}
		float m12 = P_0.m23;
		if (m12 != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m12, P_1);
		}
		float m13 = P_0.m30;
		if (m13 != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m13, P_1);
		}
		float m14 = P_0.m31;
		if (m14 != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m14, P_1);
		}
		float m15 = P_0.m32;
		if (m15 != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m15, P_1);
		}
		float m16 = P_0.m33;
		if (m16 != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m16, P_1);
		}
	}

	private static Matrix4x4Surrogate Read(Matrix4x4Surrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate12 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate12, P_1);
					P_0 = matrix4x4Surrogate12;
				}
				float m = P_1.ReadSingle();
				P_0.m00 = m;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate15 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate15, P_1);
					P_0 = matrix4x4Surrogate15;
				}
				float m = P_1.ReadSingle();
				P_0.m01 = m;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate8 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate8, P_1);
					P_0 = matrix4x4Surrogate8;
				}
				float m = P_1.ReadSingle();
				P_0.m02 = m;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate5 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate5, P_1);
					P_0 = matrix4x4Surrogate5;
				}
				float m = P_1.ReadSingle();
				P_0.m03 = m;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate17 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate17, P_1);
					P_0 = matrix4x4Surrogate17;
				}
				float m = P_1.ReadSingle();
				P_0.m10 = m;
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate14 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate14, P_1);
					P_0 = matrix4x4Surrogate14;
				}
				float m = P_1.ReadSingle();
				P_0.m11 = m;
				break;
			}
			case 7:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate6 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate6, P_1);
					P_0 = matrix4x4Surrogate6;
				}
				float m = P_1.ReadSingle();
				P_0.m12 = m;
				break;
			}
			case 8:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate3 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate3, P_1);
					P_0 = matrix4x4Surrogate3;
				}
				float m = P_1.ReadSingle();
				P_0.m13 = m;
				break;
			}
			case 9:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate11 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate11, P_1);
					P_0 = matrix4x4Surrogate11;
				}
				float m = P_1.ReadSingle();
				P_0.m20 = m;
				break;
			}
			case 10:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate9 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate9, P_1);
					P_0 = matrix4x4Surrogate9;
				}
				float m = P_1.ReadSingle();
				P_0.m21 = m;
				break;
			}
			case 11:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate2 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate2, P_1);
					P_0 = matrix4x4Surrogate2;
				}
				float m = P_1.ReadSingle();
				P_0.m22 = m;
				break;
			}
			case 12:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate16 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate16, P_1);
					P_0 = matrix4x4Surrogate16;
				}
				float m = P_1.ReadSingle();
				P_0.m23 = m;
				break;
			}
			case 13:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate13 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate13, P_1);
					P_0 = matrix4x4Surrogate13;
				}
				float m = P_1.ReadSingle();
				P_0.m30 = m;
				break;
			}
			case 14:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate10 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate10, P_1);
					P_0 = matrix4x4Surrogate10;
				}
				float m = P_1.ReadSingle();
				P_0.m31 = m;
				break;
			}
			case 15:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate7 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate7, P_1);
					P_0 = matrix4x4Surrogate7;
				}
				float m = P_1.ReadSingle();
				P_0.m32 = m;
				break;
			}
			case 16:
			{
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate4 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate4, P_1);
					P_0 = matrix4x4Surrogate4;
				}
				float m = P_1.ReadSingle();
				P_0.m33 = m;
				break;
			}
			default:
				if (P_0 == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate, P_1);
					P_0 = matrix4x4Surrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			Matrix4x4Surrogate matrix4x4Surrogate18 = new Matrix4x4Surrogate();
			ProtoReader.NoteObject(matrix4x4Surrogate18, P_1);
			P_0 = matrix4x4Surrogate18;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Matrix4x4Surrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Matrix4x4Surrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Matrix4x4Surrogate[]>), P_0.GetType());
		}
		Matrix4x4Surrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		Matrix4x4Surrogate[] array = value;
		foreach (Matrix4x4Surrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Matrix4x4Surrogate[]> Read(PrimitiveContract<Matrix4x4Surrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Matrix4x4Surrogate[]> primitiveContract = new PrimitiveContract<Matrix4x4Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Matrix4x4Surrogate[] value = P_0.Value;
				List<Matrix4x4Surrogate> list = new List<Matrix4x4Surrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Matrix4x4Surrogate item = Read((Matrix4x4Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Matrix4x4Surrogate[] array = new Matrix4x4Surrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Matrix4x4Surrogate[]> primitiveContract2 = new PrimitiveContract<Matrix4x4Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Matrix4x4Surrogate[]> primitiveContract3 = new PrimitiveContract<Matrix4x4Surrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Matrix4x4Surrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Matrix4x4Surrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Matrix4x4Surrogate>), P_0.GetType());
		}
		foreach (Matrix4x4Surrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Matrix4x4Surrogate> Read(List<Matrix4x4Surrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Matrix4x4Surrogate> list = new List<Matrix4x4Surrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Matrix4x4Surrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Matrix4x4Surrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Matrix4x4Surrogate item = Read((Matrix4x4Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Matrix4x4Surrogate> list3 = new List<Matrix4x4Surrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Matrix4x4Surrogate> list4 = new List<Matrix4x4Surrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(SceneSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(SceneSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(SceneSurrogate), P_0.GetType());
		}
	}

	private static SceneSurrogate Read(SceneSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				SceneSurrogate sceneSurrogate = new SceneSurrogate();
				ProtoReader.NoteObject(sceneSurrogate, P_1);
				P_0 = sceneSurrogate;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			SceneSurrogate sceneSurrogate2 = new SceneSurrogate();
			ProtoReader.NoteObject(sceneSurrogate2, P_1);
			P_0 = sceneSurrogate2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<SceneSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<SceneSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<SceneSurrogate[]>), P_0.GetType());
		}
		SceneSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		SceneSurrogate[] array = value;
		foreach (SceneSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<SceneSurrogate[]> Read(PrimitiveContract<SceneSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<SceneSurrogate[]> primitiveContract = new PrimitiveContract<SceneSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				SceneSurrogate[] value = P_0.Value;
				List<SceneSurrogate> list = new List<SceneSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SceneSurrogate item = Read((SceneSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				SceneSurrogate[] array = new SceneSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<SceneSurrogate[]> primitiveContract2 = new PrimitiveContract<SceneSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<SceneSurrogate[]> primitiveContract3 = new PrimitiveContract<SceneSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<SceneSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<SceneSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<SceneSurrogate>), P_0.GetType());
		}
		foreach (SceneSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<SceneSurrogate> Read(List<SceneSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<SceneSurrogate> list = new List<SceneSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<SceneSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<SceneSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SceneSurrogate item = Read((SceneSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<SceneSurrogate> list3 = new List<SceneSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<SceneSurrogate> list4 = new List<SceneSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(BoundsSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(BoundsSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(BoundsSurrogate), P_0.GetType());
		}
		Vector3 center = P_0.center;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 extents = P_0.extents;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(extents, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 max = P_0.max;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(max, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 min = P_0.min;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(min, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 size = P_0.size;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static BoundsSurrogate Read(BoundsSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					BoundsSurrogate boundsSurrogate6 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate6, P_1);
					P_0 = boundsSurrogate6;
				}
				Vector3 center = P_0.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector5 = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector5;
				P_0.center = extents2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					BoundsSurrogate boundsSurrogate2 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate2, P_1);
					P_0 = boundsSurrogate2;
				}
				Vector3 extents = P_0.extents;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(extents, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector;
				P_0.extents = extents2;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					BoundsSurrogate boundsSurrogate5 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate5, P_1);
					P_0 = boundsSurrogate5;
				}
				Vector3 max = P_0.max;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector4 = Read(max, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector4;
				P_0.max = extents2;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					BoundsSurrogate boundsSurrogate3 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate3, P_1);
					P_0 = boundsSurrogate3;
				}
				Vector3 min = P_0.min;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(min, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector2;
				P_0.min = extents2;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					BoundsSurrogate boundsSurrogate4 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate4, P_1);
					P_0 = boundsSurrogate4;
				}
				Vector3 size = P_0.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector3;
				P_0.size = extents2;
				break;
			}
			default:
				if (P_0 == null)
				{
					BoundsSurrogate boundsSurrogate = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate, P_1);
					P_0 = boundsSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			BoundsSurrogate boundsSurrogate7 = new BoundsSurrogate();
			ProtoReader.NoteObject(boundsSurrogate7, P_1);
			P_0 = boundsSurrogate7;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<BoundsSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<BoundsSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<BoundsSurrogate[]>), P_0.GetType());
		}
		BoundsSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		BoundsSurrogate[] array = value;
		foreach (BoundsSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<BoundsSurrogate[]> Read(PrimitiveContract<BoundsSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<BoundsSurrogate[]> primitiveContract = new PrimitiveContract<BoundsSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				BoundsSurrogate[] value = P_0.Value;
				List<BoundsSurrogate> list = new List<BoundsSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					BoundsSurrogate item = Read((BoundsSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				BoundsSurrogate[] array = new BoundsSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<BoundsSurrogate[]> primitiveContract2 = new PrimitiveContract<BoundsSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<BoundsSurrogate[]> primitiveContract3 = new PrimitiveContract<BoundsSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<BoundsSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<BoundsSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<BoundsSurrogate>), P_0.GetType());
		}
		foreach (BoundsSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<BoundsSurrogate> Read(List<BoundsSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<BoundsSurrogate> list = new List<BoundsSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<BoundsSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<BoundsSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					BoundsSurrogate item = Read((BoundsSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<BoundsSurrogate> list3 = new List<BoundsSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<BoundsSurrogate> list4 = new List<BoundsSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Vector4Surrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(Vector4Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Vector4Surrogate), P_0.GetType());
		}
		float w = P_0.w;
		if (w != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(w, P_1);
		}
		float x = P_0.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = P_0.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
		float z = P_0.z;
		if (z != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(z, P_1);
		}
	}

	private static Vector4Surrogate Read(Vector4Surrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					Vector4Surrogate vector4Surrogate3 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate3, P_1);
					P_0 = vector4Surrogate3;
				}
				float y = P_1.ReadSingle();
				P_0.w = y;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					Vector4Surrogate vector4Surrogate5 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate5, P_1);
					P_0 = vector4Surrogate5;
				}
				float y = P_1.ReadSingle();
				P_0.x = y;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					Vector4Surrogate vector4Surrogate2 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate2, P_1);
					P_0 = vector4Surrogate2;
				}
				float y = P_1.ReadSingle();
				P_0.y = y;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					Vector4Surrogate vector4Surrogate4 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate4, P_1);
					P_0 = vector4Surrogate4;
				}
				float y = P_1.ReadSingle();
				P_0.z = y;
				break;
			}
			default:
				if (P_0 == null)
				{
					Vector4Surrogate vector4Surrogate = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate, P_1);
					P_0 = vector4Surrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			Vector4Surrogate vector4Surrogate6 = new Vector4Surrogate();
			ProtoReader.NoteObject(vector4Surrogate6, P_1);
			P_0 = vector4Surrogate6;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Vector4Surrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Vector4Surrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Vector4Surrogate[]>), P_0.GetType());
		}
		Vector4Surrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		Vector4Surrogate[] array = value;
		foreach (Vector4Surrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Vector4Surrogate[]> Read(PrimitiveContract<Vector4Surrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector4Surrogate[]> primitiveContract = new PrimitiveContract<Vector4Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Vector4Surrogate[] value = P_0.Value;
				List<Vector4Surrogate> list = new List<Vector4Surrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector4Surrogate item = Read((Vector4Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector4Surrogate[] array = new Vector4Surrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector4Surrogate[]> primitiveContract2 = new PrimitiveContract<Vector4Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Vector4Surrogate[]> primitiveContract3 = new PrimitiveContract<Vector4Surrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Vector4Surrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Vector4Surrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Vector4Surrogate>), P_0.GetType());
		}
		foreach (Vector4Surrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Vector4Surrogate> Read(List<Vector4Surrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Vector4Surrogate> list = new List<Vector4Surrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Vector4Surrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector4Surrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector4Surrogate item = Read((Vector4Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Vector4Surrogate> list3 = new List<Vector4Surrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Vector4Surrogate> list4 = new List<Vector4Surrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(NetworkViewIDSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(NetworkViewIDSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(NetworkViewIDSurrogate), P_0.GetType());
		}
	}

	private static NetworkViewIDSurrogate Read(NetworkViewIDSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				NetworkViewIDSurrogate networkViewIDSurrogate = new NetworkViewIDSurrogate();
				ProtoReader.NoteObject(networkViewIDSurrogate, P_1);
				P_0 = networkViewIDSurrogate;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			NetworkViewIDSurrogate networkViewIDSurrogate2 = new NetworkViewIDSurrogate();
			ProtoReader.NoteObject(networkViewIDSurrogate2, P_1);
			P_0 = networkViewIDSurrogate2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<NetworkViewIDSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<NetworkViewIDSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<NetworkViewIDSurrogate[]>), P_0.GetType());
		}
		NetworkViewIDSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		NetworkViewIDSurrogate[] array = value;
		foreach (NetworkViewIDSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<NetworkViewIDSurrogate[]> Read(PrimitiveContract<NetworkViewIDSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<NetworkViewIDSurrogate[]> primitiveContract = new PrimitiveContract<NetworkViewIDSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				NetworkViewIDSurrogate[] value = P_0.Value;
				List<NetworkViewIDSurrogate> list = new List<NetworkViewIDSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NetworkViewIDSurrogate item = Read((NetworkViewIDSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				NetworkViewIDSurrogate[] array = new NetworkViewIDSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<NetworkViewIDSurrogate[]> primitiveContract2 = new PrimitiveContract<NetworkViewIDSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<NetworkViewIDSurrogate[]> primitiveContract3 = new PrimitiveContract<NetworkViewIDSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<NetworkViewIDSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<NetworkViewIDSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<NetworkViewIDSurrogate>), P_0.GetType());
		}
		foreach (NetworkViewIDSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<NetworkViewIDSurrogate> Read(List<NetworkViewIDSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<NetworkViewIDSurrogate> list = new List<NetworkViewIDSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<NetworkViewIDSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<NetworkViewIDSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NetworkViewIDSurrogate item = Read((NetworkViewIDSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<NetworkViewIDSurrogate> list3 = new List<NetworkViewIDSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<NetworkViewIDSurrogate> list4 = new List<NetworkViewIDSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(NetworkPlayerSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(NetworkPlayerSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(NetworkPlayerSurrogate), P_0.GetType());
		}
	}

	private static NetworkPlayerSurrogate Read(NetworkPlayerSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				NetworkPlayerSurrogate networkPlayerSurrogate = new NetworkPlayerSurrogate();
				ProtoReader.NoteObject(networkPlayerSurrogate, P_1);
				P_0 = networkPlayerSurrogate;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			NetworkPlayerSurrogate networkPlayerSurrogate2 = new NetworkPlayerSurrogate();
			ProtoReader.NoteObject(networkPlayerSurrogate2, P_1);
			P_0 = networkPlayerSurrogate2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<NetworkPlayerSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<NetworkPlayerSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<NetworkPlayerSurrogate[]>), P_0.GetType());
		}
		NetworkPlayerSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		NetworkPlayerSurrogate[] array = value;
		foreach (NetworkPlayerSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<NetworkPlayerSurrogate[]> Read(PrimitiveContract<NetworkPlayerSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<NetworkPlayerSurrogate[]> primitiveContract = new PrimitiveContract<NetworkPlayerSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				NetworkPlayerSurrogate[] value = P_0.Value;
				List<NetworkPlayerSurrogate> list = new List<NetworkPlayerSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NetworkPlayerSurrogate item = Read((NetworkPlayerSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				NetworkPlayerSurrogate[] array = new NetworkPlayerSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<NetworkPlayerSurrogate[]> primitiveContract2 = new PrimitiveContract<NetworkPlayerSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<NetworkPlayerSurrogate[]> primitiveContract3 = new PrimitiveContract<NetworkPlayerSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<NetworkPlayerSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<NetworkPlayerSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<NetworkPlayerSurrogate>), P_0.GetType());
		}
		foreach (NetworkPlayerSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<NetworkPlayerSurrogate> Read(List<NetworkPlayerSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<NetworkPlayerSurrogate> list = new List<NetworkPlayerSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<NetworkPlayerSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<NetworkPlayerSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NetworkPlayerSurrogate item = Read((NetworkPlayerSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<NetworkPlayerSurrogate> list3 = new List<NetworkPlayerSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<NetworkPlayerSurrogate> list4 = new List<NetworkPlayerSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Vector2Surrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(Vector2Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Vector2Surrogate), P_0.GetType());
		}
		float x = P_0.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = P_0.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
	}

	private static Vector2Surrogate Read(Vector2Surrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					Vector2Surrogate vector2Surrogate2 = new Vector2Surrogate();
					ProtoReader.NoteObject(vector2Surrogate2, P_1);
					P_0 = vector2Surrogate2;
				}
				float x = P_1.ReadSingle();
				P_0.x = x;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					Vector2Surrogate vector2Surrogate3 = new Vector2Surrogate();
					ProtoReader.NoteObject(vector2Surrogate3, P_1);
					P_0 = vector2Surrogate3;
				}
				float x = P_1.ReadSingle();
				P_0.y = x;
				break;
			}
			default:
				if (P_0 == null)
				{
					Vector2Surrogate vector2Surrogate = new Vector2Surrogate();
					ProtoReader.NoteObject(vector2Surrogate, P_1);
					P_0 = vector2Surrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			Vector2Surrogate vector2Surrogate4 = new Vector2Surrogate();
			ProtoReader.NoteObject(vector2Surrogate4, P_1);
			P_0 = vector2Surrogate4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Vector2Surrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Vector2Surrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Vector2Surrogate[]>), P_0.GetType());
		}
		Vector2Surrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		Vector2Surrogate[] array = value;
		foreach (Vector2Surrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Vector2Surrogate[]> Read(PrimitiveContract<Vector2Surrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector2Surrogate[]> primitiveContract = new PrimitiveContract<Vector2Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Vector2Surrogate[] value = P_0.Value;
				List<Vector2Surrogate> list = new List<Vector2Surrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector2Surrogate item = Read((Vector2Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector2Surrogate[] array = new Vector2Surrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector2Surrogate[]> primitiveContract2 = new PrimitiveContract<Vector2Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Vector2Surrogate[]> primitiveContract3 = new PrimitiveContract<Vector2Surrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Vector2Surrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Vector2Surrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Vector2Surrogate>), P_0.GetType());
		}
		foreach (Vector2Surrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Vector2Surrogate> Read(List<Vector2Surrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Vector2Surrogate> list = new List<Vector2Surrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Vector2Surrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector2Surrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector2Surrogate item = Read((Vector2Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Vector2Surrogate> list3 = new List<Vector2Surrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Vector2Surrogate> list4 = new List<Vector2Surrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(RenderBufferSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(RenderBufferSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(RenderBufferSurrogate), P_0.GetType());
		}
	}

	private static RenderBufferSurrogate Read(RenderBufferSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				RenderBufferSurrogate renderBufferSurrogate = new RenderBufferSurrogate();
				ProtoReader.NoteObject(renderBufferSurrogate, P_1);
				P_0 = renderBufferSurrogate;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			RenderBufferSurrogate renderBufferSurrogate2 = new RenderBufferSurrogate();
			ProtoReader.NoteObject(renderBufferSurrogate2, P_1);
			P_0 = renderBufferSurrogate2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<RenderBufferSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<RenderBufferSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<RenderBufferSurrogate[]>), P_0.GetType());
		}
		RenderBufferSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		RenderBufferSurrogate[] array = value;
		foreach (RenderBufferSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<RenderBufferSurrogate[]> Read(PrimitiveContract<RenderBufferSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<RenderBufferSurrogate[]> primitiveContract = new PrimitiveContract<RenderBufferSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				RenderBufferSurrogate[] value = P_0.Value;
				List<RenderBufferSurrogate> list = new List<RenderBufferSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RenderBufferSurrogate item = Read((RenderBufferSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				RenderBufferSurrogate[] array = new RenderBufferSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<RenderBufferSurrogate[]> primitiveContract2 = new PrimitiveContract<RenderBufferSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<RenderBufferSurrogate[]> primitiveContract3 = new PrimitiveContract<RenderBufferSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<RenderBufferSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<RenderBufferSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<RenderBufferSurrogate>), P_0.GetType());
		}
		foreach (RenderBufferSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<RenderBufferSurrogate> Read(List<RenderBufferSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<RenderBufferSurrogate> list = new List<RenderBufferSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<RenderBufferSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<RenderBufferSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RenderBufferSurrogate item = Read((RenderBufferSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<RenderBufferSurrogate> list3 = new List<RenderBufferSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<RenderBufferSurrogate> list4 = new List<RenderBufferSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(QuaternionSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(QuaternionSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(QuaternionSurrogate), P_0.GetType());
		}
		Vector3 eulerAngles = P_0.eulerAngles;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(eulerAngles, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float w = P_0.w;
		if (w != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(w, P_1);
		}
		float x = P_0.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = P_0.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
		float z = P_0.z;
		if (z != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(z, P_1);
		}
	}

	private static QuaternionSurrogate Read(QuaternionSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					QuaternionSurrogate quaternionSurrogate6 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate6, P_1);
					P_0 = quaternionSurrogate6;
				}
				Vector3 eulerAngles = P_0.eulerAngles;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(eulerAngles, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 eulerAngles2 = vector;
				P_0.eulerAngles = eulerAngles2;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					QuaternionSurrogate quaternionSurrogate2 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate2, P_1);
					P_0 = quaternionSurrogate2;
				}
				float w = P_1.ReadSingle();
				P_0.w = w;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					QuaternionSurrogate quaternionSurrogate5 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate5, P_1);
					P_0 = quaternionSurrogate5;
				}
				float w = P_1.ReadSingle();
				P_0.x = w;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					QuaternionSurrogate quaternionSurrogate3 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate3, P_1);
					P_0 = quaternionSurrogate3;
				}
				float w = P_1.ReadSingle();
				P_0.y = w;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					QuaternionSurrogate quaternionSurrogate4 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate4, P_1);
					P_0 = quaternionSurrogate4;
				}
				float w = P_1.ReadSingle();
				P_0.z = w;
				break;
			}
			default:
				if (P_0 == null)
				{
					QuaternionSurrogate quaternionSurrogate = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate, P_1);
					P_0 = quaternionSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			QuaternionSurrogate quaternionSurrogate7 = new QuaternionSurrogate();
			ProtoReader.NoteObject(quaternionSurrogate7, P_1);
			P_0 = quaternionSurrogate7;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<QuaternionSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<QuaternionSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<QuaternionSurrogate[]>), P_0.GetType());
		}
		QuaternionSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		QuaternionSurrogate[] array = value;
		foreach (QuaternionSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<QuaternionSurrogate[]> Read(PrimitiveContract<QuaternionSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<QuaternionSurrogate[]> primitiveContract = new PrimitiveContract<QuaternionSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				QuaternionSurrogate[] value = P_0.Value;
				List<QuaternionSurrogate> list = new List<QuaternionSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					QuaternionSurrogate item = Read((QuaternionSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				QuaternionSurrogate[] array = new QuaternionSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<QuaternionSurrogate[]> primitiveContract2 = new PrimitiveContract<QuaternionSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<QuaternionSurrogate[]> primitiveContract3 = new PrimitiveContract<QuaternionSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<QuaternionSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<QuaternionSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<QuaternionSurrogate>), P_0.GetType());
		}
		foreach (QuaternionSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<QuaternionSurrogate> Read(List<QuaternionSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<QuaternionSurrogate> list = new List<QuaternionSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<QuaternionSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<QuaternionSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					QuaternionSurrogate item = Read((QuaternionSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<QuaternionSurrogate> list3 = new List<QuaternionSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<QuaternionSurrogate> list4 = new List<QuaternionSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointMotorSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(JointMotorSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointMotorSurrogate), P_0.GetType());
		}
		float force = P_0.force;
		if (force != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(force, P_1);
		}
		bool freeSpin = P_0.freeSpin;
		if (freeSpin)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(freeSpin, P_1);
		}
		float targetVelocity = P_0.targetVelocity;
		if (targetVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(targetVelocity, P_1);
		}
	}

	private static JointMotorSurrogate Read(JointMotorSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					JointMotorSurrogate jointMotorSurrogate3 = new JointMotorSurrogate();
					ProtoReader.NoteObject(jointMotorSurrogate3, P_1);
					P_0 = jointMotorSurrogate3;
				}
				float force = P_1.ReadSingle();
				P_0.force = force;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					JointMotorSurrogate jointMotorSurrogate2 = new JointMotorSurrogate();
					ProtoReader.NoteObject(jointMotorSurrogate2, P_1);
					P_0 = jointMotorSurrogate2;
				}
				bool freeSpin = P_1.ReadBoolean();
				P_0.freeSpin = freeSpin;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					JointMotorSurrogate jointMotorSurrogate4 = new JointMotorSurrogate();
					ProtoReader.NoteObject(jointMotorSurrogate4, P_1);
					P_0 = jointMotorSurrogate4;
				}
				float force = P_1.ReadSingle();
				P_0.targetVelocity = force;
				break;
			}
			default:
				if (P_0 == null)
				{
					JointMotorSurrogate jointMotorSurrogate = new JointMotorSurrogate();
					ProtoReader.NoteObject(jointMotorSurrogate, P_1);
					P_0 = jointMotorSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			JointMotorSurrogate jointMotorSurrogate5 = new JointMotorSurrogate();
			ProtoReader.NoteObject(jointMotorSurrogate5, P_1);
			P_0 = jointMotorSurrogate5;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<JointMotorSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointMotorSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointMotorSurrogate[]>), P_0.GetType());
		}
		JointMotorSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		JointMotorSurrogate[] array = value;
		foreach (JointMotorSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointMotorSurrogate[]> Read(PrimitiveContract<JointMotorSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointMotorSurrogate[]> primitiveContract = new PrimitiveContract<JointMotorSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointMotorSurrogate[] value = P_0.Value;
				List<JointMotorSurrogate> list = new List<JointMotorSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointMotorSurrogate item = Read((JointMotorSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointMotorSurrogate[] array = new JointMotorSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointMotorSurrogate[]> primitiveContract2 = new PrimitiveContract<JointMotorSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointMotorSurrogate[]> primitiveContract3 = new PrimitiveContract<JointMotorSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointMotorSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointMotorSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointMotorSurrogate>), P_0.GetType());
		}
		foreach (JointMotorSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointMotorSurrogate> Read(List<JointMotorSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointMotorSurrogate> list = new List<JointMotorSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointMotorSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointMotorSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointMotorSurrogate item = Read((JointMotorSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointMotorSurrogate> list3 = new List<JointMotorSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointMotorSurrogate> list4 = new List<JointMotorSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointLimitsSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(JointLimitsSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointLimitsSurrogate), P_0.GetType());
		}
		float bounceMinVelocity = P_0.bounceMinVelocity;
		if (bounceMinVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounceMinVelocity, P_1);
		}
		float bounciness = P_0.bounciness;
		if (bounciness != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounciness, P_1);
		}
		float contactDistance = P_0.contactDistance;
		if (contactDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(contactDistance, P_1);
		}
		float max = P_0.max;
		if (max != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(max, P_1);
		}
		float min = P_0.min;
		if (min != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(min, P_1);
		}
	}

	private static JointLimitsSurrogate Read(JointLimitsSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate6 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate6, P_1);
					P_0 = jointLimitsSurrogate6;
				}
				float bounciness = P_1.ReadSingle();
				P_0.bounceMinVelocity = bounciness;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate2 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate2, P_1);
					P_0 = jointLimitsSurrogate2;
				}
				float bounciness = P_1.ReadSingle();
				P_0.bounciness = bounciness;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate5 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate5, P_1);
					P_0 = jointLimitsSurrogate5;
				}
				float bounciness = P_1.ReadSingle();
				P_0.contactDistance = bounciness;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate3 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate3, P_1);
					P_0 = jointLimitsSurrogate3;
				}
				float bounciness = P_1.ReadSingle();
				P_0.max = bounciness;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate4 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate4, P_1);
					P_0 = jointLimitsSurrogate4;
				}
				float bounciness = P_1.ReadSingle();
				P_0.min = bounciness;
				break;
			}
			default:
				if (P_0 == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate, P_1);
					P_0 = jointLimitsSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			JointLimitsSurrogate jointLimitsSurrogate7 = new JointLimitsSurrogate();
			ProtoReader.NoteObject(jointLimitsSurrogate7, P_1);
			P_0 = jointLimitsSurrogate7;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<JointLimitsSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointLimitsSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointLimitsSurrogate[]>), P_0.GetType());
		}
		JointLimitsSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		JointLimitsSurrogate[] array = value;
		foreach (JointLimitsSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointLimitsSurrogate[]> Read(PrimitiveContract<JointLimitsSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointLimitsSurrogate[]> primitiveContract = new PrimitiveContract<JointLimitsSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointLimitsSurrogate[] value = P_0.Value;
				List<JointLimitsSurrogate> list = new List<JointLimitsSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointLimitsSurrogate item = Read((JointLimitsSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointLimitsSurrogate[] array = new JointLimitsSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointLimitsSurrogate[]> primitiveContract2 = new PrimitiveContract<JointLimitsSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointLimitsSurrogate[]> primitiveContract3 = new PrimitiveContract<JointLimitsSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointLimitsSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointLimitsSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointLimitsSurrogate>), P_0.GetType());
		}
		foreach (JointLimitsSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointLimitsSurrogate> Read(List<JointLimitsSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointLimitsSurrogate> list = new List<JointLimitsSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointLimitsSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointLimitsSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointLimitsSurrogate item = Read((JointLimitsSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointLimitsSurrogate> list3 = new List<JointLimitsSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointLimitsSurrogate> list4 = new List<JointLimitsSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointSpringSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(JointSpringSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointSpringSurrogate), P_0.GetType());
		}
		float damper = P_0.damper;
		if (damper != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(damper, P_1);
		}
		float spring = P_0.spring;
		if (spring != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spring, P_1);
		}
		float targetPosition = P_0.targetPosition;
		if (targetPosition != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(targetPosition, P_1);
		}
	}

	private static JointSpringSurrogate Read(JointSpringSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					JointSpringSurrogate jointSpringSurrogate3 = new JointSpringSurrogate();
					ProtoReader.NoteObject(jointSpringSurrogate3, P_1);
					P_0 = jointSpringSurrogate3;
				}
				float spring = P_1.ReadSingle();
				P_0.damper = spring;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					JointSpringSurrogate jointSpringSurrogate2 = new JointSpringSurrogate();
					ProtoReader.NoteObject(jointSpringSurrogate2, P_1);
					P_0 = jointSpringSurrogate2;
				}
				float spring = P_1.ReadSingle();
				P_0.spring = spring;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					JointSpringSurrogate jointSpringSurrogate4 = new JointSpringSurrogate();
					ProtoReader.NoteObject(jointSpringSurrogate4, P_1);
					P_0 = jointSpringSurrogate4;
				}
				float spring = P_1.ReadSingle();
				P_0.targetPosition = spring;
				break;
			}
			default:
				if (P_0 == null)
				{
					JointSpringSurrogate jointSpringSurrogate = new JointSpringSurrogate();
					ProtoReader.NoteObject(jointSpringSurrogate, P_1);
					P_0 = jointSpringSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			JointSpringSurrogate jointSpringSurrogate5 = new JointSpringSurrogate();
			ProtoReader.NoteObject(jointSpringSurrogate5, P_1);
			P_0 = jointSpringSurrogate5;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<JointSpringSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointSpringSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointSpringSurrogate[]>), P_0.GetType());
		}
		JointSpringSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		JointSpringSurrogate[] array = value;
		foreach (JointSpringSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointSpringSurrogate[]> Read(PrimitiveContract<JointSpringSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointSpringSurrogate[]> primitiveContract = new PrimitiveContract<JointSpringSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointSpringSurrogate[] value = P_0.Value;
				List<JointSpringSurrogate> list = new List<JointSpringSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointSpringSurrogate item = Read((JointSpringSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointSpringSurrogate[] array = new JointSpringSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointSpringSurrogate[]> primitiveContract2 = new PrimitiveContract<JointSpringSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointSpringSurrogate[]> primitiveContract3 = new PrimitiveContract<JointSpringSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointSpringSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointSpringSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointSpringSurrogate>), P_0.GetType());
		}
		foreach (JointSpringSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointSpringSurrogate> Read(List<JointSpringSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointSpringSurrogate> list = new List<JointSpringSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointSpringSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointSpringSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointSpringSurrogate item = Read((JointSpringSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointSpringSurrogate> list3 = new List<JointSpringSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointSpringSurrogate> list4 = new List<JointSpringSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointDriveSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(JointDriveSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointDriveSurrogate), P_0.GetType());
		}
		float maximumForce = P_0.maximumForce;
		if (maximumForce != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maximumForce, P_1);
		}
		float positionDamper = P_0.positionDamper;
		if (positionDamper != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(positionDamper, P_1);
		}
		float positionSpring = P_0.positionSpring;
		if (positionSpring != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(positionSpring, P_1);
		}
	}

	private static JointDriveSurrogate Read(JointDriveSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					JointDriveSurrogate jointDriveSurrogate3 = new JointDriveSurrogate();
					ProtoReader.NoteObject(jointDriveSurrogate3, P_1);
					P_0 = jointDriveSurrogate3;
				}
				float positionDamper = P_1.ReadSingle();
				P_0.maximumForce = positionDamper;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					JointDriveSurrogate jointDriveSurrogate2 = new JointDriveSurrogate();
					ProtoReader.NoteObject(jointDriveSurrogate2, P_1);
					P_0 = jointDriveSurrogate2;
				}
				float positionDamper = P_1.ReadSingle();
				P_0.positionDamper = positionDamper;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					JointDriveSurrogate jointDriveSurrogate4 = new JointDriveSurrogate();
					ProtoReader.NoteObject(jointDriveSurrogate4, P_1);
					P_0 = jointDriveSurrogate4;
				}
				float positionDamper = P_1.ReadSingle();
				P_0.positionSpring = positionDamper;
				break;
			}
			default:
				if (P_0 == null)
				{
					JointDriveSurrogate jointDriveSurrogate = new JointDriveSurrogate();
					ProtoReader.NoteObject(jointDriveSurrogate, P_1);
					P_0 = jointDriveSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			JointDriveSurrogate jointDriveSurrogate5 = new JointDriveSurrogate();
			ProtoReader.NoteObject(jointDriveSurrogate5, P_1);
			P_0 = jointDriveSurrogate5;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<JointDriveSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointDriveSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointDriveSurrogate[]>), P_0.GetType());
		}
		JointDriveSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		JointDriveSurrogate[] array = value;
		foreach (JointDriveSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointDriveSurrogate[]> Read(PrimitiveContract<JointDriveSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointDriveSurrogate[]> primitiveContract = new PrimitiveContract<JointDriveSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointDriveSurrogate[] value = P_0.Value;
				List<JointDriveSurrogate> list = new List<JointDriveSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointDriveSurrogate item = Read((JointDriveSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointDriveSurrogate[] array = new JointDriveSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointDriveSurrogate[]> primitiveContract2 = new PrimitiveContract<JointDriveSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointDriveSurrogate[]> primitiveContract3 = new PrimitiveContract<JointDriveSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointDriveSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointDriveSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointDriveSurrogate>), P_0.GetType());
		}
		foreach (JointDriveSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointDriveSurrogate> Read(List<JointDriveSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointDriveSurrogate> list = new List<JointDriveSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointDriveSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointDriveSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointDriveSurrogate item = Read((JointDriveSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointDriveSurrogate> list3 = new List<JointDriveSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointDriveSurrogate> list4 = new List<JointDriveSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(SoftJointLimitSpringSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(SoftJointLimitSpringSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(SoftJointLimitSpringSurrogate), P_0.GetType());
		}
		float damper = P_0.damper;
		if (damper != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(damper, P_1);
		}
		float spring = P_0.spring;
		if (spring != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spring, P_1);
		}
	}

	private static SoftJointLimitSpringSurrogate Read(SoftJointLimitSpringSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate2 = new SoftJointLimitSpringSurrogate();
					ProtoReader.NoteObject(softJointLimitSpringSurrogate2, P_1);
					P_0 = softJointLimitSpringSurrogate2;
				}
				float damper = P_1.ReadSingle();
				P_0.damper = damper;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate3 = new SoftJointLimitSpringSurrogate();
					ProtoReader.NoteObject(softJointLimitSpringSurrogate3, P_1);
					P_0 = softJointLimitSpringSurrogate3;
				}
				float damper = P_1.ReadSingle();
				P_0.spring = damper;
				break;
			}
			default:
				if (P_0 == null)
				{
					SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate = new SoftJointLimitSpringSurrogate();
					ProtoReader.NoteObject(softJointLimitSpringSurrogate, P_1);
					P_0 = softJointLimitSpringSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate4 = new SoftJointLimitSpringSurrogate();
			ProtoReader.NoteObject(softJointLimitSpringSurrogate4, P_1);
			P_0 = softJointLimitSpringSurrogate4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<SoftJointLimitSpringSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<SoftJointLimitSpringSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<SoftJointLimitSpringSurrogate[]>), P_0.GetType());
		}
		SoftJointLimitSpringSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		SoftJointLimitSpringSurrogate[] array = value;
		foreach (SoftJointLimitSpringSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<SoftJointLimitSpringSurrogate[]> Read(PrimitiveContract<SoftJointLimitSpringSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<SoftJointLimitSpringSurrogate[]> primitiveContract = new PrimitiveContract<SoftJointLimitSpringSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				SoftJointLimitSpringSurrogate[] value = P_0.Value;
				List<SoftJointLimitSpringSurrogate> list = new List<SoftJointLimitSpringSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SoftJointLimitSpringSurrogate item = Read((SoftJointLimitSpringSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				SoftJointLimitSpringSurrogate[] array = new SoftJointLimitSpringSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<SoftJointLimitSpringSurrogate[]> primitiveContract2 = new PrimitiveContract<SoftJointLimitSpringSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<SoftJointLimitSpringSurrogate[]> primitiveContract3 = new PrimitiveContract<SoftJointLimitSpringSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<SoftJointLimitSpringSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<SoftJointLimitSpringSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<SoftJointLimitSpringSurrogate>), P_0.GetType());
		}
		foreach (SoftJointLimitSpringSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<SoftJointLimitSpringSurrogate> Read(List<SoftJointLimitSpringSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<SoftJointLimitSpringSurrogate> list = new List<SoftJointLimitSpringSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<SoftJointLimitSpringSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<SoftJointLimitSpringSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SoftJointLimitSpringSurrogate item = Read((SoftJointLimitSpringSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<SoftJointLimitSpringSurrogate> list3 = new List<SoftJointLimitSpringSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<SoftJointLimitSpringSurrogate> list4 = new List<SoftJointLimitSpringSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(SoftJointLimitSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(SoftJointLimitSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(SoftJointLimitSurrogate), P_0.GetType());
		}
		float bounciness = P_0.bounciness;
		if (bounciness != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounciness, P_1);
		}
		float contactDistance = P_0.contactDistance;
		if (contactDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(contactDistance, P_1);
		}
		float limit = P_0.limit;
		if (limit != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(limit, P_1);
		}
	}

	private static SoftJointLimitSurrogate Read(SoftJointLimitSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					SoftJointLimitSurrogate softJointLimitSurrogate3 = new SoftJointLimitSurrogate();
					ProtoReader.NoteObject(softJointLimitSurrogate3, P_1);
					P_0 = softJointLimitSurrogate3;
				}
				float contactDistance = P_1.ReadSingle();
				P_0.bounciness = contactDistance;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					SoftJointLimitSurrogate softJointLimitSurrogate2 = new SoftJointLimitSurrogate();
					ProtoReader.NoteObject(softJointLimitSurrogate2, P_1);
					P_0 = softJointLimitSurrogate2;
				}
				float contactDistance = P_1.ReadSingle();
				P_0.contactDistance = contactDistance;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					SoftJointLimitSurrogate softJointLimitSurrogate4 = new SoftJointLimitSurrogate();
					ProtoReader.NoteObject(softJointLimitSurrogate4, P_1);
					P_0 = softJointLimitSurrogate4;
				}
				float contactDistance = P_1.ReadSingle();
				P_0.limit = contactDistance;
				break;
			}
			default:
				if (P_0 == null)
				{
					SoftJointLimitSurrogate softJointLimitSurrogate = new SoftJointLimitSurrogate();
					ProtoReader.NoteObject(softJointLimitSurrogate, P_1);
					P_0 = softJointLimitSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			SoftJointLimitSurrogate softJointLimitSurrogate5 = new SoftJointLimitSurrogate();
			ProtoReader.NoteObject(softJointLimitSurrogate5, P_1);
			P_0 = softJointLimitSurrogate5;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<SoftJointLimitSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<SoftJointLimitSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<SoftJointLimitSurrogate[]>), P_0.GetType());
		}
		SoftJointLimitSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		SoftJointLimitSurrogate[] array = value;
		foreach (SoftJointLimitSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<SoftJointLimitSurrogate[]> Read(PrimitiveContract<SoftJointLimitSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<SoftJointLimitSurrogate[]> primitiveContract = new PrimitiveContract<SoftJointLimitSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				SoftJointLimitSurrogate[] value = P_0.Value;
				List<SoftJointLimitSurrogate> list = new List<SoftJointLimitSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SoftJointLimitSurrogate item = Read((SoftJointLimitSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				SoftJointLimitSurrogate[] array = new SoftJointLimitSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<SoftJointLimitSurrogate[]> primitiveContract2 = new PrimitiveContract<SoftJointLimitSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<SoftJointLimitSurrogate[]> primitiveContract3 = new PrimitiveContract<SoftJointLimitSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<SoftJointLimitSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<SoftJointLimitSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<SoftJointLimitSurrogate>), P_0.GetType());
		}
		foreach (SoftJointLimitSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<SoftJointLimitSurrogate> Read(List<SoftJointLimitSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<SoftJointLimitSurrogate> list = new List<SoftJointLimitSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<SoftJointLimitSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<SoftJointLimitSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SoftJointLimitSurrogate item = Read((SoftJointLimitSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<SoftJointLimitSurrogate> list3 = new List<SoftJointLimitSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<SoftJointLimitSurrogate> list4 = new List<SoftJointLimitSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointMotor2DSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(JointMotor2DSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointMotor2DSurrogate), P_0.GetType());
		}
		float maxMotorTorque = P_0.maxMotorTorque;
		if (maxMotorTorque != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxMotorTorque, P_1);
		}
		float motorSpeed = P_0.motorSpeed;
		if (motorSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(motorSpeed, P_1);
		}
	}

	private static JointMotor2DSurrogate Read(JointMotor2DSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					JointMotor2DSurrogate jointMotor2DSurrogate2 = new JointMotor2DSurrogate();
					ProtoReader.NoteObject(jointMotor2DSurrogate2, P_1);
					P_0 = jointMotor2DSurrogate2;
				}
				float maxMotorTorque = P_1.ReadSingle();
				P_0.maxMotorTorque = maxMotorTorque;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					JointMotor2DSurrogate jointMotor2DSurrogate3 = new JointMotor2DSurrogate();
					ProtoReader.NoteObject(jointMotor2DSurrogate3, P_1);
					P_0 = jointMotor2DSurrogate3;
				}
				float maxMotorTorque = P_1.ReadSingle();
				P_0.motorSpeed = maxMotorTorque;
				break;
			}
			default:
				if (P_0 == null)
				{
					JointMotor2DSurrogate jointMotor2DSurrogate = new JointMotor2DSurrogate();
					ProtoReader.NoteObject(jointMotor2DSurrogate, P_1);
					P_0 = jointMotor2DSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			JointMotor2DSurrogate jointMotor2DSurrogate4 = new JointMotor2DSurrogate();
			ProtoReader.NoteObject(jointMotor2DSurrogate4, P_1);
			P_0 = jointMotor2DSurrogate4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<JointMotor2DSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointMotor2DSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointMotor2DSurrogate[]>), P_0.GetType());
		}
		JointMotor2DSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		JointMotor2DSurrogate[] array = value;
		foreach (JointMotor2DSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointMotor2DSurrogate[]> Read(PrimitiveContract<JointMotor2DSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointMotor2DSurrogate[]> primitiveContract = new PrimitiveContract<JointMotor2DSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointMotor2DSurrogate[] value = P_0.Value;
				List<JointMotor2DSurrogate> list = new List<JointMotor2DSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointMotor2DSurrogate item = Read((JointMotor2DSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointMotor2DSurrogate[] array = new JointMotor2DSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointMotor2DSurrogate[]> primitiveContract2 = new PrimitiveContract<JointMotor2DSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointMotor2DSurrogate[]> primitiveContract3 = new PrimitiveContract<JointMotor2DSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointMotor2DSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointMotor2DSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointMotor2DSurrogate>), P_0.GetType());
		}
		foreach (JointMotor2DSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointMotor2DSurrogate> Read(List<JointMotor2DSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointMotor2DSurrogate> list = new List<JointMotor2DSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointMotor2DSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointMotor2DSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointMotor2DSurrogate item = Read((JointMotor2DSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointMotor2DSurrogate> list3 = new List<JointMotor2DSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointMotor2DSurrogate> list4 = new List<JointMotor2DSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointAngleLimits2DSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(JointAngleLimits2DSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointAngleLimits2DSurrogate), P_0.GetType());
		}
		float max = P_0.max;
		if (max != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(max, P_1);
		}
		float min = P_0.min;
		if (min != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(min, P_1);
		}
	}

	private static JointAngleLimits2DSurrogate Read(JointAngleLimits2DSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate2 = new JointAngleLimits2DSurrogate();
					ProtoReader.NoteObject(jointAngleLimits2DSurrogate2, P_1);
					P_0 = jointAngleLimits2DSurrogate2;
				}
				float max = P_1.ReadSingle();
				P_0.max = max;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate3 = new JointAngleLimits2DSurrogate();
					ProtoReader.NoteObject(jointAngleLimits2DSurrogate3, P_1);
					P_0 = jointAngleLimits2DSurrogate3;
				}
				float max = P_1.ReadSingle();
				P_0.min = max;
				break;
			}
			default:
				if (P_0 == null)
				{
					JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate = new JointAngleLimits2DSurrogate();
					ProtoReader.NoteObject(jointAngleLimits2DSurrogate, P_1);
					P_0 = jointAngleLimits2DSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate4 = new JointAngleLimits2DSurrogate();
			ProtoReader.NoteObject(jointAngleLimits2DSurrogate4, P_1);
			P_0 = jointAngleLimits2DSurrogate4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<JointAngleLimits2DSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointAngleLimits2DSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointAngleLimits2DSurrogate[]>), P_0.GetType());
		}
		JointAngleLimits2DSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		JointAngleLimits2DSurrogate[] array = value;
		foreach (JointAngleLimits2DSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointAngleLimits2DSurrogate[]> Read(PrimitiveContract<JointAngleLimits2DSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointAngleLimits2DSurrogate[]> primitiveContract = new PrimitiveContract<JointAngleLimits2DSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointAngleLimits2DSurrogate[] value = P_0.Value;
				List<JointAngleLimits2DSurrogate> list = new List<JointAngleLimits2DSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointAngleLimits2DSurrogate item = Read((JointAngleLimits2DSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointAngleLimits2DSurrogate[] array = new JointAngleLimits2DSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointAngleLimits2DSurrogate[]> primitiveContract2 = new PrimitiveContract<JointAngleLimits2DSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointAngleLimits2DSurrogate[]> primitiveContract3 = new PrimitiveContract<JointAngleLimits2DSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointAngleLimits2DSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointAngleLimits2DSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointAngleLimits2DSurrogate>), P_0.GetType());
		}
		foreach (JointAngleLimits2DSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointAngleLimits2DSurrogate> Read(List<JointAngleLimits2DSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointAngleLimits2DSurrogate> list = new List<JointAngleLimits2DSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointAngleLimits2DSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointAngleLimits2DSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointAngleLimits2DSurrogate item = Read((JointAngleLimits2DSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointAngleLimits2DSurrogate> list3 = new List<JointAngleLimits2DSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointAngleLimits2DSurrogate> list4 = new List<JointAngleLimits2DSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointTranslationLimits2DSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(JointTranslationLimits2DSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointTranslationLimits2DSurrogate), P_0.GetType());
		}
		float max = P_0.max;
		if (max != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(max, P_1);
		}
		float min = P_0.min;
		if (min != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(min, P_1);
		}
	}

	private static JointTranslationLimits2DSurrogate Read(JointTranslationLimits2DSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate2 = new JointTranslationLimits2DSurrogate();
					ProtoReader.NoteObject(jointTranslationLimits2DSurrogate2, P_1);
					P_0 = jointTranslationLimits2DSurrogate2;
				}
				float max = P_1.ReadSingle();
				P_0.max = max;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate3 = new JointTranslationLimits2DSurrogate();
					ProtoReader.NoteObject(jointTranslationLimits2DSurrogate3, P_1);
					P_0 = jointTranslationLimits2DSurrogate3;
				}
				float max = P_1.ReadSingle();
				P_0.min = max;
				break;
			}
			default:
				if (P_0 == null)
				{
					JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate = new JointTranslationLimits2DSurrogate();
					ProtoReader.NoteObject(jointTranslationLimits2DSurrogate, P_1);
					P_0 = jointTranslationLimits2DSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate4 = new JointTranslationLimits2DSurrogate();
			ProtoReader.NoteObject(jointTranslationLimits2DSurrogate4, P_1);
			P_0 = jointTranslationLimits2DSurrogate4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<JointTranslationLimits2DSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointTranslationLimits2DSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointTranslationLimits2DSurrogate[]>), P_0.GetType());
		}
		JointTranslationLimits2DSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		JointTranslationLimits2DSurrogate[] array = value;
		foreach (JointTranslationLimits2DSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointTranslationLimits2DSurrogate[]> Read(PrimitiveContract<JointTranslationLimits2DSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointTranslationLimits2DSurrogate[]> primitiveContract = new PrimitiveContract<JointTranslationLimits2DSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointTranslationLimits2DSurrogate[] value = P_0.Value;
				List<JointTranslationLimits2DSurrogate> list = new List<JointTranslationLimits2DSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointTranslationLimits2DSurrogate item = Read((JointTranslationLimits2DSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointTranslationLimits2DSurrogate[] array = new JointTranslationLimits2DSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointTranslationLimits2DSurrogate[]> primitiveContract2 = new PrimitiveContract<JointTranslationLimits2DSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointTranslationLimits2DSurrogate[]> primitiveContract3 = new PrimitiveContract<JointTranslationLimits2DSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointTranslationLimits2DSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointTranslationLimits2DSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointTranslationLimits2DSurrogate>), P_0.GetType());
		}
		foreach (JointTranslationLimits2DSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointTranslationLimits2DSurrogate> Read(List<JointTranslationLimits2DSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointTranslationLimits2DSurrogate> list = new List<JointTranslationLimits2DSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointTranslationLimits2DSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointTranslationLimits2DSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointTranslationLimits2DSurrogate item = Read((JointTranslationLimits2DSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointTranslationLimits2DSurrogate> list3 = new List<JointTranslationLimits2DSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointTranslationLimits2DSurrogate> list4 = new List<JointTranslationLimits2DSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointSuspension2DSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(JointSuspension2DSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointSuspension2DSurrogate), P_0.GetType());
		}
		float angle = P_0.angle;
		if (angle != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angle, P_1);
		}
		float dampingRatio = P_0.dampingRatio;
		if (dampingRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dampingRatio, P_1);
		}
		float frequency = P_0.frequency;
		if (frequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(frequency, P_1);
		}
	}

	private static JointSuspension2DSurrogate Read(JointSuspension2DSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					JointSuspension2DSurrogate jointSuspension2DSurrogate3 = new JointSuspension2DSurrogate();
					ProtoReader.NoteObject(jointSuspension2DSurrogate3, P_1);
					P_0 = jointSuspension2DSurrogate3;
				}
				float dampingRatio = P_1.ReadSingle();
				P_0.angle = dampingRatio;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					JointSuspension2DSurrogate jointSuspension2DSurrogate2 = new JointSuspension2DSurrogate();
					ProtoReader.NoteObject(jointSuspension2DSurrogate2, P_1);
					P_0 = jointSuspension2DSurrogate2;
				}
				float dampingRatio = P_1.ReadSingle();
				P_0.dampingRatio = dampingRatio;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					JointSuspension2DSurrogate jointSuspension2DSurrogate4 = new JointSuspension2DSurrogate();
					ProtoReader.NoteObject(jointSuspension2DSurrogate4, P_1);
					P_0 = jointSuspension2DSurrogate4;
				}
				float dampingRatio = P_1.ReadSingle();
				P_0.frequency = dampingRatio;
				break;
			}
			default:
				if (P_0 == null)
				{
					JointSuspension2DSurrogate jointSuspension2DSurrogate = new JointSuspension2DSurrogate();
					ProtoReader.NoteObject(jointSuspension2DSurrogate, P_1);
					P_0 = jointSuspension2DSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			JointSuspension2DSurrogate jointSuspension2DSurrogate5 = new JointSuspension2DSurrogate();
			ProtoReader.NoteObject(jointSuspension2DSurrogate5, P_1);
			P_0 = jointSuspension2DSurrogate5;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<JointSuspension2DSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointSuspension2DSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointSuspension2DSurrogate[]>), P_0.GetType());
		}
		JointSuspension2DSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		JointSuspension2DSurrogate[] array = value;
		foreach (JointSuspension2DSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointSuspension2DSurrogate[]> Read(PrimitiveContract<JointSuspension2DSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointSuspension2DSurrogate[]> primitiveContract = new PrimitiveContract<JointSuspension2DSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointSuspension2DSurrogate[] value = P_0.Value;
				List<JointSuspension2DSurrogate> list = new List<JointSuspension2DSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointSuspension2DSurrogate item = Read((JointSuspension2DSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointSuspension2DSurrogate[] array = new JointSuspension2DSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointSuspension2DSurrogate[]> primitiveContract2 = new PrimitiveContract<JointSuspension2DSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointSuspension2DSurrogate[]> primitiveContract3 = new PrimitiveContract<JointSuspension2DSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointSuspension2DSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointSuspension2DSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointSuspension2DSurrogate>), P_0.GetType());
		}
		foreach (JointSuspension2DSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointSuspension2DSurrogate> Read(List<JointSuspension2DSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointSuspension2DSurrogate> list = new List<JointSuspension2DSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointSuspension2DSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointSuspension2DSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointSuspension2DSurrogate item = Read((JointSuspension2DSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointSuspension2DSurrogate> list3 = new List<JointSuspension2DSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointSuspension2DSurrogate> list4 = new List<JointSuspension2DSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(WheelFrictionCurveSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(WheelFrictionCurveSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(WheelFrictionCurveSurrogate), P_0.GetType());
		}
		float asymptoteSlip = P_0.asymptoteSlip;
		if (asymptoteSlip != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(asymptoteSlip, P_1);
		}
		float asymptoteValue = P_0.asymptoteValue;
		if (asymptoteValue != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(asymptoteValue, P_1);
		}
		float extremumSlip = P_0.extremumSlip;
		if (extremumSlip != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(extremumSlip, P_1);
		}
		float extremumValue = P_0.extremumValue;
		if (extremumValue != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(extremumValue, P_1);
		}
		float stiffness = P_0.stiffness;
		if (stiffness != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(stiffness, P_1);
		}
	}

	private static WheelFrictionCurveSurrogate Read(WheelFrictionCurveSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate6 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate6, P_1);
					P_0 = wheelFrictionCurveSurrogate6;
				}
				float asymptoteValue = P_1.ReadSingle();
				P_0.asymptoteSlip = asymptoteValue;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate2 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate2, P_1);
					P_0 = wheelFrictionCurveSurrogate2;
				}
				float asymptoteValue = P_1.ReadSingle();
				P_0.asymptoteValue = asymptoteValue;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate5 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate5, P_1);
					P_0 = wheelFrictionCurveSurrogate5;
				}
				float asymptoteValue = P_1.ReadSingle();
				P_0.extremumSlip = asymptoteValue;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate3 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate3, P_1);
					P_0 = wheelFrictionCurveSurrogate3;
				}
				float asymptoteValue = P_1.ReadSingle();
				P_0.extremumValue = asymptoteValue;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate4 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate4, P_1);
					P_0 = wheelFrictionCurveSurrogate4;
				}
				float asymptoteValue = P_1.ReadSingle();
				P_0.stiffness = asymptoteValue;
				break;
			}
			default:
				if (P_0 == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate, P_1);
					P_0 = wheelFrictionCurveSurrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate7 = new WheelFrictionCurveSurrogate();
			ProtoReader.NoteObject(wheelFrictionCurveSurrogate7, P_1);
			P_0 = wheelFrictionCurveSurrogate7;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<WheelFrictionCurveSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<WheelFrictionCurveSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<WheelFrictionCurveSurrogate[]>), P_0.GetType());
		}
		WheelFrictionCurveSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		WheelFrictionCurveSurrogate[] array = value;
		foreach (WheelFrictionCurveSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<WheelFrictionCurveSurrogate[]> Read(PrimitiveContract<WheelFrictionCurveSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<WheelFrictionCurveSurrogate[]> primitiveContract = new PrimitiveContract<WheelFrictionCurveSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				WheelFrictionCurveSurrogate[] value = P_0.Value;
				List<WheelFrictionCurveSurrogate> list = new List<WheelFrictionCurveSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					WheelFrictionCurveSurrogate item = Read((WheelFrictionCurveSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				WheelFrictionCurveSurrogate[] array = new WheelFrictionCurveSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<WheelFrictionCurveSurrogate[]> primitiveContract2 = new PrimitiveContract<WheelFrictionCurveSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<WheelFrictionCurveSurrogate[]> primitiveContract3 = new PrimitiveContract<WheelFrictionCurveSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<WheelFrictionCurveSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<WheelFrictionCurveSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<WheelFrictionCurveSurrogate>), P_0.GetType());
		}
		foreach (WheelFrictionCurveSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<WheelFrictionCurveSurrogate> Read(List<WheelFrictionCurveSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<WheelFrictionCurveSurrogate> list = new List<WheelFrictionCurveSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<WheelFrictionCurveSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<WheelFrictionCurveSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					WheelFrictionCurveSurrogate item = Read((WheelFrictionCurveSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<WheelFrictionCurveSurrogate> list3 = new List<WheelFrictionCurveSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<WheelFrictionCurveSurrogate> list4 = new List<WheelFrictionCurveSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(OffMeshLinkDataSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(OffMeshLinkDataSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(OffMeshLinkDataSurrogate), P_0.GetType());
		}
	}

	private static OffMeshLinkDataSurrogate Read(OffMeshLinkDataSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				OffMeshLinkDataSurrogate offMeshLinkDataSurrogate = new OffMeshLinkDataSurrogate();
				ProtoReader.NoteObject(offMeshLinkDataSurrogate, P_1);
				P_0 = offMeshLinkDataSurrogate;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			OffMeshLinkDataSurrogate offMeshLinkDataSurrogate2 = new OffMeshLinkDataSurrogate();
			ProtoReader.NoteObject(offMeshLinkDataSurrogate2, P_1);
			P_0 = offMeshLinkDataSurrogate2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<OffMeshLinkDataSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<OffMeshLinkDataSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<OffMeshLinkDataSurrogate[]>), P_0.GetType());
		}
		OffMeshLinkDataSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		OffMeshLinkDataSurrogate[] array = value;
		foreach (OffMeshLinkDataSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<OffMeshLinkDataSurrogate[]> Read(PrimitiveContract<OffMeshLinkDataSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<OffMeshLinkDataSurrogate[]> primitiveContract = new PrimitiveContract<OffMeshLinkDataSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				OffMeshLinkDataSurrogate[] value = P_0.Value;
				List<OffMeshLinkDataSurrogate> list = new List<OffMeshLinkDataSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					OffMeshLinkDataSurrogate item = Read((OffMeshLinkDataSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				OffMeshLinkDataSurrogate[] array = new OffMeshLinkDataSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<OffMeshLinkDataSurrogate[]> primitiveContract2 = new PrimitiveContract<OffMeshLinkDataSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<OffMeshLinkDataSurrogate[]> primitiveContract3 = new PrimitiveContract<OffMeshLinkDataSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<OffMeshLinkDataSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<OffMeshLinkDataSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<OffMeshLinkDataSurrogate>), P_0.GetType());
		}
		foreach (OffMeshLinkDataSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<OffMeshLinkDataSurrogate> Read(List<OffMeshLinkDataSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<OffMeshLinkDataSurrogate> list = new List<OffMeshLinkDataSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<OffMeshLinkDataSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<OffMeshLinkDataSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					OffMeshLinkDataSurrogate item = Read((OffMeshLinkDataSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<OffMeshLinkDataSurrogate> list3 = new List<OffMeshLinkDataSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<OffMeshLinkDataSurrogate> list4 = new List<OffMeshLinkDataSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PlayableGraphSurrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PlayableGraphSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PlayableGraphSurrogate), P_0.GetType());
		}
	}

	private static PlayableGraphSurrogate Read(PlayableGraphSurrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				PlayableGraphSurrogate playableGraphSurrogate = new PlayableGraphSurrogate();
				ProtoReader.NoteObject(playableGraphSurrogate, P_1);
				P_0 = playableGraphSurrogate;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			PlayableGraphSurrogate playableGraphSurrogate2 = new PlayableGraphSurrogate();
			ProtoReader.NoteObject(playableGraphSurrogate2, P_1);
			P_0 = playableGraphSurrogate2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PlayableGraphSurrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PlayableGraphSurrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PlayableGraphSurrogate[]>), P_0.GetType());
		}
		PlayableGraphSurrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PlayableGraphSurrogate[] array = value;
		foreach (PlayableGraphSurrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PlayableGraphSurrogate[]> Read(PrimitiveContract<PlayableGraphSurrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PlayableGraphSurrogate[]> primitiveContract = new PrimitiveContract<PlayableGraphSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PlayableGraphSurrogate[] value = P_0.Value;
				List<PlayableGraphSurrogate> list = new List<PlayableGraphSurrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PlayableGraphSurrogate item = Read((PlayableGraphSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PlayableGraphSurrogate[] array = new PlayableGraphSurrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PlayableGraphSurrogate[]> primitiveContract2 = new PrimitiveContract<PlayableGraphSurrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PlayableGraphSurrogate[]> primitiveContract3 = new PrimitiveContract<PlayableGraphSurrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PlayableGraphSurrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PlayableGraphSurrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PlayableGraphSurrogate>), P_0.GetType());
		}
		foreach (PlayableGraphSurrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PlayableGraphSurrogate> Read(List<PlayableGraphSurrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PlayableGraphSurrogate> list = new List<PlayableGraphSurrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PlayableGraphSurrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PlayableGraphSurrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PlayableGraphSurrogate item = Read((PlayableGraphSurrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PlayableGraphSurrogate> list3 = new List<PlayableGraphSurrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PlayableGraphSurrogate> list4 = new List<PlayableGraphSurrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Color32Surrogate P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(Color32Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Color32Surrogate), P_0.GetType());
		}
		byte a = P_0.a;
		if (a != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteByte(a, P_1);
		}
		byte b = P_0.b;
		if (b != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteByte(b, P_1);
		}
		byte g = P_0.g;
		if (g != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteByte(g, P_1);
		}
		byte r = P_0.r;
		if (r != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteByte(r, P_1);
		}
	}

	private static Color32Surrogate Read(Color32Surrogate P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					Color32Surrogate color32Surrogate3 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate3, P_1);
					P_0 = color32Surrogate3;
				}
				byte g = P_1.ReadByte();
				P_0.a = g;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					Color32Surrogate color32Surrogate5 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate5, P_1);
					P_0 = color32Surrogate5;
				}
				byte g = P_1.ReadByte();
				P_0.b = g;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					Color32Surrogate color32Surrogate2 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate2, P_1);
					P_0 = color32Surrogate2;
				}
				byte g = P_1.ReadByte();
				P_0.g = g;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					Color32Surrogate color32Surrogate4 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate4, P_1);
					P_0 = color32Surrogate4;
				}
				byte g = P_1.ReadByte();
				P_0.r = g;
				break;
			}
			default:
				if (P_0 == null)
				{
					Color32Surrogate color32Surrogate = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate, P_1);
					P_0 = color32Surrogate;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			Color32Surrogate color32Surrogate6 = new Color32Surrogate();
			ProtoReader.NoteObject(color32Surrogate6, P_1);
			P_0 = color32Surrogate6;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<Color32Surrogate[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Color32Surrogate[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Color32Surrogate[]>), P_0.GetType());
		}
		Color32Surrogate[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		Color32Surrogate[] array = value;
		foreach (Color32Surrogate obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Color32Surrogate[]> Read(PrimitiveContract<Color32Surrogate[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Color32Surrogate[]> primitiveContract = new PrimitiveContract<Color32Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Color32Surrogate[] value = P_0.Value;
				List<Color32Surrogate> list = new List<Color32Surrogate>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Color32Surrogate item = Read((Color32Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Color32Surrogate[] array = new Color32Surrogate[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Color32Surrogate[]> primitiveContract2 = new PrimitiveContract<Color32Surrogate[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Color32Surrogate[]> primitiveContract3 = new PrimitiveContract<Color32Surrogate[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Color32Surrogate> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Color32Surrogate>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Color32Surrogate>), P_0.GetType());
		}
		foreach (Color32Surrogate item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Color32Surrogate> Read(List<Color32Surrogate> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Color32Surrogate> list = new List<Color32Surrogate>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Color32Surrogate>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Color32Surrogate> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Color32Surrogate item = Read((Color32Surrogate)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Color32Surrogate> list3 = new List<Color32Surrogate>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Color32Surrogate> list4 = new List<Color32Surrogate>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PersistentDescriptor P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentDescriptor))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentDescriptor), P_0.GetType());
		}
		PersistentDescriptor[] children = P_0.Children;
		if (children != null)
		{
			PersistentDescriptor[] array = children;
			foreach (PersistentDescriptor obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
					Write(obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		PersistentDescriptor[] components = P_0.Components;
		if (components != null)
		{
			PersistentDescriptor[] array = components;
			foreach (PersistentDescriptor obj2 in array)
			{
				if (obj2 != null)
				{
					ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(obj2, P_1);
					Write(obj2, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		long instanceId = P_0.InstanceId;
		if (instanceId != 0L)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(instanceId, P_1);
		}
		string typeName = P_0.TypeName;
		if (typeName != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			ProtoWriter.WriteString(typeName, P_1);
		}
	}

	private static PersistentDescriptor Read(PersistentDescriptor P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentDescriptor persistentDescriptor5 = new PersistentDescriptor();
					ProtoReader.NoteObject(persistentDescriptor5, P_1);
					P_0 = persistentDescriptor5;
				}
				PersistentDescriptor[] array2 = P_0.Children;
				List<PersistentDescriptor> list = new List<PersistentDescriptor>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentDescriptor> list3 = list;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDescriptor item2 = Read((PersistentDescriptor)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list3.Add(item2);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentDescriptor[] array3 = array2;
				PersistentDescriptor[] components = new PersistentDescriptor[(fieldNumber = ((array3 != null) ? array3.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					array2.CopyTo(components, 0);
				}
				list.CopyTo(components, fieldNumber);
				components = components;
				if (components != null)
				{
					P_0.Children = components;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentDescriptor persistentDescriptor2 = new PersistentDescriptor();
					ProtoReader.NoteObject(persistentDescriptor2, P_1);
					P_0 = persistentDescriptor2;
				}
				PersistentDescriptor[] components = P_0.Components;
				List<PersistentDescriptor> list = new List<PersistentDescriptor>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentDescriptor> list2 = list;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDescriptor item = Read((PersistentDescriptor)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentDescriptor[] array = components;
				PersistentDescriptor[] array2 = new PersistentDescriptor[(fieldNumber = ((array != null) ? array.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					components.CopyTo(array2, 0);
				}
				list.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.Components = array2;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentDescriptor persistentDescriptor3 = new PersistentDescriptor();
					ProtoReader.NoteObject(persistentDescriptor3, P_1);
					P_0 = persistentDescriptor3;
				}
				long instanceId = P_1.ReadInt64();
				P_0.InstanceId = instanceId;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentDescriptor persistentDescriptor4 = new PersistentDescriptor();
					ProtoReader.NoteObject(persistentDescriptor4, P_1);
					P_0 = persistentDescriptor4;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.TypeName = text;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentDescriptor persistentDescriptor = new PersistentDescriptor();
					ProtoReader.NoteObject(persistentDescriptor, P_1);
					P_0 = persistentDescriptor;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentDescriptor persistentDescriptor6 = new PersistentDescriptor();
			ProtoReader.NoteObject(persistentDescriptor6, P_1);
			P_0 = persistentDescriptor6;
		}
		P_0.OnDeserialized();
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentDescriptor[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentDescriptor[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentDescriptor[]>), P_0.GetType());
		}
		PersistentDescriptor[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentDescriptor[] array = value;
		foreach (PersistentDescriptor obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentDescriptor[]> Read(PrimitiveContract<PersistentDescriptor[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentDescriptor[]> primitiveContract = new PrimitiveContract<PersistentDescriptor[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentDescriptor[] value = P_0.Value;
				List<PersistentDescriptor> list = new List<PersistentDescriptor>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDescriptor item = Read((PersistentDescriptor)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentDescriptor[] array = new PersistentDescriptor[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentDescriptor[]> primitiveContract2 = new PrimitiveContract<PersistentDescriptor[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentDescriptor[]> primitiveContract3 = new PrimitiveContract<PersistentDescriptor[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentDescriptor> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentDescriptor>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentDescriptor>), P_0.GetType());
		}
		foreach (PersistentDescriptor item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentDescriptor> Read(List<PersistentDescriptor> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentDescriptor> list = new List<PersistentDescriptor>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentDescriptor>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentDescriptor> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDescriptor item = Read((PersistentDescriptor)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentDescriptor> list3 = new List<PersistentDescriptor>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentDescriptor> list4 = new List<PersistentDescriptor>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCollisionModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCollisionModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCollisionModule[]>), P_0.GetType());
		}
		PersistentCollisionModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCollisionModule[] array = value;
		foreach (PersistentCollisionModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCollisionModule[]> Read(PrimitiveContract<PersistentCollisionModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCollisionModule[]> primitiveContract = new PrimitiveContract<PersistentCollisionModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCollisionModule[] value = P_0.Value;
				List<PersistentCollisionModule> list = new List<PersistentCollisionModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCollisionModule item = (PersistentCollisionModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCollisionModule[] array = new PersistentCollisionModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCollisionModule[]> primitiveContract2 = new PrimitiveContract<PersistentCollisionModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCollisionModule[]> primitiveContract3 = new PrimitiveContract<PersistentCollisionModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCollisionModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCollisionModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCollisionModule>), P_0.GetType());
		}
		foreach (PersistentCollisionModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCollisionModule> Read(List<PersistentCollisionModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCollisionModule> list = new List<PersistentCollisionModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCollisionModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCollisionModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCollisionModule item = (PersistentCollisionModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCollisionModule> list3 = new List<PersistentCollisionModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCollisionModule> list4 = new List<PersistentCollisionModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentEmissionModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentEmissionModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentEmissionModule[]>), P_0.GetType());
		}
		PersistentEmissionModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentEmissionModule[] array = value;
		foreach (PersistentEmissionModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentEmissionModule[]> Read(PrimitiveContract<PersistentEmissionModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEmissionModule[]> primitiveContract = new PrimitiveContract<PersistentEmissionModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentEmissionModule[] value = P_0.Value;
				List<PersistentEmissionModule> list = new List<PersistentEmissionModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEmissionModule item = (PersistentEmissionModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentEmissionModule[] array = new PersistentEmissionModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentEmissionModule[]> primitiveContract2 = new PrimitiveContract<PersistentEmissionModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentEmissionModule[]> primitiveContract3 = new PrimitiveContract<PersistentEmissionModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentEmissionModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentEmissionModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentEmissionModule>), P_0.GetType());
		}
		foreach (PersistentEmissionModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentEmissionModule> Read(List<PersistentEmissionModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentEmissionModule> list = new List<PersistentEmissionModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentEmissionModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentEmissionModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentEmissionModule item = (PersistentEmissionModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentEmissionModule> list3 = new List<PersistentEmissionModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentEmissionModule> list4 = new List<PersistentEmissionModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentParticleSystem[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentParticleSystem[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentParticleSystem[]>), P_0.GetType());
		}
		PersistentParticleSystem[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentParticleSystem[] array = value;
		foreach (PersistentParticleSystem obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentParticleSystem[]> Read(PrimitiveContract<PersistentParticleSystem[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentParticleSystem[]> primitiveContract = new PrimitiveContract<PersistentParticleSystem[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentParticleSystem[] value = P_0.Value;
				List<PersistentParticleSystem> list = new List<PersistentParticleSystem>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentParticleSystem item = (PersistentParticleSystem)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentParticleSystem[] array = new PersistentParticleSystem[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentParticleSystem[]> primitiveContract2 = new PrimitiveContract<PersistentParticleSystem[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentParticleSystem[]> primitiveContract3 = new PrimitiveContract<PersistentParticleSystem[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentParticleSystem> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentParticleSystem>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentParticleSystem>), P_0.GetType());
		}
		foreach (PersistentParticleSystem item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentParticleSystem> Read(List<PersistentParticleSystem> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentParticleSystem> list = new List<PersistentParticleSystem>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentParticleSystem>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentParticleSystem> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentParticleSystem item = (PersistentParticleSystem)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentParticleSystem> list3 = new List<PersistentParticleSystem>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentParticleSystem> list4 = new List<PersistentParticleSystem>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTriggerModule[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTriggerModule[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTriggerModule[]>), P_0.GetType());
		}
		PersistentTriggerModule[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTriggerModule[] array = value;
		foreach (PersistentTriggerModule obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTriggerModule[]> Read(PrimitiveContract<PersistentTriggerModule[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTriggerModule[]> primitiveContract = new PrimitiveContract<PersistentTriggerModule[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTriggerModule[] value = P_0.Value;
				List<PersistentTriggerModule> list = new List<PersistentTriggerModule>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTriggerModule item = (PersistentTriggerModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTriggerModule[] array = new PersistentTriggerModule[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTriggerModule[]> primitiveContract2 = new PrimitiveContract<PersistentTriggerModule[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTriggerModule[]> primitiveContract3 = new PrimitiveContract<PersistentTriggerModule[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTriggerModule> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTriggerModule>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTriggerModule>), P_0.GetType());
		}
		foreach (PersistentTriggerModule item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTriggerModule> Read(List<PersistentTriggerModule> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTriggerModule> list = new List<PersistentTriggerModule>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTriggerModule>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTriggerModule> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTriggerModule item = (PersistentTriggerModule)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTriggerModule> list3 = new List<PersistentTriggerModule>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTriggerModule> list4 = new List<PersistentTriggerModule>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentCloth[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentCloth[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentCloth[]>), P_0.GetType());
		}
		PersistentCloth[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentCloth[] array = value;
		foreach (PersistentCloth obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentCloth[]> Read(PrimitiveContract<PersistentCloth[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCloth[]> primitiveContract = new PrimitiveContract<PersistentCloth[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentCloth[] value = P_0.Value;
				List<PersistentCloth> list = new List<PersistentCloth>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCloth item = (PersistentCloth)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentCloth[] array = new PersistentCloth[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentCloth[]> primitiveContract2 = new PrimitiveContract<PersistentCloth[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentCloth[]> primitiveContract3 = new PrimitiveContract<PersistentCloth[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentCloth> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentCloth>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentCloth>), P_0.GetType());
		}
		foreach (PersistentCloth item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentCloth> Read(List<PersistentCloth> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentCloth> list = new List<PersistentCloth>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentCloth>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentCloth> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentCloth item = (PersistentCloth)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentCloth> list3 = new List<PersistentCloth>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentCloth> list4 = new List<PersistentCloth>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMaterial[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMaterial[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMaterial[]>), P_0.GetType());
		}
		PersistentMaterial[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMaterial[] array = value;
		foreach (PersistentMaterial obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMaterial[]> Read(PrimitiveContract<PersistentMaterial[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMaterial[]> primitiveContract = new PrimitiveContract<PersistentMaterial[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMaterial[] value = P_0.Value;
				List<PersistentMaterial> list = new List<PersistentMaterial>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMaterial item = (PersistentMaterial)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMaterial[] array = new PersistentMaterial[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMaterial[]> primitiveContract2 = new PrimitiveContract<PersistentMaterial[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMaterial[]> primitiveContract3 = new PrimitiveContract<PersistentMaterial[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMaterial> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMaterial>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMaterial>), P_0.GetType());
		}
		foreach (PersistentMaterial item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMaterial> Read(List<PersistentMaterial> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMaterial> list = new List<PersistentMaterial>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMaterial>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMaterial> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMaterial item = (PersistentMaterial)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMaterial> list3 = new List<PersistentMaterial>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMaterial> list4 = new List<PersistentMaterial>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMesh[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMesh[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMesh[]>), P_0.GetType());
		}
		PersistentMesh[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMesh[] array = value;
		foreach (PersistentMesh obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMesh[]> Read(PrimitiveContract<PersistentMesh[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMesh[]> primitiveContract = new PrimitiveContract<PersistentMesh[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMesh[] value = P_0.Value;
				List<PersistentMesh> list = new List<PersistentMesh>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMesh item = (PersistentMesh)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMesh[] array = new PersistentMesh[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMesh[]> primitiveContract2 = new PrimitiveContract<PersistentMesh[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMesh[]> primitiveContract3 = new PrimitiveContract<PersistentMesh[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMesh> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMesh>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMesh>), P_0.GetType());
		}
		foreach (PersistentMesh item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMesh> Read(List<PersistentMesh> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMesh> list = new List<PersistentMesh>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMesh>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMesh> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMesh item = (PersistentMesh)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMesh> list3 = new List<PersistentMesh>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMesh> list4 = new List<PersistentMesh>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentObject[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentObject[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentObject[]>), P_0.GetType());
		}
		PersistentObject[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentObject[] array = value;
		foreach (PersistentObject obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentObject[]> Read(PrimitiveContract<PersistentObject[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentObject[]> primitiveContract = new PrimitiveContract<PersistentObject[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentObject[] value = P_0.Value;
				List<PersistentObject> list = new List<PersistentObject>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentObject item = (PersistentObject)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentObject[] array = new PersistentObject[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentObject[]> primitiveContract2 = new PrimitiveContract<PersistentObject[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentObject[]> primitiveContract3 = new PrimitiveContract<PersistentObject[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentObject> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentObject>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentObject>), P_0.GetType());
		}
		foreach (PersistentObject item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentObject> Read(List<PersistentObject> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentObject> list = new List<PersistentObject>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentObject>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentObject> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentObject item = (PersistentObject)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentObject> list3 = new List<PersistentObject>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentObject> list4 = new List<PersistentObject>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PersistentArgumentCache P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentArgumentCache))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentArgumentCache), P_0.GetType());
		}
		bool boolArgument = P_0.m_BoolArgument;
		if (boolArgument)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(boolArgument, P_1);
		}
		float floatArgument = P_0.m_FloatArgument;
		if (floatArgument != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(floatArgument, P_1);
		}
		int intArgument = P_0.m_IntArgument;
		if (intArgument != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(intArgument, P_1);
		}
		long objectArgument = P_0.m_ObjectArgument;
		if (objectArgument != 0L)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(objectArgument, P_1);
		}
		string objectArgumentAssemblyTypeName = P_0.m_ObjectArgumentAssemblyTypeName;
		if (objectArgumentAssemblyTypeName != null)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
			ProtoWriter.WriteString(objectArgumentAssemblyTypeName, P_1);
		}
		string stringArgument = P_0.m_StringArgument;
		if (stringArgument != null)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
			ProtoWriter.WriteString(stringArgument, P_1);
		}
	}

	private static PersistentArgumentCache Read(PersistentArgumentCache P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentArgumentCache persistentArgumentCache2 = new PersistentArgumentCache();
					ProtoReader.NoteObject(persistentArgumentCache2, P_1);
					P_0 = persistentArgumentCache2;
				}
				bool boolArgument = P_1.ReadBoolean();
				P_0.m_BoolArgument = boolArgument;
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentArgumentCache persistentArgumentCache6 = new PersistentArgumentCache();
					ProtoReader.NoteObject(persistentArgumentCache6, P_1);
					P_0 = persistentArgumentCache6;
				}
				float floatArgument = P_1.ReadSingle();
				P_0.m_FloatArgument = floatArgument;
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentArgumentCache persistentArgumentCache5 = new PersistentArgumentCache();
					ProtoReader.NoteObject(persistentArgumentCache5, P_1);
					P_0 = persistentArgumentCache5;
				}
				int intArgument = P_1.ReadInt32();
				P_0.m_IntArgument = intArgument;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentArgumentCache persistentArgumentCache7 = new PersistentArgumentCache();
					ProtoReader.NoteObject(persistentArgumentCache7, P_1);
					P_0 = persistentArgumentCache7;
				}
				long objectArgument = P_1.ReadInt64();
				P_0.m_ObjectArgument = objectArgument;
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentArgumentCache persistentArgumentCache3 = new PersistentArgumentCache();
					ProtoReader.NoteObject(persistentArgumentCache3, P_1);
					P_0 = persistentArgumentCache3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.m_ObjectArgumentAssemblyTypeName = text;
				}
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentArgumentCache persistentArgumentCache4 = new PersistentArgumentCache();
					ProtoReader.NoteObject(persistentArgumentCache4, P_1);
					P_0 = persistentArgumentCache4;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.m_StringArgument = text;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentArgumentCache persistentArgumentCache = new PersistentArgumentCache();
					ProtoReader.NoteObject(persistentArgumentCache, P_1);
					P_0 = persistentArgumentCache;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentArgumentCache persistentArgumentCache8 = new PersistentArgumentCache();
			ProtoReader.NoteObject(persistentArgumentCache8, P_1);
			P_0 = persistentArgumentCache8;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentArgumentCache[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentArgumentCache[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentArgumentCache[]>), P_0.GetType());
		}
		PersistentArgumentCache[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentArgumentCache[] array = value;
		foreach (PersistentArgumentCache obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentArgumentCache[]> Read(PrimitiveContract<PersistentArgumentCache[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentArgumentCache[]> primitiveContract = new PrimitiveContract<PersistentArgumentCache[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentArgumentCache[] value = P_0.Value;
				List<PersistentArgumentCache> list = new List<PersistentArgumentCache>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentArgumentCache item = Read((PersistentArgumentCache)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentArgumentCache[] array = new PersistentArgumentCache[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentArgumentCache[]> primitiveContract2 = new PrimitiveContract<PersistentArgumentCache[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentArgumentCache[]> primitiveContract3 = new PrimitiveContract<PersistentArgumentCache[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentArgumentCache> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentArgumentCache>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentArgumentCache>), P_0.GetType());
		}
		foreach (PersistentArgumentCache item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentArgumentCache> Read(List<PersistentArgumentCache> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentArgumentCache> list = new List<PersistentArgumentCache>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentArgumentCache>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentArgumentCache> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentArgumentCache item = Read((PersistentArgumentCache)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentArgumentCache> list3 = new List<PersistentArgumentCache>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentArgumentCache> list4 = new List<PersistentArgumentCache>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PersistentPersistentCall P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentPersistentCall))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentPersistentCall), P_0.GetType());
		}
		string typeName = P_0.TypeName;
		if (typeName != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(typeName, P_1);
		}
		PersistentArgumentCache arguments = P_0.m_Arguments;
		if (arguments != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			BclHelpers.WriteNetObject(arguments, P_1, 807, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		UnityEventCallState callState = P_0.m_CallState;
		if (callState != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			UnityEventCallState unityEventCallState = callState;
			switch (unityEventCallState)
			{
			case UnityEventCallState.Off:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case UnityEventCallState.EditorAndRuntime:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case UnityEventCallState.RuntimeOnly:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, unityEventCallState);
				break;
			}
		}
		string methodName = P_0.m_MethodName;
		if (methodName != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			ProtoWriter.WriteString(methodName, P_1);
		}
		PersistentListenerMode mode = P_0.m_Mode;
		if (mode != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			PersistentListenerMode persistentListenerMode = mode;
			switch (persistentListenerMode)
			{
			case PersistentListenerMode.EventDefined:
				ProtoWriter.WriteInt32(0, P_1);
				break;
			case PersistentListenerMode.Void:
				ProtoWriter.WriteInt32(1, P_1);
				break;
			case PersistentListenerMode.Object:
				ProtoWriter.WriteInt32(2, P_1);
				break;
			case PersistentListenerMode.Int:
				ProtoWriter.WriteInt32(3, P_1);
				break;
			case PersistentListenerMode.Float:
				ProtoWriter.WriteInt32(4, P_1);
				break;
			case PersistentListenerMode.String:
				ProtoWriter.WriteInt32(5, P_1);
				break;
			case PersistentListenerMode.Bool:
				ProtoWriter.WriteInt32(6, P_1);
				break;
			default:
				ProtoWriter.ThrowEnumException(P_1, persistentListenerMode);
				break;
			}
		}
		long target = P_0.m_Target;
		if (target != 0L)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(target, P_1);
		}
	}

	private static PersistentPersistentCall Read(PersistentPersistentCall P_0, ProtoReader P_1)
	{
		int num;
		UnityEventCallState callState = default(UnityEventCallState);
		PersistentListenerMode mode = default(PersistentListenerMode);
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentPersistentCall persistentPersistentCall6 = new PersistentPersistentCall();
					ProtoReader.NoteObject(persistentPersistentCall6, P_1);
					P_0 = persistentPersistentCall6;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.TypeName = text;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentPersistentCall persistentPersistentCall2 = new PersistentPersistentCall();
					ProtoReader.NoteObject(persistentPersistentCall2, P_1);
					P_0 = persistentPersistentCall2;
				}
				PersistentArgumentCache persistentArgumentCache = (PersistentArgumentCache)BclHelpers.ReadNetObject(P_0.m_Arguments, P_1, 807, typeof(PersistentArgumentCache), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentArgumentCache != null)
				{
					P_0.m_Arguments = persistentArgumentCache;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					PersistentPersistentCall persistentPersistentCall3 = new PersistentPersistentCall();
					ProtoReader.NoteObject(persistentPersistentCall3, P_1);
					P_0 = persistentPersistentCall3;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					callState = UnityEventCallState.Off;
					break;
				case 1:
					callState = UnityEventCallState.EditorAndRuntime;
					break;
				case 2:
					callState = UnityEventCallState.RuntimeOnly;
					break;
				default:
					P_1.ThrowEnumException(typeof(UnityEventCallState), num2);
					break;
				}
				callState = (P_0.m_CallState = callState);
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					PersistentPersistentCall persistentPersistentCall5 = new PersistentPersistentCall();
					ProtoReader.NoteObject(persistentPersistentCall5, P_1);
					P_0 = persistentPersistentCall5;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.m_MethodName = text;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					PersistentPersistentCall persistentPersistentCall7 = new PersistentPersistentCall();
					ProtoReader.NoteObject(persistentPersistentCall7, P_1);
					P_0 = persistentPersistentCall7;
				}
				int num2 = P_1.ReadInt32();
				switch (num2)
				{
				case 0:
					mode = PersistentListenerMode.EventDefined;
					break;
				case 1:
					mode = PersistentListenerMode.Void;
					break;
				case 2:
					mode = PersistentListenerMode.Object;
					break;
				case 3:
					mode = PersistentListenerMode.Int;
					break;
				case 4:
					mode = PersistentListenerMode.Float;
					break;
				case 5:
					mode = PersistentListenerMode.String;
					break;
				case 6:
					mode = PersistentListenerMode.Bool;
					break;
				default:
					P_1.ThrowEnumException(typeof(PersistentListenerMode), num2);
					break;
				}
				mode = (P_0.m_Mode = mode);
				break;
			}
			case 6:
			{
				if (P_0 == null)
				{
					PersistentPersistentCall persistentPersistentCall4 = new PersistentPersistentCall();
					ProtoReader.NoteObject(persistentPersistentCall4, P_1);
					P_0 = persistentPersistentCall4;
				}
				long target = P_1.ReadInt64();
				P_0.m_Target = target;
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentPersistentCall persistentPersistentCall = new PersistentPersistentCall();
					ProtoReader.NoteObject(persistentPersistentCall, P_1);
					P_0 = persistentPersistentCall;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentPersistentCall persistentPersistentCall8 = new PersistentPersistentCall();
			ProtoReader.NoteObject(persistentPersistentCall8, P_1);
			P_0 = persistentPersistentCall8;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentPersistentCall[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentPersistentCall[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentPersistentCall[]>), P_0.GetType());
		}
		PersistentPersistentCall[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentPersistentCall[] array = value;
		foreach (PersistentPersistentCall obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentPersistentCall[]> Read(PrimitiveContract<PersistentPersistentCall[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPersistentCall[]> primitiveContract = new PrimitiveContract<PersistentPersistentCall[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentPersistentCall[] value = P_0.Value;
				List<PersistentPersistentCall> list = new List<PersistentPersistentCall>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPersistentCall item = Read((PersistentPersistentCall)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPersistentCall[] array = new PersistentPersistentCall[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentPersistentCall[]> primitiveContract2 = new PrimitiveContract<PersistentPersistentCall[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentPersistentCall[]> primitiveContract3 = new PrimitiveContract<PersistentPersistentCall[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentPersistentCall> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentPersistentCall>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentPersistentCall>), P_0.GetType());
		}
		foreach (PersistentPersistentCall item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentPersistentCall> Read(List<PersistentPersistentCall> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentPersistentCall> list = new List<PersistentPersistentCall>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentPersistentCall>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentPersistentCall> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPersistentCall item = Read((PersistentPersistentCall)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentPersistentCall> list3 = new List<PersistentPersistentCall>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentPersistentCall> list4 = new List<PersistentPersistentCall>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PersistentUnityEventBase P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentUnityEventBase))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentUnityEventBase), P_0.GetType());
		}
		PersistentPersistentCall[] calls = P_0.m_calls;
		if (calls == null)
		{
			return;
		}
		PersistentPersistentCall[] array = calls;
		foreach (PersistentPersistentCall obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PersistentUnityEventBase Read(PersistentUnityEventBase P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PersistentUnityEventBase persistentUnityEventBase = new PersistentUnityEventBase();
					ProtoReader.NoteObject(persistentUnityEventBase, P_1);
					P_0 = persistentUnityEventBase;
				}
				PersistentPersistentCall[] calls = P_0.m_calls;
				List<PersistentPersistentCall> list = new List<PersistentPersistentCall>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentPersistentCall item = Read((PersistentPersistentCall)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentPersistentCall[] array = new PersistentPersistentCall[(fieldNumber = ((calls != null) ? calls.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					calls.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.m_calls = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PersistentUnityEventBase persistentUnityEventBase2 = new PersistentUnityEventBase();
					ProtoReader.NoteObject(persistentUnityEventBase2, P_1);
					P_0 = persistentUnityEventBase2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PersistentUnityEventBase persistentUnityEventBase3 = new PersistentUnityEventBase();
			ProtoReader.NoteObject(persistentUnityEventBase3, P_1);
			P_0 = persistentUnityEventBase3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentUnityEventBase[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentUnityEventBase[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentUnityEventBase[]>), P_0.GetType());
		}
		PersistentUnityEventBase[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentUnityEventBase[] array = value;
		foreach (PersistentUnityEventBase obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentUnityEventBase[]> Read(PrimitiveContract<PersistentUnityEventBase[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentUnityEventBase[]> primitiveContract = new PrimitiveContract<PersistentUnityEventBase[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentUnityEventBase[] value = P_0.Value;
				List<PersistentUnityEventBase> list = new List<PersistentUnityEventBase>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentUnityEventBase item = Read((PersistentUnityEventBase)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentUnityEventBase[] array = new PersistentUnityEventBase[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentUnityEventBase[]> primitiveContract2 = new PrimitiveContract<PersistentUnityEventBase[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentUnityEventBase[]> primitiveContract3 = new PrimitiveContract<PersistentUnityEventBase[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentUnityEventBase> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentUnityEventBase>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentUnityEventBase>), P_0.GetType());
		}
		foreach (PersistentUnityEventBase item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentUnityEventBase> Read(List<PersistentUnityEventBase> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentUnityEventBase> list = new List<PersistentUnityEventBase>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentUnityEventBase>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentUnityEventBase> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentUnityEventBase item = Read((PersistentUnityEventBase)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentUnityEventBase> list3 = new List<PersistentUnityEventBase>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentUnityEventBase> list4 = new List<PersistentUnityEventBase>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(IntArray P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(IntArray))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(IntArray), P_0.GetType());
		}
		int[] array = P_0.Array;
		if (array != null)
		{
			int[] array2 = array;
			foreach (int value in array2)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
				ProtoWriter.WriteInt32(value, P_1);
			}
		}
	}

	private static IntArray Read(IntArray P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					IntArray intArray = new IntArray();
					ProtoReader.NoteObject(intArray, P_1);
					P_0 = intArray;
				}
				int[] array = P_0.Array;
				List<int> list = new List<int>();
				int fieldNumber;
				if (P_1.WireType != WireType.String)
				{
					fieldNumber = P_1.FieldNumber;
					do
					{
						list.Add(P_1.ReadInt32());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
				}
				else
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					while (ProtoReader.HasSubValue(WireType.Variant, P_1))
					{
						list.Add(P_1.ReadInt32());
					}
					ProtoReader.EndSubItem(token, P_1);
				}
				int[] array2 = new int[(fieldNumber = ((array != null) ? array.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					array.CopyTo(array2, 0);
				}
				list.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.Array = array2;
				}
			}
			else
			{
				if (P_0 == null)
				{
					IntArray intArray2 = new IntArray();
					ProtoReader.NoteObject(intArray2, P_1);
					P_0 = intArray2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			IntArray intArray3 = new IntArray();
			ProtoReader.NoteObject(intArray3, P_1);
			P_0 = intArray3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<IntArray[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<IntArray[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<IntArray[]>), P_0.GetType());
		}
		IntArray[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		IntArray[] array = value;
		foreach (IntArray obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<IntArray[]> Read(PrimitiveContract<IntArray[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<IntArray[]> primitiveContract = new PrimitiveContract<IntArray[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				IntArray[] value = P_0.Value;
				List<IntArray> list = new List<IntArray>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					IntArray item = Read((IntArray)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				IntArray[] array = new IntArray[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<IntArray[]> primitiveContract2 = new PrimitiveContract<IntArray[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<IntArray[]> primitiveContract3 = new PrimitiveContract<IntArray[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<IntArray> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<IntArray>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<IntArray>), P_0.GetType());
		}
		foreach (IntArray item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<IntArray> Read(List<IntArray> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<IntArray> list = new List<IntArray>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<IntArray>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<IntArray> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					IntArray item = Read((IntArray)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<IntArray> list3 = new List<IntArray>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<IntArray> list4 = new List<IntArray>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PrimitiveContract[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PrimitiveContract[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PrimitiveContract[]>), P_0.GetType());
		}
		PrimitiveContract[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PrimitiveContract[] array = value;
		foreach (PrimitiveContract obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PrimitiveContract[]> Read(PrimitiveContract<PrimitiveContract[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PrimitiveContract[]> primitiveContract = new PrimitiveContract<PrimitiveContract[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PrimitiveContract[] value = P_0.Value;
				List<PrimitiveContract> list = new List<PrimitiveContract>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PrimitiveContract item = Read((PrimitiveContract)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PrimitiveContract[] array = new PrimitiveContract[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PrimitiveContract[]> primitiveContract2 = new PrimitiveContract<PrimitiveContract[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PrimitiveContract[]> primitiveContract3 = new PrimitiveContract<PrimitiveContract[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PrimitiveContract> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PrimitiveContract>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PrimitiveContract>), P_0.GetType());
		}
		foreach (PrimitiveContract item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PrimitiveContract> Read(List<PrimitiveContract> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PrimitiveContract> list = new List<PrimitiveContract>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PrimitiveContract>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PrimitiveContract> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PrimitiveContract item = Read((PrimitiveContract)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PrimitiveContract> list3 = new List<PrimitiveContract>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PrimitiveContract> list4 = new List<PrimitiveContract>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(DataContract P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(DataContract))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(DataContract), P_0.GetType());
		}
		object data = P_0.Data;
		if (data != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteNetObject(data, P_1, -1, BclHelpers.NetObjectOptions.DynamicType);
		}
	}

	private static DataContract Read(DataContract P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					DataContract dataContract = new DataContract();
					ProtoReader.NoteObject(dataContract, P_1);
					P_0 = dataContract;
				}
				object obj = BclHelpers.ReadNetObject(P_0.Data, P_1, -1, null, BclHelpers.NetObjectOptions.DynamicType);
				if (obj != null)
				{
					P_0.Data = obj;
				}
			}
			else
			{
				if (P_0 == null)
				{
					DataContract dataContract2 = new DataContract();
					ProtoReader.NoteObject(dataContract2, P_1);
					P_0 = dataContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			DataContract dataContract3 = new DataContract();
			ProtoReader.NoteObject(dataContract3, P_1);
			P_0 = dataContract3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<DataContract[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<DataContract[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<DataContract[]>), P_0.GetType());
		}
		DataContract[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		DataContract[] array = value;
		foreach (DataContract obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<DataContract[]> Read(PrimitiveContract<DataContract[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<DataContract[]> primitiveContract = new PrimitiveContract<DataContract[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				DataContract[] value = P_0.Value;
				List<DataContract> list = new List<DataContract>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					DataContract item = Read((DataContract)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				DataContract[] array = new DataContract[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<DataContract[]> primitiveContract2 = new PrimitiveContract<DataContract[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<DataContract[]> primitiveContract3 = new PrimitiveContract<DataContract[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<DataContract> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<DataContract>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<DataContract>), P_0.GetType());
		}
		foreach (DataContract item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<DataContract> Read(List<DataContract> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<DataContract> list = new List<DataContract>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<DataContract>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<DataContract> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					DataContract item = Read((DataContract)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<DataContract> list3 = new List<DataContract>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<DataContract> list4 = new List<DataContract>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentScript[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentScript[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentScript[]>), P_0.GetType());
		}
		PersistentScript[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentScript[] array = value;
		foreach (PersistentScript obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentScript[]> Read(PrimitiveContract<PersistentScript[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScript[]> primitiveContract = new PrimitiveContract<PersistentScript[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentScript[] value = P_0.Value;
				List<PersistentScript> list = new List<PersistentScript>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScript item = (PersistentScript)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentScript[] array = new PersistentScript[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScript[]> primitiveContract2 = new PrimitiveContract<PersistentScript[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentScript[]> primitiveContract3 = new PrimitiveContract<PersistentScript[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentScript> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentScript>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentScript>), P_0.GetType());
		}
		foreach (PersistentScript item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentScript> Read(List<PersistentScript> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentScript> list = new List<PersistentScript>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentScript>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentScript> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScript item = (PersistentScript)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentScript> list3 = new List<PersistentScript>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentScript> list4 = new List<PersistentScript>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTexture[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTexture[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTexture[]>), P_0.GetType());
		}
		PersistentTexture[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTexture[] array = value;
		foreach (PersistentTexture obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTexture[]> Read(PrimitiveContract<PersistentTexture[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTexture[]> primitiveContract = new PrimitiveContract<PersistentTexture[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTexture[] value = P_0.Value;
				List<PersistentTexture> list = new List<PersistentTexture>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTexture item = (PersistentTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTexture[] array = new PersistentTexture[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTexture[]> primitiveContract2 = new PrimitiveContract<PersistentTexture[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTexture[]> primitiveContract3 = new PrimitiveContract<PersistentTexture[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTexture> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTexture>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTexture>), P_0.GetType());
		}
		foreach (PersistentTexture item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTexture> Read(List<PersistentTexture> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTexture> list = new List<PersistentTexture>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTexture>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTexture> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTexture item = (PersistentTexture)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTexture> list3 = new List<PersistentTexture>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTexture> list4 = new List<PersistentTexture>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTexture2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTexture2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTexture2D[]>), P_0.GetType());
		}
		PersistentTexture2D[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTexture2D[] array = value;
		foreach (PersistentTexture2D obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTexture2D[]> Read(PrimitiveContract<PersistentTexture2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTexture2D[]> primitiveContract = new PrimitiveContract<PersistentTexture2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTexture2D[] value = P_0.Value;
				List<PersistentTexture2D> list = new List<PersistentTexture2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTexture2D item = (PersistentTexture2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTexture2D[] array = new PersistentTexture2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTexture2D[]> primitiveContract2 = new PrimitiveContract<PersistentTexture2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTexture2D[]> primitiveContract3 = new PrimitiveContract<PersistentTexture2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTexture2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTexture2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTexture2D>), P_0.GetType());
		}
		foreach (PersistentTexture2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTexture2D> Read(List<PersistentTexture2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTexture2D> list = new List<PersistentTexture2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTexture2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTexture2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTexture2D item = (PersistentTexture2D)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTexture2D> list3 = new List<PersistentTexture2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTexture2D> list4 = new List<PersistentTexture2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentTransform[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentTransform[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentTransform[]>), P_0.GetType());
		}
		PersistentTransform[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentTransform[] array = value;
		foreach (PersistentTransform obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentTransform[]> Read(PrimitiveContract<PersistentTransform[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTransform[]> primitiveContract = new PrimitiveContract<PersistentTransform[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentTransform[] value = P_0.Value;
				List<PersistentTransform> list = new List<PersistentTransform>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTransform item = (PersistentTransform)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentTransform[] array = new PersistentTransform[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentTransform[]> primitiveContract2 = new PrimitiveContract<PersistentTransform[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentTransform[]> primitiveContract3 = new PrimitiveContract<PersistentTransform[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentTransform> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentTransform>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentTransform>), P_0.GetType());
		}
		foreach (PersistentTransform item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentTransform> Read(List<PersistentTransform> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentTransform> list = new List<PersistentTransform>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentTransform>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentTransform> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentTransform item = (PersistentTransform)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentTransform> list3 = new List<PersistentTransform>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentTransform> list4 = new List<PersistentTransform>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentButton[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentButton[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentButton[]>), P_0.GetType());
		}
		PersistentButton[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentButton[] array = value;
		foreach (PersistentButton obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentButton[]> Read(PrimitiveContract<PersistentButton[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentButton[]> primitiveContract = new PrimitiveContract<PersistentButton[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentButton[] value = P_0.Value;
				List<PersistentButton> list = new List<PersistentButton>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentButton item = (PersistentButton)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentButton[] array = new PersistentButton[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentButton[]> primitiveContract2 = new PrimitiveContract<PersistentButton[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentButton[]> primitiveContract3 = new PrimitiveContract<PersistentButton[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentButton> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentButton>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentButton>), P_0.GetType());
		}
		foreach (PersistentButton item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentButton> Read(List<PersistentButton> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentButton> list = new List<PersistentButton>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentButton>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentButton> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentButton item = (PersistentButton)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentButton> list3 = new List<PersistentButton>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentButton> list4 = new List<PersistentButton>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentDropdown[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentDropdown[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentDropdown[]>), P_0.GetType());
		}
		PersistentDropdown[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentDropdown[] array = value;
		foreach (PersistentDropdown obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentDropdown[]> Read(PrimitiveContract<PersistentDropdown[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentDropdown[]> primitiveContract = new PrimitiveContract<PersistentDropdown[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentDropdown[] value = P_0.Value;
				List<PersistentDropdown> list = new List<PersistentDropdown>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDropdown item = (PersistentDropdown)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentDropdown[] array = new PersistentDropdown[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentDropdown[]> primitiveContract2 = new PrimitiveContract<PersistentDropdown[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentDropdown[]> primitiveContract3 = new PrimitiveContract<PersistentDropdown[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentDropdown> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentDropdown>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentDropdown>), P_0.GetType());
		}
		foreach (PersistentDropdown item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentDropdown> Read(List<PersistentDropdown> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentDropdown> list = new List<PersistentDropdown>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentDropdown>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentDropdown> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDropdown item = (PersistentDropdown)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentDropdown> list3 = new List<PersistentDropdown>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentDropdown> list4 = new List<PersistentDropdown>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentInputField[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentInputField[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentInputField[]>), P_0.GetType());
		}
		PersistentInputField[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentInputField[] array = value;
		foreach (PersistentInputField obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentInputField[]> Read(PrimitiveContract<PersistentInputField[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentInputField[]> primitiveContract = new PrimitiveContract<PersistentInputField[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentInputField[] value = P_0.Value;
				List<PersistentInputField> list = new List<PersistentInputField>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentInputField item = (PersistentInputField)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentInputField[] array = new PersistentInputField[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentInputField[]> primitiveContract2 = new PrimitiveContract<PersistentInputField[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentInputField[]> primitiveContract3 = new PrimitiveContract<PersistentInputField[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentInputField> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentInputField>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentInputField>), P_0.GetType());
		}
		foreach (PersistentInputField item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentInputField> Read(List<PersistentInputField> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentInputField> list = new List<PersistentInputField>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentInputField>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentInputField> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentInputField item = (PersistentInputField)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentInputField> list3 = new List<PersistentInputField>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentInputField> list4 = new List<PersistentInputField>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentMaskableGraphic[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentMaskableGraphic[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentMaskableGraphic[]>), P_0.GetType());
		}
		PersistentMaskableGraphic[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentMaskableGraphic[] array = value;
		foreach (PersistentMaskableGraphic obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentMaskableGraphic[]> Read(PrimitiveContract<PersistentMaskableGraphic[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMaskableGraphic[]> primitiveContract = new PrimitiveContract<PersistentMaskableGraphic[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentMaskableGraphic[] value = P_0.Value;
				List<PersistentMaskableGraphic> list = new List<PersistentMaskableGraphic>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMaskableGraphic item = (PersistentMaskableGraphic)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentMaskableGraphic[] array = new PersistentMaskableGraphic[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentMaskableGraphic[]> primitiveContract2 = new PrimitiveContract<PersistentMaskableGraphic[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentMaskableGraphic[]> primitiveContract3 = new PrimitiveContract<PersistentMaskableGraphic[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentMaskableGraphic> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentMaskableGraphic>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentMaskableGraphic>), P_0.GetType());
		}
		foreach (PersistentMaskableGraphic item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentMaskableGraphic> Read(List<PersistentMaskableGraphic> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentMaskableGraphic> list = new List<PersistentMaskableGraphic>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentMaskableGraphic>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentMaskableGraphic> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentMaskableGraphic item = (PersistentMaskableGraphic)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentMaskableGraphic> list3 = new List<PersistentMaskableGraphic>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentMaskableGraphic> list4 = new List<PersistentMaskableGraphic>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentNavigation[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentNavigation[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentNavigation[]>), P_0.GetType());
		}
		PersistentNavigation[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentNavigation[] array = value;
		foreach (PersistentNavigation obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentNavigation[]> Read(PrimitiveContract<PersistentNavigation[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNavigation[]> primitiveContract = new PrimitiveContract<PersistentNavigation[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentNavigation[] value = P_0.Value;
				List<PersistentNavigation> list = new List<PersistentNavigation>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNavigation item = (PersistentNavigation)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentNavigation[] array = new PersistentNavigation[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentNavigation[]> primitiveContract2 = new PrimitiveContract<PersistentNavigation[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentNavigation[]> primitiveContract3 = new PrimitiveContract<PersistentNavigation[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentNavigation> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentNavigation>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentNavigation>), P_0.GetType());
		}
		foreach (PersistentNavigation item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentNavigation> Read(List<PersistentNavigation> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentNavigation> list = new List<PersistentNavigation>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentNavigation>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentNavigation> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentNavigation item = (PersistentNavigation)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentNavigation> list3 = new List<PersistentNavigation>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentNavigation> list4 = new List<PersistentNavigation>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentOptionData[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentOptionData[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentOptionData[]>), P_0.GetType());
		}
		PersistentOptionData[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentOptionData[] array = value;
		foreach (PersistentOptionData obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentOptionData[]> Read(PrimitiveContract<PersistentOptionData[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOptionData[]> primitiveContract = new PrimitiveContract<PersistentOptionData[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentOptionData[] value = P_0.Value;
				List<PersistentOptionData> list = new List<PersistentOptionData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOptionData item = (PersistentOptionData)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentOptionData[] array = new PersistentOptionData[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentOptionData[]> primitiveContract2 = new PrimitiveContract<PersistentOptionData[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentOptionData[]> primitiveContract3 = new PrimitiveContract<PersistentOptionData[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentOptionData> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentOptionData>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentOptionData>), P_0.GetType());
		}
		foreach (PersistentOptionData item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentOptionData> Read(List<PersistentOptionData> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentOptionData> list = new List<PersistentOptionData>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentOptionData>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentOptionData> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentOptionData item = (PersistentOptionData)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentOptionData> list3 = new List<PersistentOptionData>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentOptionData> list4 = new List<PersistentOptionData>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentScrollbar[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentScrollbar[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentScrollbar[]>), P_0.GetType());
		}
		PersistentScrollbar[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentScrollbar[] array = value;
		foreach (PersistentScrollbar obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentScrollbar[]> Read(PrimitiveContract<PersistentScrollbar[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScrollbar[]> primitiveContract = new PrimitiveContract<PersistentScrollbar[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentScrollbar[] value = P_0.Value;
				List<PersistentScrollbar> list = new List<PersistentScrollbar>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScrollbar item = (PersistentScrollbar)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentScrollbar[] array = new PersistentScrollbar[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScrollbar[]> primitiveContract2 = new PrimitiveContract<PersistentScrollbar[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentScrollbar[]> primitiveContract3 = new PrimitiveContract<PersistentScrollbar[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentScrollbar> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentScrollbar>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentScrollbar>), P_0.GetType());
		}
		foreach (PersistentScrollbar item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentScrollbar> Read(List<PersistentScrollbar> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentScrollbar> list = new List<PersistentScrollbar>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentScrollbar>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentScrollbar> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScrollbar item = (PersistentScrollbar)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentScrollbar> list3 = new List<PersistentScrollbar>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentScrollbar> list4 = new List<PersistentScrollbar>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentScrollRect[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentScrollRect[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentScrollRect[]>), P_0.GetType());
		}
		PersistentScrollRect[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentScrollRect[] array = value;
		foreach (PersistentScrollRect obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentScrollRect[]> Read(PrimitiveContract<PersistentScrollRect[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScrollRect[]> primitiveContract = new PrimitiveContract<PersistentScrollRect[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentScrollRect[] value = P_0.Value;
				List<PersistentScrollRect> list = new List<PersistentScrollRect>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScrollRect item = (PersistentScrollRect)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentScrollRect[] array = new PersistentScrollRect[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScrollRect[]> primitiveContract2 = new PrimitiveContract<PersistentScrollRect[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentScrollRect[]> primitiveContract3 = new PrimitiveContract<PersistentScrollRect[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentScrollRect> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentScrollRect>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentScrollRect>), P_0.GetType());
		}
		foreach (PersistentScrollRect item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentScrollRect> Read(List<PersistentScrollRect> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentScrollRect> list = new List<PersistentScrollRect>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentScrollRect>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentScrollRect> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScrollRect item = (PersistentScrollRect)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentScrollRect> list3 = new List<PersistentScrollRect>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentScrollRect> list4 = new List<PersistentScrollRect>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSelectable[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSelectable[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSelectable[]>), P_0.GetType());
		}
		PersistentSelectable[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSelectable[] array = value;
		foreach (PersistentSelectable obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSelectable[]> Read(PrimitiveContract<PersistentSelectable[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSelectable[]> primitiveContract = new PrimitiveContract<PersistentSelectable[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSelectable[] value = P_0.Value;
				List<PersistentSelectable> list = new List<PersistentSelectable>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSelectable item = (PersistentSelectable)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSelectable[] array = new PersistentSelectable[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSelectable[]> primitiveContract2 = new PrimitiveContract<PersistentSelectable[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSelectable[]> primitiveContract3 = new PrimitiveContract<PersistentSelectable[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSelectable> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSelectable>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSelectable>), P_0.GetType());
		}
		foreach (PersistentSelectable item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSelectable> Read(List<PersistentSelectable> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSelectable> list = new List<PersistentSelectable>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSelectable>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSelectable> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSelectable item = (PersistentSelectable)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSelectable> list3 = new List<PersistentSelectable>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSelectable> list4 = new List<PersistentSelectable>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSlider[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSlider[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSlider[]>), P_0.GetType());
		}
		PersistentSlider[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSlider[] array = value;
		foreach (PersistentSlider obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSlider[]> Read(PrimitiveContract<PersistentSlider[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSlider[]> primitiveContract = new PrimitiveContract<PersistentSlider[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSlider[] value = P_0.Value;
				List<PersistentSlider> list = new List<PersistentSlider>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSlider item = (PersistentSlider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSlider[] array = new PersistentSlider[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSlider[]> primitiveContract2 = new PrimitiveContract<PersistentSlider[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSlider[]> primitiveContract3 = new PrimitiveContract<PersistentSlider[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSlider> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSlider>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSlider>), P_0.GetType());
		}
		foreach (PersistentSlider item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSlider> Read(List<PersistentSlider> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSlider> list = new List<PersistentSlider>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSlider>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSlider> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSlider item = (PersistentSlider)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSlider> list3 = new List<PersistentSlider>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSlider> list4 = new List<PersistentSlider>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentSpriteState[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentSpriteState[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentSpriteState[]>), P_0.GetType());
		}
		PersistentSpriteState[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentSpriteState[] array = value;
		foreach (PersistentSpriteState obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write((PersistentData)obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentSpriteState[]> Read(PrimitiveContract<PersistentSpriteState[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSpriteState[]> primitiveContract = new PrimitiveContract<PersistentSpriteState[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentSpriteState[] value = P_0.Value;
				List<PersistentSpriteState> list = new List<PersistentSpriteState>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSpriteState item = (PersistentSpriteState)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentSpriteState[] array = new PersistentSpriteState[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentSpriteState[]> primitiveContract2 = new PrimitiveContract<PersistentSpriteState[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentSpriteState[]> primitiveContract3 = new PrimitiveContract<PersistentSpriteState[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentSpriteState> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentSpriteState>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentSpriteState>), P_0.GetType());
		}
		foreach (PersistentSpriteState item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write((PersistentData)item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentSpriteState> Read(List<PersistentSpriteState> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentSpriteState> list = new List<PersistentSpriteState>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentSpriteState>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentSpriteState> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentSpriteState item = (PersistentSpriteState)Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentSpriteState> list3 = new List<PersistentSpriteState>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentSpriteState> list4 = new List<PersistentSpriteState>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PersistentScene P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PersistentScene))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PersistentScene), P_0.GetType());
		}
		PersistentData[] data = P_0.Data;
		if (data != null)
		{
			PersistentData[] array = data;
			foreach (PersistentData obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
					Write(obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		PersistentDescriptor[] descriptors = P_0.Descriptors;
		if (descriptors == null)
		{
			return;
		}
		PersistentDescriptor[] array2 = descriptors;
		foreach (PersistentDescriptor obj2 in array2)
		{
			if (obj2 != null)
			{
				ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj2, P_1);
				Write(obj2, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PersistentScene Read(PersistentScene P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					PersistentScene persistentScene2 = new PersistentScene();
					ProtoReader.NoteObject(persistentScene2, P_1);
					P_0 = persistentScene2;
				}
				PersistentData[] data = P_0.Data;
				List<PersistentData> list = new List<PersistentData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentData item = Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentData[] array = new PersistentData[(fieldNumber = ((data != null) ? data.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					data.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Data = array;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					PersistentScene persistentScene3 = new PersistentScene();
					ProtoReader.NoteObject(persistentScene3, P_1);
					P_0 = persistentScene3;
				}
				PersistentDescriptor[] descriptors = P_0.Descriptors;
				List<PersistentDescriptor> list2 = new List<PersistentDescriptor>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentDescriptor item2 = Read((PersistentDescriptor)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item2);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentDescriptor[] array2 = new PersistentDescriptor[(fieldNumber = ((descriptors != null) ? descriptors.Length : 0)) + list2.Count];
				if (fieldNumber != 0)
				{
					descriptors.CopyTo(array2, 0);
				}
				list2.CopyTo(array2, fieldNumber);
				array2 = array2;
				if (array2 != null)
				{
					P_0.Descriptors = array2;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					PersistentScene persistentScene = new PersistentScene();
					ProtoReader.NoteObject(persistentScene, P_1);
					P_0 = persistentScene;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			PersistentScene persistentScene4 = new PersistentScene();
			ProtoReader.NoteObject(persistentScene4, P_1);
			P_0 = persistentScene4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<PersistentScene[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PersistentScene[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PersistentScene[]>), P_0.GetType());
		}
		PersistentScene[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		PersistentScene[] array = value;
		foreach (PersistentScene obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PersistentScene[]> Read(PrimitiveContract<PersistentScene[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScene[]> primitiveContract = new PrimitiveContract<PersistentScene[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PersistentScene[] value = P_0.Value;
				List<PersistentScene> list = new List<PersistentScene>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScene item = Read((PersistentScene)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentScene[] array = new PersistentScene[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PersistentScene[]> primitiveContract2 = new PrimitiveContract<PersistentScene[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PersistentScene[]> primitiveContract3 = new PrimitiveContract<PersistentScene[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PersistentScene> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PersistentScene>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PersistentScene>), P_0.GetType());
		}
		foreach (PersistentScene item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PersistentScene> Read(List<PersistentScene> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PersistentScene> list = new List<PersistentScene>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PersistentScene>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PersistentScene> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentScene item = Read((PersistentScene)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PersistentScene> list3 = new List<PersistentScene>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PersistentScene> list4 = new List<PersistentScene>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(NilContainer P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(NilContainer))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(NilContainer), P_0.GetType());
		}
	}

	private static NilContainer Read(NilContainer P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				NilContainer nilContainer = new NilContainer();
				ProtoReader.NoteObject(nilContainer, P_1);
				P_0 = nilContainer;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			NilContainer nilContainer2 = new NilContainer();
			ProtoReader.NoteObject(nilContainer2, P_1);
			P_0 = nilContainer2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<NilContainer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<NilContainer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<NilContainer[]>), P_0.GetType());
		}
		NilContainer[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		NilContainer[] array = value;
		foreach (NilContainer obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<NilContainer[]> Read(PrimitiveContract<NilContainer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<NilContainer[]> primitiveContract = new PrimitiveContract<NilContainer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				NilContainer[] value = P_0.Value;
				List<NilContainer> list = new List<NilContainer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NilContainer item = Read((NilContainer)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				NilContainer[] array = new NilContainer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<NilContainer[]> primitiveContract2 = new PrimitiveContract<NilContainer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<NilContainer[]> primitiveContract3 = new PrimitiveContract<NilContainer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<NilContainer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<NilContainer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<NilContainer>), P_0.GetType());
		}
		foreach (NilContainer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<NilContainer> Read(List<NilContainer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<NilContainer> list = new List<NilContainer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<NilContainer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<NilContainer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NilContainer item = Read((NilContainer)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<NilContainer> list3 = new List<NilContainer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<NilContainer> list4 = new List<NilContainer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ProjectItemMeta P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(ProjectItemMeta))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ProjectItemMeta), P_0.GetType());
		}
		AssetBundleDescriptor bundleDescriptor = P_0.BundleDescriptor;
		if (bundleDescriptor != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(bundleDescriptor, P_1);
			Write(bundleDescriptor, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		PersistentDescriptor descriptor = P_0.Descriptor;
		if (descriptor != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			BclHelpers.WriteNetObject(descriptor, P_1, 788, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
		bool isExposedFromEditor = P_0.IsExposedFromEditor;
		if (isExposedFromEditor)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(isExposedFromEditor, P_1);
		}
		string name = P_0.Name;
		if (name != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			ProtoWriter.WriteString(name, P_1);
		}
		int typeCode = P_0.TypeCode;
		if (typeCode != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(typeCode, P_1);
		}
	}

	private static ProjectItemMeta Read(ProjectItemMeta P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					ProjectItemMeta projectItemMeta2 = new ProjectItemMeta();
					ProtoReader.NoteObject(projectItemMeta2, P_1);
					P_0 = projectItemMeta2;
				}
				AssetBundleDescriptor bundleDescriptor = P_0.BundleDescriptor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				AssetBundleDescriptor assetBundleDescriptor = Read(bundleDescriptor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				AssetBundleDescriptor assetBundleDescriptor2 = assetBundleDescriptor;
				if (assetBundleDescriptor2 != null)
				{
					P_0.BundleDescriptor = assetBundleDescriptor2;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					ProjectItemMeta projectItemMeta5 = new ProjectItemMeta();
					ProtoReader.NoteObject(projectItemMeta5, P_1);
					P_0 = projectItemMeta5;
				}
				PersistentDescriptor persistentDescriptor = (PersistentDescriptor)BclHelpers.ReadNetObject(P_0.Descriptor, P_1, 788, typeof(PersistentDescriptor), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (persistentDescriptor != null)
				{
					P_0.Descriptor = persistentDescriptor;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					ProjectItemMeta projectItemMeta6 = new ProjectItemMeta();
					ProtoReader.NoteObject(projectItemMeta6, P_1);
					P_0 = projectItemMeta6;
				}
				bool isExposedFromEditor = P_1.ReadBoolean();
				P_0.IsExposedFromEditor = isExposedFromEditor;
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					ProjectItemMeta projectItemMeta3 = new ProjectItemMeta();
					ProtoReader.NoteObject(projectItemMeta3, P_1);
					P_0 = projectItemMeta3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.Name = text;
				}
				break;
			}
			case 5:
			{
				if (P_0 == null)
				{
					ProjectItemMeta projectItemMeta4 = new ProjectItemMeta();
					ProtoReader.NoteObject(projectItemMeta4, P_1);
					P_0 = projectItemMeta4;
				}
				int typeCode = P_1.ReadInt32();
				P_0.TypeCode = typeCode;
				break;
			}
			default:
				if (P_0 == null)
				{
					ProjectItemMeta projectItemMeta = new ProjectItemMeta();
					ProtoReader.NoteObject(projectItemMeta, P_1);
					P_0 = projectItemMeta;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			ProjectItemMeta projectItemMeta7 = new ProjectItemMeta();
			ProtoReader.NoteObject(projectItemMeta7, P_1);
			P_0 = projectItemMeta7;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ProjectItemMeta[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ProjectItemMeta[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ProjectItemMeta[]>), P_0.GetType());
		}
		ProjectItemMeta[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		ProjectItemMeta[] array = value;
		foreach (ProjectItemMeta obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ProjectItemMeta[]> Read(PrimitiveContract<ProjectItemMeta[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectItemMeta[]> primitiveContract = new PrimitiveContract<ProjectItemMeta[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ProjectItemMeta[] value = P_0.Value;
				List<ProjectItemMeta> list = new List<ProjectItemMeta>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectItemMeta item = Read((ProjectItemMeta)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ProjectItemMeta[] array = new ProjectItemMeta[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectItemMeta[]> primitiveContract2 = new PrimitiveContract<ProjectItemMeta[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ProjectItemMeta[]> primitiveContract3 = new PrimitiveContract<ProjectItemMeta[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ProjectItemMeta> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ProjectItemMeta>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ProjectItemMeta>), P_0.GetType());
		}
		foreach (ProjectItemMeta item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ProjectItemMeta> Read(List<ProjectItemMeta> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ProjectItemMeta> list = new List<ProjectItemMeta>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ProjectItemMeta>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ProjectItemMeta> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectItemMeta item = Read((ProjectItemMeta)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ProjectItemMeta> list3 = new List<ProjectItemMeta>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ProjectItemMeta> list4 = new List<ProjectItemMeta>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ProjectItemData P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(ProjectItemData))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ProjectItemData), P_0.GetType());
		}
		PersistentData[] persistentData = P_0.PersistentData;
		if (persistentData != null)
		{
			PersistentData[] array = persistentData;
			foreach (PersistentData obj in array)
			{
				if (obj != null)
				{
					ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
					SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
					Write(obj, P_1);
					ProtoWriter.EndSubItem(token, P_1);
				}
			}
		}
		byte[] rawData = P_0.RawData;
		if (rawData != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			ProtoWriter.WriteBytes(rawData, P_1);
		}
	}

	private static ProjectItemData Read(ProjectItemData P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					ProjectItemData projectItemData2 = new ProjectItemData();
					ProtoReader.NoteObject(projectItemData2, P_1);
					P_0 = projectItemData2;
				}
				PersistentData[] persistentData = P_0.PersistentData;
				List<PersistentData> list = new List<PersistentData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PersistentData item = Read((PersistentData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PersistentData[] array = new PersistentData[(fieldNumber = ((persistentData != null) ? persistentData.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					persistentData.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.PersistentData = array;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					ProjectItemData projectItemData3 = new ProjectItemData();
					ProtoReader.NoteObject(projectItemData3, P_1);
					P_0 = projectItemData3;
				}
				byte[] array2 = ProtoReader.AppendBytes(P_0.RawData, P_1);
				if (array2 != null)
				{
					P_0.RawData = array2;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					ProjectItemData projectItemData = new ProjectItemData();
					ProtoReader.NoteObject(projectItemData, P_1);
					P_0 = projectItemData;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			ProjectItemData projectItemData4 = new ProjectItemData();
			ProtoReader.NoteObject(projectItemData4, P_1);
			P_0 = projectItemData4;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ProjectItemData[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ProjectItemData[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ProjectItemData[]>), P_0.GetType());
		}
		ProjectItemData[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		ProjectItemData[] array = value;
		foreach (ProjectItemData obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ProjectItemData[]> Read(PrimitiveContract<ProjectItemData[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectItemData[]> primitiveContract = new PrimitiveContract<ProjectItemData[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ProjectItemData[] value = P_0.Value;
				List<ProjectItemData> list = new List<ProjectItemData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectItemData item = Read((ProjectItemData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ProjectItemData[] array = new ProjectItemData[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectItemData[]> primitiveContract2 = new PrimitiveContract<ProjectItemData[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ProjectItemData[]> primitiveContract3 = new PrimitiveContract<ProjectItemData[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ProjectItemData> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ProjectItemData>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ProjectItemData>), P_0.GetType());
		}
		foreach (ProjectItemData item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ProjectItemData> Read(List<ProjectItemData> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ProjectItemData> list = new List<ProjectItemData>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ProjectItemData>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ProjectItemData> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectItemData item = Read((ProjectItemData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ProjectItemData> list3 = new List<ProjectItemData>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ProjectItemData> list4 = new List<ProjectItemData>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ProjectMeta P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(ProjectMeta))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ProjectMeta), P_0.GetType());
		}
		int counter = P_0.Counter;
		if (counter != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(counter, P_1);
		}
	}

	private static ProjectMeta Read(ProjectMeta P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					ProjectMeta projectMeta = new ProjectMeta();
					ProtoReader.NoteObject(projectMeta, P_1);
					P_0 = projectMeta;
				}
				int counter = P_1.ReadInt32();
				P_0.Counter = counter;
			}
			else
			{
				if (P_0 == null)
				{
					ProjectMeta projectMeta2 = new ProjectMeta();
					ProtoReader.NoteObject(projectMeta2, P_1);
					P_0 = projectMeta2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			ProjectMeta projectMeta3 = new ProjectMeta();
			ProtoReader.NoteObject(projectMeta3, P_1);
			P_0 = projectMeta3;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ProjectMeta[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ProjectMeta[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ProjectMeta[]>), P_0.GetType());
		}
		ProjectMeta[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		ProjectMeta[] array = value;
		foreach (ProjectMeta obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ProjectMeta[]> Read(PrimitiveContract<ProjectMeta[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectMeta[]> primitiveContract = new PrimitiveContract<ProjectMeta[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ProjectMeta[] value = P_0.Value;
				List<ProjectMeta> list = new List<ProjectMeta>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectMeta item = Read((ProjectMeta)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ProjectMeta[] array = new ProjectMeta[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectMeta[]> primitiveContract2 = new PrimitiveContract<ProjectMeta[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ProjectMeta[]> primitiveContract3 = new PrimitiveContract<ProjectMeta[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ProjectMeta> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ProjectMeta>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ProjectMeta>), P_0.GetType());
		}
		foreach (ProjectMeta item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ProjectMeta> Read(List<ProjectMeta> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ProjectMeta> list = new List<ProjectMeta>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ProjectMeta>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ProjectMeta> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectMeta item = Read((ProjectMeta)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ProjectMeta> list3 = new List<ProjectMeta>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ProjectMeta> list4 = new List<ProjectMeta>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ProjectData P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(ProjectData))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ProjectData), P_0.GetType());
		}
	}

	private static ProjectData Read(ProjectData P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (P_0 == null)
			{
				ProjectData projectData = new ProjectData();
				ProtoReader.NoteObject(projectData, P_1);
				P_0 = projectData;
			}
			P_1.SkipField();
		}
		if (P_0 == null)
		{
			ProjectData projectData2 = new ProjectData();
			ProtoReader.NoteObject(projectData2, P_1);
			P_0 = projectData2;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ProjectData[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ProjectData[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ProjectData[]>), P_0.GetType());
		}
		ProjectData[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		ProjectData[] array = value;
		foreach (ProjectData obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ProjectData[]> Read(PrimitiveContract<ProjectData[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectData[]> primitiveContract = new PrimitiveContract<ProjectData[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ProjectData[] value = P_0.Value;
				List<ProjectData> list = new List<ProjectData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectData item = Read((ProjectData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ProjectData[] array = new ProjectData[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectData[]> primitiveContract2 = new PrimitiveContract<ProjectData[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ProjectData[]> primitiveContract3 = new PrimitiveContract<ProjectData[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ProjectData> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ProjectData>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ProjectData>), P_0.GetType());
		}
		foreach (ProjectData item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ProjectData> Read(List<ProjectData> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ProjectData> list = new List<ProjectData>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ProjectData>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ProjectData> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectData item = Read((ProjectData)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ProjectData> list3 = new List<ProjectData>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ProjectData> list4 = new List<ProjectData>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(AssetBundleDescriptor P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(AssetBundleDescriptor))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(AssetBundleDescriptor), P_0.GetType());
		}
		string assetName = P_0.AssetName;
		if (assetName != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(assetName, P_1);
		}
		string bundleName = P_0.BundleName;
		if (bundleName != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			ProtoWriter.WriteString(bundleName, P_1);
		}
		string typeName = P_0.TypeName;
		if (typeName != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			ProtoWriter.WriteString(typeName, P_1);
		}
	}

	private static AssetBundleDescriptor Read(AssetBundleDescriptor P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					AssetBundleDescriptor assetBundleDescriptor2 = new AssetBundleDescriptor();
					ProtoReader.NoteObject(assetBundleDescriptor2, P_1);
					P_0 = assetBundleDescriptor2;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.AssetName = text;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					AssetBundleDescriptor assetBundleDescriptor3 = new AssetBundleDescriptor();
					ProtoReader.NoteObject(assetBundleDescriptor3, P_1);
					P_0 = assetBundleDescriptor3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.BundleName = text;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					AssetBundleDescriptor assetBundleDescriptor4 = new AssetBundleDescriptor();
					ProtoReader.NoteObject(assetBundleDescriptor4, P_1);
					P_0 = assetBundleDescriptor4;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					P_0.TypeName = text;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					AssetBundleDescriptor assetBundleDescriptor = new AssetBundleDescriptor();
					ProtoReader.NoteObject(assetBundleDescriptor, P_1);
					P_0 = assetBundleDescriptor;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			AssetBundleDescriptor assetBundleDescriptor5 = new AssetBundleDescriptor();
			ProtoReader.NoteObject(assetBundleDescriptor5, P_1);
			P_0 = assetBundleDescriptor5;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<AssetBundleDescriptor[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<AssetBundleDescriptor[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<AssetBundleDescriptor[]>), P_0.GetType());
		}
		AssetBundleDescriptor[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		AssetBundleDescriptor[] array = value;
		foreach (AssetBundleDescriptor obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<AssetBundleDescriptor[]> Read(PrimitiveContract<AssetBundleDescriptor[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<AssetBundleDescriptor[]> primitiveContract = new PrimitiveContract<AssetBundleDescriptor[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				AssetBundleDescriptor[] value = P_0.Value;
				List<AssetBundleDescriptor> list = new List<AssetBundleDescriptor>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					AssetBundleDescriptor item = Read((AssetBundleDescriptor)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				AssetBundleDescriptor[] array = new AssetBundleDescriptor[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<AssetBundleDescriptor[]> primitiveContract2 = new PrimitiveContract<AssetBundleDescriptor[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<AssetBundleDescriptor[]> primitiveContract3 = new PrimitiveContract<AssetBundleDescriptor[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<AssetBundleDescriptor> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<AssetBundleDescriptor>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<AssetBundleDescriptor>), P_0.GetType());
		}
		foreach (AssetBundleDescriptor item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<AssetBundleDescriptor> Read(List<AssetBundleDescriptor> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<AssetBundleDescriptor> list = new List<AssetBundleDescriptor>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<AssetBundleDescriptor>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<AssetBundleDescriptor> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					AssetBundleDescriptor item = Read((AssetBundleDescriptor)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<AssetBundleDescriptor> list3 = new List<AssetBundleDescriptor>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<AssetBundleDescriptor> list4 = new List<AssetBundleDescriptor>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ProjectItem P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(ProjectItem))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ProjectItem), P_0.GetType());
		}
		List<ProjectItem> children = P_0.Children;
		if (children != null)
		{
			List<ProjectItem> list = children;
			foreach (ProjectItem item in list)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
				Write(item, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
		ProjectItemData internal_Data = P_0.Internal_Data;
		if (internal_Data != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(internal_Data, P_1);
			Write(internal_Data, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		ProjectItemMeta internal_Meta = P_0.Internal_Meta;
		if (internal_Meta != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(internal_Meta, P_1);
			Write(internal_Meta, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
		ProjectItem parent = P_0.Parent;
		if (parent != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			BclHelpers.WriteNetObject(parent, P_1, 875, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
	}

	private static ProjectItem Read(ProjectItem P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (P_0 == null)
				{
					ProjectItem projectItem2 = new ProjectItem();
					ProtoReader.NoteObject(projectItem2, P_1);
					P_0 = projectItem2;
				}
				List<ProjectItem> list = P_0.Children;
				List<ProjectItem> list2 = list;
				if (list == null)
				{
					list = new List<ProjectItem>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ProjectItem> list3 = list;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectItem item = Read((ProjectItem)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list3.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				list2 = ((list2 == list) ? null : list);
				if (list2 != null)
				{
					P_0.Children = list2;
				}
				break;
			}
			case 2:
			{
				if (P_0 == null)
				{
					ProjectItem projectItem6 = new ProjectItem();
					ProtoReader.NoteObject(projectItem6, P_1);
					P_0 = projectItem6;
				}
				ProjectItemData internal_Data = P_0.Internal_Data;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				ProjectItemData projectItemData = Read(internal_Data, P_1);
				ProtoReader.EndSubItem(token, P_1);
				ProjectItemData projectItemData2 = projectItemData;
				if (projectItemData2 != null)
				{
					P_0.Internal_Data = projectItemData2;
				}
				break;
			}
			case 3:
			{
				if (P_0 == null)
				{
					ProjectItem projectItem3 = new ProjectItem();
					ProtoReader.NoteObject(projectItem3, P_1);
					P_0 = projectItem3;
				}
				ProjectItemMeta internal_Meta = P_0.Internal_Meta;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				ProjectItemMeta projectItemMeta = Read(internal_Meta, P_1);
				ProtoReader.EndSubItem(token, P_1);
				ProjectItemMeta projectItemMeta2 = projectItemMeta;
				if (projectItemMeta2 != null)
				{
					P_0.Internal_Meta = projectItemMeta2;
				}
				break;
			}
			case 4:
			{
				if (P_0 == null)
				{
					ProjectItem projectItem4 = new ProjectItem();
					ProtoReader.NoteObject(projectItem4, P_1);
					P_0 = projectItem4;
				}
				ProjectItem projectItem5 = (ProjectItem)BclHelpers.ReadNetObject(P_0.Parent, P_1, 875, typeof(ProjectItem), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (projectItem5 != null)
				{
					P_0.Parent = projectItem5;
				}
				break;
			}
			default:
				if (P_0 == null)
				{
					ProjectItem projectItem = new ProjectItem();
					ProtoReader.NoteObject(projectItem, P_1);
					P_0 = projectItem;
				}
				P_1.SkipField();
				break;
			}
		}
		if (P_0 == null)
		{
			ProjectItem projectItem7 = new ProjectItem();
			ProtoReader.NoteObject(projectItem7, P_1);
			P_0 = projectItem7;
		}
		return P_0;
	}

	private static void Write(PrimitiveContract<ProjectItem[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ProjectItem[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ProjectItem[]>), P_0.GetType());
		}
		ProjectItem[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		ProjectItem[] array = value;
		foreach (ProjectItem obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ProjectItem[]> Read(PrimitiveContract<ProjectItem[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectItem[]> primitiveContract = new PrimitiveContract<ProjectItem[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ProjectItem[] value = P_0.Value;
				List<ProjectItem> list = new List<ProjectItem>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectItem item = Read((ProjectItem)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ProjectItem[] array = new ProjectItem[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ProjectItem[]> primitiveContract2 = new PrimitiveContract<ProjectItem[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ProjectItem[]> primitiveContract3 = new PrimitiveContract<ProjectItem[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ProjectItem> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ProjectItem>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ProjectItem>), P_0.GetType());
		}
		foreach (ProjectItem item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ProjectItem> Read(List<ProjectItem> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ProjectItem> list = new List<ProjectItem>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ProjectItem>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ProjectItem> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ProjectItem item = Read((ProjectItem)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ProjectItem> list3 = new List<ProjectItem>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ProjectItem> list4 = new List<ProjectItem>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(List<bool> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<bool>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<bool>), P_0.GetType());
		}
		foreach (bool item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(item, P_1);
		}
	}

	private static List<bool> Read(List<bool> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<bool> list = new List<bool>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<bool>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadBoolean());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add(P_1.ReadBoolean());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<bool> list2 = new List<bool>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<bool> list3 = new List<bool>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<char> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<char>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<char>), P_0.GetType());
		}
		foreach (char item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt16(item, P_1);
		}
	}

	private static List<char> Read(List<char> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<char> list = new List<char>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<char>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add((char)P_1.ReadUInt16());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add((char)P_1.ReadUInt16());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<char> list2 = new List<char>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<char> list3 = new List<char>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<byte> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<byte>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<byte>), P_0.GetType());
		}
		foreach (byte item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteByte(item, P_1);
		}
	}

	private static List<byte> Read(List<byte> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<byte> list = new List<byte>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<byte>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadByte());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add(P_1.ReadByte());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<byte> list2 = new List<byte>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<byte> list3 = new List<byte>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<short> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<short>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<short>), P_0.GetType());
		}
		foreach (short item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt16(item, P_1);
		}
	}

	private static List<short> Read(List<short> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<short> list = new List<short>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<short>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadInt16());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add(P_1.ReadInt16());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<short> list2 = new List<short>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<short> list3 = new List<short>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<int> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<int>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<int>), P_0.GetType());
		}
		foreach (int item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(item, P_1);
		}
	}

	private static List<int> Read(List<int> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<int> list = new List<int>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<int>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadInt32());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add(P_1.ReadInt32());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<int> list2 = new List<int>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<int> list3 = new List<int>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<long> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<long>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<long>), P_0.GetType());
		}
		foreach (long item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt64(item, P_1);
		}
	}

	private static List<long> Read(List<long> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<long> list = new List<long>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<long>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadInt64());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add(P_1.ReadInt64());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<long> list2 = new List<long>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<long> list3 = new List<long>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<ushort> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ushort>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ushort>), P_0.GetType());
		}
		foreach (ushort item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt16(item, P_1);
		}
	}

	private static List<ushort> Read(List<ushort> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ushort> list = new List<ushort>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ushort>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadUInt16());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add(P_1.ReadUInt16());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<ushort> list2 = new List<ushort>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ushort> list3 = new List<ushort>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<uint> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<uint>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<uint>), P_0.GetType());
		}
		foreach (uint item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(item, P_1);
		}
	}

	private static List<uint> Read(List<uint> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<uint> list = new List<uint>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<uint>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadUInt32());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add(P_1.ReadUInt32());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<uint> list2 = new List<uint>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<uint> list3 = new List<uint>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<ulong> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ulong>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ulong>), P_0.GetType());
		}
		foreach (ulong item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteUInt64(item, P_1);
		}
	}

	private static List<ulong> Read(List<ulong> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ulong> list = new List<ulong>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ulong>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadUInt64());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Variant, P_1))
				{
					P_0.Add(P_1.ReadUInt64());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<ulong> list2 = new List<ulong>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ulong> list3 = new List<ulong>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<string> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<string>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<string>), P_0.GetType());
		}
		foreach (string item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(item, P_1);
		}
	}

	private static List<string> Read(List<string> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<string> list = new List<string>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<string>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					P_0.Add(P_1.ReadString());
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<string> list2 = new List<string>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<string> list3 = new List<string>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<float> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<float>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<float>), P_0.GetType());
		}
		foreach (float item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(item, P_1);
		}
	}

	private static List<float> Read(List<float> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<float> list = new List<float>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<float>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadSingle());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Fixed32, P_1))
				{
					P_0.Add(P_1.ReadSingle());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<float> list2 = new List<float>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<float> list3 = new List<float>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<double> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<double>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<double>), P_0.GetType());
		}
		foreach (double item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed64, P_1);
			ProtoWriter.WriteDouble(item, P_1);
		}
	}

	private static List<double> Read(List<double> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<double> list = new List<double>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<double>();
				}
				if (P_1.WireType != WireType.String)
				{
					int fieldNumber = P_1.FieldNumber;
					do
					{
						P_0.Add(P_1.ReadDouble());
					}
					while (P_1.TryReadFieldHeader(fieldNumber));
					continue;
				}
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				while (ProtoReader.HasSubValue(WireType.Fixed64, P_1))
				{
					P_0.Add(P_1.ReadDouble());
				}
				ProtoReader.EndSubItem(token, P_1);
			}
			else
			{
				if (P_0 == null)
				{
					List<double> list2 = new List<double>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<double> list3 = new List<double>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(List<decimal> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<decimal>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<decimal>), P_0.GetType());
		}
		foreach (decimal item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			BclHelpers.WriteDecimal(item, P_1);
		}
	}

	private static List<decimal> Read(List<decimal> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<decimal> list = new List<decimal>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<decimal>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					P_0.Add(BclHelpers.ReadDecimal(P_1));
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<decimal> list2 = new List<decimal>();
					ProtoReader.NoteObject(list2, P_1);
					P_0 = list2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<decimal> list3 = new List<decimal>();
			ProtoReader.NoteObject(list3, P_1);
			P_0 = list3;
		}
		return P_0;
	}

	private static void Write(GradientAlphaKey P_0, ProtoWriter P_1)
	{
		GradientAlphaKeySurrogate gradientAlphaKeySurrogate = P_0;
		if (gradientAlphaKeySurrogate.GetType() != typeof(GradientAlphaKeySurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(GradientAlphaKeySurrogate), gradientAlphaKeySurrogate.GetType());
		}
		float alpha = gradientAlphaKeySurrogate.alpha;
		if (alpha != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(alpha, P_1);
		}
		float time = gradientAlphaKeySurrogate.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
	}

	private static GradientAlphaKey Read(GradientAlphaKey P_0, ProtoReader P_1)
	{
		GradientAlphaKeySurrogate gradientAlphaKeySurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (gradientAlphaKeySurrogate == null)
				{
					GradientAlphaKeySurrogate gradientAlphaKeySurrogate3 = new GradientAlphaKeySurrogate();
					ProtoReader.NoteObject(gradientAlphaKeySurrogate3, P_1);
					gradientAlphaKeySurrogate = gradientAlphaKeySurrogate3;
				}
				float alpha = P_1.ReadSingle();
				gradientAlphaKeySurrogate.alpha = alpha;
				break;
			}
			case 2:
			{
				if (gradientAlphaKeySurrogate == null)
				{
					GradientAlphaKeySurrogate gradientAlphaKeySurrogate4 = new GradientAlphaKeySurrogate();
					ProtoReader.NoteObject(gradientAlphaKeySurrogate4, P_1);
					gradientAlphaKeySurrogate = gradientAlphaKeySurrogate4;
				}
				float alpha = P_1.ReadSingle();
				gradientAlphaKeySurrogate.time = alpha;
				break;
			}
			default:
				if (gradientAlphaKeySurrogate == null)
				{
					GradientAlphaKeySurrogate gradientAlphaKeySurrogate2 = new GradientAlphaKeySurrogate();
					ProtoReader.NoteObject(gradientAlphaKeySurrogate2, P_1);
					gradientAlphaKeySurrogate = gradientAlphaKeySurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (gradientAlphaKeySurrogate == null)
		{
			GradientAlphaKeySurrogate gradientAlphaKeySurrogate5 = new GradientAlphaKeySurrogate();
			ProtoReader.NoteObject(gradientAlphaKeySurrogate5, P_1);
			gradientAlphaKeySurrogate = gradientAlphaKeySurrogate5;
		}
		P_0 = gradientAlphaKeySurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<GradientAlphaKey[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<GradientAlphaKey[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<GradientAlphaKey[]>), P_0.GetType());
		}
		GradientAlphaKey[] value = P_0.Value;
		if (value != null)
		{
			GradientAlphaKey[] array = value;
			foreach (GradientAlphaKey gradientAlphaKey in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(gradientAlphaKey, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<GradientAlphaKey[]> Read(PrimitiveContract<GradientAlphaKey[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<GradientAlphaKey[]> primitiveContract = new PrimitiveContract<GradientAlphaKey[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				GradientAlphaKey[] value = P_0.Value;
				List<GradientAlphaKey> list = new List<GradientAlphaKey>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientAlphaKey item = Read(default(GradientAlphaKey), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				GradientAlphaKey[] array = new GradientAlphaKey[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<GradientAlphaKey[]> primitiveContract2 = new PrimitiveContract<GradientAlphaKey[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<GradientAlphaKey[]> primitiveContract3 = new PrimitiveContract<GradientAlphaKey[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<GradientAlphaKey> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<GradientAlphaKey>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<GradientAlphaKey>), P_0.GetType());
		}
		foreach (GradientAlphaKey item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<GradientAlphaKey> Read(List<GradientAlphaKey> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<GradientAlphaKey> list = new List<GradientAlphaKey>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<GradientAlphaKey>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<GradientAlphaKey> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientAlphaKey item = Read(default(GradientAlphaKey), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<GradientAlphaKey> list3 = new List<GradientAlphaKey>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<GradientAlphaKey> list4 = new List<GradientAlphaKey>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(GradientColorKey P_0, ProtoWriter P_1)
	{
		GradientColorKeySurrogate gradientColorKeySurrogate = P_0;
		if (gradientColorKeySurrogate.GetType() != typeof(GradientColorKeySurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(GradientColorKeySurrogate), gradientColorKeySurrogate.GetType());
		}
		Color color = gradientColorKeySurrogate.color;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float time = gradientColorKeySurrogate.time;
		if (time != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(time, P_1);
		}
	}

	private static GradientColorKey Read(GradientColorKey P_0, ProtoReader P_1)
	{
		GradientColorKeySurrogate gradientColorKeySurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (gradientColorKeySurrogate == null)
				{
					GradientColorKeySurrogate gradientColorKeySurrogate3 = new GradientColorKeySurrogate();
					ProtoReader.NoteObject(gradientColorKeySurrogate3, P_1);
					gradientColorKeySurrogate = gradientColorKeySurrogate3;
				}
				Color color = gradientColorKeySurrogate.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color color3 = color2;
				gradientColorKeySurrogate.color = color3;
				break;
			}
			case 2:
			{
				if (gradientColorKeySurrogate == null)
				{
					GradientColorKeySurrogate gradientColorKeySurrogate4 = new GradientColorKeySurrogate();
					ProtoReader.NoteObject(gradientColorKeySurrogate4, P_1);
					gradientColorKeySurrogate = gradientColorKeySurrogate4;
				}
				float time = P_1.ReadSingle();
				gradientColorKeySurrogate.time = time;
				break;
			}
			default:
				if (gradientColorKeySurrogate == null)
				{
					GradientColorKeySurrogate gradientColorKeySurrogate2 = new GradientColorKeySurrogate();
					ProtoReader.NoteObject(gradientColorKeySurrogate2, P_1);
					gradientColorKeySurrogate = gradientColorKeySurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (gradientColorKeySurrogate == null)
		{
			GradientColorKeySurrogate gradientColorKeySurrogate5 = new GradientColorKeySurrogate();
			ProtoReader.NoteObject(gradientColorKeySurrogate5, P_1);
			gradientColorKeySurrogate = gradientColorKeySurrogate5;
		}
		P_0 = gradientColorKeySurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<GradientColorKey[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<GradientColorKey[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<GradientColorKey[]>), P_0.GetType());
		}
		GradientColorKey[] value = P_0.Value;
		if (value != null)
		{
			GradientColorKey[] array = value;
			foreach (GradientColorKey gradientColorKey in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(gradientColorKey, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<GradientColorKey[]> Read(PrimitiveContract<GradientColorKey[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<GradientColorKey[]> primitiveContract = new PrimitiveContract<GradientColorKey[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				GradientColorKey[] value = P_0.Value;
				List<GradientColorKey> list = new List<GradientColorKey>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientColorKey item = Read(default(GradientColorKey), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				GradientColorKey[] array = new GradientColorKey[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<GradientColorKey[]> primitiveContract2 = new PrimitiveContract<GradientColorKey[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<GradientColorKey[]> primitiveContract3 = new PrimitiveContract<GradientColorKey[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<GradientColorKey> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<GradientColorKey>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<GradientColorKey>), P_0.GetType());
		}
		foreach (GradientColorKey item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<GradientColorKey> Read(List<GradientColorKey> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<GradientColorKey> list = new List<GradientColorKey>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<GradientColorKey>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<GradientColorKey> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					GradientColorKey item = Read(default(GradientColorKey), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<GradientColorKey> list3 = new List<GradientColorKey>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<GradientColorKey> list4 = new List<GradientColorKey>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(LayerMask P_0, ProtoWriter P_1)
	{
		LayerMaskSurrogate layerMaskSurrogate = P_0;
		if (layerMaskSurrogate.GetType() != typeof(LayerMaskSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(LayerMaskSurrogate), layerMaskSurrogate.GetType());
		}
		int value = layerMaskSurrogate.value;
		if (value != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(value, P_1);
		}
	}

	private static LayerMask Read(LayerMask P_0, ProtoReader P_1)
	{
		LayerMaskSurrogate layerMaskSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (layerMaskSurrogate == null)
				{
					LayerMaskSurrogate layerMaskSurrogate2 = new LayerMaskSurrogate();
					ProtoReader.NoteObject(layerMaskSurrogate2, P_1);
					layerMaskSurrogate = layerMaskSurrogate2;
				}
				int value = P_1.ReadInt32();
				layerMaskSurrogate.value = value;
			}
			else
			{
				if (layerMaskSurrogate == null)
				{
					LayerMaskSurrogate layerMaskSurrogate3 = new LayerMaskSurrogate();
					ProtoReader.NoteObject(layerMaskSurrogate3, P_1);
					layerMaskSurrogate = layerMaskSurrogate3;
				}
				P_1.SkipField();
			}
		}
		if (layerMaskSurrogate == null)
		{
			LayerMaskSurrogate layerMaskSurrogate4 = new LayerMaskSurrogate();
			ProtoReader.NoteObject(layerMaskSurrogate4, P_1);
			layerMaskSurrogate = layerMaskSurrogate4;
		}
		P_0 = layerMaskSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<LayerMask[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<LayerMask[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<LayerMask[]>), P_0.GetType());
		}
		LayerMask[] value = P_0.Value;
		if (value != null)
		{
			LayerMask[] array = value;
			foreach (LayerMask layerMask in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(layerMask, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<LayerMask[]> Read(PrimitiveContract<LayerMask[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<LayerMask[]> primitiveContract = new PrimitiveContract<LayerMask[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				LayerMask[] value = P_0.Value;
				List<LayerMask> list = new List<LayerMask>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					LayerMask item = Read(default(LayerMask), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				LayerMask[] array = new LayerMask[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<LayerMask[]> primitiveContract2 = new PrimitiveContract<LayerMask[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<LayerMask[]> primitiveContract3 = new PrimitiveContract<LayerMask[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<LayerMask> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<LayerMask>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<LayerMask>), P_0.GetType());
		}
		foreach (LayerMask item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<LayerMask> Read(List<LayerMask> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<LayerMask> list = new List<LayerMask>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<LayerMask>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<LayerMask> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					LayerMask item = Read(default(LayerMask), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<LayerMask> list3 = new List<LayerMask>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<LayerMask> list4 = new List<LayerMask>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(RectOffset P_0, ProtoWriter P_1)
	{
		RectOffsetSurrogate rectOffsetSurrogate = P_0;
		if (rectOffsetSurrogate.GetType() != typeof(RectOffsetSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(RectOffsetSurrogate), rectOffsetSurrogate.GetType());
		}
		int bottom = rectOffsetSurrogate.bottom;
		if (bottom != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(bottom, P_1);
		}
		int left = rectOffsetSurrogate.left;
		if (left != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(left, P_1);
		}
		int right = rectOffsetSurrogate.right;
		if (right != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(right, P_1);
		}
		int top = rectOffsetSurrogate.top;
		if (top != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(top, P_1);
		}
	}

	private static RectOffset Read(RectOffset P_0, ProtoReader P_1)
	{
		RectOffsetSurrogate rectOffsetSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (rectOffsetSurrogate == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate4 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate4, P_1);
					rectOffsetSurrogate = rectOffsetSurrogate4;
				}
				int right = P_1.ReadInt32();
				rectOffsetSurrogate.bottom = right;
				break;
			}
			case 2:
			{
				if (rectOffsetSurrogate == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate6 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate6, P_1);
					rectOffsetSurrogate = rectOffsetSurrogate6;
				}
				int right = P_1.ReadInt32();
				rectOffsetSurrogate.left = right;
				break;
			}
			case 3:
			{
				if (rectOffsetSurrogate == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate3 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate3, P_1);
					rectOffsetSurrogate = rectOffsetSurrogate3;
				}
				int right = P_1.ReadInt32();
				rectOffsetSurrogate.right = right;
				break;
			}
			case 4:
			{
				if (rectOffsetSurrogate == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate5 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate5, P_1);
					rectOffsetSurrogate = rectOffsetSurrogate5;
				}
				int right = P_1.ReadInt32();
				rectOffsetSurrogate.top = right;
				break;
			}
			default:
				if (rectOffsetSurrogate == null)
				{
					RectOffsetSurrogate rectOffsetSurrogate2 = new RectOffsetSurrogate();
					ProtoReader.NoteObject(rectOffsetSurrogate2, P_1);
					rectOffsetSurrogate = rectOffsetSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (rectOffsetSurrogate == null)
		{
			RectOffsetSurrogate rectOffsetSurrogate7 = new RectOffsetSurrogate();
			ProtoReader.NoteObject(rectOffsetSurrogate7, P_1);
			rectOffsetSurrogate = rectOffsetSurrogate7;
		}
		P_0 = rectOffsetSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<RectOffset[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<RectOffset[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<RectOffset[]>), P_0.GetType());
		}
		RectOffset[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		RectOffset[] array = value;
		foreach (RectOffset obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<RectOffset[]> Read(PrimitiveContract<RectOffset[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<RectOffset[]> primitiveContract = new PrimitiveContract<RectOffset[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				RectOffset[] value = P_0.Value;
				List<RectOffset> list = new List<RectOffset>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RectOffset item = Read((RectOffset)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				RectOffset[] array = new RectOffset[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<RectOffset[]> primitiveContract2 = new PrimitiveContract<RectOffset[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<RectOffset[]> primitiveContract3 = new PrimitiveContract<RectOffset[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<RectOffset> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<RectOffset>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<RectOffset>), P_0.GetType());
		}
		foreach (RectOffset item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<RectOffset> Read(List<RectOffset> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<RectOffset> list = new List<RectOffset>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<RectOffset>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<RectOffset> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RectOffset item = Read((RectOffset)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<RectOffset> list3 = new List<RectOffset>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<RectOffset> list4 = new List<RectOffset>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(AnimationTriggers P_0, ProtoWriter P_1)
	{
		AnimationTriggersSurrogate animationTriggersSurrogate = P_0;
		if (animationTriggersSurrogate.GetType() != typeof(AnimationTriggersSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(AnimationTriggersSurrogate), animationTriggersSurrogate.GetType());
		}
		string disabledTrigger = animationTriggersSurrogate.disabledTrigger;
		if (disabledTrigger != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(disabledTrigger, P_1);
		}
		string highlightedTrigger = animationTriggersSurrogate.highlightedTrigger;
		if (highlightedTrigger != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			ProtoWriter.WriteString(highlightedTrigger, P_1);
		}
		string normalTrigger = animationTriggersSurrogate.normalTrigger;
		if (normalTrigger != null)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
			ProtoWriter.WriteString(normalTrigger, P_1);
		}
		string pressedTrigger = animationTriggersSurrogate.pressedTrigger;
		if (pressedTrigger != null)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
			ProtoWriter.WriteString(pressedTrigger, P_1);
		}
	}

	private static AnimationTriggers Read(AnimationTriggers P_0, ProtoReader P_1)
	{
		AnimationTriggersSurrogate animationTriggersSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (animationTriggersSurrogate == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate3 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate3, P_1);
					animationTriggersSurrogate = animationTriggersSurrogate3;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					animationTriggersSurrogate.disabledTrigger = text;
				}
				break;
			}
			case 2:
			{
				if (animationTriggersSurrogate == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate6 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate6, P_1);
					animationTriggersSurrogate = animationTriggersSurrogate6;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					animationTriggersSurrogate.highlightedTrigger = text;
				}
				break;
			}
			case 3:
			{
				if (animationTriggersSurrogate == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate4 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate4, P_1);
					animationTriggersSurrogate = animationTriggersSurrogate4;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					animationTriggersSurrogate.normalTrigger = text;
				}
				break;
			}
			case 4:
			{
				if (animationTriggersSurrogate == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate5 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate5, P_1);
					animationTriggersSurrogate = animationTriggersSurrogate5;
				}
				string text = P_1.ReadString();
				if (text != null)
				{
					animationTriggersSurrogate.pressedTrigger = text;
				}
				break;
			}
			default:
				if (animationTriggersSurrogate == null)
				{
					AnimationTriggersSurrogate animationTriggersSurrogate2 = new AnimationTriggersSurrogate();
					ProtoReader.NoteObject(animationTriggersSurrogate2, P_1);
					animationTriggersSurrogate = animationTriggersSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (animationTriggersSurrogate == null)
		{
			AnimationTriggersSurrogate animationTriggersSurrogate7 = new AnimationTriggersSurrogate();
			ProtoReader.NoteObject(animationTriggersSurrogate7, P_1);
			animationTriggersSurrogate = animationTriggersSurrogate7;
		}
		P_0 = animationTriggersSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<AnimationTriggers[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<AnimationTriggers[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<AnimationTriggers[]>), P_0.GetType());
		}
		AnimationTriggers[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		AnimationTriggers[] array = value;
		foreach (AnimationTriggers obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<AnimationTriggers[]> Read(PrimitiveContract<AnimationTriggers[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<AnimationTriggers[]> primitiveContract = new PrimitiveContract<AnimationTriggers[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				AnimationTriggers[] value = P_0.Value;
				List<AnimationTriggers> list = new List<AnimationTriggers>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					AnimationTriggers item = Read((AnimationTriggers)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				AnimationTriggers[] array = new AnimationTriggers[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<AnimationTriggers[]> primitiveContract2 = new PrimitiveContract<AnimationTriggers[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<AnimationTriggers[]> primitiveContract3 = new PrimitiveContract<AnimationTriggers[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<AnimationTriggers> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<AnimationTriggers>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<AnimationTriggers>), P_0.GetType());
		}
		foreach (AnimationTriggers item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<AnimationTriggers> Read(List<AnimationTriggers> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<AnimationTriggers> list = new List<AnimationTriggers>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<AnimationTriggers>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<AnimationTriggers> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					AnimationTriggers item = Read((AnimationTriggers)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<AnimationTriggers> list3 = new List<AnimationTriggers>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<AnimationTriggers> list4 = new List<AnimationTriggers>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ColorBlock P_0, ProtoWriter P_1)
	{
		ColorBlockSurrogate colorBlockSurrogate = P_0;
		if (colorBlockSurrogate.GetType() != typeof(ColorBlockSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ColorBlockSurrogate), colorBlockSurrogate.GetType());
		}
		float colorMultiplier = colorBlockSurrogate.colorMultiplier;
		if (colorMultiplier != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(colorMultiplier, P_1);
		}
		Color disabledColor = colorBlockSurrogate.disabledColor;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(disabledColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float fadeDuration = colorBlockSurrogate.fadeDuration;
		if (fadeDuration != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(fadeDuration, P_1);
		}
		Color highlightedColor = colorBlockSurrogate.highlightedColor;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(highlightedColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color normalColor = colorBlockSurrogate.normalColor;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(normalColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Color pressedColor = colorBlockSurrogate.pressedColor;
		ProtoWriter.WriteFieldHeader(6, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(pressedColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static ColorBlock Read(ColorBlock P_0, ProtoReader P_1)
	{
		ColorBlockSurrogate colorBlockSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (colorBlockSurrogate == null)
				{
					ColorBlockSurrogate colorBlockSurrogate3 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate3, P_1);
					colorBlockSurrogate = colorBlockSurrogate3;
				}
				float colorMultiplier = P_1.ReadSingle();
				colorBlockSurrogate.colorMultiplier = colorMultiplier;
				break;
			}
			case 2:
			{
				if (colorBlockSurrogate == null)
				{
					ColorBlockSurrogate colorBlockSurrogate6 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate6, P_1);
					colorBlockSurrogate = colorBlockSurrogate6;
				}
				Color disabledColor = colorBlockSurrogate.disabledColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color2 = Read(disabledColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color pressedColor2 = color2;
				colorBlockSurrogate.disabledColor = pressedColor2;
				break;
			}
			case 3:
			{
				if (colorBlockSurrogate == null)
				{
					ColorBlockSurrogate colorBlockSurrogate4 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate4, P_1);
					colorBlockSurrogate = colorBlockSurrogate4;
				}
				float colorMultiplier = P_1.ReadSingle();
				colorBlockSurrogate.fadeDuration = colorMultiplier;
				break;
			}
			case 4:
			{
				if (colorBlockSurrogate == null)
				{
					ColorBlockSurrogate colorBlockSurrogate7 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate7, P_1);
					colorBlockSurrogate = colorBlockSurrogate7;
				}
				Color highlightedColor = colorBlockSurrogate.highlightedColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color3 = Read(highlightedColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color pressedColor2 = color3;
				colorBlockSurrogate.highlightedColor = pressedColor2;
				break;
			}
			case 5:
			{
				if (colorBlockSurrogate == null)
				{
					ColorBlockSurrogate colorBlockSurrogate8 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate8, P_1);
					colorBlockSurrogate = colorBlockSurrogate8;
				}
				Color normalColor = colorBlockSurrogate.normalColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color4 = Read(normalColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color pressedColor2 = color4;
				colorBlockSurrogate.normalColor = pressedColor2;
				break;
			}
			case 6:
			{
				if (colorBlockSurrogate == null)
				{
					ColorBlockSurrogate colorBlockSurrogate5 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate5, P_1);
					colorBlockSurrogate = colorBlockSurrogate5;
				}
				Color pressedColor = colorBlockSurrogate.pressedColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color color = Read(pressedColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color pressedColor2 = color;
				colorBlockSurrogate.pressedColor = pressedColor2;
				break;
			}
			default:
				if (colorBlockSurrogate == null)
				{
					ColorBlockSurrogate colorBlockSurrogate2 = new ColorBlockSurrogate();
					ProtoReader.NoteObject(colorBlockSurrogate2, P_1);
					colorBlockSurrogate = colorBlockSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (colorBlockSurrogate == null)
		{
			ColorBlockSurrogate colorBlockSurrogate9 = new ColorBlockSurrogate();
			ProtoReader.NoteObject(colorBlockSurrogate9, P_1);
			colorBlockSurrogate = colorBlockSurrogate9;
		}
		P_0 = colorBlockSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<ColorBlock[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ColorBlock[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ColorBlock[]>), P_0.GetType());
		}
		ColorBlock[] value = P_0.Value;
		if (value != null)
		{
			ColorBlock[] array = value;
			foreach (ColorBlock colorBlock in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(colorBlock, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ColorBlock[]> Read(PrimitiveContract<ColorBlock[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ColorBlock[]> primitiveContract = new PrimitiveContract<ColorBlock[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ColorBlock[] value = P_0.Value;
				List<ColorBlock> list = new List<ColorBlock>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ColorBlock item = Read(default(ColorBlock), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ColorBlock[] array = new ColorBlock[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ColorBlock[]> primitiveContract2 = new PrimitiveContract<ColorBlock[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ColorBlock[]> primitiveContract3 = new PrimitiveContract<ColorBlock[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ColorBlock> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ColorBlock>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ColorBlock>), P_0.GetType());
		}
		foreach (ColorBlock item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ColorBlock> Read(List<ColorBlock> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ColorBlock> list = new List<ColorBlock>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ColorBlock>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ColorBlock> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ColorBlock item = Read(default(ColorBlock), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ColorBlock> list3 = new List<ColorBlock>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ColorBlock> list4 = new List<ColorBlock>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(NavMeshPath P_0, ProtoWriter P_1)
	{
		NavMeshPathSurrogate navMeshPathSurrogate = P_0;
		if (navMeshPathSurrogate.GetType() != typeof(NavMeshPathSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(NavMeshPathSurrogate), navMeshPathSurrogate.GetType());
		}
	}

	private static NavMeshPath Read(NavMeshPath P_0, ProtoReader P_1)
	{
		NavMeshPathSurrogate navMeshPathSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (navMeshPathSurrogate == null)
			{
				NavMeshPathSurrogate navMeshPathSurrogate2 = new NavMeshPathSurrogate();
				ProtoReader.NoteObject(navMeshPathSurrogate2, P_1);
				navMeshPathSurrogate = navMeshPathSurrogate2;
			}
			P_1.SkipField();
		}
		if (navMeshPathSurrogate == null)
		{
			NavMeshPathSurrogate navMeshPathSurrogate3 = new NavMeshPathSurrogate();
			ProtoReader.NoteObject(navMeshPathSurrogate3, P_1);
			navMeshPathSurrogate = navMeshPathSurrogate3;
		}
		P_0 = navMeshPathSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<NavMeshPath[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<NavMeshPath[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<NavMeshPath[]>), P_0.GetType());
		}
		NavMeshPath[] value = P_0.Value;
		if (value == null)
		{
			return;
		}
		NavMeshPath[] array = value;
		foreach (NavMeshPath obj in array)
		{
			if (obj != null)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(obj, P_1);
				Write(obj, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<NavMeshPath[]> Read(PrimitiveContract<NavMeshPath[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<NavMeshPath[]> primitiveContract = new PrimitiveContract<NavMeshPath[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				NavMeshPath[] value = P_0.Value;
				List<NavMeshPath> list = new List<NavMeshPath>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NavMeshPath item = Read((NavMeshPath)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				NavMeshPath[] array = new NavMeshPath[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<NavMeshPath[]> primitiveContract2 = new PrimitiveContract<NavMeshPath[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<NavMeshPath[]> primitiveContract3 = new PrimitiveContract<NavMeshPath[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<NavMeshPath> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<NavMeshPath>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<NavMeshPath>), P_0.GetType());
		}
		foreach (NavMeshPath item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(item, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<NavMeshPath> Read(List<NavMeshPath> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<NavMeshPath> list = new List<NavMeshPath>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<NavMeshPath>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<NavMeshPath> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					NavMeshPath item = Read((NavMeshPath)null, P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<NavMeshPath> list3 = new List<NavMeshPath>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<NavMeshPath> list4 = new List<NavMeshPath>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ClothSkinningCoefficient P_0, ProtoWriter P_1)
	{
		ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate = P_0;
		if (clothSkinningCoefficientSurrogate.GetType() != typeof(ClothSkinningCoefficientSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ClothSkinningCoefficientSurrogate), clothSkinningCoefficientSurrogate.GetType());
		}
		float collisionSphereDistance = clothSkinningCoefficientSurrogate.collisionSphereDistance;
		if (collisionSphereDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(collisionSphereDistance, P_1);
		}
		float maxDistance = clothSkinningCoefficientSurrogate.maxDistance;
		if (maxDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxDistance, P_1);
		}
	}

	private static ClothSkinningCoefficient Read(ClothSkinningCoefficient P_0, ProtoReader P_1)
	{
		ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (clothSkinningCoefficientSurrogate == null)
				{
					ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate3 = new ClothSkinningCoefficientSurrogate();
					ProtoReader.NoteObject(clothSkinningCoefficientSurrogate3, P_1);
					clothSkinningCoefficientSurrogate = clothSkinningCoefficientSurrogate3;
				}
				float collisionSphereDistance = P_1.ReadSingle();
				clothSkinningCoefficientSurrogate.collisionSphereDistance = collisionSphereDistance;
				break;
			}
			case 2:
			{
				if (clothSkinningCoefficientSurrogate == null)
				{
					ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate4 = new ClothSkinningCoefficientSurrogate();
					ProtoReader.NoteObject(clothSkinningCoefficientSurrogate4, P_1);
					clothSkinningCoefficientSurrogate = clothSkinningCoefficientSurrogate4;
				}
				float collisionSphereDistance = P_1.ReadSingle();
				clothSkinningCoefficientSurrogate.maxDistance = collisionSphereDistance;
				break;
			}
			default:
				if (clothSkinningCoefficientSurrogate == null)
				{
					ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate2 = new ClothSkinningCoefficientSurrogate();
					ProtoReader.NoteObject(clothSkinningCoefficientSurrogate2, P_1);
					clothSkinningCoefficientSurrogate = clothSkinningCoefficientSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (clothSkinningCoefficientSurrogate == null)
		{
			ClothSkinningCoefficientSurrogate clothSkinningCoefficientSurrogate5 = new ClothSkinningCoefficientSurrogate();
			ProtoReader.NoteObject(clothSkinningCoefficientSurrogate5, P_1);
			clothSkinningCoefficientSurrogate = clothSkinningCoefficientSurrogate5;
		}
		P_0 = clothSkinningCoefficientSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<ClothSkinningCoefficient[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<ClothSkinningCoefficient[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<ClothSkinningCoefficient[]>), P_0.GetType());
		}
		ClothSkinningCoefficient[] value = P_0.Value;
		if (value != null)
		{
			ClothSkinningCoefficient[] array = value;
			foreach (ClothSkinningCoefficient clothSkinningCoefficient in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(clothSkinningCoefficient, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<ClothSkinningCoefficient[]> Read(PrimitiveContract<ClothSkinningCoefficient[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<ClothSkinningCoefficient[]> primitiveContract = new PrimitiveContract<ClothSkinningCoefficient[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				ClothSkinningCoefficient[] value = P_0.Value;
				List<ClothSkinningCoefficient> list = new List<ClothSkinningCoefficient>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ClothSkinningCoefficient item = Read(default(ClothSkinningCoefficient), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				ClothSkinningCoefficient[] array = new ClothSkinningCoefficient[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<ClothSkinningCoefficient[]> primitiveContract2 = new PrimitiveContract<ClothSkinningCoefficient[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<ClothSkinningCoefficient[]> primitiveContract3 = new PrimitiveContract<ClothSkinningCoefficient[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<ClothSkinningCoefficient> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<ClothSkinningCoefficient>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<ClothSkinningCoefficient>), P_0.GetType());
		}
		foreach (ClothSkinningCoefficient item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<ClothSkinningCoefficient> Read(List<ClothSkinningCoefficient> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<ClothSkinningCoefficient> list = new List<ClothSkinningCoefficient>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<ClothSkinningCoefficient>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<ClothSkinningCoefficient> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					ClothSkinningCoefficient item = Read(default(ClothSkinningCoefficient), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<ClothSkinningCoefficient> list3 = new List<ClothSkinningCoefficient>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<ClothSkinningCoefficient> list4 = new List<ClothSkinningCoefficient>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(BoneWeight P_0, ProtoWriter P_1)
	{
		BoneWeightSurrogate boneWeightSurrogate = P_0;
		if (boneWeightSurrogate.GetType() != typeof(BoneWeightSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(BoneWeightSurrogate), boneWeightSurrogate.GetType());
		}
		int boneIndex = boneWeightSurrogate.boneIndex0;
		if (boneIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(boneIndex, P_1);
		}
		int boneIndex2 = boneWeightSurrogate.boneIndex1;
		if (boneIndex2 != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(boneIndex2, P_1);
		}
		int boneIndex3 = boneWeightSurrogate.boneIndex2;
		if (boneIndex3 != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(boneIndex3, P_1);
		}
		int boneIndex4 = boneWeightSurrogate.boneIndex3;
		if (boneIndex4 != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(boneIndex4, P_1);
		}
		float weight = boneWeightSurrogate.weight0;
		if (weight != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(weight, P_1);
		}
		float weight2 = boneWeightSurrogate.weight1;
		if (weight2 != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(weight2, P_1);
		}
		float weight3 = boneWeightSurrogate.weight2;
		if (weight3 != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(weight3, P_1);
		}
		float weight4 = boneWeightSurrogate.weight3;
		if (weight4 != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(weight4, P_1);
		}
	}

	private static BoneWeight Read(BoneWeight P_0, ProtoReader P_1)
	{
		BoneWeightSurrogate boneWeightSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate9 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate9, P_1);
					boneWeightSurrogate = boneWeightSurrogate9;
				}
				int boneIndex = P_1.ReadInt32();
				boneWeightSurrogate.boneIndex0 = boneIndex;
				break;
			}
			case 2:
			{
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate3 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate3, P_1);
					boneWeightSurrogate = boneWeightSurrogate3;
				}
				int boneIndex = P_1.ReadInt32();
				boneWeightSurrogate.boneIndex1 = boneIndex;
				break;
			}
			case 3:
			{
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate10 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate10, P_1);
					boneWeightSurrogate = boneWeightSurrogate10;
				}
				int boneIndex = P_1.ReadInt32();
				boneWeightSurrogate.boneIndex2 = boneIndex;
				break;
			}
			case 4:
			{
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate7 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate7, P_1);
					boneWeightSurrogate = boneWeightSurrogate7;
				}
				int boneIndex = P_1.ReadInt32();
				boneWeightSurrogate.boneIndex3 = boneIndex;
				break;
			}
			case 5:
			{
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate6 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate6, P_1);
					boneWeightSurrogate = boneWeightSurrogate6;
				}
				float weight = P_1.ReadSingle();
				boneWeightSurrogate.weight0 = weight;
				break;
			}
			case 6:
			{
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate4 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate4, P_1);
					boneWeightSurrogate = boneWeightSurrogate4;
				}
				float weight = P_1.ReadSingle();
				boneWeightSurrogate.weight1 = weight;
				break;
			}
			case 7:
			{
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate8 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate8, P_1);
					boneWeightSurrogate = boneWeightSurrogate8;
				}
				float weight = P_1.ReadSingle();
				boneWeightSurrogate.weight2 = weight;
				break;
			}
			case 8:
			{
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate5 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate5, P_1);
					boneWeightSurrogate = boneWeightSurrogate5;
				}
				float weight = P_1.ReadSingle();
				boneWeightSurrogate.weight3 = weight;
				break;
			}
			default:
				if (boneWeightSurrogate == null)
				{
					BoneWeightSurrogate boneWeightSurrogate2 = new BoneWeightSurrogate();
					ProtoReader.NoteObject(boneWeightSurrogate2, P_1);
					boneWeightSurrogate = boneWeightSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (boneWeightSurrogate == null)
		{
			BoneWeightSurrogate boneWeightSurrogate11 = new BoneWeightSurrogate();
			ProtoReader.NoteObject(boneWeightSurrogate11, P_1);
			boneWeightSurrogate = boneWeightSurrogate11;
		}
		P_0 = boneWeightSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<BoneWeight[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<BoneWeight[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<BoneWeight[]>), P_0.GetType());
		}
		BoneWeight[] value = P_0.Value;
		if (value != null)
		{
			BoneWeight[] array = value;
			foreach (BoneWeight boneWeight in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(boneWeight, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<BoneWeight[]> Read(PrimitiveContract<BoneWeight[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<BoneWeight[]> primitiveContract = new PrimitiveContract<BoneWeight[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				BoneWeight[] value = P_0.Value;
				List<BoneWeight> list = new List<BoneWeight>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					BoneWeight item = Read(default(BoneWeight), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				BoneWeight[] array = new BoneWeight[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<BoneWeight[]> primitiveContract2 = new PrimitiveContract<BoneWeight[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<BoneWeight[]> primitiveContract3 = new PrimitiveContract<BoneWeight[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<BoneWeight> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<BoneWeight>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<BoneWeight>), P_0.GetType());
		}
		foreach (BoneWeight item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<BoneWeight> Read(List<BoneWeight> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<BoneWeight> list = new List<BoneWeight>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<BoneWeight>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<BoneWeight> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					BoneWeight item = Read(default(BoneWeight), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<BoneWeight> list3 = new List<BoneWeight>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<BoneWeight> list4 = new List<BoneWeight>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(TreeInstance P_0, ProtoWriter P_1)
	{
		TreeInstanceSurrogate treeInstanceSurrogate = P_0;
		if (treeInstanceSurrogate.GetType() != typeof(TreeInstanceSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(TreeInstanceSurrogate), treeInstanceSurrogate.GetType());
		}
		Color32 color = treeInstanceSurrogate.color;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(color, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float heightScale = treeInstanceSurrogate.heightScale;
		if (heightScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(heightScale, P_1);
		}
		Color32 lightmapColor = treeInstanceSurrogate.lightmapColor;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(lightmapColor, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 position = treeInstanceSurrogate.position;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(position, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		int prototypeIndex = treeInstanceSurrogate.prototypeIndex;
		if (prototypeIndex != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(prototypeIndex, P_1);
		}
		float rotation = treeInstanceSurrogate.rotation;
		if (rotation != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(rotation, P_1);
		}
		float widthScale = treeInstanceSurrogate.widthScale;
		if (widthScale != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(widthScale, P_1);
		}
	}

	private static TreeInstance Read(TreeInstance P_0, ProtoReader P_1)
	{
		TreeInstanceSurrogate treeInstanceSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (treeInstanceSurrogate == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate6 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate6, P_1);
					treeInstanceSurrogate = treeInstanceSurrogate6;
				}
				Color32 color = treeInstanceSurrogate.color;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color32 color2 = Read(color, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color32 color3 = color2;
				treeInstanceSurrogate.color = color3;
				break;
			}
			case 2:
			{
				if (treeInstanceSurrogate == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate9 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate9, P_1);
					treeInstanceSurrogate = treeInstanceSurrogate9;
				}
				float widthScale = P_1.ReadSingle();
				treeInstanceSurrogate.heightScale = widthScale;
				break;
			}
			case 3:
			{
				if (treeInstanceSurrogate == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate7 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate7, P_1);
					treeInstanceSurrogate = treeInstanceSurrogate7;
				}
				Color32 lightmapColor = treeInstanceSurrogate.lightmapColor;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Color32 color4 = Read(lightmapColor, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Color32 color3 = color4;
				treeInstanceSurrogate.lightmapColor = color3;
				break;
			}
			case 4:
			{
				if (treeInstanceSurrogate == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate4 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate4, P_1);
					treeInstanceSurrogate = treeInstanceSurrogate4;
				}
				Vector3 position = treeInstanceSurrogate.position;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(position, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 position2 = vector;
				treeInstanceSurrogate.position = position2;
				break;
			}
			case 5:
			{
				if (treeInstanceSurrogate == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate3 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate3, P_1);
					treeInstanceSurrogate = treeInstanceSurrogate3;
				}
				int prototypeIndex = P_1.ReadInt32();
				treeInstanceSurrogate.prototypeIndex = prototypeIndex;
				break;
			}
			case 6:
			{
				if (treeInstanceSurrogate == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate8 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate8, P_1);
					treeInstanceSurrogate = treeInstanceSurrogate8;
				}
				float widthScale = P_1.ReadSingle();
				treeInstanceSurrogate.rotation = widthScale;
				break;
			}
			case 7:
			{
				if (treeInstanceSurrogate == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate5 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate5, P_1);
					treeInstanceSurrogate = treeInstanceSurrogate5;
				}
				float widthScale = P_1.ReadSingle();
				treeInstanceSurrogate.widthScale = widthScale;
				break;
			}
			default:
				if (treeInstanceSurrogate == null)
				{
					TreeInstanceSurrogate treeInstanceSurrogate2 = new TreeInstanceSurrogate();
					ProtoReader.NoteObject(treeInstanceSurrogate2, P_1);
					treeInstanceSurrogate = treeInstanceSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (treeInstanceSurrogate == null)
		{
			TreeInstanceSurrogate treeInstanceSurrogate10 = new TreeInstanceSurrogate();
			ProtoReader.NoteObject(treeInstanceSurrogate10, P_1);
			treeInstanceSurrogate = treeInstanceSurrogate10;
		}
		P_0 = treeInstanceSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<TreeInstance[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<TreeInstance[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<TreeInstance[]>), P_0.GetType());
		}
		TreeInstance[] value = P_0.Value;
		if (value != null)
		{
			TreeInstance[] array = value;
			foreach (TreeInstance treeInstance in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(treeInstance, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<TreeInstance[]> Read(PrimitiveContract<TreeInstance[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<TreeInstance[]> primitiveContract = new PrimitiveContract<TreeInstance[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				TreeInstance[] value = P_0.Value;
				List<TreeInstance> list = new List<TreeInstance>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					TreeInstance item = Read(default(TreeInstance), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				TreeInstance[] array = new TreeInstance[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<TreeInstance[]> primitiveContract2 = new PrimitiveContract<TreeInstance[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<TreeInstance[]> primitiveContract3 = new PrimitiveContract<TreeInstance[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<TreeInstance> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<TreeInstance>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<TreeInstance>), P_0.GetType());
		}
		foreach (TreeInstance item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<TreeInstance> Read(List<TreeInstance> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<TreeInstance> list = new List<TreeInstance>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<TreeInstance>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<TreeInstance> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					TreeInstance item = Read(default(TreeInstance), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<TreeInstance> list3 = new List<TreeInstance>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<TreeInstance> list4 = new List<TreeInstance>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(CharacterInfo P_0, ProtoWriter P_1)
	{
		CharacterInfoSurrogate characterInfoSurrogate = P_0;
		if (characterInfoSurrogate.GetType() != typeof(CharacterInfoSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(CharacterInfoSurrogate), characterInfoSurrogate.GetType());
		}
		int advance = characterInfoSurrogate.advance;
		if (advance != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(advance, P_1);
		}
		int bearing = characterInfoSurrogate.bearing;
		if (bearing != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(bearing, P_1);
		}
		int glyphHeight = characterInfoSurrogate.glyphHeight;
		if (glyphHeight != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(glyphHeight, P_1);
		}
		int glyphWidth = characterInfoSurrogate.glyphWidth;
		if (glyphWidth != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(glyphWidth, P_1);
		}
		int index = characterInfoSurrogate.index;
		if (index != 0)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(index, P_1);
		}
		int maxX = characterInfoSurrogate.maxX;
		if (maxX != 0)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(maxX, P_1);
		}
		int maxY = characterInfoSurrogate.maxY;
		if (maxY != 0)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(maxY, P_1);
		}
		int minX = characterInfoSurrogate.minX;
		if (minX != 0)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(minX, P_1);
		}
		int minY = characterInfoSurrogate.minY;
		if (minY != 0)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(minY, P_1);
		}
		int size = characterInfoSurrogate.size;
		if (size != 0)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Variant, P_1);
			ProtoWriter.WriteInt32(size, P_1);
		}
		uint style = characterInfoSurrogate.style;
		if (style != 0)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Variant, P_1);
			ProtoWriter.WriteUInt32(style, P_1);
		}
		Vector2 uvBottomLeft = characterInfoSurrogate.uvBottomLeft;
		ProtoWriter.WriteFieldHeader(12, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvBottomLeft, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 uvBottomRight = characterInfoSurrogate.uvBottomRight;
		ProtoWriter.WriteFieldHeader(13, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvBottomRight, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 uvTopLeft = characterInfoSurrogate.uvTopLeft;
		ProtoWriter.WriteFieldHeader(14, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvTopLeft, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector2 uvTopRight = characterInfoSurrogate.uvTopRight;
		ProtoWriter.WriteFieldHeader(15, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(uvTopRight, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static CharacterInfo Read(CharacterInfo P_0, ProtoReader P_1)
	{
		CharacterInfoSurrogate characterInfoSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate10 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate10, P_1);
					characterInfoSurrogate = characterInfoSurrogate10;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.advance = glyphWidth;
				break;
			}
			case 2:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate13 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate13, P_1);
					characterInfoSurrogate = characterInfoSurrogate13;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.bearing = glyphWidth;
				break;
			}
			case 3:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate6 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate6, P_1);
					characterInfoSurrogate = characterInfoSurrogate6;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.glyphHeight = glyphWidth;
				break;
			}
			case 4:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate3 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate3, P_1);
					characterInfoSurrogate = characterInfoSurrogate3;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.glyphWidth = glyphWidth;
				break;
			}
			case 5:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate15 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate15, P_1);
					characterInfoSurrogate = characterInfoSurrogate15;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.index = glyphWidth;
				break;
			}
			case 6:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate12 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate12, P_1);
					characterInfoSurrogate = characterInfoSurrogate12;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.maxX = glyphWidth;
				break;
			}
			case 7:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate4 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate4, P_1);
					characterInfoSurrogate = characterInfoSurrogate4;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.maxY = glyphWidth;
				break;
			}
			case 8:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate16 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate16, P_1);
					characterInfoSurrogate = characterInfoSurrogate16;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.minX = glyphWidth;
				break;
			}
			case 9:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate9 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate9, P_1);
					characterInfoSurrogate = characterInfoSurrogate9;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.minY = glyphWidth;
				break;
			}
			case 10:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate7 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate7, P_1);
					characterInfoSurrogate = characterInfoSurrogate7;
				}
				int glyphWidth = P_1.ReadInt32();
				characterInfoSurrogate.size = glyphWidth;
				break;
			}
			case 11:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate17 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate17, P_1);
					characterInfoSurrogate = characterInfoSurrogate17;
				}
				uint style = P_1.ReadUInt32();
				characterInfoSurrogate.style = style;
				break;
			}
			case 12:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate14 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate14, P_1);
					characterInfoSurrogate = characterInfoSurrogate14;
				}
				Vector2 uvBottomLeft = characterInfoSurrogate.uvBottomLeft;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector4 = Read(uvBottomLeft, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 uvTopRight2 = vector4;
				characterInfoSurrogate.uvBottomLeft = uvTopRight2;
				break;
			}
			case 13:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate11 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate11, P_1);
					characterInfoSurrogate = characterInfoSurrogate11;
				}
				Vector2 uvBottomRight = characterInfoSurrogate.uvBottomRight;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector3 = Read(uvBottomRight, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 uvTopRight2 = vector3;
				characterInfoSurrogate.uvBottomRight = uvTopRight2;
				break;
			}
			case 14:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate8 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate8, P_1);
					characterInfoSurrogate = characterInfoSurrogate8;
				}
				Vector2 uvTopLeft = characterInfoSurrogate.uvTopLeft;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector2 = Read(uvTopLeft, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 uvTopRight2 = vector2;
				characterInfoSurrogate.uvTopLeft = uvTopRight2;
				break;
			}
			case 15:
			{
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate5 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate5, P_1);
					characterInfoSurrogate = characterInfoSurrogate5;
				}
				Vector2 uvTopRight = characterInfoSurrogate.uvTopRight;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector2 vector = Read(uvTopRight, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector2 uvTopRight2 = vector;
				characterInfoSurrogate.uvTopRight = uvTopRight2;
				break;
			}
			default:
				if (characterInfoSurrogate == null)
				{
					CharacterInfoSurrogate characterInfoSurrogate2 = new CharacterInfoSurrogate();
					ProtoReader.NoteObject(characterInfoSurrogate2, P_1);
					characterInfoSurrogate = characterInfoSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (characterInfoSurrogate == null)
		{
			CharacterInfoSurrogate characterInfoSurrogate18 = new CharacterInfoSurrogate();
			ProtoReader.NoteObject(characterInfoSurrogate18, P_1);
			characterInfoSurrogate = characterInfoSurrogate18;
		}
		P_0 = characterInfoSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<CharacterInfo[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<CharacterInfo[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<CharacterInfo[]>), P_0.GetType());
		}
		CharacterInfo[] value = P_0.Value;
		if (value != null)
		{
			CharacterInfo[] array = value;
			foreach (CharacterInfo characterInfo in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(characterInfo, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<CharacterInfo[]> Read(PrimitiveContract<CharacterInfo[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<CharacterInfo[]> primitiveContract = new PrimitiveContract<CharacterInfo[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				CharacterInfo[] value = P_0.Value;
				List<CharacterInfo> list = new List<CharacterInfo>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					CharacterInfo item = Read(default(CharacterInfo), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				CharacterInfo[] array = new CharacterInfo[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<CharacterInfo[]> primitiveContract2 = new PrimitiveContract<CharacterInfo[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<CharacterInfo[]> primitiveContract3 = new PrimitiveContract<CharacterInfo[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<CharacterInfo> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<CharacterInfo>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<CharacterInfo>), P_0.GetType());
		}
		foreach (CharacterInfo item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<CharacterInfo> Read(List<CharacterInfo> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<CharacterInfo> list = new List<CharacterInfo>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<CharacterInfo>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<CharacterInfo> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					CharacterInfo item = Read(default(CharacterInfo), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<CharacterInfo> list3 = new List<CharacterInfo>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<CharacterInfo> list4 = new List<CharacterInfo>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Vector3 P_0, ProtoWriter P_1)
	{
		Vector3Surrogate vector3Surrogate = P_0;
		if (vector3Surrogate.GetType() != typeof(Vector3Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Vector3Surrogate), vector3Surrogate.GetType());
		}
		float x = vector3Surrogate.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = vector3Surrogate.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
		float z = vector3Surrogate.z;
		if (z != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(z, P_1);
		}
	}

	private static Vector3 Read(Vector3 P_0, ProtoReader P_1)
	{
		Vector3Surrogate vector3Surrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (vector3Surrogate == null)
				{
					Vector3Surrogate vector3Surrogate4 = new Vector3Surrogate();
					ProtoReader.NoteObject(vector3Surrogate4, P_1);
					vector3Surrogate = vector3Surrogate4;
				}
				float y = P_1.ReadSingle();
				vector3Surrogate.x = y;
				break;
			}
			case 2:
			{
				if (vector3Surrogate == null)
				{
					Vector3Surrogate vector3Surrogate3 = new Vector3Surrogate();
					ProtoReader.NoteObject(vector3Surrogate3, P_1);
					vector3Surrogate = vector3Surrogate3;
				}
				float y = P_1.ReadSingle();
				vector3Surrogate.y = y;
				break;
			}
			case 3:
			{
				if (vector3Surrogate == null)
				{
					Vector3Surrogate vector3Surrogate5 = new Vector3Surrogate();
					ProtoReader.NoteObject(vector3Surrogate5, P_1);
					vector3Surrogate = vector3Surrogate5;
				}
				float y = P_1.ReadSingle();
				vector3Surrogate.z = y;
				break;
			}
			default:
				if (vector3Surrogate == null)
				{
					Vector3Surrogate vector3Surrogate2 = new Vector3Surrogate();
					ProtoReader.NoteObject(vector3Surrogate2, P_1);
					vector3Surrogate = vector3Surrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (vector3Surrogate == null)
		{
			Vector3Surrogate vector3Surrogate6 = new Vector3Surrogate();
			ProtoReader.NoteObject(vector3Surrogate6, P_1);
			vector3Surrogate = vector3Surrogate6;
		}
		P_0 = vector3Surrogate;
		return P_0;
	}

	private static void Write(List<Vector3> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Vector3>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Vector3>), P_0.GetType());
		}
		foreach (Vector3 item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Vector3> Read(List<Vector3> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Vector3> list = new List<Vector3>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Vector3>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector3> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector3 item = Read(default(Vector3), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Vector3> list3 = new List<Vector3>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Vector3> list4 = new List<Vector3>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Color P_0, ProtoWriter P_1)
	{
		ColorSurrogate colorSurrogate = P_0;
		if (colorSurrogate.GetType() != typeof(ColorSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(ColorSurrogate), colorSurrogate.GetType());
		}
		float a = colorSurrogate.a;
		if (a != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(a, P_1);
		}
		float b = colorSurrogate.b;
		if (b != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(b, P_1);
		}
		float g = colorSurrogate.g;
		if (g != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(g, P_1);
		}
		float r = colorSurrogate.r;
		if (r != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(r, P_1);
		}
	}

	private static Color Read(Color P_0, ProtoReader P_1)
	{
		ColorSurrogate colorSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (colorSurrogate == null)
				{
					ColorSurrogate colorSurrogate4 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate4, P_1);
					colorSurrogate = colorSurrogate4;
				}
				float g = P_1.ReadSingle();
				colorSurrogate.a = g;
				break;
			}
			case 2:
			{
				if (colorSurrogate == null)
				{
					ColorSurrogate colorSurrogate6 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate6, P_1);
					colorSurrogate = colorSurrogate6;
				}
				float g = P_1.ReadSingle();
				colorSurrogate.b = g;
				break;
			}
			case 3:
			{
				if (colorSurrogate == null)
				{
					ColorSurrogate colorSurrogate3 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate3, P_1);
					colorSurrogate = colorSurrogate3;
				}
				float g = P_1.ReadSingle();
				colorSurrogate.g = g;
				break;
			}
			case 4:
			{
				if (colorSurrogate == null)
				{
					ColorSurrogate colorSurrogate5 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate5, P_1);
					colorSurrogate = colorSurrogate5;
				}
				float g = P_1.ReadSingle();
				colorSurrogate.r = g;
				break;
			}
			default:
				if (colorSurrogate == null)
				{
					ColorSurrogate colorSurrogate2 = new ColorSurrogate();
					ProtoReader.NoteObject(colorSurrogate2, P_1);
					colorSurrogate = colorSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (colorSurrogate == null)
		{
			ColorSurrogate colorSurrogate7 = new ColorSurrogate();
			ProtoReader.NoteObject(colorSurrogate7, P_1);
			colorSurrogate = colorSurrogate7;
		}
		P_0 = colorSurrogate;
		return P_0;
	}

	private static void Write(List<Color> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Color>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Color>), P_0.GetType());
		}
		foreach (Color item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Color> Read(List<Color> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Color> list = new List<Color>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Color>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Color> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Color item = Read(default(Color), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Color> list3 = new List<Color>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Color> list4 = new List<Color>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Rect P_0, ProtoWriter P_1)
	{
		RectSurrogate rectSurrogate = P_0;
		if (rectSurrogate.GetType() != typeof(RectSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(RectSurrogate), rectSurrogate.GetType());
		}
		float height = rectSurrogate.height;
		if (height != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(height, P_1);
		}
		float width = rectSurrogate.width;
		if (width != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(width, P_1);
		}
		float x = rectSurrogate.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = rectSurrogate.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
	}

	private static Rect Read(Rect P_0, ProtoReader P_1)
	{
		RectSurrogate rectSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (rectSurrogate == null)
				{
					RectSurrogate rectSurrogate4 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate4, P_1);
					rectSurrogate = rectSurrogate4;
				}
				float x = P_1.ReadSingle();
				rectSurrogate.height = x;
				break;
			}
			case 2:
			{
				if (rectSurrogate == null)
				{
					RectSurrogate rectSurrogate6 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate6, P_1);
					rectSurrogate = rectSurrogate6;
				}
				float x = P_1.ReadSingle();
				rectSurrogate.width = x;
				break;
			}
			case 3:
			{
				if (rectSurrogate == null)
				{
					RectSurrogate rectSurrogate3 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate3, P_1);
					rectSurrogate = rectSurrogate3;
				}
				float x = P_1.ReadSingle();
				rectSurrogate.x = x;
				break;
			}
			case 4:
			{
				if (rectSurrogate == null)
				{
					RectSurrogate rectSurrogate5 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate5, P_1);
					rectSurrogate = rectSurrogate5;
				}
				float x = P_1.ReadSingle();
				rectSurrogate.y = x;
				break;
			}
			default:
				if (rectSurrogate == null)
				{
					RectSurrogate rectSurrogate2 = new RectSurrogate();
					ProtoReader.NoteObject(rectSurrogate2, P_1);
					rectSurrogate = rectSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (rectSurrogate == null)
		{
			RectSurrogate rectSurrogate7 = new RectSurrogate();
			ProtoReader.NoteObject(rectSurrogate7, P_1);
			rectSurrogate = rectSurrogate7;
		}
		P_0 = rectSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<Rect[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Rect[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Rect[]>), P_0.GetType());
		}
		Rect[] value = P_0.Value;
		if (value != null)
		{
			Rect[] array = value;
			foreach (Rect rect in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(rect, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Rect[]> Read(PrimitiveContract<Rect[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Rect[]> primitiveContract = new PrimitiveContract<Rect[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Rect[] value = P_0.Value;
				List<Rect> list = new List<Rect>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Rect item = Read(default(Rect), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Rect[] array = new Rect[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Rect[]> primitiveContract2 = new PrimitiveContract<Rect[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Rect[]> primitiveContract3 = new PrimitiveContract<Rect[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Rect> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Rect>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Rect>), P_0.GetType());
		}
		foreach (Rect item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Rect> Read(List<Rect> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Rect> list = new List<Rect>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Rect>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Rect> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Rect item = Read(default(Rect), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Rect> list3 = new List<Rect>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Rect> list4 = new List<Rect>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Matrix4x4 P_0, ProtoWriter P_1)
	{
		Matrix4x4Surrogate matrix4x4Surrogate = P_0;
		if (matrix4x4Surrogate.GetType() != typeof(Matrix4x4Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Matrix4x4Surrogate), matrix4x4Surrogate.GetType());
		}
		float m = matrix4x4Surrogate.m00;
		if (m != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m, P_1);
		}
		float m2 = matrix4x4Surrogate.m01;
		if (m2 != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m2, P_1);
		}
		float m3 = matrix4x4Surrogate.m02;
		if (m3 != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m3, P_1);
		}
		float m4 = matrix4x4Surrogate.m03;
		if (m4 != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m4, P_1);
		}
		float m5 = matrix4x4Surrogate.m10;
		if (m5 != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m5, P_1);
		}
		float m6 = matrix4x4Surrogate.m11;
		if (m6 != 0f)
		{
			ProtoWriter.WriteFieldHeader(6, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m6, P_1);
		}
		float m7 = matrix4x4Surrogate.m12;
		if (m7 != 0f)
		{
			ProtoWriter.WriteFieldHeader(7, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m7, P_1);
		}
		float m8 = matrix4x4Surrogate.m13;
		if (m8 != 0f)
		{
			ProtoWriter.WriteFieldHeader(8, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m8, P_1);
		}
		float m9 = matrix4x4Surrogate.m20;
		if (m9 != 0f)
		{
			ProtoWriter.WriteFieldHeader(9, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m9, P_1);
		}
		float m10 = matrix4x4Surrogate.m21;
		if (m10 != 0f)
		{
			ProtoWriter.WriteFieldHeader(10, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m10, P_1);
		}
		float m11 = matrix4x4Surrogate.m22;
		if (m11 != 0f)
		{
			ProtoWriter.WriteFieldHeader(11, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m11, P_1);
		}
		float m12 = matrix4x4Surrogate.m23;
		if (m12 != 0f)
		{
			ProtoWriter.WriteFieldHeader(12, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m12, P_1);
		}
		float m13 = matrix4x4Surrogate.m30;
		if (m13 != 0f)
		{
			ProtoWriter.WriteFieldHeader(13, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m13, P_1);
		}
		float m14 = matrix4x4Surrogate.m31;
		if (m14 != 0f)
		{
			ProtoWriter.WriteFieldHeader(14, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m14, P_1);
		}
		float m15 = matrix4x4Surrogate.m32;
		if (m15 != 0f)
		{
			ProtoWriter.WriteFieldHeader(15, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m15, P_1);
		}
		float m16 = matrix4x4Surrogate.m33;
		if (m16 != 0f)
		{
			ProtoWriter.WriteFieldHeader(16, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(m16, P_1);
		}
	}

	private static Matrix4x4 Read(Matrix4x4 P_0, ProtoReader P_1)
	{
		Matrix4x4Surrogate matrix4x4Surrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate13 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate13, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate13;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m00 = m;
				break;
			}
			case 2:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate16 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate16, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate16;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m01 = m;
				break;
			}
			case 3:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate9 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate9, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate9;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m02 = m;
				break;
			}
			case 4:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate6 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate6, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate6;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m03 = m;
				break;
			}
			case 5:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate18 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate18, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate18;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m10 = m;
				break;
			}
			case 6:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate15 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate15, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate15;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m11 = m;
				break;
			}
			case 7:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate7 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate7, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate7;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m12 = m;
				break;
			}
			case 8:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate4 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate4, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate4;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m13 = m;
				break;
			}
			case 9:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate12 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate12, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate12;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m20 = m;
				break;
			}
			case 10:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate10 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate10, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate10;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m21 = m;
				break;
			}
			case 11:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate3 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate3, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate3;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m22 = m;
				break;
			}
			case 12:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate17 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate17, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate17;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m23 = m;
				break;
			}
			case 13:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate14 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate14, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate14;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m30 = m;
				break;
			}
			case 14:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate11 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate11, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate11;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m31 = m;
				break;
			}
			case 15:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate8 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate8, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate8;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m32 = m;
				break;
			}
			case 16:
			{
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate5 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate5, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate5;
				}
				float m = P_1.ReadSingle();
				matrix4x4Surrogate.m33 = m;
				break;
			}
			default:
				if (matrix4x4Surrogate == null)
				{
					Matrix4x4Surrogate matrix4x4Surrogate2 = new Matrix4x4Surrogate();
					ProtoReader.NoteObject(matrix4x4Surrogate2, P_1);
					matrix4x4Surrogate = matrix4x4Surrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (matrix4x4Surrogate == null)
		{
			Matrix4x4Surrogate matrix4x4Surrogate19 = new Matrix4x4Surrogate();
			ProtoReader.NoteObject(matrix4x4Surrogate19, P_1);
			matrix4x4Surrogate = matrix4x4Surrogate19;
		}
		P_0 = matrix4x4Surrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<Matrix4x4[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Matrix4x4[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Matrix4x4[]>), P_0.GetType());
		}
		Matrix4x4[] value = P_0.Value;
		if (value != null)
		{
			Matrix4x4[] array = value;
			foreach (Matrix4x4 matrix4x in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(matrix4x, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Matrix4x4[]> Read(PrimitiveContract<Matrix4x4[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Matrix4x4[]> primitiveContract = new PrimitiveContract<Matrix4x4[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Matrix4x4[] value = P_0.Value;
				List<Matrix4x4> list = new List<Matrix4x4>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Matrix4x4 item = Read(default(Matrix4x4), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Matrix4x4[] array = new Matrix4x4[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Matrix4x4[]> primitiveContract2 = new PrimitiveContract<Matrix4x4[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Matrix4x4[]> primitiveContract3 = new PrimitiveContract<Matrix4x4[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Matrix4x4> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Matrix4x4>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Matrix4x4>), P_0.GetType());
		}
		foreach (Matrix4x4 item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Matrix4x4> Read(List<Matrix4x4> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Matrix4x4> list = new List<Matrix4x4>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Matrix4x4>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Matrix4x4> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Matrix4x4 item = Read(default(Matrix4x4), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Matrix4x4> list3 = new List<Matrix4x4>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Matrix4x4> list4 = new List<Matrix4x4>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Scene P_0, ProtoWriter P_1)
	{
		SceneSurrogate sceneSurrogate = P_0;
		if (sceneSurrogate.GetType() != typeof(SceneSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(SceneSurrogate), sceneSurrogate.GetType());
		}
	}

	private static Scene Read(Scene P_0, ProtoReader P_1)
	{
		SceneSurrogate sceneSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (sceneSurrogate == null)
			{
				SceneSurrogate sceneSurrogate2 = new SceneSurrogate();
				ProtoReader.NoteObject(sceneSurrogate2, P_1);
				sceneSurrogate = sceneSurrogate2;
			}
			P_1.SkipField();
		}
		if (sceneSurrogate == null)
		{
			SceneSurrogate sceneSurrogate3 = new SceneSurrogate();
			ProtoReader.NoteObject(sceneSurrogate3, P_1);
			sceneSurrogate = sceneSurrogate3;
		}
		P_0 = sceneSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<Scene[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Scene[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Scene[]>), P_0.GetType());
		}
		Scene[] value = P_0.Value;
		if (value != null)
		{
			Scene[] array = value;
			foreach (Scene scene in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(scene, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Scene[]> Read(PrimitiveContract<Scene[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Scene[]> primitiveContract = new PrimitiveContract<Scene[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Scene[] value = P_0.Value;
				List<Scene> list = new List<Scene>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Scene item = Read(default(Scene), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Scene[] array = new Scene[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Scene[]> primitiveContract2 = new PrimitiveContract<Scene[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Scene[]> primitiveContract3 = new PrimitiveContract<Scene[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Scene> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Scene>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Scene>), P_0.GetType());
		}
		foreach (Scene item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Scene> Read(List<Scene> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Scene> list = new List<Scene>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Scene>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Scene> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Scene item = Read(default(Scene), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Scene> list3 = new List<Scene>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Scene> list4 = new List<Scene>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Bounds P_0, ProtoWriter P_1)
	{
		BoundsSurrogate boundsSurrogate = P_0;
		if (boundsSurrogate.GetType() != typeof(BoundsSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(BoundsSurrogate), boundsSurrogate.GetType());
		}
		Vector3 center = boundsSurrogate.center;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(center, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 extents = boundsSurrogate.extents;
		ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(extents, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 max = boundsSurrogate.max;
		ProtoWriter.WriteFieldHeader(3, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(max, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 min = boundsSurrogate.min;
		ProtoWriter.WriteFieldHeader(4, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(min, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		Vector3 size = boundsSurrogate.size;
		ProtoWriter.WriteFieldHeader(5, WireType.String, P_1);
		token = ProtoWriter.StartSubItem(null, P_1);
		Write(size, P_1);
		ProtoWriter.EndSubItem(token, P_1);
	}

	private static Bounds Read(Bounds P_0, ProtoReader P_1)
	{
		BoundsSurrogate boundsSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (boundsSurrogate == null)
				{
					BoundsSurrogate boundsSurrogate7 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate7, P_1);
					boundsSurrogate = boundsSurrogate7;
				}
				Vector3 center = boundsSurrogate.center;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector5 = Read(center, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector5;
				boundsSurrogate.center = extents2;
				break;
			}
			case 2:
			{
				if (boundsSurrogate == null)
				{
					BoundsSurrogate boundsSurrogate3 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate3, P_1);
					boundsSurrogate = boundsSurrogate3;
				}
				Vector3 extents = boundsSurrogate.extents;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(extents, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector;
				boundsSurrogate.extents = extents2;
				break;
			}
			case 3:
			{
				if (boundsSurrogate == null)
				{
					BoundsSurrogate boundsSurrogate6 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate6, P_1);
					boundsSurrogate = boundsSurrogate6;
				}
				Vector3 max = boundsSurrogate.max;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector4 = Read(max, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector4;
				boundsSurrogate.max = extents2;
				break;
			}
			case 4:
			{
				if (boundsSurrogate == null)
				{
					BoundsSurrogate boundsSurrogate4 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate4, P_1);
					boundsSurrogate = boundsSurrogate4;
				}
				Vector3 min = boundsSurrogate.min;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector2 = Read(min, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector2;
				boundsSurrogate.min = extents2;
				break;
			}
			case 5:
			{
				if (boundsSurrogate == null)
				{
					BoundsSurrogate boundsSurrogate5 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate5, P_1);
					boundsSurrogate = boundsSurrogate5;
				}
				Vector3 size = boundsSurrogate.size;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector3 = Read(size, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 extents2 = vector3;
				boundsSurrogate.size = extents2;
				break;
			}
			default:
				if (boundsSurrogate == null)
				{
					BoundsSurrogate boundsSurrogate2 = new BoundsSurrogate();
					ProtoReader.NoteObject(boundsSurrogate2, P_1);
					boundsSurrogate = boundsSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (boundsSurrogate == null)
		{
			BoundsSurrogate boundsSurrogate8 = new BoundsSurrogate();
			ProtoReader.NoteObject(boundsSurrogate8, P_1);
			boundsSurrogate = boundsSurrogate8;
		}
		P_0 = boundsSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<Bounds[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Bounds[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Bounds[]>), P_0.GetType());
		}
		Bounds[] value = P_0.Value;
		if (value != null)
		{
			Bounds[] array = value;
			foreach (Bounds bounds in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(bounds, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Bounds[]> Read(PrimitiveContract<Bounds[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Bounds[]> primitiveContract = new PrimitiveContract<Bounds[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Bounds[] value = P_0.Value;
				List<Bounds> list = new List<Bounds>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Bounds item = Read(default(Bounds), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Bounds[] array = new Bounds[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Bounds[]> primitiveContract2 = new PrimitiveContract<Bounds[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Bounds[]> primitiveContract3 = new PrimitiveContract<Bounds[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Bounds> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Bounds>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Bounds>), P_0.GetType());
		}
		foreach (Bounds item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Bounds> Read(List<Bounds> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Bounds> list = new List<Bounds>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Bounds>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Bounds> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Bounds item = Read(default(Bounds), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Bounds> list3 = new List<Bounds>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Bounds> list4 = new List<Bounds>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Vector4 P_0, ProtoWriter P_1)
	{
		Vector4Surrogate vector4Surrogate = P_0;
		if (vector4Surrogate.GetType() != typeof(Vector4Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Vector4Surrogate), vector4Surrogate.GetType());
		}
		float w = vector4Surrogate.w;
		if (w != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(w, P_1);
		}
		float x = vector4Surrogate.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = vector4Surrogate.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
		float z = vector4Surrogate.z;
		if (z != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(z, P_1);
		}
	}

	private static Vector4 Read(Vector4 P_0, ProtoReader P_1)
	{
		Vector4Surrogate vector4Surrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (vector4Surrogate == null)
				{
					Vector4Surrogate vector4Surrogate4 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate4, P_1);
					vector4Surrogate = vector4Surrogate4;
				}
				float y = P_1.ReadSingle();
				vector4Surrogate.w = y;
				break;
			}
			case 2:
			{
				if (vector4Surrogate == null)
				{
					Vector4Surrogate vector4Surrogate6 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate6, P_1);
					vector4Surrogate = vector4Surrogate6;
				}
				float y = P_1.ReadSingle();
				vector4Surrogate.x = y;
				break;
			}
			case 3:
			{
				if (vector4Surrogate == null)
				{
					Vector4Surrogate vector4Surrogate3 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate3, P_1);
					vector4Surrogate = vector4Surrogate3;
				}
				float y = P_1.ReadSingle();
				vector4Surrogate.y = y;
				break;
			}
			case 4:
			{
				if (vector4Surrogate == null)
				{
					Vector4Surrogate vector4Surrogate5 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate5, P_1);
					vector4Surrogate = vector4Surrogate5;
				}
				float y = P_1.ReadSingle();
				vector4Surrogate.z = y;
				break;
			}
			default:
				if (vector4Surrogate == null)
				{
					Vector4Surrogate vector4Surrogate2 = new Vector4Surrogate();
					ProtoReader.NoteObject(vector4Surrogate2, P_1);
					vector4Surrogate = vector4Surrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (vector4Surrogate == null)
		{
			Vector4Surrogate vector4Surrogate7 = new Vector4Surrogate();
			ProtoReader.NoteObject(vector4Surrogate7, P_1);
			vector4Surrogate = vector4Surrogate7;
		}
		P_0 = vector4Surrogate;
		return P_0;
	}

	private static void Write(List<Vector4> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Vector4>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Vector4>), P_0.GetType());
		}
		foreach (Vector4 item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Vector4> Read(List<Vector4> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Vector4> list = new List<Vector4>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Vector4>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector4> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector4 item = Read(default(Vector4), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Vector4> list3 = new List<Vector4>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Vector4> list4 = new List<Vector4>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Vector2 P_0, ProtoWriter P_1)
	{
		Vector2Surrogate vector2Surrogate = P_0;
		if (vector2Surrogate.GetType() != typeof(Vector2Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Vector2Surrogate), vector2Surrogate.GetType());
		}
		float x = vector2Surrogate.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = vector2Surrogate.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
	}

	private static Vector2 Read(Vector2 P_0, ProtoReader P_1)
	{
		Vector2Surrogate vector2Surrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (vector2Surrogate == null)
				{
					Vector2Surrogate vector2Surrogate3 = new Vector2Surrogate();
					ProtoReader.NoteObject(vector2Surrogate3, P_1);
					vector2Surrogate = vector2Surrogate3;
				}
				float x = P_1.ReadSingle();
				vector2Surrogate.x = x;
				break;
			}
			case 2:
			{
				if (vector2Surrogate == null)
				{
					Vector2Surrogate vector2Surrogate4 = new Vector2Surrogate();
					ProtoReader.NoteObject(vector2Surrogate4, P_1);
					vector2Surrogate = vector2Surrogate4;
				}
				float x = P_1.ReadSingle();
				vector2Surrogate.y = x;
				break;
			}
			default:
				if (vector2Surrogate == null)
				{
					Vector2Surrogate vector2Surrogate2 = new Vector2Surrogate();
					ProtoReader.NoteObject(vector2Surrogate2, P_1);
					vector2Surrogate = vector2Surrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (vector2Surrogate == null)
		{
			Vector2Surrogate vector2Surrogate5 = new Vector2Surrogate();
			ProtoReader.NoteObject(vector2Surrogate5, P_1);
			vector2Surrogate = vector2Surrogate5;
		}
		P_0 = vector2Surrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<Vector2[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Vector2[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Vector2[]>), P_0.GetType());
		}
		Vector2[] value = P_0.Value;
		if (value != null)
		{
			Vector2[] array = value;
			foreach (Vector2 vector in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(vector, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Vector2[]> Read(PrimitiveContract<Vector2[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector2[]> primitiveContract = new PrimitiveContract<Vector2[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Vector2[] value = P_0.Value;
				List<Vector2> list = new List<Vector2>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector2 item = Read(default(Vector2), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Vector2[] array = new Vector2[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Vector2[]> primitiveContract2 = new PrimitiveContract<Vector2[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Vector2[]> primitiveContract3 = new PrimitiveContract<Vector2[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Vector2> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Vector2>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Vector2>), P_0.GetType());
		}
		foreach (Vector2 item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Vector2> Read(List<Vector2> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Vector2> list = new List<Vector2>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Vector2>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Vector2> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Vector2 item = Read(default(Vector2), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Vector2> list3 = new List<Vector2>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Vector2> list4 = new List<Vector2>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(RenderBuffer P_0, ProtoWriter P_1)
	{
		RenderBufferSurrogate renderBufferSurrogate = P_0;
		if (renderBufferSurrogate.GetType() != typeof(RenderBufferSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(RenderBufferSurrogate), renderBufferSurrogate.GetType());
		}
	}

	private static RenderBuffer Read(RenderBuffer P_0, ProtoReader P_1)
	{
		RenderBufferSurrogate renderBufferSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (renderBufferSurrogate == null)
			{
				RenderBufferSurrogate renderBufferSurrogate2 = new RenderBufferSurrogate();
				ProtoReader.NoteObject(renderBufferSurrogate2, P_1);
				renderBufferSurrogate = renderBufferSurrogate2;
			}
			P_1.SkipField();
		}
		if (renderBufferSurrogate == null)
		{
			RenderBufferSurrogate renderBufferSurrogate3 = new RenderBufferSurrogate();
			ProtoReader.NoteObject(renderBufferSurrogate3, P_1);
			renderBufferSurrogate = renderBufferSurrogate3;
		}
		P_0 = renderBufferSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<RenderBuffer[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<RenderBuffer[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<RenderBuffer[]>), P_0.GetType());
		}
		RenderBuffer[] value = P_0.Value;
		if (value != null)
		{
			RenderBuffer[] array = value;
			foreach (RenderBuffer renderBuffer in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(renderBuffer, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<RenderBuffer[]> Read(PrimitiveContract<RenderBuffer[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<RenderBuffer[]> primitiveContract = new PrimitiveContract<RenderBuffer[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				RenderBuffer[] value = P_0.Value;
				List<RenderBuffer> list = new List<RenderBuffer>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RenderBuffer item = Read(default(RenderBuffer), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				RenderBuffer[] array = new RenderBuffer[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<RenderBuffer[]> primitiveContract2 = new PrimitiveContract<RenderBuffer[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<RenderBuffer[]> primitiveContract3 = new PrimitiveContract<RenderBuffer[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<RenderBuffer> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<RenderBuffer>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<RenderBuffer>), P_0.GetType());
		}
		foreach (RenderBuffer item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<RenderBuffer> Read(List<RenderBuffer> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<RenderBuffer> list = new List<RenderBuffer>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<RenderBuffer>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<RenderBuffer> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					RenderBuffer item = Read(default(RenderBuffer), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<RenderBuffer> list3 = new List<RenderBuffer>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<RenderBuffer> list4 = new List<RenderBuffer>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Quaternion P_0, ProtoWriter P_1)
	{
		QuaternionSurrogate quaternionSurrogate = P_0;
		if (quaternionSurrogate.GetType() != typeof(QuaternionSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(QuaternionSurrogate), quaternionSurrogate.GetType());
		}
		Vector3 eulerAngles = quaternionSurrogate.eulerAngles;
		ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
		SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
		Write(eulerAngles, P_1);
		ProtoWriter.EndSubItem(token, P_1);
		float w = quaternionSurrogate.w;
		if (w != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(w, P_1);
		}
		float x = quaternionSurrogate.x;
		if (x != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(x, P_1);
		}
		float y = quaternionSurrogate.y;
		if (y != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(y, P_1);
		}
		float z = quaternionSurrogate.z;
		if (z != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(z, P_1);
		}
	}

	private static Quaternion Read(Quaternion P_0, ProtoReader P_1)
	{
		QuaternionSurrogate quaternionSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (quaternionSurrogate == null)
				{
					QuaternionSurrogate quaternionSurrogate7 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate7, P_1);
					quaternionSurrogate = quaternionSurrogate7;
				}
				Vector3 eulerAngles = quaternionSurrogate.eulerAngles;
				SubItemToken token = ProtoReader.StartSubItem(P_1);
				Vector3 vector = Read(eulerAngles, P_1);
				ProtoReader.EndSubItem(token, P_1);
				Vector3 eulerAngles2 = vector;
				quaternionSurrogate.eulerAngles = eulerAngles2;
				break;
			}
			case 2:
			{
				if (quaternionSurrogate == null)
				{
					QuaternionSurrogate quaternionSurrogate3 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate3, P_1);
					quaternionSurrogate = quaternionSurrogate3;
				}
				float w = P_1.ReadSingle();
				quaternionSurrogate.w = w;
				break;
			}
			case 3:
			{
				if (quaternionSurrogate == null)
				{
					QuaternionSurrogate quaternionSurrogate6 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate6, P_1);
					quaternionSurrogate = quaternionSurrogate6;
				}
				float w = P_1.ReadSingle();
				quaternionSurrogate.x = w;
				break;
			}
			case 4:
			{
				if (quaternionSurrogate == null)
				{
					QuaternionSurrogate quaternionSurrogate4 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate4, P_1);
					quaternionSurrogate = quaternionSurrogate4;
				}
				float w = P_1.ReadSingle();
				quaternionSurrogate.y = w;
				break;
			}
			case 5:
			{
				if (quaternionSurrogate == null)
				{
					QuaternionSurrogate quaternionSurrogate5 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate5, P_1);
					quaternionSurrogate = quaternionSurrogate5;
				}
				float w = P_1.ReadSingle();
				quaternionSurrogate.z = w;
				break;
			}
			default:
				if (quaternionSurrogate == null)
				{
					QuaternionSurrogate quaternionSurrogate2 = new QuaternionSurrogate();
					ProtoReader.NoteObject(quaternionSurrogate2, P_1);
					quaternionSurrogate = quaternionSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (quaternionSurrogate == null)
		{
			QuaternionSurrogate quaternionSurrogate8 = new QuaternionSurrogate();
			ProtoReader.NoteObject(quaternionSurrogate8, P_1);
			quaternionSurrogate = quaternionSurrogate8;
		}
		P_0 = quaternionSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<Quaternion[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Quaternion[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Quaternion[]>), P_0.GetType());
		}
		Quaternion[] value = P_0.Value;
		if (value != null)
		{
			Quaternion[] array = value;
			foreach (Quaternion quaternion in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(quaternion, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Quaternion[]> Read(PrimitiveContract<Quaternion[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Quaternion[]> primitiveContract = new PrimitiveContract<Quaternion[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Quaternion[] value = P_0.Value;
				List<Quaternion> list = new List<Quaternion>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Quaternion item = Read(default(Quaternion), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Quaternion[] array = new Quaternion[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Quaternion[]> primitiveContract2 = new PrimitiveContract<Quaternion[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Quaternion[]> primitiveContract3 = new PrimitiveContract<Quaternion[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Quaternion> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Quaternion>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Quaternion>), P_0.GetType());
		}
		foreach (Quaternion item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Quaternion> Read(List<Quaternion> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Quaternion> list = new List<Quaternion>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Quaternion>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Quaternion> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Quaternion item = Read(default(Quaternion), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Quaternion> list3 = new List<Quaternion>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Quaternion> list4 = new List<Quaternion>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointMotor P_0, ProtoWriter P_1)
	{
		JointMotorSurrogate jointMotorSurrogate = P_0;
		if (jointMotorSurrogate.GetType() != typeof(JointMotorSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointMotorSurrogate), jointMotorSurrogate.GetType());
		}
		float force = jointMotorSurrogate.force;
		if (force != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(force, P_1);
		}
		bool freeSpin = jointMotorSurrogate.freeSpin;
		if (freeSpin)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteBoolean(freeSpin, P_1);
		}
		float targetVelocity = jointMotorSurrogate.targetVelocity;
		if (targetVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(targetVelocity, P_1);
		}
	}

	private static JointMotor Read(JointMotor P_0, ProtoReader P_1)
	{
		JointMotorSurrogate jointMotorSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (jointMotorSurrogate == null)
				{
					JointMotorSurrogate jointMotorSurrogate4 = new JointMotorSurrogate();
					ProtoReader.NoteObject(jointMotorSurrogate4, P_1);
					jointMotorSurrogate = jointMotorSurrogate4;
				}
				float force = P_1.ReadSingle();
				jointMotorSurrogate.force = force;
				break;
			}
			case 2:
			{
				if (jointMotorSurrogate == null)
				{
					JointMotorSurrogate jointMotorSurrogate3 = new JointMotorSurrogate();
					ProtoReader.NoteObject(jointMotorSurrogate3, P_1);
					jointMotorSurrogate = jointMotorSurrogate3;
				}
				bool freeSpin = P_1.ReadBoolean();
				jointMotorSurrogate.freeSpin = freeSpin;
				break;
			}
			case 3:
			{
				if (jointMotorSurrogate == null)
				{
					JointMotorSurrogate jointMotorSurrogate5 = new JointMotorSurrogate();
					ProtoReader.NoteObject(jointMotorSurrogate5, P_1);
					jointMotorSurrogate = jointMotorSurrogate5;
				}
				float force = P_1.ReadSingle();
				jointMotorSurrogate.targetVelocity = force;
				break;
			}
			default:
				if (jointMotorSurrogate == null)
				{
					JointMotorSurrogate jointMotorSurrogate2 = new JointMotorSurrogate();
					ProtoReader.NoteObject(jointMotorSurrogate2, P_1);
					jointMotorSurrogate = jointMotorSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (jointMotorSurrogate == null)
		{
			JointMotorSurrogate jointMotorSurrogate6 = new JointMotorSurrogate();
			ProtoReader.NoteObject(jointMotorSurrogate6, P_1);
			jointMotorSurrogate = jointMotorSurrogate6;
		}
		P_0 = jointMotorSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<JointMotor[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointMotor[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointMotor[]>), P_0.GetType());
		}
		JointMotor[] value = P_0.Value;
		if (value != null)
		{
			JointMotor[] array = value;
			foreach (JointMotor jointMotor in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(jointMotor, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointMotor[]> Read(PrimitiveContract<JointMotor[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointMotor[]> primitiveContract = new PrimitiveContract<JointMotor[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointMotor[] value = P_0.Value;
				List<JointMotor> list = new List<JointMotor>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointMotor item = Read(default(JointMotor), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointMotor[] array = new JointMotor[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointMotor[]> primitiveContract2 = new PrimitiveContract<JointMotor[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointMotor[]> primitiveContract3 = new PrimitiveContract<JointMotor[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointMotor> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointMotor>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointMotor>), P_0.GetType());
		}
		foreach (JointMotor item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointMotor> Read(List<JointMotor> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointMotor> list = new List<JointMotor>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointMotor>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointMotor> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointMotor item = Read(default(JointMotor), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointMotor> list3 = new List<JointMotor>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointMotor> list4 = new List<JointMotor>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointLimits P_0, ProtoWriter P_1)
	{
		JointLimitsSurrogate jointLimitsSurrogate = P_0;
		if (jointLimitsSurrogate.GetType() != typeof(JointLimitsSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointLimitsSurrogate), jointLimitsSurrogate.GetType());
		}
		float bounceMinVelocity = jointLimitsSurrogate.bounceMinVelocity;
		if (bounceMinVelocity != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounceMinVelocity, P_1);
		}
		float bounciness = jointLimitsSurrogate.bounciness;
		if (bounciness != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounciness, P_1);
		}
		float contactDistance = jointLimitsSurrogate.contactDistance;
		if (contactDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(contactDistance, P_1);
		}
		float max = jointLimitsSurrogate.max;
		if (max != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(max, P_1);
		}
		float min = jointLimitsSurrogate.min;
		if (min != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(min, P_1);
		}
	}

	private static JointLimits Read(JointLimits P_0, ProtoReader P_1)
	{
		JointLimitsSurrogate jointLimitsSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (jointLimitsSurrogate == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate7 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate7, P_1);
					jointLimitsSurrogate = jointLimitsSurrogate7;
				}
				float bounciness = P_1.ReadSingle();
				jointLimitsSurrogate.bounceMinVelocity = bounciness;
				break;
			}
			case 2:
			{
				if (jointLimitsSurrogate == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate3 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate3, P_1);
					jointLimitsSurrogate = jointLimitsSurrogate3;
				}
				float bounciness = P_1.ReadSingle();
				jointLimitsSurrogate.bounciness = bounciness;
				break;
			}
			case 3:
			{
				if (jointLimitsSurrogate == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate6 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate6, P_1);
					jointLimitsSurrogate = jointLimitsSurrogate6;
				}
				float bounciness = P_1.ReadSingle();
				jointLimitsSurrogate.contactDistance = bounciness;
				break;
			}
			case 4:
			{
				if (jointLimitsSurrogate == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate4 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate4, P_1);
					jointLimitsSurrogate = jointLimitsSurrogate4;
				}
				float bounciness = P_1.ReadSingle();
				jointLimitsSurrogate.max = bounciness;
				break;
			}
			case 5:
			{
				if (jointLimitsSurrogate == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate5 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate5, P_1);
					jointLimitsSurrogate = jointLimitsSurrogate5;
				}
				float bounciness = P_1.ReadSingle();
				jointLimitsSurrogate.min = bounciness;
				break;
			}
			default:
				if (jointLimitsSurrogate == null)
				{
					JointLimitsSurrogate jointLimitsSurrogate2 = new JointLimitsSurrogate();
					ProtoReader.NoteObject(jointLimitsSurrogate2, P_1);
					jointLimitsSurrogate = jointLimitsSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (jointLimitsSurrogate == null)
		{
			JointLimitsSurrogate jointLimitsSurrogate8 = new JointLimitsSurrogate();
			ProtoReader.NoteObject(jointLimitsSurrogate8, P_1);
			jointLimitsSurrogate = jointLimitsSurrogate8;
		}
		P_0 = jointLimitsSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<JointLimits[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointLimits[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointLimits[]>), P_0.GetType());
		}
		JointLimits[] value = P_0.Value;
		if (value != null)
		{
			JointLimits[] array = value;
			foreach (JointLimits jointLimits in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(jointLimits, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointLimits[]> Read(PrimitiveContract<JointLimits[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointLimits[]> primitiveContract = new PrimitiveContract<JointLimits[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointLimits[] value = P_0.Value;
				List<JointLimits> list = new List<JointLimits>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointLimits item = Read(default(JointLimits), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointLimits[] array = new JointLimits[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointLimits[]> primitiveContract2 = new PrimitiveContract<JointLimits[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointLimits[]> primitiveContract3 = new PrimitiveContract<JointLimits[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointLimits> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointLimits>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointLimits>), P_0.GetType());
		}
		foreach (JointLimits item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointLimits> Read(List<JointLimits> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointLimits> list = new List<JointLimits>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointLimits>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointLimits> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointLimits item = Read(default(JointLimits), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointLimits> list3 = new List<JointLimits>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointLimits> list4 = new List<JointLimits>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointSpring P_0, ProtoWriter P_1)
	{
		JointSpringSurrogate jointSpringSurrogate = P_0;
		if (jointSpringSurrogate.GetType() != typeof(JointSpringSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointSpringSurrogate), jointSpringSurrogate.GetType());
		}
		float damper = jointSpringSurrogate.damper;
		if (damper != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(damper, P_1);
		}
		float spring = jointSpringSurrogate.spring;
		if (spring != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spring, P_1);
		}
		float targetPosition = jointSpringSurrogate.targetPosition;
		if (targetPosition != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(targetPosition, P_1);
		}
	}

	private static JointSpring Read(JointSpring P_0, ProtoReader P_1)
	{
		JointSpringSurrogate jointSpringSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (jointSpringSurrogate == null)
				{
					JointSpringSurrogate jointSpringSurrogate4 = new JointSpringSurrogate();
					ProtoReader.NoteObject(jointSpringSurrogate4, P_1);
					jointSpringSurrogate = jointSpringSurrogate4;
				}
				float spring = P_1.ReadSingle();
				jointSpringSurrogate.damper = spring;
				break;
			}
			case 2:
			{
				if (jointSpringSurrogate == null)
				{
					JointSpringSurrogate jointSpringSurrogate3 = new JointSpringSurrogate();
					ProtoReader.NoteObject(jointSpringSurrogate3, P_1);
					jointSpringSurrogate = jointSpringSurrogate3;
				}
				float spring = P_1.ReadSingle();
				jointSpringSurrogate.spring = spring;
				break;
			}
			case 3:
			{
				if (jointSpringSurrogate == null)
				{
					JointSpringSurrogate jointSpringSurrogate5 = new JointSpringSurrogate();
					ProtoReader.NoteObject(jointSpringSurrogate5, P_1);
					jointSpringSurrogate = jointSpringSurrogate5;
				}
				float spring = P_1.ReadSingle();
				jointSpringSurrogate.targetPosition = spring;
				break;
			}
			default:
				if (jointSpringSurrogate == null)
				{
					JointSpringSurrogate jointSpringSurrogate2 = new JointSpringSurrogate();
					ProtoReader.NoteObject(jointSpringSurrogate2, P_1);
					jointSpringSurrogate = jointSpringSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (jointSpringSurrogate == null)
		{
			JointSpringSurrogate jointSpringSurrogate6 = new JointSpringSurrogate();
			ProtoReader.NoteObject(jointSpringSurrogate6, P_1);
			jointSpringSurrogate = jointSpringSurrogate6;
		}
		P_0 = jointSpringSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<JointSpring[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointSpring[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointSpring[]>), P_0.GetType());
		}
		JointSpring[] value = P_0.Value;
		if (value != null)
		{
			JointSpring[] array = value;
			foreach (JointSpring jointSpring in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(jointSpring, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointSpring[]> Read(PrimitiveContract<JointSpring[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointSpring[]> primitiveContract = new PrimitiveContract<JointSpring[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointSpring[] value = P_0.Value;
				List<JointSpring> list = new List<JointSpring>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointSpring item = Read(default(JointSpring), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointSpring[] array = new JointSpring[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointSpring[]> primitiveContract2 = new PrimitiveContract<JointSpring[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointSpring[]> primitiveContract3 = new PrimitiveContract<JointSpring[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointSpring> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointSpring>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointSpring>), P_0.GetType());
		}
		foreach (JointSpring item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointSpring> Read(List<JointSpring> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointSpring> list = new List<JointSpring>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointSpring>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointSpring> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointSpring item = Read(default(JointSpring), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointSpring> list3 = new List<JointSpring>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointSpring> list4 = new List<JointSpring>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointDrive P_0, ProtoWriter P_1)
	{
		JointDriveSurrogate jointDriveSurrogate = P_0;
		if (jointDriveSurrogate.GetType() != typeof(JointDriveSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointDriveSurrogate), jointDriveSurrogate.GetType());
		}
		float maximumForce = jointDriveSurrogate.maximumForce;
		if (maximumForce != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maximumForce, P_1);
		}
		float positionDamper = jointDriveSurrogate.positionDamper;
		if (positionDamper != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(positionDamper, P_1);
		}
		float positionSpring = jointDriveSurrogate.positionSpring;
		if (positionSpring != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(positionSpring, P_1);
		}
	}

	private static JointDrive Read(JointDrive P_0, ProtoReader P_1)
	{
		JointDriveSurrogate jointDriveSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (jointDriveSurrogate == null)
				{
					JointDriveSurrogate jointDriveSurrogate4 = new JointDriveSurrogate();
					ProtoReader.NoteObject(jointDriveSurrogate4, P_1);
					jointDriveSurrogate = jointDriveSurrogate4;
				}
				float positionDamper = P_1.ReadSingle();
				jointDriveSurrogate.maximumForce = positionDamper;
				break;
			}
			case 2:
			{
				if (jointDriveSurrogate == null)
				{
					JointDriveSurrogate jointDriveSurrogate3 = new JointDriveSurrogate();
					ProtoReader.NoteObject(jointDriveSurrogate3, P_1);
					jointDriveSurrogate = jointDriveSurrogate3;
				}
				float positionDamper = P_1.ReadSingle();
				jointDriveSurrogate.positionDamper = positionDamper;
				break;
			}
			case 3:
			{
				if (jointDriveSurrogate == null)
				{
					JointDriveSurrogate jointDriveSurrogate5 = new JointDriveSurrogate();
					ProtoReader.NoteObject(jointDriveSurrogate5, P_1);
					jointDriveSurrogate = jointDriveSurrogate5;
				}
				float positionDamper = P_1.ReadSingle();
				jointDriveSurrogate.positionSpring = positionDamper;
				break;
			}
			default:
				if (jointDriveSurrogate == null)
				{
					JointDriveSurrogate jointDriveSurrogate2 = new JointDriveSurrogate();
					ProtoReader.NoteObject(jointDriveSurrogate2, P_1);
					jointDriveSurrogate = jointDriveSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (jointDriveSurrogate == null)
		{
			JointDriveSurrogate jointDriveSurrogate6 = new JointDriveSurrogate();
			ProtoReader.NoteObject(jointDriveSurrogate6, P_1);
			jointDriveSurrogate = jointDriveSurrogate6;
		}
		P_0 = jointDriveSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<JointDrive[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointDrive[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointDrive[]>), P_0.GetType());
		}
		JointDrive[] value = P_0.Value;
		if (value != null)
		{
			JointDrive[] array = value;
			foreach (JointDrive jointDrive in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(jointDrive, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointDrive[]> Read(PrimitiveContract<JointDrive[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointDrive[]> primitiveContract = new PrimitiveContract<JointDrive[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointDrive[] value = P_0.Value;
				List<JointDrive> list = new List<JointDrive>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointDrive item = Read(default(JointDrive), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointDrive[] array = new JointDrive[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointDrive[]> primitiveContract2 = new PrimitiveContract<JointDrive[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointDrive[]> primitiveContract3 = new PrimitiveContract<JointDrive[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointDrive> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointDrive>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointDrive>), P_0.GetType());
		}
		foreach (JointDrive item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointDrive> Read(List<JointDrive> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointDrive> list = new List<JointDrive>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointDrive>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointDrive> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointDrive item = Read(default(JointDrive), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointDrive> list3 = new List<JointDrive>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointDrive> list4 = new List<JointDrive>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(SoftJointLimitSpring P_0, ProtoWriter P_1)
	{
		SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate = P_0;
		if (softJointLimitSpringSurrogate.GetType() != typeof(SoftJointLimitSpringSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(SoftJointLimitSpringSurrogate), softJointLimitSpringSurrogate.GetType());
		}
		float damper = softJointLimitSpringSurrogate.damper;
		if (damper != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(damper, P_1);
		}
		float spring = softJointLimitSpringSurrogate.spring;
		if (spring != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(spring, P_1);
		}
	}

	private static SoftJointLimitSpring Read(SoftJointLimitSpring P_0, ProtoReader P_1)
	{
		SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (softJointLimitSpringSurrogate == null)
				{
					SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate3 = new SoftJointLimitSpringSurrogate();
					ProtoReader.NoteObject(softJointLimitSpringSurrogate3, P_1);
					softJointLimitSpringSurrogate = softJointLimitSpringSurrogate3;
				}
				float damper = P_1.ReadSingle();
				softJointLimitSpringSurrogate.damper = damper;
				break;
			}
			case 2:
			{
				if (softJointLimitSpringSurrogate == null)
				{
					SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate4 = new SoftJointLimitSpringSurrogate();
					ProtoReader.NoteObject(softJointLimitSpringSurrogate4, P_1);
					softJointLimitSpringSurrogate = softJointLimitSpringSurrogate4;
				}
				float damper = P_1.ReadSingle();
				softJointLimitSpringSurrogate.spring = damper;
				break;
			}
			default:
				if (softJointLimitSpringSurrogate == null)
				{
					SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate2 = new SoftJointLimitSpringSurrogate();
					ProtoReader.NoteObject(softJointLimitSpringSurrogate2, P_1);
					softJointLimitSpringSurrogate = softJointLimitSpringSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (softJointLimitSpringSurrogate == null)
		{
			SoftJointLimitSpringSurrogate softJointLimitSpringSurrogate5 = new SoftJointLimitSpringSurrogate();
			ProtoReader.NoteObject(softJointLimitSpringSurrogate5, P_1);
			softJointLimitSpringSurrogate = softJointLimitSpringSurrogate5;
		}
		P_0 = softJointLimitSpringSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<SoftJointLimitSpring[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<SoftJointLimitSpring[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<SoftJointLimitSpring[]>), P_0.GetType());
		}
		SoftJointLimitSpring[] value = P_0.Value;
		if (value != null)
		{
			SoftJointLimitSpring[] array = value;
			foreach (SoftJointLimitSpring softJointLimitSpring in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(softJointLimitSpring, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<SoftJointLimitSpring[]> Read(PrimitiveContract<SoftJointLimitSpring[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<SoftJointLimitSpring[]> primitiveContract = new PrimitiveContract<SoftJointLimitSpring[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				SoftJointLimitSpring[] value = P_0.Value;
				List<SoftJointLimitSpring> list = new List<SoftJointLimitSpring>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SoftJointLimitSpring item = Read(default(SoftJointLimitSpring), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				SoftJointLimitSpring[] array = new SoftJointLimitSpring[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<SoftJointLimitSpring[]> primitiveContract2 = new PrimitiveContract<SoftJointLimitSpring[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<SoftJointLimitSpring[]> primitiveContract3 = new PrimitiveContract<SoftJointLimitSpring[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<SoftJointLimitSpring> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<SoftJointLimitSpring>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<SoftJointLimitSpring>), P_0.GetType());
		}
		foreach (SoftJointLimitSpring item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<SoftJointLimitSpring> Read(List<SoftJointLimitSpring> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<SoftJointLimitSpring> list = new List<SoftJointLimitSpring>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<SoftJointLimitSpring>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<SoftJointLimitSpring> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SoftJointLimitSpring item = Read(default(SoftJointLimitSpring), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<SoftJointLimitSpring> list3 = new List<SoftJointLimitSpring>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<SoftJointLimitSpring> list4 = new List<SoftJointLimitSpring>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(SoftJointLimit P_0, ProtoWriter P_1)
	{
		SoftJointLimitSurrogate softJointLimitSurrogate = P_0;
		if (softJointLimitSurrogate.GetType() != typeof(SoftJointLimitSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(SoftJointLimitSurrogate), softJointLimitSurrogate.GetType());
		}
		float bounciness = softJointLimitSurrogate.bounciness;
		if (bounciness != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(bounciness, P_1);
		}
		float contactDistance = softJointLimitSurrogate.contactDistance;
		if (contactDistance != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(contactDistance, P_1);
		}
		float limit = softJointLimitSurrogate.limit;
		if (limit != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(limit, P_1);
		}
	}

	private static SoftJointLimit Read(SoftJointLimit P_0, ProtoReader P_1)
	{
		SoftJointLimitSurrogate softJointLimitSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (softJointLimitSurrogate == null)
				{
					SoftJointLimitSurrogate softJointLimitSurrogate4 = new SoftJointLimitSurrogate();
					ProtoReader.NoteObject(softJointLimitSurrogate4, P_1);
					softJointLimitSurrogate = softJointLimitSurrogate4;
				}
				float contactDistance = P_1.ReadSingle();
				softJointLimitSurrogate.bounciness = contactDistance;
				break;
			}
			case 2:
			{
				if (softJointLimitSurrogate == null)
				{
					SoftJointLimitSurrogate softJointLimitSurrogate3 = new SoftJointLimitSurrogate();
					ProtoReader.NoteObject(softJointLimitSurrogate3, P_1);
					softJointLimitSurrogate = softJointLimitSurrogate3;
				}
				float contactDistance = P_1.ReadSingle();
				softJointLimitSurrogate.contactDistance = contactDistance;
				break;
			}
			case 3:
			{
				if (softJointLimitSurrogate == null)
				{
					SoftJointLimitSurrogate softJointLimitSurrogate5 = new SoftJointLimitSurrogate();
					ProtoReader.NoteObject(softJointLimitSurrogate5, P_1);
					softJointLimitSurrogate = softJointLimitSurrogate5;
				}
				float contactDistance = P_1.ReadSingle();
				softJointLimitSurrogate.limit = contactDistance;
				break;
			}
			default:
				if (softJointLimitSurrogate == null)
				{
					SoftJointLimitSurrogate softJointLimitSurrogate2 = new SoftJointLimitSurrogate();
					ProtoReader.NoteObject(softJointLimitSurrogate2, P_1);
					softJointLimitSurrogate = softJointLimitSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (softJointLimitSurrogate == null)
		{
			SoftJointLimitSurrogate softJointLimitSurrogate6 = new SoftJointLimitSurrogate();
			ProtoReader.NoteObject(softJointLimitSurrogate6, P_1);
			softJointLimitSurrogate = softJointLimitSurrogate6;
		}
		P_0 = softJointLimitSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<SoftJointLimit[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<SoftJointLimit[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<SoftJointLimit[]>), P_0.GetType());
		}
		SoftJointLimit[] value = P_0.Value;
		if (value != null)
		{
			SoftJointLimit[] array = value;
			foreach (SoftJointLimit softJointLimit in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(softJointLimit, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<SoftJointLimit[]> Read(PrimitiveContract<SoftJointLimit[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<SoftJointLimit[]> primitiveContract = new PrimitiveContract<SoftJointLimit[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				SoftJointLimit[] value = P_0.Value;
				List<SoftJointLimit> list = new List<SoftJointLimit>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SoftJointLimit item = Read(default(SoftJointLimit), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				SoftJointLimit[] array = new SoftJointLimit[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<SoftJointLimit[]> primitiveContract2 = new PrimitiveContract<SoftJointLimit[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<SoftJointLimit[]> primitiveContract3 = new PrimitiveContract<SoftJointLimit[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<SoftJointLimit> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<SoftJointLimit>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<SoftJointLimit>), P_0.GetType());
		}
		foreach (SoftJointLimit item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<SoftJointLimit> Read(List<SoftJointLimit> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<SoftJointLimit> list = new List<SoftJointLimit>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<SoftJointLimit>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<SoftJointLimit> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					SoftJointLimit item = Read(default(SoftJointLimit), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<SoftJointLimit> list3 = new List<SoftJointLimit>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<SoftJointLimit> list4 = new List<SoftJointLimit>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointMotor2D P_0, ProtoWriter P_1)
	{
		JointMotor2DSurrogate jointMotor2DSurrogate = P_0;
		if (jointMotor2DSurrogate.GetType() != typeof(JointMotor2DSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointMotor2DSurrogate), jointMotor2DSurrogate.GetType());
		}
		float maxMotorTorque = jointMotor2DSurrogate.maxMotorTorque;
		if (maxMotorTorque != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(maxMotorTorque, P_1);
		}
		float motorSpeed = jointMotor2DSurrogate.motorSpeed;
		if (motorSpeed != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(motorSpeed, P_1);
		}
	}

	private static JointMotor2D Read(JointMotor2D P_0, ProtoReader P_1)
	{
		JointMotor2DSurrogate jointMotor2DSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (jointMotor2DSurrogate == null)
				{
					JointMotor2DSurrogate jointMotor2DSurrogate3 = new JointMotor2DSurrogate();
					ProtoReader.NoteObject(jointMotor2DSurrogate3, P_1);
					jointMotor2DSurrogate = jointMotor2DSurrogate3;
				}
				float maxMotorTorque = P_1.ReadSingle();
				jointMotor2DSurrogate.maxMotorTorque = maxMotorTorque;
				break;
			}
			case 2:
			{
				if (jointMotor2DSurrogate == null)
				{
					JointMotor2DSurrogate jointMotor2DSurrogate4 = new JointMotor2DSurrogate();
					ProtoReader.NoteObject(jointMotor2DSurrogate4, P_1);
					jointMotor2DSurrogate = jointMotor2DSurrogate4;
				}
				float maxMotorTorque = P_1.ReadSingle();
				jointMotor2DSurrogate.motorSpeed = maxMotorTorque;
				break;
			}
			default:
				if (jointMotor2DSurrogate == null)
				{
					JointMotor2DSurrogate jointMotor2DSurrogate2 = new JointMotor2DSurrogate();
					ProtoReader.NoteObject(jointMotor2DSurrogate2, P_1);
					jointMotor2DSurrogate = jointMotor2DSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (jointMotor2DSurrogate == null)
		{
			JointMotor2DSurrogate jointMotor2DSurrogate5 = new JointMotor2DSurrogate();
			ProtoReader.NoteObject(jointMotor2DSurrogate5, P_1);
			jointMotor2DSurrogate = jointMotor2DSurrogate5;
		}
		P_0 = jointMotor2DSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<JointMotor2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointMotor2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointMotor2D[]>), P_0.GetType());
		}
		JointMotor2D[] value = P_0.Value;
		if (value != null)
		{
			JointMotor2D[] array = value;
			foreach (JointMotor2D jointMotor2D in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(jointMotor2D, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointMotor2D[]> Read(PrimitiveContract<JointMotor2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointMotor2D[]> primitiveContract = new PrimitiveContract<JointMotor2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointMotor2D[] value = P_0.Value;
				List<JointMotor2D> list = new List<JointMotor2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointMotor2D item = Read(default(JointMotor2D), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointMotor2D[] array = new JointMotor2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointMotor2D[]> primitiveContract2 = new PrimitiveContract<JointMotor2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointMotor2D[]> primitiveContract3 = new PrimitiveContract<JointMotor2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointMotor2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointMotor2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointMotor2D>), P_0.GetType());
		}
		foreach (JointMotor2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointMotor2D> Read(List<JointMotor2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointMotor2D> list = new List<JointMotor2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointMotor2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointMotor2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointMotor2D item = Read(default(JointMotor2D), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointMotor2D> list3 = new List<JointMotor2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointMotor2D> list4 = new List<JointMotor2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointAngleLimits2D P_0, ProtoWriter P_1)
	{
		JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate = P_0;
		if (jointAngleLimits2DSurrogate.GetType() != typeof(JointAngleLimits2DSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointAngleLimits2DSurrogate), jointAngleLimits2DSurrogate.GetType());
		}
		float max = jointAngleLimits2DSurrogate.max;
		if (max != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(max, P_1);
		}
		float min = jointAngleLimits2DSurrogate.min;
		if (min != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(min, P_1);
		}
	}

	private static JointAngleLimits2D Read(JointAngleLimits2D P_0, ProtoReader P_1)
	{
		JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (jointAngleLimits2DSurrogate == null)
				{
					JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate3 = new JointAngleLimits2DSurrogate();
					ProtoReader.NoteObject(jointAngleLimits2DSurrogate3, P_1);
					jointAngleLimits2DSurrogate = jointAngleLimits2DSurrogate3;
				}
				float max = P_1.ReadSingle();
				jointAngleLimits2DSurrogate.max = max;
				break;
			}
			case 2:
			{
				if (jointAngleLimits2DSurrogate == null)
				{
					JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate4 = new JointAngleLimits2DSurrogate();
					ProtoReader.NoteObject(jointAngleLimits2DSurrogate4, P_1);
					jointAngleLimits2DSurrogate = jointAngleLimits2DSurrogate4;
				}
				float max = P_1.ReadSingle();
				jointAngleLimits2DSurrogate.min = max;
				break;
			}
			default:
				if (jointAngleLimits2DSurrogate == null)
				{
					JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate2 = new JointAngleLimits2DSurrogate();
					ProtoReader.NoteObject(jointAngleLimits2DSurrogate2, P_1);
					jointAngleLimits2DSurrogate = jointAngleLimits2DSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (jointAngleLimits2DSurrogate == null)
		{
			JointAngleLimits2DSurrogate jointAngleLimits2DSurrogate5 = new JointAngleLimits2DSurrogate();
			ProtoReader.NoteObject(jointAngleLimits2DSurrogate5, P_1);
			jointAngleLimits2DSurrogate = jointAngleLimits2DSurrogate5;
		}
		P_0 = jointAngleLimits2DSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<JointAngleLimits2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointAngleLimits2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointAngleLimits2D[]>), P_0.GetType());
		}
		JointAngleLimits2D[] value = P_0.Value;
		if (value != null)
		{
			JointAngleLimits2D[] array = value;
			foreach (JointAngleLimits2D jointAngleLimits2D in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(jointAngleLimits2D, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointAngleLimits2D[]> Read(PrimitiveContract<JointAngleLimits2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointAngleLimits2D[]> primitiveContract = new PrimitiveContract<JointAngleLimits2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointAngleLimits2D[] value = P_0.Value;
				List<JointAngleLimits2D> list = new List<JointAngleLimits2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointAngleLimits2D item = Read(default(JointAngleLimits2D), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointAngleLimits2D[] array = new JointAngleLimits2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointAngleLimits2D[]> primitiveContract2 = new PrimitiveContract<JointAngleLimits2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointAngleLimits2D[]> primitiveContract3 = new PrimitiveContract<JointAngleLimits2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointAngleLimits2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointAngleLimits2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointAngleLimits2D>), P_0.GetType());
		}
		foreach (JointAngleLimits2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointAngleLimits2D> Read(List<JointAngleLimits2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointAngleLimits2D> list = new List<JointAngleLimits2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointAngleLimits2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointAngleLimits2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointAngleLimits2D item = Read(default(JointAngleLimits2D), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointAngleLimits2D> list3 = new List<JointAngleLimits2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointAngleLimits2D> list4 = new List<JointAngleLimits2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointTranslationLimits2D P_0, ProtoWriter P_1)
	{
		JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate = P_0;
		if (jointTranslationLimits2DSurrogate.GetType() != typeof(JointTranslationLimits2DSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointTranslationLimits2DSurrogate), jointTranslationLimits2DSurrogate.GetType());
		}
		float max = jointTranslationLimits2DSurrogate.max;
		if (max != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(max, P_1);
		}
		float min = jointTranslationLimits2DSurrogate.min;
		if (min != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(min, P_1);
		}
	}

	private static JointTranslationLimits2D Read(JointTranslationLimits2D P_0, ProtoReader P_1)
	{
		JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (jointTranslationLimits2DSurrogate == null)
				{
					JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate3 = new JointTranslationLimits2DSurrogate();
					ProtoReader.NoteObject(jointTranslationLimits2DSurrogate3, P_1);
					jointTranslationLimits2DSurrogate = jointTranslationLimits2DSurrogate3;
				}
				float max = P_1.ReadSingle();
				jointTranslationLimits2DSurrogate.max = max;
				break;
			}
			case 2:
			{
				if (jointTranslationLimits2DSurrogate == null)
				{
					JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate4 = new JointTranslationLimits2DSurrogate();
					ProtoReader.NoteObject(jointTranslationLimits2DSurrogate4, P_1);
					jointTranslationLimits2DSurrogate = jointTranslationLimits2DSurrogate4;
				}
				float max = P_1.ReadSingle();
				jointTranslationLimits2DSurrogate.min = max;
				break;
			}
			default:
				if (jointTranslationLimits2DSurrogate == null)
				{
					JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate2 = new JointTranslationLimits2DSurrogate();
					ProtoReader.NoteObject(jointTranslationLimits2DSurrogate2, P_1);
					jointTranslationLimits2DSurrogate = jointTranslationLimits2DSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (jointTranslationLimits2DSurrogate == null)
		{
			JointTranslationLimits2DSurrogate jointTranslationLimits2DSurrogate5 = new JointTranslationLimits2DSurrogate();
			ProtoReader.NoteObject(jointTranslationLimits2DSurrogate5, P_1);
			jointTranslationLimits2DSurrogate = jointTranslationLimits2DSurrogate5;
		}
		P_0 = jointTranslationLimits2DSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<JointTranslationLimits2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointTranslationLimits2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointTranslationLimits2D[]>), P_0.GetType());
		}
		JointTranslationLimits2D[] value = P_0.Value;
		if (value != null)
		{
			JointTranslationLimits2D[] array = value;
			foreach (JointTranslationLimits2D jointTranslationLimits2D in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(jointTranslationLimits2D, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointTranslationLimits2D[]> Read(PrimitiveContract<JointTranslationLimits2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointTranslationLimits2D[]> primitiveContract = new PrimitiveContract<JointTranslationLimits2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointTranslationLimits2D[] value = P_0.Value;
				List<JointTranslationLimits2D> list = new List<JointTranslationLimits2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointTranslationLimits2D item = Read(default(JointTranslationLimits2D), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointTranslationLimits2D[] array = new JointTranslationLimits2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointTranslationLimits2D[]> primitiveContract2 = new PrimitiveContract<JointTranslationLimits2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointTranslationLimits2D[]> primitiveContract3 = new PrimitiveContract<JointTranslationLimits2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointTranslationLimits2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointTranslationLimits2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointTranslationLimits2D>), P_0.GetType());
		}
		foreach (JointTranslationLimits2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointTranslationLimits2D> Read(List<JointTranslationLimits2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointTranslationLimits2D> list = new List<JointTranslationLimits2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointTranslationLimits2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointTranslationLimits2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointTranslationLimits2D item = Read(default(JointTranslationLimits2D), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointTranslationLimits2D> list3 = new List<JointTranslationLimits2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointTranslationLimits2D> list4 = new List<JointTranslationLimits2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(JointSuspension2D P_0, ProtoWriter P_1)
	{
		JointSuspension2DSurrogate jointSuspension2DSurrogate = P_0;
		if (jointSuspension2DSurrogate.GetType() != typeof(JointSuspension2DSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(JointSuspension2DSurrogate), jointSuspension2DSurrogate.GetType());
		}
		float angle = jointSuspension2DSurrogate.angle;
		if (angle != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(angle, P_1);
		}
		float dampingRatio = jointSuspension2DSurrogate.dampingRatio;
		if (dampingRatio != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(dampingRatio, P_1);
		}
		float frequency = jointSuspension2DSurrogate.frequency;
		if (frequency != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(frequency, P_1);
		}
	}

	private static JointSuspension2D Read(JointSuspension2D P_0, ProtoReader P_1)
	{
		JointSuspension2DSurrogate jointSuspension2DSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (jointSuspension2DSurrogate == null)
				{
					JointSuspension2DSurrogate jointSuspension2DSurrogate4 = new JointSuspension2DSurrogate();
					ProtoReader.NoteObject(jointSuspension2DSurrogate4, P_1);
					jointSuspension2DSurrogate = jointSuspension2DSurrogate4;
				}
				float dampingRatio = P_1.ReadSingle();
				jointSuspension2DSurrogate.angle = dampingRatio;
				break;
			}
			case 2:
			{
				if (jointSuspension2DSurrogate == null)
				{
					JointSuspension2DSurrogate jointSuspension2DSurrogate3 = new JointSuspension2DSurrogate();
					ProtoReader.NoteObject(jointSuspension2DSurrogate3, P_1);
					jointSuspension2DSurrogate = jointSuspension2DSurrogate3;
				}
				float dampingRatio = P_1.ReadSingle();
				jointSuspension2DSurrogate.dampingRatio = dampingRatio;
				break;
			}
			case 3:
			{
				if (jointSuspension2DSurrogate == null)
				{
					JointSuspension2DSurrogate jointSuspension2DSurrogate5 = new JointSuspension2DSurrogate();
					ProtoReader.NoteObject(jointSuspension2DSurrogate5, P_1);
					jointSuspension2DSurrogate = jointSuspension2DSurrogate5;
				}
				float dampingRatio = P_1.ReadSingle();
				jointSuspension2DSurrogate.frequency = dampingRatio;
				break;
			}
			default:
				if (jointSuspension2DSurrogate == null)
				{
					JointSuspension2DSurrogate jointSuspension2DSurrogate2 = new JointSuspension2DSurrogate();
					ProtoReader.NoteObject(jointSuspension2DSurrogate2, P_1);
					jointSuspension2DSurrogate = jointSuspension2DSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (jointSuspension2DSurrogate == null)
		{
			JointSuspension2DSurrogate jointSuspension2DSurrogate6 = new JointSuspension2DSurrogate();
			ProtoReader.NoteObject(jointSuspension2DSurrogate6, P_1);
			jointSuspension2DSurrogate = jointSuspension2DSurrogate6;
		}
		P_0 = jointSuspension2DSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<JointSuspension2D[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<JointSuspension2D[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<JointSuspension2D[]>), P_0.GetType());
		}
		JointSuspension2D[] value = P_0.Value;
		if (value != null)
		{
			JointSuspension2D[] array = value;
			foreach (JointSuspension2D jointSuspension2D in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(jointSuspension2D, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<JointSuspension2D[]> Read(PrimitiveContract<JointSuspension2D[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointSuspension2D[]> primitiveContract = new PrimitiveContract<JointSuspension2D[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				JointSuspension2D[] value = P_0.Value;
				List<JointSuspension2D> list = new List<JointSuspension2D>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointSuspension2D item = Read(default(JointSuspension2D), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				JointSuspension2D[] array = new JointSuspension2D[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<JointSuspension2D[]> primitiveContract2 = new PrimitiveContract<JointSuspension2D[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<JointSuspension2D[]> primitiveContract3 = new PrimitiveContract<JointSuspension2D[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<JointSuspension2D> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<JointSuspension2D>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<JointSuspension2D>), P_0.GetType());
		}
		foreach (JointSuspension2D item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<JointSuspension2D> Read(List<JointSuspension2D> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<JointSuspension2D> list = new List<JointSuspension2D>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<JointSuspension2D>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<JointSuspension2D> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					JointSuspension2D item = Read(default(JointSuspension2D), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<JointSuspension2D> list3 = new List<JointSuspension2D>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<JointSuspension2D> list4 = new List<JointSuspension2D>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(WheelFrictionCurve P_0, ProtoWriter P_1)
	{
		WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate = P_0;
		if (wheelFrictionCurveSurrogate.GetType() != typeof(WheelFrictionCurveSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(WheelFrictionCurveSurrogate), wheelFrictionCurveSurrogate.GetType());
		}
		float asymptoteSlip = wheelFrictionCurveSurrogate.asymptoteSlip;
		if (asymptoteSlip != 0f)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(asymptoteSlip, P_1);
		}
		float asymptoteValue = wheelFrictionCurveSurrogate.asymptoteValue;
		if (asymptoteValue != 0f)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(asymptoteValue, P_1);
		}
		float extremumSlip = wheelFrictionCurveSurrogate.extremumSlip;
		if (extremumSlip != 0f)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(extremumSlip, P_1);
		}
		float extremumValue = wheelFrictionCurveSurrogate.extremumValue;
		if (extremumValue != 0f)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(extremumValue, P_1);
		}
		float stiffness = wheelFrictionCurveSurrogate.stiffness;
		if (stiffness != 0f)
		{
			ProtoWriter.WriteFieldHeader(5, WireType.Fixed32, P_1);
			ProtoWriter.WriteSingle(stiffness, P_1);
		}
	}

	private static WheelFrictionCurve Read(WheelFrictionCurve P_0, ProtoReader P_1)
	{
		WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (wheelFrictionCurveSurrogate == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate7 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate7, P_1);
					wheelFrictionCurveSurrogate = wheelFrictionCurveSurrogate7;
				}
				float asymptoteValue = P_1.ReadSingle();
				wheelFrictionCurveSurrogate.asymptoteSlip = asymptoteValue;
				break;
			}
			case 2:
			{
				if (wheelFrictionCurveSurrogate == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate3 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate3, P_1);
					wheelFrictionCurveSurrogate = wheelFrictionCurveSurrogate3;
				}
				float asymptoteValue = P_1.ReadSingle();
				wheelFrictionCurveSurrogate.asymptoteValue = asymptoteValue;
				break;
			}
			case 3:
			{
				if (wheelFrictionCurveSurrogate == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate6 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate6, P_1);
					wheelFrictionCurveSurrogate = wheelFrictionCurveSurrogate6;
				}
				float asymptoteValue = P_1.ReadSingle();
				wheelFrictionCurveSurrogate.extremumSlip = asymptoteValue;
				break;
			}
			case 4:
			{
				if (wheelFrictionCurveSurrogate == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate4 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate4, P_1);
					wheelFrictionCurveSurrogate = wheelFrictionCurveSurrogate4;
				}
				float asymptoteValue = P_1.ReadSingle();
				wheelFrictionCurveSurrogate.extremumValue = asymptoteValue;
				break;
			}
			case 5:
			{
				if (wheelFrictionCurveSurrogate == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate5 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate5, P_1);
					wheelFrictionCurveSurrogate = wheelFrictionCurveSurrogate5;
				}
				float asymptoteValue = P_1.ReadSingle();
				wheelFrictionCurveSurrogate.stiffness = asymptoteValue;
				break;
			}
			default:
				if (wheelFrictionCurveSurrogate == null)
				{
					WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate2 = new WheelFrictionCurveSurrogate();
					ProtoReader.NoteObject(wheelFrictionCurveSurrogate2, P_1);
					wheelFrictionCurveSurrogate = wheelFrictionCurveSurrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (wheelFrictionCurveSurrogate == null)
		{
			WheelFrictionCurveSurrogate wheelFrictionCurveSurrogate8 = new WheelFrictionCurveSurrogate();
			ProtoReader.NoteObject(wheelFrictionCurveSurrogate8, P_1);
			wheelFrictionCurveSurrogate = wheelFrictionCurveSurrogate8;
		}
		P_0 = wheelFrictionCurveSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<WheelFrictionCurve[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<WheelFrictionCurve[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<WheelFrictionCurve[]>), P_0.GetType());
		}
		WheelFrictionCurve[] value = P_0.Value;
		if (value != null)
		{
			WheelFrictionCurve[] array = value;
			foreach (WheelFrictionCurve wheelFrictionCurve in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(wheelFrictionCurve, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<WheelFrictionCurve[]> Read(PrimitiveContract<WheelFrictionCurve[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<WheelFrictionCurve[]> primitiveContract = new PrimitiveContract<WheelFrictionCurve[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				WheelFrictionCurve[] value = P_0.Value;
				List<WheelFrictionCurve> list = new List<WheelFrictionCurve>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					WheelFrictionCurve item = Read(default(WheelFrictionCurve), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				WheelFrictionCurve[] array = new WheelFrictionCurve[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<WheelFrictionCurve[]> primitiveContract2 = new PrimitiveContract<WheelFrictionCurve[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<WheelFrictionCurve[]> primitiveContract3 = new PrimitiveContract<WheelFrictionCurve[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<WheelFrictionCurve> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<WheelFrictionCurve>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<WheelFrictionCurve>), P_0.GetType());
		}
		foreach (WheelFrictionCurve item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<WheelFrictionCurve> Read(List<WheelFrictionCurve> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<WheelFrictionCurve> list = new List<WheelFrictionCurve>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<WheelFrictionCurve>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<WheelFrictionCurve> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					WheelFrictionCurve item = Read(default(WheelFrictionCurve), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<WheelFrictionCurve> list3 = new List<WheelFrictionCurve>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<WheelFrictionCurve> list4 = new List<WheelFrictionCurve>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(OffMeshLinkData P_0, ProtoWriter P_1)
	{
		OffMeshLinkDataSurrogate offMeshLinkDataSurrogate = P_0;
		if (offMeshLinkDataSurrogate.GetType() != typeof(OffMeshLinkDataSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(OffMeshLinkDataSurrogate), offMeshLinkDataSurrogate.GetType());
		}
	}

	private static OffMeshLinkData Read(OffMeshLinkData P_0, ProtoReader P_1)
	{
		OffMeshLinkDataSurrogate offMeshLinkDataSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (offMeshLinkDataSurrogate == null)
			{
				OffMeshLinkDataSurrogate offMeshLinkDataSurrogate2 = new OffMeshLinkDataSurrogate();
				ProtoReader.NoteObject(offMeshLinkDataSurrogate2, P_1);
				offMeshLinkDataSurrogate = offMeshLinkDataSurrogate2;
			}
			P_1.SkipField();
		}
		if (offMeshLinkDataSurrogate == null)
		{
			OffMeshLinkDataSurrogate offMeshLinkDataSurrogate3 = new OffMeshLinkDataSurrogate();
			ProtoReader.NoteObject(offMeshLinkDataSurrogate3, P_1);
			offMeshLinkDataSurrogate = offMeshLinkDataSurrogate3;
		}
		P_0 = offMeshLinkDataSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<OffMeshLinkData[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<OffMeshLinkData[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<OffMeshLinkData[]>), P_0.GetType());
		}
		OffMeshLinkData[] value = P_0.Value;
		if (value != null)
		{
			OffMeshLinkData[] array = value;
			foreach (OffMeshLinkData offMeshLinkData in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(offMeshLinkData, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<OffMeshLinkData[]> Read(PrimitiveContract<OffMeshLinkData[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<OffMeshLinkData[]> primitiveContract = new PrimitiveContract<OffMeshLinkData[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				OffMeshLinkData[] value = P_0.Value;
				List<OffMeshLinkData> list = new List<OffMeshLinkData>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					OffMeshLinkData item = Read(default(OffMeshLinkData), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				OffMeshLinkData[] array = new OffMeshLinkData[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<OffMeshLinkData[]> primitiveContract2 = new PrimitiveContract<OffMeshLinkData[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<OffMeshLinkData[]> primitiveContract3 = new PrimitiveContract<OffMeshLinkData[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<OffMeshLinkData> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<OffMeshLinkData>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<OffMeshLinkData>), P_0.GetType());
		}
		foreach (OffMeshLinkData item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<OffMeshLinkData> Read(List<OffMeshLinkData> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<OffMeshLinkData> list = new List<OffMeshLinkData>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<OffMeshLinkData>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<OffMeshLinkData> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					OffMeshLinkData item = Read(default(OffMeshLinkData), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<OffMeshLinkData> list3 = new List<OffMeshLinkData>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<OffMeshLinkData> list4 = new List<OffMeshLinkData>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(PlayableGraph P_0, ProtoWriter P_1)
	{
		PlayableGraphSurrogate playableGraphSurrogate = P_0;
		if (playableGraphSurrogate.GetType() != typeof(PlayableGraphSurrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PlayableGraphSurrogate), playableGraphSurrogate.GetType());
		}
	}

	private static PlayableGraph Read(PlayableGraph P_0, ProtoReader P_1)
	{
		PlayableGraphSurrogate playableGraphSurrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (playableGraphSurrogate == null)
			{
				PlayableGraphSurrogate playableGraphSurrogate2 = new PlayableGraphSurrogate();
				ProtoReader.NoteObject(playableGraphSurrogate2, P_1);
				playableGraphSurrogate = playableGraphSurrogate2;
			}
			P_1.SkipField();
		}
		if (playableGraphSurrogate == null)
		{
			PlayableGraphSurrogate playableGraphSurrogate3 = new PlayableGraphSurrogate();
			ProtoReader.NoteObject(playableGraphSurrogate3, P_1);
			playableGraphSurrogate = playableGraphSurrogate3;
		}
		P_0 = playableGraphSurrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<PlayableGraph[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<PlayableGraph[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<PlayableGraph[]>), P_0.GetType());
		}
		PlayableGraph[] value = P_0.Value;
		if (value != null)
		{
			PlayableGraph[] array = value;
			foreach (PlayableGraph playableGraph in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(playableGraph, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<PlayableGraph[]> Read(PrimitiveContract<PlayableGraph[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<PlayableGraph[]> primitiveContract = new PrimitiveContract<PlayableGraph[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				PlayableGraph[] value = P_0.Value;
				List<PlayableGraph> list = new List<PlayableGraph>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PlayableGraph item = Read(default(PlayableGraph), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				PlayableGraph[] array = new PlayableGraph[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<PlayableGraph[]> primitiveContract2 = new PrimitiveContract<PlayableGraph[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<PlayableGraph[]> primitiveContract3 = new PrimitiveContract<PlayableGraph[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<PlayableGraph> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<PlayableGraph>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<PlayableGraph>), P_0.GetType());
		}
		foreach (PlayableGraph item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<PlayableGraph> Read(List<PlayableGraph> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<PlayableGraph> list = new List<PlayableGraph>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<PlayableGraph>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<PlayableGraph> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					PlayableGraph item = Read(default(PlayableGraph), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<PlayableGraph> list3 = new List<PlayableGraph>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<PlayableGraph> list4 = new List<PlayableGraph>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(Color32 P_0, ProtoWriter P_1)
	{
		Color32Surrogate color32Surrogate = P_0;
		if (color32Surrogate.GetType() != typeof(Color32Surrogate))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(Color32Surrogate), color32Surrogate.GetType());
		}
		byte a = color32Surrogate.a;
		if (a != 0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
			ProtoWriter.WriteByte(a, P_1);
		}
		byte b = color32Surrogate.b;
		if (b != 0)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.Variant, P_1);
			ProtoWriter.WriteByte(b, P_1);
		}
		byte g = color32Surrogate.g;
		if (g != 0)
		{
			ProtoWriter.WriteFieldHeader(3, WireType.Variant, P_1);
			ProtoWriter.WriteByte(g, P_1);
		}
		byte r = color32Surrogate.r;
		if (r != 0)
		{
			ProtoWriter.WriteFieldHeader(4, WireType.Variant, P_1);
			ProtoWriter.WriteByte(r, P_1);
		}
	}

	private static Color32 Read(Color32 P_0, ProtoReader P_1)
	{
		Color32Surrogate color32Surrogate = P_0;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				if (color32Surrogate == null)
				{
					Color32Surrogate color32Surrogate4 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate4, P_1);
					color32Surrogate = color32Surrogate4;
				}
				byte g = P_1.ReadByte();
				color32Surrogate.a = g;
				break;
			}
			case 2:
			{
				if (color32Surrogate == null)
				{
					Color32Surrogate color32Surrogate6 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate6, P_1);
					color32Surrogate = color32Surrogate6;
				}
				byte g = P_1.ReadByte();
				color32Surrogate.b = g;
				break;
			}
			case 3:
			{
				if (color32Surrogate == null)
				{
					Color32Surrogate color32Surrogate3 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate3, P_1);
					color32Surrogate = color32Surrogate3;
				}
				byte g = P_1.ReadByte();
				color32Surrogate.g = g;
				break;
			}
			case 4:
			{
				if (color32Surrogate == null)
				{
					Color32Surrogate color32Surrogate5 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate5, P_1);
					color32Surrogate = color32Surrogate5;
				}
				byte g = P_1.ReadByte();
				color32Surrogate.r = g;
				break;
			}
			default:
				if (color32Surrogate == null)
				{
					Color32Surrogate color32Surrogate2 = new Color32Surrogate();
					ProtoReader.NoteObject(color32Surrogate2, P_1);
					color32Surrogate = color32Surrogate2;
				}
				P_1.SkipField();
				break;
			}
		}
		if (color32Surrogate == null)
		{
			Color32Surrogate color32Surrogate7 = new Color32Surrogate();
			ProtoReader.NoteObject(color32Surrogate7, P_1);
			color32Surrogate = color32Surrogate7;
		}
		P_0 = color32Surrogate;
		return P_0;
	}

	private static void Write(PrimitiveContract<Color32[]> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(PrimitiveContract<Color32[]>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(PrimitiveContract<Color32[]>), P_0.GetType());
		}
		Color32[] value = P_0.Value;
		if (value != null)
		{
			Color32[] array = value;
			foreach (Color32 color in array)
			{
				ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
				SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
				Write(color, P_1);
				ProtoWriter.EndSubItem(token, P_1);
			}
		}
	}

	private static PrimitiveContract<Color32[]> Read(PrimitiveContract<Color32[]> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					PrimitiveContract<Color32[]> primitiveContract = new PrimitiveContract<Color32[]>();
					ProtoReader.NoteObject(primitiveContract, P_1);
					P_0 = primitiveContract;
				}
				Color32[] value = P_0.Value;
				List<Color32> list = new List<Color32>();
				int fieldNumber = P_1.FieldNumber;
				do
				{
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Color32 item = Read(default(Color32), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
				Color32[] array = new Color32[(fieldNumber = ((value != null) ? value.Length : 0)) + list.Count];
				if (fieldNumber != 0)
				{
					value.CopyTo(array, 0);
				}
				list.CopyTo(array, fieldNumber);
				array = array;
				if (array != null)
				{
					P_0.Value = array;
				}
			}
			else
			{
				if (P_0 == null)
				{
					PrimitiveContract<Color32[]> primitiveContract2 = new PrimitiveContract<Color32[]>();
					ProtoReader.NoteObject(primitiveContract2, P_1);
					P_0 = primitiveContract2;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			PrimitiveContract<Color32[]> primitiveContract3 = new PrimitiveContract<Color32[]>();
			ProtoReader.NoteObject(primitiveContract3, P_1);
			P_0 = primitiveContract3;
		}
		return P_0;
	}

	private static void Write(List<Color32> P_0, ProtoWriter P_1)
	{
		if (P_0.GetType() != typeof(List<Color32>))
		{
			TypeModel.ThrowUnexpectedSubtype(typeof(List<Color32>), P_0.GetType());
		}
		foreach (Color32 item in P_0)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			SubItemToken token = ProtoWriter.StartSubItem(null, P_1);
			Write(item, P_1);
			ProtoWriter.EndSubItem(token, P_1);
		}
	}

	private static List<Color32> Read(List<Color32> P_0, ProtoReader P_1)
	{
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			if (num == 1)
			{
				if (P_0 == null)
				{
					List<Color32> list = new List<Color32>();
					ProtoReader.NoteObject(list, P_1);
					P_0 = list;
				}
				if (P_0 == null)
				{
					P_0 = new List<Color32>();
				}
				int fieldNumber = P_1.FieldNumber;
				do
				{
					List<Color32> list2 = P_0;
					SubItemToken token = ProtoReader.StartSubItem(P_1);
					Color32 item = Read(default(Color32), P_1);
					ProtoReader.EndSubItem(token, P_1);
					list2.Add(item);
				}
				while (P_1.TryReadFieldHeader(fieldNumber));
			}
			else
			{
				if (P_0 == null)
				{
					List<Color32> list3 = new List<Color32>();
					ProtoReader.NoteObject(list3, P_1);
					P_0 = list3;
				}
				P_1.SkipField();
			}
		}
		if (P_0 == null)
		{
			List<Color32> list4 = new List<Color32>();
			ProtoReader.NoteObject(list4, P_1);
			P_0 = list4;
		}
		return P_0;
	}

	private static void Write(ParticleSystemCollisionMode P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case ParticleSystemCollisionMode.Collision3D:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case ParticleSystemCollisionMode.Collision2D:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static ParticleSystemCollisionMode Read(ParticleSystemCollisionMode P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return ParticleSystemCollisionMode.Collision3D;
		case 1:
			return ParticleSystemCollisionMode.Collision2D;
		default:
		{
			P_1.ThrowEnumException(typeof(ParticleSystemCollisionMode), num);
			ParticleSystemCollisionMode result = default(ParticleSystemCollisionMode);
			return result;
		}
		}
	}

	private static void Write(ParticleSystemCollisionQuality P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case ParticleSystemCollisionQuality.High:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case ParticleSystemCollisionQuality.Medium:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case ParticleSystemCollisionQuality.Low:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static ParticleSystemCollisionQuality Read(ParticleSystemCollisionQuality P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return ParticleSystemCollisionQuality.High;
		case 1:
			return ParticleSystemCollisionQuality.Medium;
		case 2:
			return ParticleSystemCollisionQuality.Low;
		default:
		{
			P_1.ThrowEnumException(typeof(ParticleSystemCollisionQuality), num);
			ParticleSystemCollisionQuality result = default(ParticleSystemCollisionQuality);
			return result;
		}
		}
	}

	private static void Write(ParticleSystemCollisionType P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case ParticleSystemCollisionType.Planes:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case ParticleSystemCollisionType.World:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static ParticleSystemCollisionType Read(ParticleSystemCollisionType P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return ParticleSystemCollisionType.Planes;
		case 1:
			return ParticleSystemCollisionType.World;
		default:
		{
			P_1.ThrowEnumException(typeof(ParticleSystemCollisionType), num);
			ParticleSystemCollisionType result = default(ParticleSystemCollisionType);
			return result;
		}
		}
	}

	private static void Write(ParticleSystemOverlapAction P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case ParticleSystemOverlapAction.Ignore:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case ParticleSystemOverlapAction.Kill:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case ParticleSystemOverlapAction.Callback:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static ParticleSystemOverlapAction Read(ParticleSystemOverlapAction P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return ParticleSystemOverlapAction.Ignore;
		case 1:
			return ParticleSystemOverlapAction.Kill;
		case 2:
			return ParticleSystemOverlapAction.Callback;
		default:
		{
			P_1.ThrowEnumException(typeof(ParticleSystemOverlapAction), num);
			ParticleSystemOverlapAction result = default(ParticleSystemOverlapAction);
			return result;
		}
		}
	}

	private static void Write(ScrollRect.ScrollbarVisibility P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case ScrollRect.ScrollbarVisibility.Permanent:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case ScrollRect.ScrollbarVisibility.AutoHide:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static ScrollRect.ScrollbarVisibility Read(ScrollRect.ScrollbarVisibility P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return ScrollRect.ScrollbarVisibility.Permanent;
		case 1:
			return ScrollRect.ScrollbarVisibility.AutoHide;
		case 2:
			return ScrollRect.ScrollbarVisibility.AutoHideAndExpandViewport;
		default:
		{
			P_1.ThrowEnumException(typeof(ScrollRect.ScrollbarVisibility), num);
			ScrollRect.ScrollbarVisibility result = default(ScrollRect.ScrollbarVisibility);
			return result;
		}
		}
	}

	private static void Write(ScrollRect.MovementType P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case ScrollRect.MovementType.Unrestricted:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case ScrollRect.MovementType.Elastic:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case ScrollRect.MovementType.Clamped:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static ScrollRect.MovementType Read(ScrollRect.MovementType P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return ScrollRect.MovementType.Unrestricted;
		case 1:
			return ScrollRect.MovementType.Elastic;
		case 2:
			return ScrollRect.MovementType.Clamped;
		default:
		{
			P_1.ThrowEnumException(typeof(ScrollRect.MovementType), num);
			ScrollRect.MovementType result = default(ScrollRect.MovementType);
			return result;
		}
		}
	}

	private static void Write(Selectable.Transition P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case Selectable.Transition.None:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case Selectable.Transition.ColorTint:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case Selectable.Transition.SpriteSwap:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case Selectable.Transition.Animation:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static Selectable.Transition Read(Selectable.Transition P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return Selectable.Transition.None;
		case 1:
			return Selectable.Transition.ColorTint;
		case 2:
			return Selectable.Transition.SpriteSwap;
		case 3:
			return Selectable.Transition.Animation;
		default:
		{
			P_1.ThrowEnumException(typeof(Selectable.Transition), num);
			Selectable.Transition result = default(Selectable.Transition);
			return result;
		}
		}
	}

	private static void Write(InputField.CharacterValidation P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case InputField.CharacterValidation.None:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case InputField.CharacterValidation.Integer:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case InputField.CharacterValidation.Decimal:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case InputField.CharacterValidation.Alphanumeric:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		case InputField.CharacterValidation.Name:
			ProtoWriter.WriteInt32(4, P_1);
			break;
		case InputField.CharacterValidation.EmailAddress:
			ProtoWriter.WriteInt32(5, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static InputField.CharacterValidation Read(InputField.CharacterValidation P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return InputField.CharacterValidation.None;
		case 1:
			return InputField.CharacterValidation.Integer;
		case 2:
			return InputField.CharacterValidation.Decimal;
		case 3:
			return InputField.CharacterValidation.Alphanumeric;
		case 4:
			return InputField.CharacterValidation.Name;
		case 5:
			return InputField.CharacterValidation.EmailAddress;
		default:
		{
			P_1.ThrowEnumException(typeof(InputField.CharacterValidation), num);
			InputField.CharacterValidation result = default(InputField.CharacterValidation);
			return result;
		}
		}
	}

	private static void Write(InputField.ContentType P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case InputField.ContentType.Standard:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case InputField.ContentType.Autocorrected:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case InputField.ContentType.IntegerNumber:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case InputField.ContentType.DecimalNumber:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		case InputField.ContentType.Alphanumeric:
			ProtoWriter.WriteInt32(4, P_1);
			break;
		case InputField.ContentType.Name:
			ProtoWriter.WriteInt32(5, P_1);
			break;
		case InputField.ContentType.EmailAddress:
			ProtoWriter.WriteInt32(6, P_1);
			break;
		case InputField.ContentType.Password:
			ProtoWriter.WriteInt32(7, P_1);
			break;
		case InputField.ContentType.Pin:
			ProtoWriter.WriteInt32(8, P_1);
			break;
		case InputField.ContentType.Custom:
			ProtoWriter.WriteInt32(9, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static InputField.ContentType Read(InputField.ContentType P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return InputField.ContentType.Standard;
		case 1:
			return InputField.ContentType.Autocorrected;
		case 2:
			return InputField.ContentType.IntegerNumber;
		case 3:
			return InputField.ContentType.DecimalNumber;
		case 4:
			return InputField.ContentType.Alphanumeric;
		case 5:
			return InputField.ContentType.Name;
		case 6:
			return InputField.ContentType.EmailAddress;
		case 7:
			return InputField.ContentType.Password;
		case 8:
			return InputField.ContentType.Pin;
		case 9:
			return InputField.ContentType.Custom;
		default:
		{
			P_1.ThrowEnumException(typeof(InputField.ContentType), num);
			InputField.ContentType result = default(InputField.ContentType);
			return result;
		}
		}
	}

	private static void Write(InputField.InputType P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case InputField.InputType.Standard:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case InputField.InputType.AutoCorrect:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case InputField.InputType.Password:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static InputField.InputType Read(InputField.InputType P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return InputField.InputType.Standard;
		case 1:
			return InputField.InputType.AutoCorrect;
		case 2:
			return InputField.InputType.Password;
		default:
		{
			P_1.ThrowEnumException(typeof(InputField.InputType), num);
			InputField.InputType result = default(InputField.InputType);
			return result;
		}
		}
	}

	private static void Write(TouchScreenKeyboardType P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case TouchScreenKeyboardType.Default:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case TouchScreenKeyboardType.ASCIICapable:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case TouchScreenKeyboardType.NumbersAndPunctuation:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case TouchScreenKeyboardType.URL:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		case TouchScreenKeyboardType.NumberPad:
			ProtoWriter.WriteInt32(4, P_1);
			break;
		case TouchScreenKeyboardType.PhonePad:
			ProtoWriter.WriteInt32(5, P_1);
			break;
		case TouchScreenKeyboardType.NamePhonePad:
			ProtoWriter.WriteInt32(6, P_1);
			break;
		case TouchScreenKeyboardType.EmailAddress:
			ProtoWriter.WriteInt32(7, P_1);
			break;
		case TouchScreenKeyboardType.NintendoNetworkAccount:
			ProtoWriter.WriteInt32(8, P_1);
			break;
		case TouchScreenKeyboardType.Social:
			ProtoWriter.WriteInt32(9, P_1);
			break;
		case TouchScreenKeyboardType.Search:
			ProtoWriter.WriteInt32(10, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static TouchScreenKeyboardType Read(TouchScreenKeyboardType P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return TouchScreenKeyboardType.Default;
		case 1:
			return TouchScreenKeyboardType.ASCIICapable;
		case 2:
			return TouchScreenKeyboardType.NumbersAndPunctuation;
		case 3:
			return TouchScreenKeyboardType.URL;
		case 4:
			return TouchScreenKeyboardType.NumberPad;
		case 5:
			return TouchScreenKeyboardType.PhonePad;
		case 6:
			return TouchScreenKeyboardType.NamePhonePad;
		case 7:
			return TouchScreenKeyboardType.EmailAddress;
		case 8:
			return TouchScreenKeyboardType.NintendoNetworkAccount;
		case 9:
			return TouchScreenKeyboardType.Social;
		case 10:
			return TouchScreenKeyboardType.Search;
		default:
		{
			P_1.ThrowEnumException(typeof(TouchScreenKeyboardType), num);
			TouchScreenKeyboardType result = default(TouchScreenKeyboardType);
			return result;
		}
		}
	}

	private static void Write(InputField.LineType P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case InputField.LineType.SingleLine:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case InputField.LineType.MultiLineSubmit:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case InputField.LineType.MultiLineNewline:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static InputField.LineType Read(InputField.LineType P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return InputField.LineType.SingleLine;
		case 1:
			return InputField.LineType.MultiLineSubmit;
		case 2:
			return InputField.LineType.MultiLineNewline;
		default:
		{
			P_1.ThrowEnumException(typeof(InputField.LineType), num);
			InputField.LineType result = default(InputField.LineType);
			return result;
		}
		}
	}

	private static void Write(Scrollbar.Direction P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case Scrollbar.Direction.LeftToRight:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case Scrollbar.Direction.RightToLeft:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case Scrollbar.Direction.BottomToTop:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case Scrollbar.Direction.TopToBottom:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static Scrollbar.Direction Read(Scrollbar.Direction P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return Scrollbar.Direction.LeftToRight;
		case 1:
			return Scrollbar.Direction.RightToLeft;
		case 2:
			return Scrollbar.Direction.BottomToTop;
		case 3:
			return Scrollbar.Direction.TopToBottom;
		default:
		{
			P_1.ThrowEnumException(typeof(Scrollbar.Direction), num);
			Scrollbar.Direction result = default(Scrollbar.Direction);
			return result;
		}
		}
	}

	private static void Write(Slider.Direction P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case Slider.Direction.LeftToRight:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case Slider.Direction.RightToLeft:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case Slider.Direction.BottomToTop:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case Slider.Direction.TopToBottom:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static Slider.Direction Read(Slider.Direction P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return Slider.Direction.LeftToRight;
		case 1:
			return Slider.Direction.RightToLeft;
		case 2:
			return Slider.Direction.BottomToTop;
		case 3:
			return Slider.Direction.TopToBottom;
		default:
		{
			P_1.ThrowEnumException(typeof(Slider.Direction), num);
			Slider.Direction result = default(Slider.Direction);
			return result;
		}
		}
	}

	private static void Write(RTShaderPropertyType P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case RTShaderPropertyType.Color:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case RTShaderPropertyType.Vector:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case RTShaderPropertyType.Float:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case RTShaderPropertyType.Range:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		case RTShaderPropertyType.TexEnv:
			ProtoWriter.WriteInt32(4, P_1);
			break;
		case RTShaderPropertyType.Unknown:
			ProtoWriter.WriteInt32(5, P_1);
			break;
		case RTShaderPropertyType.Procedural:
			ProtoWriter.WriteInt32(6, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static RTShaderPropertyType Read(RTShaderPropertyType P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return RTShaderPropertyType.Color;
		case 1:
			return RTShaderPropertyType.Vector;
		case 2:
			return RTShaderPropertyType.Float;
		case 3:
			return RTShaderPropertyType.Range;
		case 4:
			return RTShaderPropertyType.TexEnv;
		case 5:
			return RTShaderPropertyType.Unknown;
		case 6:
			return RTShaderPropertyType.Procedural;
		default:
		{
			P_1.ThrowEnumException(typeof(RTShaderPropertyType), num);
			RTShaderPropertyType result = default(RTShaderPropertyType);
			return result;
		}
		}
	}

	private static void Write(TextureDimension P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case TextureDimension.Unknown:
			ProtoWriter.WriteInt32(-1, P_1);
			break;
		case TextureDimension.None:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case TextureDimension.Any:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case TextureDimension.Tex2D:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case TextureDimension.Tex3D:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		case TextureDimension.Cube:
			ProtoWriter.WriteInt32(4, P_1);
			break;
		case TextureDimension.Tex2DArray:
			ProtoWriter.WriteInt32(5, P_1);
			break;
		case TextureDimension.CubeArray:
			ProtoWriter.WriteInt32(6, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static TextureDimension Read(TextureDimension P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case -1:
			return TextureDimension.Unknown;
		case 0:
			return TextureDimension.None;
		case 1:
			return TextureDimension.Any;
		case 2:
			return TextureDimension.Tex2D;
		case 3:
			return TextureDimension.Tex3D;
		case 4:
			return TextureDimension.Cube;
		case 5:
			return TextureDimension.Tex2DArray;
		case 6:
			return TextureDimension.CubeArray;
		default:
		{
			P_1.ThrowEnumException(typeof(TextureDimension), num);
			TextureDimension result = default(TextureDimension);
			return result;
		}
		}
	}

	private static void Write(FilterMode P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case FilterMode.Point:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case FilterMode.Bilinear:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case FilterMode.Trilinear:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static FilterMode Read(FilterMode P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return FilterMode.Point;
		case 1:
			return FilterMode.Bilinear;
		case 2:
			return FilterMode.Trilinear;
		default:
		{
			P_1.ThrowEnumException(typeof(FilterMode), num);
			FilterMode result = default(FilterMode);
			return result;
		}
		}
	}

	private static void Write(TextureWrapMode P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case TextureWrapMode.Repeat:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case TextureWrapMode.Clamp:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case TextureWrapMode.Mirror:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case TextureWrapMode.MirrorOnce:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static TextureWrapMode Read(TextureWrapMode P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return TextureWrapMode.Repeat;
		case 1:
			return TextureWrapMode.Clamp;
		case 2:
			return TextureWrapMode.Mirror;
		case 3:
			return TextureWrapMode.MirrorOnce;
		default:
		{
			P_1.ThrowEnumException(typeof(TextureWrapMode), num);
			TextureWrapMode result = default(TextureWrapMode);
			return result;
		}
		}
	}

	private static void Write(KeyValuePair<string, DataContract> P_0, ProtoWriter P_1)
	{
		string key = P_0.Key;
		if (key != null)
		{
			ProtoWriter.WriteFieldHeader(1, WireType.String, P_1);
			ProtoWriter.WriteString(key, P_1);
		}
		DataContract value = P_0.Value;
		if (value != null)
		{
			ProtoWriter.WriteFieldHeader(2, WireType.String, P_1);
			BclHelpers.WriteNetObject(value, P_1, 821, BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
		}
	}

	private static KeyValuePair<string, DataContract> Read(KeyValuePair<string, DataContract> P_0, ProtoReader P_1)
	{
		string key = P_0.Key;
		DataContract dataContract = P_0.Value;
		int num;
		while ((num = P_1.ReadFieldHeader()) > 0)
		{
			switch (num)
			{
			case 1:
			{
				string text = P_1.ReadString();
				if (text != null)
				{
					key = text;
				}
				break;
			}
			case 2:
			{
				DataContract obj = (DataContract)BclHelpers.ReadNetObject(dataContract, P_1, 821, typeof(DataContract), BclHelpers.NetObjectOptions.AsReference | BclHelpers.NetObjectOptions.UseConstructor);
				if (obj != null)
				{
					dataContract = obj;
				}
				break;
			}
			default:
				P_1.SkipField();
				break;
			}
		}
		P_0 = new KeyValuePair<string, DataContract>(key, dataContract);
		return P_0;
	}

	private static void Write(Navigation.Mode P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		ProtoWriter.WriteInt32((int)P_0, P_1);
	}

	private static Navigation.Mode Read(Navigation.Mode P_0, ProtoReader P_1)
	{
		return (Navigation.Mode)P_1.ReadInt32();
	}

	private static void Write(UnityEventCallState P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case UnityEventCallState.Off:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case UnityEventCallState.EditorAndRuntime:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case UnityEventCallState.RuntimeOnly:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static UnityEventCallState Read(UnityEventCallState P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return UnityEventCallState.Off;
		case 1:
			return UnityEventCallState.EditorAndRuntime;
		case 2:
			return UnityEventCallState.RuntimeOnly;
		default:
		{
			P_1.ThrowEnumException(typeof(UnityEventCallState), num);
			UnityEventCallState result = default(UnityEventCallState);
			return result;
		}
		}
	}

	private static void Write(PersistentListenerMode P_0, ProtoWriter P_1)
	{
		ProtoWriter.WriteFieldHeader(1, WireType.Variant, P_1);
		switch (P_0)
		{
		case PersistentListenerMode.EventDefined:
			ProtoWriter.WriteInt32(0, P_1);
			break;
		case PersistentListenerMode.Void:
			ProtoWriter.WriteInt32(1, P_1);
			break;
		case PersistentListenerMode.Object:
			ProtoWriter.WriteInt32(2, P_1);
			break;
		case PersistentListenerMode.Int:
			ProtoWriter.WriteInt32(3, P_1);
			break;
		case PersistentListenerMode.Float:
			ProtoWriter.WriteInt32(4, P_1);
			break;
		case PersistentListenerMode.String:
			ProtoWriter.WriteInt32(5, P_1);
			break;
		case PersistentListenerMode.Bool:
			ProtoWriter.WriteInt32(6, P_1);
			break;
		default:
			ProtoWriter.ThrowEnumException(P_1, P_0);
			break;
		}
	}

	private static PersistentListenerMode Read(PersistentListenerMode P_0, ProtoReader P_1)
	{
		int num = P_1.ReadInt32();
		switch (num)
		{
		case 0:
			return PersistentListenerMode.EventDefined;
		case 1:
			return PersistentListenerMode.Void;
		case 2:
			return PersistentListenerMode.Object;
		case 3:
			return PersistentListenerMode.Int;
		case 4:
			return PersistentListenerMode.Float;
		case 5:
			return PersistentListenerMode.String;
		case 6:
			return PersistentListenerMode.Bool;
		default:
		{
			P_1.ThrowEnumException(typeof(PersistentListenerMode), num);
			PersistentListenerMode result = default(PersistentListenerMode);
			return result;
		}
		}
	}

	protected new int GetKeyImpl(Type P_0)
	{
		if (knownTypes.TryGetValue(P_0, out var value))
		{
			return value;
		}
		return -1;
	}

	protected internal new void Serialize(int P_0, object P_1, ProtoWriter P_2)
	{
		switch (P_0 / 128)
		{
		case 0:
			switch (P_0)
			{
			case 0:
				Write((PersistentAnimationCurve)P_1, P_2);
				break;
			case 1:
				Write((PersistentSpriteState)P_1, P_2);
				break;
			case 2:
				Write((PersistentOptionData)P_1, P_2);
				break;
			case 3:
				Write((PersistentNavigation)P_1, P_2);
				break;
			case 4:
				Write((PersistentObject)P_1, P_2);
				break;
			case 5:
				Write((PersistentScript)P_1, P_2);
				break;
			case 6:
				Write((PersistentVideoClip)P_1, P_2);
				break;
			case 7:
				Write((PersistentFont)P_1, P_2);
				break;
			case 8:
				Write((PersistentTerrainData)P_1, P_2);
				break;
			case 9:
				Write((PersistentMotion)P_1, P_2);
				break;
			case 10:
				Write((PersistentAnimationClip)P_1, P_2);
				break;
			case 11:
				Write((PersistentAvatarMask)P_1, P_2);
				break;
			case 12:
				Write((PersistentAvatar)P_1, P_2);
				break;
			case 13:
				Write((PersistentRuntimeAnimatorController)P_1, P_2);
				break;
			case 14:
				Write((PersistentAnimatorOverrideController)P_1, P_2);
				break;
			case 15:
				Write((PersistentAudioMixerGroup)P_1, P_2);
				break;
			case 16:
				Write((PersistentAudioMixerSnapshot)P_1, P_2);
				break;
			case 17:
				Write((PersistentAudioMixer)P_1, P_2);
				break;
			case 18:
				Write((PersistentAudioClip)P_1, P_2);
				break;
			case 19:
				Write((PersistentNavMeshData)P_1, P_2);
				break;
			case 20:
				Write((PersistentPhysicsMaterial2D)P_1, P_2);
				break;
			case 21:
				Write((PersistentPhysicMaterial)P_1, P_2);
				break;
			case 22:
				Write((PersistentTexture)P_1, P_2);
				break;
			case 23:
				Write((PersistentWebCamTexture)P_1, P_2);
				break;
			case 24:
				Write((PersistentMovieTexture)P_1, P_2);
				break;
			case 25:
				Write((PersistentRenderTexture)P_1, P_2);
				break;
			case 26:
				Write((PersistentSparseTexture)P_1, P_2);
				break;
			case 27:
				Write((PersistentCubemapArray)P_1, P_2);
				break;
			case 28:
				Write((PersistentTexture2DArray)P_1, P_2);
				break;
			case 29:
				Write((PersistentTexture3D)P_1, P_2);
				break;
			case 30:
				Write((PersistentCubemap)P_1, P_2);
				break;
			case 31:
				Write((PersistentTexture2D)P_1, P_2);
				break;
			case 32:
				Write((PersistentProceduralTexture)P_1, P_2);
				break;
			case 33:
				Write((PersistentTextAsset)P_1, P_2);
				break;
			case 34:
				Write((PersistentSprite)P_1, P_2);
				break;
			case 35:
				Write((PersistentShaderVariantCollection)P_1, P_2);
				break;
			case 36:
				Write((PersistentMaterial)P_1, P_2);
				break;
			case 37:
				Write((PersistentShader)P_1, P_2);
				break;
			case 38:
				Write((PersistentGraphicsSettings)P_1, P_2);
				break;
			case 39:
				Write((PersistentMesh)P_1, P_2);
				break;
			case 40:
				Write((PersistentLightmapSettings)P_1, P_2);
				break;
			case 41:
				Write((PersistentLightProbes)P_1, P_2);
				break;
			case 42:
				Write((PersistentFlare)P_1, P_2);
				break;
			case 43:
				Write((PersistentQualitySettings)P_1, P_2);
				break;
			case 44:
				Write((PersistentRenderSettings)P_1, P_2);
				break;
			case 45:
				Write((PersistentGameObject)P_1, P_2);
				break;
			case 46:
				Write((PersistentComputeShader)P_1, P_2);
				break;
			case 47:
				Write((PersistentComponent)P_1, P_2);
				break;
			case 48:
				Write((PersistentWorldAnchor)P_1, P_2);
				break;
			case 49:
				Write((PersistentCanvasRenderer)P_1, P_2);
				break;
			case 50:
				Write((PersistentCanvasGroup)P_1, P_2);
				break;
			case 51:
				Write((PersistentTextMesh)P_1, P_2);
				break;
			case 52:
				Write((PersistentTree)P_1, P_2);
				break;
			case 53:
				Write((PersistentCloth)P_1, P_2);
				break;
			case 54:
				Write((PersistentRigidbody2D)P_1, P_2);
				break;
			case 55:
				Write((PersistentCollider)P_1, P_2);
				break;
			case 56:
				Write((PersistentTerrainCollider)P_1, P_2);
				break;
			case 57:
				Write((PersistentWheelCollider)P_1, P_2);
				break;
			case 58:
				Write((PersistentCharacterController)P_1, P_2);
				break;
			case 59:
				Write((PersistentCapsuleCollider)P_1, P_2);
				break;
			case 60:
				Write((PersistentMeshCollider)P_1, P_2);
				break;
			case 61:
				Write((PersistentSphereCollider)P_1, P_2);
				break;
			case 62:
				Write((PersistentBoxCollider)P_1, P_2);
				break;
			case 63:
				Write((PersistentJoint)P_1, P_2);
				break;
			case 64:
				Write((PersistentConfigurableJoint)P_1, P_2);
				break;
			case 65:
				Write((PersistentCharacterJoint)P_1, P_2);
				break;
			case 66:
				Write((PersistentFixedJoint)P_1, P_2);
				break;
			case 67:
				Write((PersistentSpringJoint)P_1, P_2);
				break;
			case 68:
				Write((PersistentHingeJoint)P_1, P_2);
				break;
			case 69:
				Write((PersistentRigidbody)P_1, P_2);
				break;
			case 70:
				Write((PersistentParticleSystem)P_1, P_2);
				break;
			case 71:
				Write((PersistentTransform)P_1, P_2);
				break;
			case 72:
				Write((PersistentRectTransform)P_1, P_2);
				break;
			case 73:
				Write((PersistentWindZone)P_1, P_2);
				break;
			case 74:
				Write((PersistentLODGroup)P_1, P_2);
				break;
			case 75:
				Write((PersistentRenderer)P_1, P_2);
				break;
			case 76:
				Write((PersistentParticleSystemRenderer)P_1, P_2);
				break;
			case 77:
				Write((PersistentSpriteRenderer)P_1, P_2);
				break;
			case 78:
				Write((PersistentMeshRenderer)P_1, P_2);
				break;
			case 79:
				Write((PersistentLineRenderer)P_1, P_2);
				break;
			case 80:
				Write((PersistentTrailRenderer)P_1, P_2);
				break;
			case 81:
				Write((PersistentSkinnedMeshRenderer)P_1, P_2);
				break;
			case 82:
				Write((PersistentBillboardRenderer)P_1, P_2);
				break;
			case 83:
				Write((PersistentMeshFilter)P_1, P_2);
				break;
			case 84:
				Write((PersistentOcclusionPortal)P_1, P_2);
				break;
			case 85:
				Write((PersistentOcclusionArea)P_1, P_2);
				break;
			case 86:
				Write((PersistentBehaviour)P_1, P_2);
				break;
			case 87:
				Write((PersistentVideoPlayer)P_1, P_2);
				break;
			case 88:
				Write((PersistentCanvas)P_1, P_2);
				break;
			case 89:
				Write((PersistentTerrain)P_1, P_2);
				break;
			case 90:
				Write((PersistentAnimation)P_1, P_2);
				break;
			case 91:
				Write((PersistentAnimator)P_1, P_2);
				break;
			case 92:
				Write((PersistentAudioChorusFilter)P_1, P_2);
				break;
			case 93:
				Write((PersistentAudioEchoFilter)P_1, P_2);
				break;
			case 94:
				Write((PersistentAudioDistortionFilter)P_1, P_2);
				break;
			case 95:
				Write((PersistentAudioReverbZone)P_1, P_2);
				break;
			case 96:
				Write((PersistentAudioListener)P_1, P_2);
				break;
			case 97:
				Write((PersistentAudioBehaviour)P_1, P_2);
				break;
			case 98:
				Write((PersistentAudioReverbFilter)P_1, P_2);
				break;
			case 99:
				Write((PersistentAudioHighPassFilter)P_1, P_2);
				break;
			case 100:
				Write((PersistentAudioLowPassFilter)P_1, P_2);
				break;
			case 101:
				Write((PersistentAudioSource)P_1, P_2);
				break;
			case 102:
				Write((PersistentOffMeshLink)P_1, P_2);
				break;
			case 103:
				Write((PersistentNavMeshObstacle)P_1, P_2);
				break;
			case 104:
				Write((PersistentNavMeshAgent)P_1, P_2);
				break;
			case 105:
				Write((PersistentEffector2D)P_1, P_2);
				break;
			case 106:
				Write((PersistentSurfaceEffector2D)P_1, P_2);
				break;
			case 107:
				Write((PersistentPointEffector2D)P_1, P_2);
				break;
			case 108:
				Write((PersistentBuoyancyEffector2D)P_1, P_2);
				break;
			case 109:
				Write((PersistentPlatformEffector2D)P_1, P_2);
				break;
			case 110:
				Write((PersistentAreaEffector2D)P_1, P_2);
				break;
			case 111:
				Write((PersistentPhysicsUpdateBehaviour2D)P_1, P_2);
				break;
			case 112:
				Write((PersistentConstantForce2D)P_1, P_2);
				break;
			case 113:
				Write((PersistentCollider2D)P_1, P_2);
				break;
			case 114:
				Write((PersistentPolygonCollider2D)P_1, P_2);
				break;
			case 115:
				Write((PersistentCompositeCollider2D)P_1, P_2);
				break;
			case 116:
				Write((PersistentCapsuleCollider2D)P_1, P_2);
				break;
			case 117:
				Write((PersistentEdgeCollider2D)P_1, P_2);
				break;
			case 118:
				Write((PersistentBoxCollider2D)P_1, P_2);
				break;
			case 119:
				Write((PersistentCircleCollider2D)P_1, P_2);
				break;
			case 120:
				Write((PersistentJoint2D)P_1, P_2);
				break;
			case 121:
				Write((PersistentTargetJoint2D)P_1, P_2);
				break;
			case 122:
				Write((PersistentRelativeJoint2D)P_1, P_2);
				break;
			case 123:
				Write((PersistentAnchoredJoint2D)P_1, P_2);
				break;
			case 124:
				Write((PersistentWheelJoint2D)P_1, P_2);
				break;
			case 125:
				Write((PersistentFixedJoint2D)P_1, P_2);
				break;
			case 126:
				Write((PersistentSliderJoint2D)P_1, P_2);
				break;
			case 127:
				Write((PersistentHingeJoint2D)P_1, P_2);
				break;
			}
			break;
		case 1:
			switch (P_0)
			{
			case 128:
				Write((PersistentFrictionJoint2D)P_1, P_2);
				break;
			case 129:
				Write((PersistentDistanceJoint2D)P_1, P_2);
				break;
			case 130:
				Write((PersistentSpringJoint2D)P_1, P_2);
				break;
			case 131:
				Write((PersistentConstantForce)P_1, P_2);
				break;
			case 132:
				Write((PersistentSortingGroup)P_1, P_2);
				break;
			case 133:
				Write((PersistentReflectionProbe)P_1, P_2);
				break;
			case 134:
				Write((PersistentNetworkView)P_1, P_2);
				break;
			case 135:
				Write((PersistentMonoBehaviour)P_1, P_2);
				break;
			case 136:
				Write((PersistentUIBehaviour)P_1, P_2);
				break;
			case 137:
				Write((PersistentBaseMeshEffect)P_1, P_2);
				break;
			case 138:
				Write((PersistentShadow)P_1, P_2);
				break;
			case 139:
				Write((PersistentOutline)P_1, P_2);
				break;
			case 140:
				Write((PersistentPositionAsUV1)P_1, P_2);
				break;
			case 141:
				Write((PersistentLayoutGroup)P_1, P_2);
				break;
			case 142:
				Write((PersistentHorizontalOrVerticalLayoutGroup)P_1, P_2);
				break;
			case 143:
				Write((PersistentVerticalLayoutGroup)P_1, P_2);
				break;
			case 144:
				Write((PersistentHorizontalLayoutGroup)P_1, P_2);
				break;
			case 145:
				Write((PersistentGridLayoutGroup)P_1, P_2);
				break;
			case 146:
				Write((PersistentLayoutElement)P_1, P_2);
				break;
			case 147:
				Write((PersistentContentSizeFitter)P_1, P_2);
				break;
			case 148:
				Write((PersistentCanvasScaler)P_1, P_2);
				break;
			case 149:
				Write((PersistentAspectRatioFitter)P_1, P_2);
				break;
			case 150:
				Write((PersistentToggleGroup)P_1, P_2);
				break;
			case 151:
				Write((PersistentSelectable)P_1, P_2);
				break;
			case 152:
				Write((PersistentToggle)P_1, P_2);
				break;
			case 153:
				Write((PersistentSlider)P_1, P_2);
				break;
			case 154:
				Write((PersistentScrollbar)P_1, P_2);
				break;
			case 155:
				Write((PersistentInputField)P_1, P_2);
				break;
			case 156:
				Write((PersistentDropdown)P_1, P_2);
				break;
			case 157:
				Write((PersistentButton)P_1, P_2);
				break;
			case 158:
				Write((PersistentScrollRect)P_1, P_2);
				break;
			case 159:
				Write((PersistentRectMask2D)P_1, P_2);
				break;
			case 160:
				Write((PersistentMask)P_1, P_2);
				break;
			case 161:
				Write((PersistentGraphic)P_1, P_2);
				break;
			case 162:
				Write((PersistentMaskableGraphic)P_1, P_2);
				break;
			case 163:
				Write((PersistentText)P_1, P_2);
				break;
			case 164:
				Write((PersistentRawImage)P_1, P_2);
				break;
			case 165:
				Write((PersistentImage)P_1, P_2);
				break;
			case 166:
				Write((PersistentBaseRaycaster)P_1, P_2);
				break;
			case 167:
				Write((PersistentGraphicRaycaster)P_1, P_2);
				break;
			case 168:
				Write((PersistentPhysicsRaycaster)P_1, P_2);
				break;
			case 169:
				Write((PersistentPhysics2DRaycaster)P_1, P_2);
				break;
			case 170:
				Write((PersistentBaseInputModule)P_1, P_2);
				break;
			case 171:
				Write((PersistentPointerInputModule)P_1, P_2);
				break;
			case 172:
				Write((PersistentStandaloneInputModule)P_1, P_2);
				break;
			case 173:
				Write((PersistentBaseInput)P_1, P_2);
				break;
			case 174:
				Write((PersistentEventSystem)P_1, P_2);
				break;
			case 175:
				Write((PersistentEventTrigger)P_1, P_2);
				break;
			case 176:
				Write((PersistentNetworkMatch)P_1, P_2);
				break;
			case 177:
				Write((PersistentLightProbeProxyVolume)P_1, P_2);
				break;
			case 178:
				Write((PersistentLightProbeGroup)P_1, P_2);
				break;
			case 179:
				Write((PersistentLight)P_1, P_2);
				break;
			case 180:
				Write((PersistentGUILayer)P_1, P_2);
				break;
			case 181:
				Write((PersistentGUIElement)P_1, P_2);
				break;
			case 182:
				Write((PersistentSkybox)P_1, P_2);
				break;
			case 183:
				Write((PersistentProjector)P_1, P_2);
				break;
			case 184:
				Write((PersistentLensFlare)P_1, P_2);
				break;
			case 185:
				Write((PersistentFlareLayer)P_1, P_2);
				break;
			case 186:
				Write((PersistentCamera)P_1, P_2);
				break;
			case 187:
				Write((PersistentBillboardAsset)P_1, P_2);
				break;
			case 188:
				Write((PersistentScriptableObject)P_1, P_2);
				break;
			case 189:
				Write((PersistentRenderPipelineAsset)P_1, P_2);
				break;
			case 190:
				Write((PersistentPlayerConnection)P_1, P_2);
				break;
			case 191:
				Write((PersistentGUISkin)P_1, P_2);
				break;
			case 192:
				Write((PersistentStateMachineBehaviour)P_1, P_2);
				break;
			case 193:
				Write((PersistentAssetBundleManifest)P_1, P_2);
				break;
			case 194:
				Write((PersistentAssetBundle)P_1, P_2);
				break;
			case 195:
				Write((PersistentTriggerModule)P_1, P_2);
				break;
			case 196:
				Write((PersistentEmissionModule)P_1, P_2);
				break;
			case 197:
				Write((PersistentCollisionModule)P_1, P_2);
				break;
			case 198:
				Write((PersistentGUIStyleState)P_1, P_2);
				break;
			case 199:
				Write((PersistentGUIStyle)P_1, P_2);
				break;
			case 200:
				Write((PersistentVelocityOverLifetimeModule)P_1, P_2);
				break;
			case 201:
				Write((PersistentTrailModule)P_1, P_2);
				break;
			case 202:
				Write((PersistentTextureSheetAnimationModule)P_1, P_2);
				break;
			case 203:
				Write((PersistentSubEmittersModule)P_1, P_2);
				break;
			case 204:
				Write((PersistentSizeOverLifetimeModule)P_1, P_2);
				break;
			case 205:
				Write((PersistentSizeBySpeedModule)P_1, P_2);
				break;
			case 206:
				Write((PersistentShapeModule)P_1, P_2);
				break;
			case 207:
				Write((PersistentRotationOverLifetimeModule)P_1, P_2);
				break;
			case 208:
				Write((PersistentRotationBySpeedModule)P_1, P_2);
				break;
			case 209:
				Write((PersistentParticle)P_1, P_2);
				break;
			case 210:
				Write((PersistentNoiseModule)P_1, P_2);
				break;
			case 211:
				Write((PersistentMinMaxGradient)P_1, P_2);
				break;
			case 212:
				Write((PersistentMinMaxCurve)P_1, P_2);
				break;
			case 213:
				Write((PersistentMainModule)P_1, P_2);
				break;
			case 214:
				Write((PersistentLimitVelocityOverLifetimeModule)P_1, P_2);
				break;
			case 215:
				Write((PersistentLightsModule)P_1, P_2);
				break;
			case 216:
				Write((PersistentKeyframe)P_1, P_2);
				break;
			case 217:
				Write((PersistentInheritVelocityModule)P_1, P_2);
				break;
			case 218:
				Write((PersistentGradient)P_1, P_2);
				break;
			case 219:
				Write((PersistentForceOverLifetimeModule)P_1, P_2);
				break;
			case 220:
				Write((PersistentExternalForcesModule)P_1, P_2);
				break;
			case 221:
				Write((PersistentEmitParams)P_1, P_2);
				break;
			case 222:
				Write((PersistentCustomDataModule)P_1, P_2);
				break;
			case 223:
				Write((PersistentColorOverLifetimeModule)P_1, P_2);
				break;
			case 224:
				Write((PersistentColorBySpeedModule)P_1, P_2);
				break;
			case 225:
				Write((PersistentBurst)P_1, P_2);
				break;
			case 226:
				Write((PrimitiveContract<Vector4[]>)P_1, P_2);
				break;
			case 227:
				Write((PrimitiveContract<Vector4>)P_1, P_2);
				break;
			case 228:
				Write((PrimitiveContract<Vector3[]>)P_1, P_2);
				break;
			case 229:
				Write((PrimitiveContract<Vector3>)P_1, P_2);
				break;
			case 230:
				Write((PrimitiveContract<Color[]>)P_1, P_2);
				break;
			case 231:
				Write((PrimitiveContract<Color>)P_1, P_2);
				break;
			case 232:
				Write((PrimitiveContract<decimal[]>)P_1, P_2);
				break;
			case 233:
				Write((PrimitiveContract<double[]>)P_1, P_2);
				break;
			case 234:
				Write((PrimitiveContract<float[]>)P_1, P_2);
				break;
			case 235:
				Write((PrimitiveContract<string[]>)P_1, P_2);
				break;
			case 236:
				Write((PrimitiveContract<ulong[]>)P_1, P_2);
				break;
			case 237:
				Write((PrimitiveContract<uint[]>)P_1, P_2);
				break;
			case 238:
				Write((PrimitiveContract<ushort[]>)P_1, P_2);
				break;
			case 239:
				Write((PrimitiveContract<long[]>)P_1, P_2);
				break;
			case 240:
				Write((PrimitiveContract<int[]>)P_1, P_2);
				break;
			case 241:
				Write((PrimitiveContract<short[]>)P_1, P_2);
				break;
			case 242:
				Write((PrimitiveContract<byte[]>)P_1, P_2);
				break;
			case 243:
				Write((PrimitiveContract<char[]>)P_1, P_2);
				break;
			case 244:
				Write((PrimitiveContract<bool[]>)P_1, P_2);
				break;
			case 245:
				Write((PrimitiveContract<decimal>)P_1, P_2);
				break;
			case 246:
				Write((PrimitiveContract<double>)P_1, P_2);
				break;
			case 247:
				Write((PrimitiveContract<float>)P_1, P_2);
				break;
			case 248:
				Write((PrimitiveContract<string>)P_1, P_2);
				break;
			case 249:
				Write((PrimitiveContract<ulong>)P_1, P_2);
				break;
			case 250:
				Write((PrimitiveContract<uint>)P_1, P_2);
				break;
			case 251:
				Write((PrimitiveContract<ushort>)P_1, P_2);
				break;
			case 252:
				Write((PrimitiveContract<long>)P_1, P_2);
				break;
			case 253:
				Write((PrimitiveContract<int>)P_1, P_2);
				break;
			case 254:
				Write((PrimitiveContract<short>)P_1, P_2);
				break;
			case 255:
				Write((PrimitiveContract<byte>)P_1, P_2);
				break;
			}
			break;
		case 2:
			switch (P_0)
			{
			case 256:
				Write((PrimitiveContract<char>)P_1, P_2);
				break;
			case 257:
				Write((PrimitiveContract<bool>)P_1, P_2);
				break;
			case 258:
				Write((PersistentData)P_1, P_2);
				break;
			case 259:
				Write((PrimitiveContract<PersistentAnimationCurve[]>)P_1, P_2);
				break;
			case 260:
				Write((PrimitiveContract)P_1, P_2);
				break;
			case 261:
				Write((List<PersistentAnimationCurve>)P_1, P_2);
				break;
			case 262:
				Write((PrimitiveContract<PersistentBurst[]>)P_1, P_2);
				break;
			case 263:
				Write((List<PersistentBurst>)P_1, P_2);
				break;
			case 264:
				Write((PrimitiveContract<PersistentColorBySpeedModule[]>)P_1, P_2);
				break;
			case 265:
				Write((List<PersistentColorBySpeedModule>)P_1, P_2);
				break;
			case 266:
				Write((PrimitiveContract<PersistentColorOverLifetimeModule[]>)P_1, P_2);
				break;
			case 267:
				Write((List<PersistentColorOverLifetimeModule>)P_1, P_2);
				break;
			case 268:
				Write((PrimitiveContract<PersistentCustomDataModule[]>)P_1, P_2);
				break;
			case 269:
				Write((List<PersistentCustomDataModule>)P_1, P_2);
				break;
			case 270:
				Write((PrimitiveContract<PersistentEmitParams[]>)P_1, P_2);
				break;
			case 271:
				Write((List<PersistentEmitParams>)P_1, P_2);
				break;
			case 272:
				Write((PrimitiveContract<PersistentExternalForcesModule[]>)P_1, P_2);
				break;
			case 273:
				Write((List<PersistentExternalForcesModule>)P_1, P_2);
				break;
			case 274:
				Write((PrimitiveContract<PersistentForceOverLifetimeModule[]>)P_1, P_2);
				break;
			case 275:
				Write((List<PersistentForceOverLifetimeModule>)P_1, P_2);
				break;
			case 276:
				Write((PrimitiveContract<PersistentGradient[]>)P_1, P_2);
				break;
			case 277:
				Write((List<PersistentGradient>)P_1, P_2);
				break;
			case 278:
				Write((PrimitiveContract<PersistentInheritVelocityModule[]>)P_1, P_2);
				break;
			case 279:
				Write((List<PersistentInheritVelocityModule>)P_1, P_2);
				break;
			case 280:
				Write((PrimitiveContract<PersistentKeyframe[]>)P_1, P_2);
				break;
			case 281:
				Write((List<PersistentKeyframe>)P_1, P_2);
				break;
			case 282:
				Write((PrimitiveContract<PersistentLightsModule[]>)P_1, P_2);
				break;
			case 283:
				Write((List<PersistentLightsModule>)P_1, P_2);
				break;
			case 284:
				Write((PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]>)P_1, P_2);
				break;
			case 285:
				Write((List<PersistentLimitVelocityOverLifetimeModule>)P_1, P_2);
				break;
			case 286:
				Write((PrimitiveContract<PersistentMainModule[]>)P_1, P_2);
				break;
			case 287:
				Write((List<PersistentMainModule>)P_1, P_2);
				break;
			case 288:
				Write((PrimitiveContract<PersistentMinMaxCurve[]>)P_1, P_2);
				break;
			case 289:
				Write((List<PersistentMinMaxCurve>)P_1, P_2);
				break;
			case 290:
				Write((PrimitiveContract<PersistentMinMaxGradient[]>)P_1, P_2);
				break;
			case 291:
				Write((List<PersistentMinMaxGradient>)P_1, P_2);
				break;
			case 292:
				Write((PrimitiveContract<PersistentNoiseModule[]>)P_1, P_2);
				break;
			case 293:
				Write((List<PersistentNoiseModule>)P_1, P_2);
				break;
			case 294:
				Write((PrimitiveContract<PersistentParticle[]>)P_1, P_2);
				break;
			case 295:
				Write((List<PersistentParticle>)P_1, P_2);
				break;
			case 296:
				Write((PrimitiveContract<PersistentRotationBySpeedModule[]>)P_1, P_2);
				break;
			case 297:
				Write((List<PersistentRotationBySpeedModule>)P_1, P_2);
				break;
			case 298:
				Write((PrimitiveContract<PersistentRotationOverLifetimeModule[]>)P_1, P_2);
				break;
			case 299:
				Write((List<PersistentRotationOverLifetimeModule>)P_1, P_2);
				break;
			case 300:
				Write((PrimitiveContract<PersistentShapeModule[]>)P_1, P_2);
				break;
			case 301:
				Write((List<PersistentShapeModule>)P_1, P_2);
				break;
			case 302:
				Write((PrimitiveContract<PersistentSizeBySpeedModule[]>)P_1, P_2);
				break;
			case 303:
				Write((List<PersistentSizeBySpeedModule>)P_1, P_2);
				break;
			case 304:
				Write((PrimitiveContract<PersistentSizeOverLifetimeModule[]>)P_1, P_2);
				break;
			case 305:
				Write((List<PersistentSizeOverLifetimeModule>)P_1, P_2);
				break;
			case 306:
				Write((PrimitiveContract<PersistentSubEmittersModule[]>)P_1, P_2);
				break;
			case 307:
				Write((List<PersistentSubEmittersModule>)P_1, P_2);
				break;
			case 308:
				Write((PrimitiveContract<PersistentTextureSheetAnimationModule[]>)P_1, P_2);
				break;
			case 309:
				Write((List<PersistentTextureSheetAnimationModule>)P_1, P_2);
				break;
			case 310:
				Write((PrimitiveContract<PersistentTrailModule[]>)P_1, P_2);
				break;
			case 311:
				Write((List<PersistentTrailModule>)P_1, P_2);
				break;
			case 312:
				Write((PrimitiveContract<PersistentVelocityOverLifetimeModule[]>)P_1, P_2);
				break;
			case 313:
				Write((List<PersistentVelocityOverLifetimeModule>)P_1, P_2);
				break;
			case 314:
				Write((PrimitiveContract<PersistentAnchoredJoint2D[]>)P_1, P_2);
				break;
			case 315:
				Write((List<PersistentAnchoredJoint2D>)P_1, P_2);
				break;
			case 316:
				Write((PrimitiveContract<PersistentAnimation[]>)P_1, P_2);
				break;
			case 317:
				Write((List<PersistentAnimation>)P_1, P_2);
				break;
			case 318:
				Write((PrimitiveContract<PersistentAnimationClip[]>)P_1, P_2);
				break;
			case 319:
				Write((List<PersistentAnimationClip>)P_1, P_2);
				break;
			case 320:
				Write((PrimitiveContract<PersistentAnimator[]>)P_1, P_2);
				break;
			case 321:
				Write((List<PersistentAnimator>)P_1, P_2);
				break;
			case 322:
				Write((PrimitiveContract<PersistentAnimatorOverrideController[]>)P_1, P_2);
				break;
			case 323:
				Write((List<PersistentAnimatorOverrideController>)P_1, P_2);
				break;
			case 324:
				Write((PrimitiveContract<PersistentAreaEffector2D[]>)P_1, P_2);
				break;
			case 325:
				Write((List<PersistentAreaEffector2D>)P_1, P_2);
				break;
			case 326:
				Write((PrimitiveContract<PersistentAspectRatioFitter[]>)P_1, P_2);
				break;
			case 327:
				Write((List<PersistentAspectRatioFitter>)P_1, P_2);
				break;
			case 328:
				Write((PrimitiveContract<PersistentAssetBundle[]>)P_1, P_2);
				break;
			case 329:
				Write((List<PersistentAssetBundle>)P_1, P_2);
				break;
			case 330:
				Write((PrimitiveContract<PersistentAssetBundleManifest[]>)P_1, P_2);
				break;
			case 331:
				Write((List<PersistentAssetBundleManifest>)P_1, P_2);
				break;
			case 332:
				Write((PrimitiveContract<PersistentAudioBehaviour[]>)P_1, P_2);
				break;
			case 333:
				Write((List<PersistentAudioBehaviour>)P_1, P_2);
				break;
			case 334:
				Write((PrimitiveContract<PersistentAudioChorusFilter[]>)P_1, P_2);
				break;
			case 335:
				Write((List<PersistentAudioChorusFilter>)P_1, P_2);
				break;
			case 336:
				Write((PrimitiveContract<PersistentAudioClip[]>)P_1, P_2);
				break;
			case 337:
				Write((List<PersistentAudioClip>)P_1, P_2);
				break;
			case 338:
				Write((PrimitiveContract<PersistentAudioDistortionFilter[]>)P_1, P_2);
				break;
			case 339:
				Write((List<PersistentAudioDistortionFilter>)P_1, P_2);
				break;
			case 340:
				Write((PrimitiveContract<PersistentAudioEchoFilter[]>)P_1, P_2);
				break;
			case 341:
				Write((List<PersistentAudioEchoFilter>)P_1, P_2);
				break;
			case 342:
				Write((PrimitiveContract<PersistentAudioHighPassFilter[]>)P_1, P_2);
				break;
			case 343:
				Write((List<PersistentAudioHighPassFilter>)P_1, P_2);
				break;
			case 344:
				Write((PrimitiveContract<PersistentAudioListener[]>)P_1, P_2);
				break;
			case 345:
				Write((List<PersistentAudioListener>)P_1, P_2);
				break;
			case 346:
				Write((PrimitiveContract<PersistentAudioLowPassFilter[]>)P_1, P_2);
				break;
			case 347:
				Write((List<PersistentAudioLowPassFilter>)P_1, P_2);
				break;
			case 348:
				Write((PrimitiveContract<PersistentAudioMixer[]>)P_1, P_2);
				break;
			case 349:
				Write((List<PersistentAudioMixer>)P_1, P_2);
				break;
			case 350:
				Write((PrimitiveContract<PersistentAudioMixerGroup[]>)P_1, P_2);
				break;
			case 351:
				Write((List<PersistentAudioMixerGroup>)P_1, P_2);
				break;
			case 352:
				Write((PrimitiveContract<PersistentAudioMixerSnapshot[]>)P_1, P_2);
				break;
			case 353:
				Write((List<PersistentAudioMixerSnapshot>)P_1, P_2);
				break;
			case 354:
				Write((PrimitiveContract<PersistentAudioReverbFilter[]>)P_1, P_2);
				break;
			case 355:
				Write((List<PersistentAudioReverbFilter>)P_1, P_2);
				break;
			case 356:
				Write((PrimitiveContract<PersistentAudioReverbZone[]>)P_1, P_2);
				break;
			case 357:
				Write((List<PersistentAudioReverbZone>)P_1, P_2);
				break;
			case 358:
				Write((PrimitiveContract<PersistentAudioSource[]>)P_1, P_2);
				break;
			case 359:
				Write((List<PersistentAudioSource>)P_1, P_2);
				break;
			case 360:
				Write((PrimitiveContract<PersistentAvatar[]>)P_1, P_2);
				break;
			case 361:
				Write((List<PersistentAvatar>)P_1, P_2);
				break;
			case 362:
				Write((PrimitiveContract<PersistentAvatarMask[]>)P_1, P_2);
				break;
			case 363:
				Write((List<PersistentAvatarMask>)P_1, P_2);
				break;
			case 364:
				Write((PrimitiveContract<PersistentBaseInput[]>)P_1, P_2);
				break;
			case 365:
				Write((List<PersistentBaseInput>)P_1, P_2);
				break;
			case 366:
				Write((PrimitiveContract<PersistentBaseInputModule[]>)P_1, P_2);
				break;
			case 367:
				Write((List<PersistentBaseInputModule>)P_1, P_2);
				break;
			case 368:
				Write((PrimitiveContract<PersistentBaseMeshEffect[]>)P_1, P_2);
				break;
			case 369:
				Write((List<PersistentBaseMeshEffect>)P_1, P_2);
				break;
			case 370:
				Write((PrimitiveContract<PersistentBaseRaycaster[]>)P_1, P_2);
				break;
			case 371:
				Write((List<PersistentBaseRaycaster>)P_1, P_2);
				break;
			case 372:
				Write((PrimitiveContract<PersistentBehaviour[]>)P_1, P_2);
				break;
			case 373:
				Write((List<PersistentBehaviour>)P_1, P_2);
				break;
			case 374:
				Write((PrimitiveContract<PersistentBillboardAsset[]>)P_1, P_2);
				break;
			case 375:
				Write((List<PersistentBillboardAsset>)P_1, P_2);
				break;
			case 376:
				Write((PrimitiveContract<PersistentBillboardRenderer[]>)P_1, P_2);
				break;
			case 377:
				Write((List<PersistentBillboardRenderer>)P_1, P_2);
				break;
			case 378:
				Write((PrimitiveContract<PersistentBoxCollider[]>)P_1, P_2);
				break;
			case 379:
				Write((List<PersistentBoxCollider>)P_1, P_2);
				break;
			case 380:
				Write((PrimitiveContract<PersistentBoxCollider2D[]>)P_1, P_2);
				break;
			case 381:
				Write((List<PersistentBoxCollider2D>)P_1, P_2);
				break;
			case 382:
				Write((PrimitiveContract<PersistentBuoyancyEffector2D[]>)P_1, P_2);
				break;
			case 383:
				Write((List<PersistentBuoyancyEffector2D>)P_1, P_2);
				break;
			}
			break;
		case 3:
			switch (P_0)
			{
			case 384:
				Write((PrimitiveContract<PersistentCamera[]>)P_1, P_2);
				break;
			case 385:
				Write((List<PersistentCamera>)P_1, P_2);
				break;
			case 386:
				Write((PrimitiveContract<PersistentCanvas[]>)P_1, P_2);
				break;
			case 387:
				Write((List<PersistentCanvas>)P_1, P_2);
				break;
			case 388:
				Write((PrimitiveContract<PersistentCanvasGroup[]>)P_1, P_2);
				break;
			case 389:
				Write((List<PersistentCanvasGroup>)P_1, P_2);
				break;
			case 390:
				Write((PrimitiveContract<PersistentCanvasRenderer[]>)P_1, P_2);
				break;
			case 391:
				Write((List<PersistentCanvasRenderer>)P_1, P_2);
				break;
			case 392:
				Write((PrimitiveContract<PersistentCanvasScaler[]>)P_1, P_2);
				break;
			case 393:
				Write((List<PersistentCanvasScaler>)P_1, P_2);
				break;
			case 394:
				Write((PrimitiveContract<PersistentCapsuleCollider[]>)P_1, P_2);
				break;
			case 395:
				Write((List<PersistentCapsuleCollider>)P_1, P_2);
				break;
			case 396:
				Write((PrimitiveContract<PersistentCapsuleCollider2D[]>)P_1, P_2);
				break;
			case 397:
				Write((List<PersistentCapsuleCollider2D>)P_1, P_2);
				break;
			case 398:
				Write((PrimitiveContract<PersistentCharacterController[]>)P_1, P_2);
				break;
			case 399:
				Write((List<PersistentCharacterController>)P_1, P_2);
				break;
			case 400:
				Write((PrimitiveContract<PersistentCharacterJoint[]>)P_1, P_2);
				break;
			case 401:
				Write((List<PersistentCharacterJoint>)P_1, P_2);
				break;
			case 402:
				Write((PrimitiveContract<PersistentCircleCollider2D[]>)P_1, P_2);
				break;
			case 403:
				Write((List<PersistentCircleCollider2D>)P_1, P_2);
				break;
			case 404:
				Write((PrimitiveContract<PersistentCollider[]>)P_1, P_2);
				break;
			case 405:
				Write((List<PersistentCollider>)P_1, P_2);
				break;
			case 406:
				Write((PrimitiveContract<PersistentCollider2D[]>)P_1, P_2);
				break;
			case 407:
				Write((List<PersistentCollider2D>)P_1, P_2);
				break;
			case 408:
				Write((PrimitiveContract<PersistentComponent[]>)P_1, P_2);
				break;
			case 409:
				Write((List<PersistentComponent>)P_1, P_2);
				break;
			case 410:
				Write((PrimitiveContract<PersistentCompositeCollider2D[]>)P_1, P_2);
				break;
			case 411:
				Write((List<PersistentCompositeCollider2D>)P_1, P_2);
				break;
			case 412:
				Write((PrimitiveContract<PersistentComputeShader[]>)P_1, P_2);
				break;
			case 413:
				Write((List<PersistentComputeShader>)P_1, P_2);
				break;
			case 414:
				Write((PrimitiveContract<PersistentConfigurableJoint[]>)P_1, P_2);
				break;
			case 415:
				Write((List<PersistentConfigurableJoint>)P_1, P_2);
				break;
			case 416:
				Write((PrimitiveContract<PersistentConstantForce[]>)P_1, P_2);
				break;
			case 417:
				Write((List<PersistentConstantForce>)P_1, P_2);
				break;
			case 418:
				Write((PrimitiveContract<PersistentConstantForce2D[]>)P_1, P_2);
				break;
			case 419:
				Write((List<PersistentConstantForce2D>)P_1, P_2);
				break;
			case 420:
				Write((PrimitiveContract<PersistentContentSizeFitter[]>)P_1, P_2);
				break;
			case 421:
				Write((List<PersistentContentSizeFitter>)P_1, P_2);
				break;
			case 422:
				Write((PrimitiveContract<PersistentCubemap[]>)P_1, P_2);
				break;
			case 423:
				Write((List<PersistentCubemap>)P_1, P_2);
				break;
			case 424:
				Write((PrimitiveContract<PersistentCubemapArray[]>)P_1, P_2);
				break;
			case 425:
				Write((List<PersistentCubemapArray>)P_1, P_2);
				break;
			case 426:
				Write((PrimitiveContract<PersistentData[]>)P_1, P_2);
				break;
			case 427:
				Write((List<PersistentData>)P_1, P_2);
				break;
			case 428:
				Write((PersistentDetailPrototype)P_1, P_2);
				break;
			case 429:
				Write((PrimitiveContract<PersistentDetailPrototype[]>)P_1, P_2);
				break;
			case 430:
				Write((List<PersistentDetailPrototype>)P_1, P_2);
				break;
			case 431:
				Write((PrimitiveContract<PersistentDistanceJoint2D[]>)P_1, P_2);
				break;
			case 432:
				Write((List<PersistentDistanceJoint2D>)P_1, P_2);
				break;
			case 433:
				Write((PrimitiveContract<PersistentEdgeCollider2D[]>)P_1, P_2);
				break;
			case 434:
				Write((List<PersistentEdgeCollider2D>)P_1, P_2);
				break;
			case 435:
				Write((PrimitiveContract<PersistentEffector2D[]>)P_1, P_2);
				break;
			case 436:
				Write((List<PersistentEffector2D>)P_1, P_2);
				break;
			case 437:
				Write((PrimitiveContract<PersistentEventSystem[]>)P_1, P_2);
				break;
			case 438:
				Write((List<PersistentEventSystem>)P_1, P_2);
				break;
			case 439:
				Write((PrimitiveContract<PersistentEventTrigger[]>)P_1, P_2);
				break;
			case 440:
				Write((List<PersistentEventTrigger>)P_1, P_2);
				break;
			case 441:
				Write((PrimitiveContract<PersistentFixedJoint[]>)P_1, P_2);
				break;
			case 442:
				Write((List<PersistentFixedJoint>)P_1, P_2);
				break;
			case 443:
				Write((PrimitiveContract<PersistentFixedJoint2D[]>)P_1, P_2);
				break;
			case 444:
				Write((List<PersistentFixedJoint2D>)P_1, P_2);
				break;
			case 445:
				Write((PrimitiveContract<PersistentFlare[]>)P_1, P_2);
				break;
			case 446:
				Write((List<PersistentFlare>)P_1, P_2);
				break;
			case 447:
				Write((PrimitiveContract<PersistentFlareLayer[]>)P_1, P_2);
				break;
			case 448:
				Write((List<PersistentFlareLayer>)P_1, P_2);
				break;
			case 449:
				Write((PrimitiveContract<PersistentFont[]>)P_1, P_2);
				break;
			case 450:
				Write((List<PersistentFont>)P_1, P_2);
				break;
			case 451:
				Write((PrimitiveContract<PersistentFrictionJoint2D[]>)P_1, P_2);
				break;
			case 452:
				Write((List<PersistentFrictionJoint2D>)P_1, P_2);
				break;
			case 453:
				Write((PrimitiveContract<PersistentGameObject[]>)P_1, P_2);
				break;
			case 454:
				Write((List<PersistentGameObject>)P_1, P_2);
				break;
			case 455:
				Write((PrimitiveContract<PersistentGraphic[]>)P_1, P_2);
				break;
			case 456:
				Write((List<PersistentGraphic>)P_1, P_2);
				break;
			case 457:
				Write((PrimitiveContract<PersistentGraphicRaycaster[]>)P_1, P_2);
				break;
			case 458:
				Write((List<PersistentGraphicRaycaster>)P_1, P_2);
				break;
			case 459:
				Write((PrimitiveContract<PersistentGraphicsSettings[]>)P_1, P_2);
				break;
			case 460:
				Write((List<PersistentGraphicsSettings>)P_1, P_2);
				break;
			case 461:
				Write((PrimitiveContract<PersistentGridLayoutGroup[]>)P_1, P_2);
				break;
			case 462:
				Write((List<PersistentGridLayoutGroup>)P_1, P_2);
				break;
			case 463:
				Write((PrimitiveContract<PersistentGUIElement[]>)P_1, P_2);
				break;
			case 464:
				Write((List<PersistentGUIElement>)P_1, P_2);
				break;
			case 465:
				Write((PrimitiveContract<PersistentGUILayer[]>)P_1, P_2);
				break;
			case 466:
				Write((List<PersistentGUILayer>)P_1, P_2);
				break;
			case 467:
				Write((PrimitiveContract<PersistentGUISkin[]>)P_1, P_2);
				break;
			case 468:
				Write((List<PersistentGUISkin>)P_1, P_2);
				break;
			case 469:
				Write((PrimitiveContract<PersistentGUIStyle[]>)P_1, P_2);
				break;
			case 470:
				Write((List<PersistentGUIStyle>)P_1, P_2);
				break;
			case 471:
				Write((PrimitiveContract<PersistentGUIStyleState[]>)P_1, P_2);
				break;
			case 472:
				Write((List<PersistentGUIStyleState>)P_1, P_2);
				break;
			case 473:
				Write((PrimitiveContract<PersistentHingeJoint[]>)P_1, P_2);
				break;
			case 474:
				Write((List<PersistentHingeJoint>)P_1, P_2);
				break;
			case 475:
				Write((PrimitiveContract<PersistentHingeJoint2D[]>)P_1, P_2);
				break;
			case 476:
				Write((List<PersistentHingeJoint2D>)P_1, P_2);
				break;
			case 477:
				Write((PrimitiveContract<PersistentHorizontalLayoutGroup[]>)P_1, P_2);
				break;
			case 478:
				Write((List<PersistentHorizontalLayoutGroup>)P_1, P_2);
				break;
			case 479:
				Write((PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]>)P_1, P_2);
				break;
			case 480:
				Write((List<PersistentHorizontalOrVerticalLayoutGroup>)P_1, P_2);
				break;
			case 481:
				Write((PrimitiveContract<PersistentImage[]>)P_1, P_2);
				break;
			case 482:
				Write((List<PersistentImage>)P_1, P_2);
				break;
			case 483:
				Write((PrimitiveContract<PersistentJoint[]>)P_1, P_2);
				break;
			case 484:
				Write((List<PersistentJoint>)P_1, P_2);
				break;
			case 485:
				Write((PrimitiveContract<PersistentJoint2D[]>)P_1, P_2);
				break;
			case 486:
				Write((List<PersistentJoint2D>)P_1, P_2);
				break;
			case 487:
				Write((PrimitiveContract<PersistentLayoutElement[]>)P_1, P_2);
				break;
			case 488:
				Write((List<PersistentLayoutElement>)P_1, P_2);
				break;
			case 489:
				Write((PrimitiveContract<PersistentLayoutGroup[]>)P_1, P_2);
				break;
			case 490:
				Write((List<PersistentLayoutGroup>)P_1, P_2);
				break;
			case 491:
				Write((PrimitiveContract<PersistentLensFlare[]>)P_1, P_2);
				break;
			case 492:
				Write((List<PersistentLensFlare>)P_1, P_2);
				break;
			case 493:
				Write((PrimitiveContract<PersistentLight[]>)P_1, P_2);
				break;
			case 494:
				Write((List<PersistentLight>)P_1, P_2);
				break;
			case 495:
				Write((PrimitiveContract<PersistentLightmapSettings[]>)P_1, P_2);
				break;
			case 496:
				Write((List<PersistentLightmapSettings>)P_1, P_2);
				break;
			case 497:
				Write((PrimitiveContract<PersistentLightProbeGroup[]>)P_1, P_2);
				break;
			case 498:
				Write((List<PersistentLightProbeGroup>)P_1, P_2);
				break;
			case 499:
				Write((PrimitiveContract<PersistentLightProbeProxyVolume[]>)P_1, P_2);
				break;
			case 500:
				Write((List<PersistentLightProbeProxyVolume>)P_1, P_2);
				break;
			case 501:
				Write((PrimitiveContract<PersistentLightProbes[]>)P_1, P_2);
				break;
			case 502:
				Write((List<PersistentLightProbes>)P_1, P_2);
				break;
			case 503:
				Write((PrimitiveContract<PersistentLineRenderer[]>)P_1, P_2);
				break;
			case 504:
				Write((List<PersistentLineRenderer>)P_1, P_2);
				break;
			case 505:
				Write((PrimitiveContract<PersistentLODGroup[]>)P_1, P_2);
				break;
			case 506:
				Write((List<PersistentLODGroup>)P_1, P_2);
				break;
			case 507:
				Write((PrimitiveContract<PersistentMask[]>)P_1, P_2);
				break;
			case 508:
				Write((List<PersistentMask>)P_1, P_2);
				break;
			case 509:
				Write((PrimitiveContract<PersistentMeshCollider[]>)P_1, P_2);
				break;
			case 510:
				Write((List<PersistentMeshCollider>)P_1, P_2);
				break;
			case 511:
				Write((PrimitiveContract<PersistentMeshFilter[]>)P_1, P_2);
				break;
			}
			break;
		case 4:
			switch (P_0)
			{
			case 512:
				Write((List<PersistentMeshFilter>)P_1, P_2);
				break;
			case 513:
				Write((PrimitiveContract<PersistentMeshRenderer[]>)P_1, P_2);
				break;
			case 514:
				Write((List<PersistentMeshRenderer>)P_1, P_2);
				break;
			case 515:
				Write((PrimitiveContract<PersistentMonoBehaviour[]>)P_1, P_2);
				break;
			case 516:
				Write((List<PersistentMonoBehaviour>)P_1, P_2);
				break;
			case 517:
				Write((PrimitiveContract<PersistentMotion[]>)P_1, P_2);
				break;
			case 518:
				Write((List<PersistentMotion>)P_1, P_2);
				break;
			case 519:
				Write((PrimitiveContract<PersistentMovieTexture[]>)P_1, P_2);
				break;
			case 520:
				Write((List<PersistentMovieTexture>)P_1, P_2);
				break;
			case 521:
				Write((PrimitiveContract<PersistentNavMeshAgent[]>)P_1, P_2);
				break;
			case 522:
				Write((List<PersistentNavMeshAgent>)P_1, P_2);
				break;
			case 523:
				Write((PrimitiveContract<PersistentNavMeshData[]>)P_1, P_2);
				break;
			case 524:
				Write((List<PersistentNavMeshData>)P_1, P_2);
				break;
			case 525:
				Write((PrimitiveContract<PersistentNavMeshObstacle[]>)P_1, P_2);
				break;
			case 526:
				Write((List<PersistentNavMeshObstacle>)P_1, P_2);
				break;
			case 527:
				Write((PrimitiveContract<PersistentNetworkMatch[]>)P_1, P_2);
				break;
			case 528:
				Write((List<PersistentNetworkMatch>)P_1, P_2);
				break;
			case 529:
				Write((PrimitiveContract<PersistentNetworkView[]>)P_1, P_2);
				break;
			case 530:
				Write((List<PersistentNetworkView>)P_1, P_2);
				break;
			case 531:
				Write((PrimitiveContract<PersistentOcclusionArea[]>)P_1, P_2);
				break;
			case 532:
				Write((List<PersistentOcclusionArea>)P_1, P_2);
				break;
			case 533:
				Write((PrimitiveContract<PersistentOcclusionPortal[]>)P_1, P_2);
				break;
			case 534:
				Write((List<PersistentOcclusionPortal>)P_1, P_2);
				break;
			case 535:
				Write((PrimitiveContract<PersistentOffMeshLink[]>)P_1, P_2);
				break;
			case 536:
				Write((List<PersistentOffMeshLink>)P_1, P_2);
				break;
			case 537:
				Write((PrimitiveContract<PersistentOutline[]>)P_1, P_2);
				break;
			case 538:
				Write((List<PersistentOutline>)P_1, P_2);
				break;
			case 539:
				Write((PrimitiveContract<PersistentParticleSystemRenderer[]>)P_1, P_2);
				break;
			case 540:
				Write((List<PersistentParticleSystemRenderer>)P_1, P_2);
				break;
			case 541:
				Write((PrimitiveContract<PersistentPhysicMaterial[]>)P_1, P_2);
				break;
			case 542:
				Write((List<PersistentPhysicMaterial>)P_1, P_2);
				break;
			case 543:
				Write((PrimitiveContract<PersistentPhysics2DRaycaster[]>)P_1, P_2);
				break;
			case 544:
				Write((List<PersistentPhysics2DRaycaster>)P_1, P_2);
				break;
			case 545:
				Write((PrimitiveContract<PersistentPhysicsMaterial2D[]>)P_1, P_2);
				break;
			case 546:
				Write((List<PersistentPhysicsMaterial2D>)P_1, P_2);
				break;
			case 547:
				Write((PrimitiveContract<PersistentPhysicsRaycaster[]>)P_1, P_2);
				break;
			case 548:
				Write((List<PersistentPhysicsRaycaster>)P_1, P_2);
				break;
			case 549:
				Write((PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]>)P_1, P_2);
				break;
			case 550:
				Write((List<PersistentPhysicsUpdateBehaviour2D>)P_1, P_2);
				break;
			case 551:
				Write((PrimitiveContract<PersistentPlatformEffector2D[]>)P_1, P_2);
				break;
			case 552:
				Write((List<PersistentPlatformEffector2D>)P_1, P_2);
				break;
			case 553:
				Write((PrimitiveContract<PersistentPlayerConnection[]>)P_1, P_2);
				break;
			case 554:
				Write((List<PersistentPlayerConnection>)P_1, P_2);
				break;
			case 555:
				Write((PrimitiveContract<PersistentPointEffector2D[]>)P_1, P_2);
				break;
			case 556:
				Write((List<PersistentPointEffector2D>)P_1, P_2);
				break;
			case 557:
				Write((PrimitiveContract<PersistentPointerInputModule[]>)P_1, P_2);
				break;
			case 558:
				Write((List<PersistentPointerInputModule>)P_1, P_2);
				break;
			case 559:
				Write((PrimitiveContract<PersistentPolygonCollider2D[]>)P_1, P_2);
				break;
			case 560:
				Write((List<PersistentPolygonCollider2D>)P_1, P_2);
				break;
			case 561:
				Write((PrimitiveContract<PersistentPositionAsUV1[]>)P_1, P_2);
				break;
			case 562:
				Write((List<PersistentPositionAsUV1>)P_1, P_2);
				break;
			case 563:
				Write((PrimitiveContract<PersistentProceduralTexture[]>)P_1, P_2);
				break;
			case 564:
				Write((List<PersistentProceduralTexture>)P_1, P_2);
				break;
			case 565:
				Write((PrimitiveContract<PersistentProjector[]>)P_1, P_2);
				break;
			case 566:
				Write((List<PersistentProjector>)P_1, P_2);
				break;
			case 567:
				Write((PrimitiveContract<PersistentQualitySettings[]>)P_1, P_2);
				break;
			case 568:
				Write((List<PersistentQualitySettings>)P_1, P_2);
				break;
			case 569:
				Write((PrimitiveContract<PersistentRawImage[]>)P_1, P_2);
				break;
			case 570:
				Write((List<PersistentRawImage>)P_1, P_2);
				break;
			case 571:
				Write((PrimitiveContract<PersistentRectMask2D[]>)P_1, P_2);
				break;
			case 572:
				Write((List<PersistentRectMask2D>)P_1, P_2);
				break;
			case 573:
				Write((PrimitiveContract<PersistentRectTransform[]>)P_1, P_2);
				break;
			case 574:
				Write((List<PersistentRectTransform>)P_1, P_2);
				break;
			case 575:
				Write((PrimitiveContract<PersistentReflectionProbe[]>)P_1, P_2);
				break;
			case 576:
				Write((List<PersistentReflectionProbe>)P_1, P_2);
				break;
			case 577:
				Write((PrimitiveContract<PersistentRelativeJoint2D[]>)P_1, P_2);
				break;
			case 578:
				Write((List<PersistentRelativeJoint2D>)P_1, P_2);
				break;
			case 579:
				Write((PrimitiveContract<PersistentRenderer[]>)P_1, P_2);
				break;
			case 580:
				Write((List<PersistentRenderer>)P_1, P_2);
				break;
			case 581:
				Write((PrimitiveContract<PersistentRenderPipelineAsset[]>)P_1, P_2);
				break;
			case 582:
				Write((List<PersistentRenderPipelineAsset>)P_1, P_2);
				break;
			case 583:
				Write((PrimitiveContract<PersistentRenderSettings[]>)P_1, P_2);
				break;
			case 584:
				Write((List<PersistentRenderSettings>)P_1, P_2);
				break;
			case 585:
				Write((PrimitiveContract<PersistentRenderTexture[]>)P_1, P_2);
				break;
			case 586:
				Write((List<PersistentRenderTexture>)P_1, P_2);
				break;
			case 587:
				Write((PrimitiveContract<PersistentRigidbody[]>)P_1, P_2);
				break;
			case 588:
				Write((List<PersistentRigidbody>)P_1, P_2);
				break;
			case 589:
				Write((PrimitiveContract<PersistentRigidbody2D[]>)P_1, P_2);
				break;
			case 590:
				Write((List<PersistentRigidbody2D>)P_1, P_2);
				break;
			case 591:
				Write((PrimitiveContract<PersistentRuntimeAnimatorController[]>)P_1, P_2);
				break;
			case 592:
				Write((List<PersistentRuntimeAnimatorController>)P_1, P_2);
				break;
			case 593:
				Write((PrimitiveContract<PersistentScriptableObject[]>)P_1, P_2);
				break;
			case 594:
				Write((List<PersistentScriptableObject>)P_1, P_2);
				break;
			case 595:
				Write((PrimitiveContract<PersistentShader[]>)P_1, P_2);
				break;
			case 596:
				Write((List<PersistentShader>)P_1, P_2);
				break;
			case 597:
				Write((PrimitiveContract<PersistentShaderVariantCollection[]>)P_1, P_2);
				break;
			case 598:
				Write((List<PersistentShaderVariantCollection>)P_1, P_2);
				break;
			case 599:
				Write((PrimitiveContract<PersistentShadow[]>)P_1, P_2);
				break;
			case 600:
				Write((List<PersistentShadow>)P_1, P_2);
				break;
			case 601:
				Write((PrimitiveContract<PersistentSkinnedMeshRenderer[]>)P_1, P_2);
				break;
			case 602:
				Write((List<PersistentSkinnedMeshRenderer>)P_1, P_2);
				break;
			case 603:
				Write((PrimitiveContract<PersistentSkybox[]>)P_1, P_2);
				break;
			case 604:
				Write((List<PersistentSkybox>)P_1, P_2);
				break;
			case 605:
				Write((PrimitiveContract<PersistentSliderJoint2D[]>)P_1, P_2);
				break;
			case 606:
				Write((List<PersistentSliderJoint2D>)P_1, P_2);
				break;
			case 607:
				Write((PrimitiveContract<PersistentSortingGroup[]>)P_1, P_2);
				break;
			case 608:
				Write((List<PersistentSortingGroup>)P_1, P_2);
				break;
			case 609:
				Write((PrimitiveContract<PersistentSparseTexture[]>)P_1, P_2);
				break;
			case 610:
				Write((List<PersistentSparseTexture>)P_1, P_2);
				break;
			case 611:
				Write((PrimitiveContract<PersistentSphereCollider[]>)P_1, P_2);
				break;
			case 612:
				Write((List<PersistentSphereCollider>)P_1, P_2);
				break;
			case 613:
				Write((PersistentSplatPrototype)P_1, P_2);
				break;
			case 614:
				Write((PrimitiveContract<PersistentSplatPrototype[]>)P_1, P_2);
				break;
			case 615:
				Write((List<PersistentSplatPrototype>)P_1, P_2);
				break;
			case 616:
				Write((PrimitiveContract<PersistentSpringJoint[]>)P_1, P_2);
				break;
			case 617:
				Write((List<PersistentSpringJoint>)P_1, P_2);
				break;
			case 618:
				Write((PrimitiveContract<PersistentSpringJoint2D[]>)P_1, P_2);
				break;
			case 619:
				Write((List<PersistentSpringJoint2D>)P_1, P_2);
				break;
			case 620:
				Write((PrimitiveContract<PersistentSprite[]>)P_1, P_2);
				break;
			case 621:
				Write((List<PersistentSprite>)P_1, P_2);
				break;
			case 622:
				Write((PrimitiveContract<PersistentSpriteRenderer[]>)P_1, P_2);
				break;
			case 623:
				Write((List<PersistentSpriteRenderer>)P_1, P_2);
				break;
			case 624:
				Write((PrimitiveContract<PersistentStandaloneInputModule[]>)P_1, P_2);
				break;
			case 625:
				Write((List<PersistentStandaloneInputModule>)P_1, P_2);
				break;
			case 626:
				Write((PrimitiveContract<PersistentStateMachineBehaviour[]>)P_1, P_2);
				break;
			case 627:
				Write((List<PersistentStateMachineBehaviour>)P_1, P_2);
				break;
			case 628:
				Write((PrimitiveContract<PersistentSurfaceEffector2D[]>)P_1, P_2);
				break;
			case 629:
				Write((List<PersistentSurfaceEffector2D>)P_1, P_2);
				break;
			case 630:
				Write((PrimitiveContract<PersistentTargetJoint2D[]>)P_1, P_2);
				break;
			case 631:
				Write((List<PersistentTargetJoint2D>)P_1, P_2);
				break;
			case 632:
				Write((PrimitiveContract<PersistentTerrain[]>)P_1, P_2);
				break;
			case 633:
				Write((List<PersistentTerrain>)P_1, P_2);
				break;
			case 634:
				Write((PrimitiveContract<PersistentTerrainCollider[]>)P_1, P_2);
				break;
			case 635:
				Write((List<PersistentTerrainCollider>)P_1, P_2);
				break;
			case 636:
				Write((PrimitiveContract<PersistentTerrainData[]>)P_1, P_2);
				break;
			case 637:
				Write((List<PersistentTerrainData>)P_1, P_2);
				break;
			case 638:
				Write((PrimitiveContract<PersistentText[]>)P_1, P_2);
				break;
			case 639:
				Write((List<PersistentText>)P_1, P_2);
				break;
			}
			break;
		case 5:
			switch (P_0)
			{
			case 640:
				Write((PrimitiveContract<PersistentTextAsset[]>)P_1, P_2);
				break;
			case 641:
				Write((List<PersistentTextAsset>)P_1, P_2);
				break;
			case 642:
				Write((PrimitiveContract<PersistentTextMesh[]>)P_1, P_2);
				break;
			case 643:
				Write((List<PersistentTextMesh>)P_1, P_2);
				break;
			case 644:
				Write((PrimitiveContract<PersistentTexture2DArray[]>)P_1, P_2);
				break;
			case 645:
				Write((List<PersistentTexture2DArray>)P_1, P_2);
				break;
			case 646:
				Write((PrimitiveContract<PersistentTexture3D[]>)P_1, P_2);
				break;
			case 647:
				Write((List<PersistentTexture3D>)P_1, P_2);
				break;
			case 648:
				Write((PrimitiveContract<PersistentToggle[]>)P_1, P_2);
				break;
			case 649:
				Write((List<PersistentToggle>)P_1, P_2);
				break;
			case 650:
				Write((PrimitiveContract<PersistentToggleGroup[]>)P_1, P_2);
				break;
			case 651:
				Write((List<PersistentToggleGroup>)P_1, P_2);
				break;
			case 652:
				Write((PrimitiveContract<PersistentTrailRenderer[]>)P_1, P_2);
				break;
			case 653:
				Write((List<PersistentTrailRenderer>)P_1, P_2);
				break;
			case 654:
				Write((PrimitiveContract<PersistentTree[]>)P_1, P_2);
				break;
			case 655:
				Write((List<PersistentTree>)P_1, P_2);
				break;
			case 656:
				Write((PersistentTreePrototype)P_1, P_2);
				break;
			case 657:
				Write((PrimitiveContract<PersistentTreePrototype[]>)P_1, P_2);
				break;
			case 658:
				Write((List<PersistentTreePrototype>)P_1, P_2);
				break;
			case 659:
				Write((PrimitiveContract<PersistentUIBehaviour[]>)P_1, P_2);
				break;
			case 660:
				Write((List<PersistentUIBehaviour>)P_1, P_2);
				break;
			case 661:
				Write((PrimitiveContract<PersistentVerticalLayoutGroup[]>)P_1, P_2);
				break;
			case 662:
				Write((List<PersistentVerticalLayoutGroup>)P_1, P_2);
				break;
			case 663:
				Write((PrimitiveContract<PersistentVideoClip[]>)P_1, P_2);
				break;
			case 664:
				Write((List<PersistentVideoClip>)P_1, P_2);
				break;
			case 665:
				Write((PrimitiveContract<PersistentVideoPlayer[]>)P_1, P_2);
				break;
			case 666:
				Write((List<PersistentVideoPlayer>)P_1, P_2);
				break;
			case 667:
				Write((PrimitiveContract<PersistentWebCamTexture[]>)P_1, P_2);
				break;
			case 668:
				Write((List<PersistentWebCamTexture>)P_1, P_2);
				break;
			case 669:
				Write((PrimitiveContract<PersistentWheelCollider[]>)P_1, P_2);
				break;
			case 670:
				Write((List<PersistentWheelCollider>)P_1, P_2);
				break;
			case 671:
				Write((PrimitiveContract<PersistentWheelJoint2D[]>)P_1, P_2);
				break;
			case 672:
				Write((List<PersistentWheelJoint2D>)P_1, P_2);
				break;
			case 673:
				Write((PrimitiveContract<PersistentWindZone[]>)P_1, P_2);
				break;
			case 674:
				Write((List<PersistentWindZone>)P_1, P_2);
				break;
			case 675:
				Write((PrimitiveContract<PersistentWorldAnchor[]>)P_1, P_2);
				break;
			case 676:
				Write((List<PersistentWorldAnchor>)P_1, P_2);
				break;
			case 677:
				Write((GradientAlphaKeySurrogate)P_1, P_2);
				break;
			case 678:
				Write((PrimitiveContract<GradientAlphaKeySurrogate[]>)P_1, P_2);
				break;
			case 679:
				Write((List<GradientAlphaKeySurrogate>)P_1, P_2);
				break;
			case 680:
				Write((GradientColorKeySurrogate)P_1, P_2);
				break;
			case 681:
				Write((PrimitiveContract<GradientColorKeySurrogate[]>)P_1, P_2);
				break;
			case 682:
				Write((List<GradientColorKeySurrogate>)P_1, P_2);
				break;
			case 683:
				Write((LayerMaskSurrogate)P_1, P_2);
				break;
			case 684:
				Write((PrimitiveContract<LayerMaskSurrogate[]>)P_1, P_2);
				break;
			case 685:
				Write((List<LayerMaskSurrogate>)P_1, P_2);
				break;
			case 686:
				Write((RectOffsetSurrogate)P_1, P_2);
				break;
			case 687:
				Write((PrimitiveContract<RectOffsetSurrogate[]>)P_1, P_2);
				break;
			case 688:
				Write((List<RectOffsetSurrogate>)P_1, P_2);
				break;
			case 689:
				Write((AnimationTriggersSurrogate)P_1, P_2);
				break;
			case 690:
				Write((PrimitiveContract<AnimationTriggersSurrogate[]>)P_1, P_2);
				break;
			case 691:
				Write((List<AnimationTriggersSurrogate>)P_1, P_2);
				break;
			case 692:
				Write((ColorBlockSurrogate)P_1, P_2);
				break;
			case 693:
				Write((PrimitiveContract<ColorBlockSurrogate[]>)P_1, P_2);
				break;
			case 694:
				Write((List<ColorBlockSurrogate>)P_1, P_2);
				break;
			case 695:
				Write((NavMeshPathSurrogate)P_1, P_2);
				break;
			case 696:
				Write((PrimitiveContract<NavMeshPathSurrogate[]>)P_1, P_2);
				break;
			case 697:
				Write((List<NavMeshPathSurrogate>)P_1, P_2);
				break;
			case 698:
				Write((ClothSkinningCoefficientSurrogate)P_1, P_2);
				break;
			case 699:
				Write((PrimitiveContract<ClothSkinningCoefficientSurrogate[]>)P_1, P_2);
				break;
			case 700:
				Write((List<ClothSkinningCoefficientSurrogate>)P_1, P_2);
				break;
			case 701:
				Write((BoneWeightSurrogate)P_1, P_2);
				break;
			case 702:
				Write((PrimitiveContract<BoneWeightSurrogate[]>)P_1, P_2);
				break;
			case 703:
				Write((List<BoneWeightSurrogate>)P_1, P_2);
				break;
			case 704:
				Write((TreeInstanceSurrogate)P_1, P_2);
				break;
			case 705:
				Write((PrimitiveContract<TreeInstanceSurrogate[]>)P_1, P_2);
				break;
			case 706:
				Write((List<TreeInstanceSurrogate>)P_1, P_2);
				break;
			case 707:
				Write((CharacterInfoSurrogate)P_1, P_2);
				break;
			case 708:
				Write((PrimitiveContract<CharacterInfoSurrogate[]>)P_1, P_2);
				break;
			case 709:
				Write((List<CharacterInfoSurrogate>)P_1, P_2);
				break;
			case 710:
				Write((Vector3Surrogate)P_1, P_2);
				break;
			case 711:
				Write((PrimitiveContract<Vector3Surrogate[]>)P_1, P_2);
				break;
			case 712:
				Write((List<Vector3Surrogate>)P_1, P_2);
				break;
			case 713:
				Write((ColorSurrogate)P_1, P_2);
				break;
			case 714:
				Write((PrimitiveContract<ColorSurrogate[]>)P_1, P_2);
				break;
			case 715:
				Write((List<ColorSurrogate>)P_1, P_2);
				break;
			case 716:
				Write((RectSurrogate)P_1, P_2);
				break;
			case 717:
				Write((PrimitiveContract<RectSurrogate[]>)P_1, P_2);
				break;
			case 718:
				Write((List<RectSurrogate>)P_1, P_2);
				break;
			case 719:
				Write((Matrix4x4Surrogate)P_1, P_2);
				break;
			case 720:
				Write((PrimitiveContract<Matrix4x4Surrogate[]>)P_1, P_2);
				break;
			case 721:
				Write((List<Matrix4x4Surrogate>)P_1, P_2);
				break;
			case 722:
				Write((SceneSurrogate)P_1, P_2);
				break;
			case 723:
				Write((PrimitiveContract<SceneSurrogate[]>)P_1, P_2);
				break;
			case 724:
				Write((List<SceneSurrogate>)P_1, P_2);
				break;
			case 725:
				Write((BoundsSurrogate)P_1, P_2);
				break;
			case 726:
				Write((PrimitiveContract<BoundsSurrogate[]>)P_1, P_2);
				break;
			case 727:
				Write((List<BoundsSurrogate>)P_1, P_2);
				break;
			case 728:
				Write((Vector4Surrogate)P_1, P_2);
				break;
			case 729:
				Write((PrimitiveContract<Vector4Surrogate[]>)P_1, P_2);
				break;
			case 730:
				Write((List<Vector4Surrogate>)P_1, P_2);
				break;
			case 731:
				Write((NetworkViewIDSurrogate)P_1, P_2);
				break;
			case 732:
				Write((PrimitiveContract<NetworkViewIDSurrogate[]>)P_1, P_2);
				break;
			case 733:
				Write((List<NetworkViewIDSurrogate>)P_1, P_2);
				break;
			case 734:
				Write((NetworkPlayerSurrogate)P_1, P_2);
				break;
			case 735:
				Write((PrimitiveContract<NetworkPlayerSurrogate[]>)P_1, P_2);
				break;
			case 736:
				Write((List<NetworkPlayerSurrogate>)P_1, P_2);
				break;
			case 737:
				Write((Vector2Surrogate)P_1, P_2);
				break;
			case 738:
				Write((PrimitiveContract<Vector2Surrogate[]>)P_1, P_2);
				break;
			case 739:
				Write((List<Vector2Surrogate>)P_1, P_2);
				break;
			case 740:
				Write((RenderBufferSurrogate)P_1, P_2);
				break;
			case 741:
				Write((PrimitiveContract<RenderBufferSurrogate[]>)P_1, P_2);
				break;
			case 742:
				Write((List<RenderBufferSurrogate>)P_1, P_2);
				break;
			case 743:
				Write((QuaternionSurrogate)P_1, P_2);
				break;
			case 744:
				Write((PrimitiveContract<QuaternionSurrogate[]>)P_1, P_2);
				break;
			case 745:
				Write((List<QuaternionSurrogate>)P_1, P_2);
				break;
			case 746:
				Write((JointMotorSurrogate)P_1, P_2);
				break;
			case 747:
				Write((PrimitiveContract<JointMotorSurrogate[]>)P_1, P_2);
				break;
			case 748:
				Write((List<JointMotorSurrogate>)P_1, P_2);
				break;
			case 749:
				Write((JointLimitsSurrogate)P_1, P_2);
				break;
			case 750:
				Write((PrimitiveContract<JointLimitsSurrogate[]>)P_1, P_2);
				break;
			case 751:
				Write((List<JointLimitsSurrogate>)P_1, P_2);
				break;
			case 752:
				Write((JointSpringSurrogate)P_1, P_2);
				break;
			case 753:
				Write((PrimitiveContract<JointSpringSurrogate[]>)P_1, P_2);
				break;
			case 754:
				Write((List<JointSpringSurrogate>)P_1, P_2);
				break;
			case 755:
				Write((JointDriveSurrogate)P_1, P_2);
				break;
			case 756:
				Write((PrimitiveContract<JointDriveSurrogate[]>)P_1, P_2);
				break;
			case 757:
				Write((List<JointDriveSurrogate>)P_1, P_2);
				break;
			case 758:
				Write((SoftJointLimitSpringSurrogate)P_1, P_2);
				break;
			case 759:
				Write((PrimitiveContract<SoftJointLimitSpringSurrogate[]>)P_1, P_2);
				break;
			case 760:
				Write((List<SoftJointLimitSpringSurrogate>)P_1, P_2);
				break;
			case 761:
				Write((SoftJointLimitSurrogate)P_1, P_2);
				break;
			case 762:
				Write((PrimitiveContract<SoftJointLimitSurrogate[]>)P_1, P_2);
				break;
			case 763:
				Write((List<SoftJointLimitSurrogate>)P_1, P_2);
				break;
			case 764:
				Write((JointMotor2DSurrogate)P_1, P_2);
				break;
			case 765:
				Write((PrimitiveContract<JointMotor2DSurrogate[]>)P_1, P_2);
				break;
			case 766:
				Write((List<JointMotor2DSurrogate>)P_1, P_2);
				break;
			case 767:
				Write((JointAngleLimits2DSurrogate)P_1, P_2);
				break;
			}
			break;
		case 6:
			switch (P_0)
			{
			case 768:
				Write((PrimitiveContract<JointAngleLimits2DSurrogate[]>)P_1, P_2);
				break;
			case 769:
				Write((List<JointAngleLimits2DSurrogate>)P_1, P_2);
				break;
			case 770:
				Write((JointTranslationLimits2DSurrogate)P_1, P_2);
				break;
			case 771:
				Write((PrimitiveContract<JointTranslationLimits2DSurrogate[]>)P_1, P_2);
				break;
			case 772:
				Write((List<JointTranslationLimits2DSurrogate>)P_1, P_2);
				break;
			case 773:
				Write((JointSuspension2DSurrogate)P_1, P_2);
				break;
			case 774:
				Write((PrimitiveContract<JointSuspension2DSurrogate[]>)P_1, P_2);
				break;
			case 775:
				Write((List<JointSuspension2DSurrogate>)P_1, P_2);
				break;
			case 776:
				Write((WheelFrictionCurveSurrogate)P_1, P_2);
				break;
			case 777:
				Write((PrimitiveContract<WheelFrictionCurveSurrogate[]>)P_1, P_2);
				break;
			case 778:
				Write((List<WheelFrictionCurveSurrogate>)P_1, P_2);
				break;
			case 779:
				Write((OffMeshLinkDataSurrogate)P_1, P_2);
				break;
			case 780:
				Write((PrimitiveContract<OffMeshLinkDataSurrogate[]>)P_1, P_2);
				break;
			case 781:
				Write((List<OffMeshLinkDataSurrogate>)P_1, P_2);
				break;
			case 782:
				Write((PlayableGraphSurrogate)P_1, P_2);
				break;
			case 783:
				Write((PrimitiveContract<PlayableGraphSurrogate[]>)P_1, P_2);
				break;
			case 784:
				Write((List<PlayableGraphSurrogate>)P_1, P_2);
				break;
			case 785:
				Write((Color32Surrogate)P_1, P_2);
				break;
			case 786:
				Write((PrimitiveContract<Color32Surrogate[]>)P_1, P_2);
				break;
			case 787:
				Write((List<Color32Surrogate>)P_1, P_2);
				break;
			case 788:
				Write((PersistentDescriptor)P_1, P_2);
				break;
			case 789:
				Write((PrimitiveContract<PersistentDescriptor[]>)P_1, P_2);
				break;
			case 790:
				Write((List<PersistentDescriptor>)P_1, P_2);
				break;
			case 791:
				Write((PrimitiveContract<PersistentCollisionModule[]>)P_1, P_2);
				break;
			case 792:
				Write((List<PersistentCollisionModule>)P_1, P_2);
				break;
			case 793:
				Write((PrimitiveContract<PersistentEmissionModule[]>)P_1, P_2);
				break;
			case 794:
				Write((List<PersistentEmissionModule>)P_1, P_2);
				break;
			case 795:
				Write((PrimitiveContract<PersistentParticleSystem[]>)P_1, P_2);
				break;
			case 796:
				Write((List<PersistentParticleSystem>)P_1, P_2);
				break;
			case 797:
				Write((PrimitiveContract<PersistentTriggerModule[]>)P_1, P_2);
				break;
			case 798:
				Write((List<PersistentTriggerModule>)P_1, P_2);
				break;
			case 799:
				Write((PrimitiveContract<PersistentCloth[]>)P_1, P_2);
				break;
			case 800:
				Write((List<PersistentCloth>)P_1, P_2);
				break;
			case 801:
				Write((PrimitiveContract<PersistentMaterial[]>)P_1, P_2);
				break;
			case 802:
				Write((List<PersistentMaterial>)P_1, P_2);
				break;
			case 803:
				Write((PrimitiveContract<PersistentMesh[]>)P_1, P_2);
				break;
			case 804:
				Write((List<PersistentMesh>)P_1, P_2);
				break;
			case 805:
				Write((PrimitiveContract<PersistentObject[]>)P_1, P_2);
				break;
			case 806:
				Write((List<PersistentObject>)P_1, P_2);
				break;
			case 807:
				Write((PersistentArgumentCache)P_1, P_2);
				break;
			case 808:
				Write((PrimitiveContract<PersistentArgumentCache[]>)P_1, P_2);
				break;
			case 809:
				Write((List<PersistentArgumentCache>)P_1, P_2);
				break;
			case 810:
				Write((PersistentPersistentCall)P_1, P_2);
				break;
			case 811:
				Write((PrimitiveContract<PersistentPersistentCall[]>)P_1, P_2);
				break;
			case 812:
				Write((List<PersistentPersistentCall>)P_1, P_2);
				break;
			case 813:
				Write((PersistentUnityEventBase)P_1, P_2);
				break;
			case 814:
				Write((PrimitiveContract<PersistentUnityEventBase[]>)P_1, P_2);
				break;
			case 815:
				Write((List<PersistentUnityEventBase>)P_1, P_2);
				break;
			case 816:
				Write((IntArray)P_1, P_2);
				break;
			case 817:
				Write((PrimitiveContract<IntArray[]>)P_1, P_2);
				break;
			case 818:
				Write((List<IntArray>)P_1, P_2);
				break;
			case 819:
				Write((PrimitiveContract<PrimitiveContract[]>)P_1, P_2);
				break;
			case 820:
				Write((List<PrimitiveContract>)P_1, P_2);
				break;
			case 821:
				Write((DataContract)P_1, P_2);
				break;
			case 822:
				Write((PrimitiveContract<DataContract[]>)P_1, P_2);
				break;
			case 823:
				Write((List<DataContract>)P_1, P_2);
				break;
			case 824:
				Write((PrimitiveContract<PersistentScript[]>)P_1, P_2);
				break;
			case 825:
				Write((List<PersistentScript>)P_1, P_2);
				break;
			case 826:
				Write((PrimitiveContract<PersistentTexture[]>)P_1, P_2);
				break;
			case 827:
				Write((List<PersistentTexture>)P_1, P_2);
				break;
			case 828:
				Write((PrimitiveContract<PersistentTexture2D[]>)P_1, P_2);
				break;
			case 829:
				Write((List<PersistentTexture2D>)P_1, P_2);
				break;
			case 830:
				Write((PrimitiveContract<PersistentTransform[]>)P_1, P_2);
				break;
			case 831:
				Write((List<PersistentTransform>)P_1, P_2);
				break;
			case 832:
				Write((PrimitiveContract<PersistentButton[]>)P_1, P_2);
				break;
			case 833:
				Write((List<PersistentButton>)P_1, P_2);
				break;
			case 834:
				Write((PrimitiveContract<PersistentDropdown[]>)P_1, P_2);
				break;
			case 835:
				Write((List<PersistentDropdown>)P_1, P_2);
				break;
			case 836:
				Write((PrimitiveContract<PersistentInputField[]>)P_1, P_2);
				break;
			case 837:
				Write((List<PersistentInputField>)P_1, P_2);
				break;
			case 838:
				Write((PrimitiveContract<PersistentMaskableGraphic[]>)P_1, P_2);
				break;
			case 839:
				Write((List<PersistentMaskableGraphic>)P_1, P_2);
				break;
			case 840:
				Write((PrimitiveContract<PersistentNavigation[]>)P_1, P_2);
				break;
			case 841:
				Write((List<PersistentNavigation>)P_1, P_2);
				break;
			case 842:
				Write((PrimitiveContract<PersistentOptionData[]>)P_1, P_2);
				break;
			case 843:
				Write((List<PersistentOptionData>)P_1, P_2);
				break;
			case 844:
				Write((PrimitiveContract<PersistentScrollbar[]>)P_1, P_2);
				break;
			case 845:
				Write((List<PersistentScrollbar>)P_1, P_2);
				break;
			case 846:
				Write((PrimitiveContract<PersistentScrollRect[]>)P_1, P_2);
				break;
			case 847:
				Write((List<PersistentScrollRect>)P_1, P_2);
				break;
			case 848:
				Write((PrimitiveContract<PersistentSelectable[]>)P_1, P_2);
				break;
			case 849:
				Write((List<PersistentSelectable>)P_1, P_2);
				break;
			case 850:
				Write((PrimitiveContract<PersistentSlider[]>)P_1, P_2);
				break;
			case 851:
				Write((List<PersistentSlider>)P_1, P_2);
				break;
			case 852:
				Write((PrimitiveContract<PersistentSpriteState[]>)P_1, P_2);
				break;
			case 853:
				Write((List<PersistentSpriteState>)P_1, P_2);
				break;
			case 854:
				Write((PersistentScene)P_1, P_2);
				break;
			case 855:
				Write((PrimitiveContract<PersistentScene[]>)P_1, P_2);
				break;
			case 856:
				Write((List<PersistentScene>)P_1, P_2);
				break;
			case 857:
				Write((NilContainer)P_1, P_2);
				break;
			case 858:
				Write((PrimitiveContract<NilContainer[]>)P_1, P_2);
				break;
			case 859:
				Write((List<NilContainer>)P_1, P_2);
				break;
			case 860:
				Write((ProjectItemMeta)P_1, P_2);
				break;
			case 861:
				Write((PrimitiveContract<ProjectItemMeta[]>)P_1, P_2);
				break;
			case 862:
				Write((List<ProjectItemMeta>)P_1, P_2);
				break;
			case 863:
				Write((ProjectItemData)P_1, P_2);
				break;
			case 864:
				Write((PrimitiveContract<ProjectItemData[]>)P_1, P_2);
				break;
			case 865:
				Write((List<ProjectItemData>)P_1, P_2);
				break;
			case 866:
				Write((ProjectMeta)P_1, P_2);
				break;
			case 867:
				Write((PrimitiveContract<ProjectMeta[]>)P_1, P_2);
				break;
			case 868:
				Write((List<ProjectMeta>)P_1, P_2);
				break;
			case 869:
				Write((ProjectData)P_1, P_2);
				break;
			case 870:
				Write((PrimitiveContract<ProjectData[]>)P_1, P_2);
				break;
			case 871:
				Write((List<ProjectData>)P_1, P_2);
				break;
			case 872:
				Write((AssetBundleDescriptor)P_1, P_2);
				break;
			case 873:
				Write((PrimitiveContract<AssetBundleDescriptor[]>)P_1, P_2);
				break;
			case 874:
				Write((List<AssetBundleDescriptor>)P_1, P_2);
				break;
			case 875:
				Write((ProjectItem)P_1, P_2);
				break;
			case 876:
				Write((PrimitiveContract<ProjectItem[]>)P_1, P_2);
				break;
			case 877:
				Write((List<ProjectItem>)P_1, P_2);
				break;
			case 878:
				Write((List<bool>)P_1, P_2);
				break;
			case 879:
				Write((List<char>)P_1, P_2);
				break;
			case 880:
				Write((List<byte>)P_1, P_2);
				break;
			case 881:
				Write((List<short>)P_1, P_2);
				break;
			case 882:
				Write((List<int>)P_1, P_2);
				break;
			case 883:
				Write((List<long>)P_1, P_2);
				break;
			case 884:
				Write((List<ushort>)P_1, P_2);
				break;
			case 885:
				Write((List<uint>)P_1, P_2);
				break;
			case 886:
				Write((List<ulong>)P_1, P_2);
				break;
			case 887:
				Write((List<string>)P_1, P_2);
				break;
			case 888:
				Write((List<float>)P_1, P_2);
				break;
			case 889:
				Write((List<double>)P_1, P_2);
				break;
			case 890:
				Write((List<decimal>)P_1, P_2);
				break;
			case 891:
				Write((GradientAlphaKey)P_1, P_2);
				break;
			case 892:
				Write((PrimitiveContract<GradientAlphaKey[]>)P_1, P_2);
				break;
			case 893:
				Write((List<GradientAlphaKey>)P_1, P_2);
				break;
			case 894:
				Write((GradientColorKey)P_1, P_2);
				break;
			case 895:
				Write((PrimitiveContract<GradientColorKey[]>)P_1, P_2);
				break;
			}
			break;
		case 7:
			switch (P_0)
			{
			case 896:
				Write((List<GradientColorKey>)P_1, P_2);
				break;
			case 897:
				Write((LayerMask)P_1, P_2);
				break;
			case 898:
				Write((PrimitiveContract<LayerMask[]>)P_1, P_2);
				break;
			case 899:
				Write((List<LayerMask>)P_1, P_2);
				break;
			case 900:
				Write((RectOffset)P_1, P_2);
				break;
			case 901:
				Write((PrimitiveContract<RectOffset[]>)P_1, P_2);
				break;
			case 902:
				Write((List<RectOffset>)P_1, P_2);
				break;
			case 903:
				Write((AnimationTriggers)P_1, P_2);
				break;
			case 904:
				Write((PrimitiveContract<AnimationTriggers[]>)P_1, P_2);
				break;
			case 905:
				Write((List<AnimationTriggers>)P_1, P_2);
				break;
			case 906:
				Write((ColorBlock)P_1, P_2);
				break;
			case 907:
				Write((PrimitiveContract<ColorBlock[]>)P_1, P_2);
				break;
			case 908:
				Write((List<ColorBlock>)P_1, P_2);
				break;
			case 909:
				Write((NavMeshPath)P_1, P_2);
				break;
			case 910:
				Write((PrimitiveContract<NavMeshPath[]>)P_1, P_2);
				break;
			case 911:
				Write((List<NavMeshPath>)P_1, P_2);
				break;
			case 912:
				Write((ClothSkinningCoefficient)P_1, P_2);
				break;
			case 913:
				Write((PrimitiveContract<ClothSkinningCoefficient[]>)P_1, P_2);
				break;
			case 914:
				Write((List<ClothSkinningCoefficient>)P_1, P_2);
				break;
			case 915:
				Write((BoneWeight)P_1, P_2);
				break;
			case 916:
				Write((PrimitiveContract<BoneWeight[]>)P_1, P_2);
				break;
			case 917:
				Write((List<BoneWeight>)P_1, P_2);
				break;
			case 918:
				Write((TreeInstance)P_1, P_2);
				break;
			case 919:
				Write((PrimitiveContract<TreeInstance[]>)P_1, P_2);
				break;
			case 920:
				Write((List<TreeInstance>)P_1, P_2);
				break;
			case 921:
				Write((CharacterInfo)P_1, P_2);
				break;
			case 922:
				Write((PrimitiveContract<CharacterInfo[]>)P_1, P_2);
				break;
			case 923:
				Write((List<CharacterInfo>)P_1, P_2);
				break;
			case 924:
				Write((Vector3)P_1, P_2);
				break;
			case 925:
				Write((List<Vector3>)P_1, P_2);
				break;
			case 926:
				Write((Color)P_1, P_2);
				break;
			case 927:
				Write((List<Color>)P_1, P_2);
				break;
			case 928:
				Write((Rect)P_1, P_2);
				break;
			case 929:
				Write((PrimitiveContract<Rect[]>)P_1, P_2);
				break;
			case 930:
				Write((List<Rect>)P_1, P_2);
				break;
			case 931:
				Write((Matrix4x4)P_1, P_2);
				break;
			case 932:
				Write((PrimitiveContract<Matrix4x4[]>)P_1, P_2);
				break;
			case 933:
				Write((List<Matrix4x4>)P_1, P_2);
				break;
			case 934:
				Write((Scene)P_1, P_2);
				break;
			case 935:
				Write((PrimitiveContract<Scene[]>)P_1, P_2);
				break;
			case 936:
				Write((List<Scene>)P_1, P_2);
				break;
			case 937:
				Write((Bounds)P_1, P_2);
				break;
			case 938:
				Write((PrimitiveContract<Bounds[]>)P_1, P_2);
				break;
			case 939:
				Write((List<Bounds>)P_1, P_2);
				break;
			case 940:
				Write((Vector4)P_1, P_2);
				break;
			case 941:
				Write((List<Vector4>)P_1, P_2);
				break;
			case 942:
				Write((Vector2)P_1, P_2);
				break;
			case 943:
				Write((PrimitiveContract<Vector2[]>)P_1, P_2);
				break;
			case 944:
				Write((List<Vector2>)P_1, P_2);
				break;
			case 945:
				Write((RenderBuffer)P_1, P_2);
				break;
			case 946:
				Write((PrimitiveContract<RenderBuffer[]>)P_1, P_2);
				break;
			case 947:
				Write((List<RenderBuffer>)P_1, P_2);
				break;
			case 948:
				Write((Quaternion)P_1, P_2);
				break;
			case 949:
				Write((PrimitiveContract<Quaternion[]>)P_1, P_2);
				break;
			case 950:
				Write((List<Quaternion>)P_1, P_2);
				break;
			case 951:
				Write((JointMotor)P_1, P_2);
				break;
			case 952:
				Write((PrimitiveContract<JointMotor[]>)P_1, P_2);
				break;
			case 953:
				Write((List<JointMotor>)P_1, P_2);
				break;
			case 954:
				Write((JointLimits)P_1, P_2);
				break;
			case 955:
				Write((PrimitiveContract<JointLimits[]>)P_1, P_2);
				break;
			case 956:
				Write((List<JointLimits>)P_1, P_2);
				break;
			case 957:
				Write((JointSpring)P_1, P_2);
				break;
			case 958:
				Write((PrimitiveContract<JointSpring[]>)P_1, P_2);
				break;
			case 959:
				Write((List<JointSpring>)P_1, P_2);
				break;
			case 960:
				Write((JointDrive)P_1, P_2);
				break;
			case 961:
				Write((PrimitiveContract<JointDrive[]>)P_1, P_2);
				break;
			case 962:
				Write((List<JointDrive>)P_1, P_2);
				break;
			case 963:
				Write((SoftJointLimitSpring)P_1, P_2);
				break;
			case 964:
				Write((PrimitiveContract<SoftJointLimitSpring[]>)P_1, P_2);
				break;
			case 965:
				Write((List<SoftJointLimitSpring>)P_1, P_2);
				break;
			case 966:
				Write((SoftJointLimit)P_1, P_2);
				break;
			case 967:
				Write((PrimitiveContract<SoftJointLimit[]>)P_1, P_2);
				break;
			case 968:
				Write((List<SoftJointLimit>)P_1, P_2);
				break;
			case 969:
				Write((JointMotor2D)P_1, P_2);
				break;
			case 970:
				Write((PrimitiveContract<JointMotor2D[]>)P_1, P_2);
				break;
			case 971:
				Write((List<JointMotor2D>)P_1, P_2);
				break;
			case 972:
				Write((JointAngleLimits2D)P_1, P_2);
				break;
			case 973:
				Write((PrimitiveContract<JointAngleLimits2D[]>)P_1, P_2);
				break;
			case 974:
				Write((List<JointAngleLimits2D>)P_1, P_2);
				break;
			case 975:
				Write((JointTranslationLimits2D)P_1, P_2);
				break;
			case 976:
				Write((PrimitiveContract<JointTranslationLimits2D[]>)P_1, P_2);
				break;
			case 977:
				Write((List<JointTranslationLimits2D>)P_1, P_2);
				break;
			case 978:
				Write((JointSuspension2D)P_1, P_2);
				break;
			case 979:
				Write((PrimitiveContract<JointSuspension2D[]>)P_1, P_2);
				break;
			case 980:
				Write((List<JointSuspension2D>)P_1, P_2);
				break;
			case 981:
				Write((WheelFrictionCurve)P_1, P_2);
				break;
			case 982:
				Write((PrimitiveContract<WheelFrictionCurve[]>)P_1, P_2);
				break;
			case 983:
				Write((List<WheelFrictionCurve>)P_1, P_2);
				break;
			case 984:
				Write((OffMeshLinkData)P_1, P_2);
				break;
			case 985:
				Write((PrimitiveContract<OffMeshLinkData[]>)P_1, P_2);
				break;
			case 986:
				Write((List<OffMeshLinkData>)P_1, P_2);
				break;
			case 987:
				Write((PlayableGraph)P_1, P_2);
				break;
			case 988:
				Write((PrimitiveContract<PlayableGraph[]>)P_1, P_2);
				break;
			case 989:
				Write((List<PlayableGraph>)P_1, P_2);
				break;
			case 990:
				Write((Color32)P_1, P_2);
				break;
			case 991:
				Write((PrimitiveContract<Color32[]>)P_1, P_2);
				break;
			case 992:
				Write((List<Color32>)P_1, P_2);
				break;
			case 993:
				Write((ParticleSystemCollisionMode)P_1, P_2);
				break;
			case 994:
				Write((ParticleSystemCollisionQuality)P_1, P_2);
				break;
			case 995:
				Write((ParticleSystemCollisionType)P_1, P_2);
				break;
			case 996:
				Write((ParticleSystemOverlapAction)P_1, P_2);
				break;
			case 997:
				Write((ScrollRect.ScrollbarVisibility)P_1, P_2);
				break;
			case 998:
				Write((ScrollRect.MovementType)P_1, P_2);
				break;
			case 999:
				Write((Selectable.Transition)P_1, P_2);
				break;
			case 1000:
				Write((InputField.CharacterValidation)P_1, P_2);
				break;
			case 1001:
				Write((InputField.ContentType)P_1, P_2);
				break;
			case 1002:
				Write((InputField.InputType)P_1, P_2);
				break;
			case 1003:
				Write((TouchScreenKeyboardType)P_1, P_2);
				break;
			case 1004:
				Write((InputField.LineType)P_1, P_2);
				break;
			case 1005:
				Write((Scrollbar.Direction)P_1, P_2);
				break;
			case 1006:
				Write((Slider.Direction)P_1, P_2);
				break;
			case 1007:
				Write((RTShaderPropertyType)P_1, P_2);
				break;
			case 1008:
				Write((TextureDimension)P_1, P_2);
				break;
			case 1009:
				Write((FilterMode)P_1, P_2);
				break;
			case 1010:
				Write((TextureWrapMode)P_1, P_2);
				break;
			case 1011:
				Write((KeyValuePair<string, DataContract>)P_1, P_2);
				break;
			case 1012:
				Write((Navigation.Mode)P_1, P_2);
				break;
			case 1013:
				Write((UnityEventCallState)P_1, P_2);
				break;
			case 1014:
				Write((PersistentListenerMode)P_1, P_2);
				break;
			}
			break;
		}
	}

	protected internal new object Deserialize(int P_0, object P_1, ProtoReader P_2)
	{
		switch (P_0 / 128)
		{
		case 0:
			switch (P_0)
			{
			case 0:
				return Read((PersistentAnimationCurve)P_1, P_2);
			case 1:
				return Read((PersistentSpriteState)P_1, P_2);
			case 2:
				return Read((PersistentOptionData)P_1, P_2);
			case 3:
				return Read((PersistentNavigation)P_1, P_2);
			case 4:
				return Read((PersistentObject)P_1, P_2);
			case 5:
				return Read((PersistentScript)P_1, P_2);
			case 6:
				return Read((PersistentVideoClip)P_1, P_2);
			case 7:
				return Read((PersistentFont)P_1, P_2);
			case 8:
				return Read((PersistentTerrainData)P_1, P_2);
			case 9:
				return Read((PersistentMotion)P_1, P_2);
			case 10:
				return Read((PersistentAnimationClip)P_1, P_2);
			case 11:
				return Read((PersistentAvatarMask)P_1, P_2);
			case 12:
				return Read((PersistentAvatar)P_1, P_2);
			case 13:
				return Read((PersistentRuntimeAnimatorController)P_1, P_2);
			case 14:
				return Read((PersistentAnimatorOverrideController)P_1, P_2);
			case 15:
				return Read((PersistentAudioMixerGroup)P_1, P_2);
			case 16:
				return Read((PersistentAudioMixerSnapshot)P_1, P_2);
			case 17:
				return Read((PersistentAudioMixer)P_1, P_2);
			case 18:
				return Read((PersistentAudioClip)P_1, P_2);
			case 19:
				return Read((PersistentNavMeshData)P_1, P_2);
			case 20:
				return Read((PersistentPhysicsMaterial2D)P_1, P_2);
			case 21:
				return Read((PersistentPhysicMaterial)P_1, P_2);
			case 22:
				return Read((PersistentTexture)P_1, P_2);
			case 23:
				return Read((PersistentWebCamTexture)P_1, P_2);
			case 24:
				return Read((PersistentMovieTexture)P_1, P_2);
			case 25:
				return Read((PersistentRenderTexture)P_1, P_2);
			case 26:
				return Read((PersistentSparseTexture)P_1, P_2);
			case 27:
				return Read((PersistentCubemapArray)P_1, P_2);
			case 28:
				return Read((PersistentTexture2DArray)P_1, P_2);
			case 29:
				return Read((PersistentTexture3D)P_1, P_2);
			case 30:
				return Read((PersistentCubemap)P_1, P_2);
			case 31:
				return Read((PersistentTexture2D)P_1, P_2);
			case 32:
				return Read((PersistentProceduralTexture)P_1, P_2);
			case 33:
				return Read((PersistentTextAsset)P_1, P_2);
			case 34:
				return Read((PersistentSprite)P_1, P_2);
			case 35:
				return Read((PersistentShaderVariantCollection)P_1, P_2);
			case 36:
				return Read((PersistentMaterial)P_1, P_2);
			case 37:
				return Read((PersistentShader)P_1, P_2);
			case 38:
				return Read((PersistentGraphicsSettings)P_1, P_2);
			case 39:
				return Read((PersistentMesh)P_1, P_2);
			case 40:
				return Read((PersistentLightmapSettings)P_1, P_2);
			case 41:
				return Read((PersistentLightProbes)P_1, P_2);
			case 42:
				return Read((PersistentFlare)P_1, P_2);
			case 43:
				return Read((PersistentQualitySettings)P_1, P_2);
			case 44:
				return Read((PersistentRenderSettings)P_1, P_2);
			case 45:
				return Read((PersistentGameObject)P_1, P_2);
			case 46:
				return Read((PersistentComputeShader)P_1, P_2);
			case 47:
				return Read((PersistentComponent)P_1, P_2);
			case 48:
				return Read((PersistentWorldAnchor)P_1, P_2);
			case 49:
				return Read((PersistentCanvasRenderer)P_1, P_2);
			case 50:
				return Read((PersistentCanvasGroup)P_1, P_2);
			case 51:
				return Read((PersistentTextMesh)P_1, P_2);
			case 52:
				return Read((PersistentTree)P_1, P_2);
			case 53:
				return Read((PersistentCloth)P_1, P_2);
			case 54:
				return Read((PersistentRigidbody2D)P_1, P_2);
			case 55:
				return Read((PersistentCollider)P_1, P_2);
			case 56:
				return Read((PersistentTerrainCollider)P_1, P_2);
			case 57:
				return Read((PersistentWheelCollider)P_1, P_2);
			case 58:
				return Read((PersistentCharacterController)P_1, P_2);
			case 59:
				return Read((PersistentCapsuleCollider)P_1, P_2);
			case 60:
				return Read((PersistentMeshCollider)P_1, P_2);
			case 61:
				return Read((PersistentSphereCollider)P_1, P_2);
			case 62:
				return Read((PersistentBoxCollider)P_1, P_2);
			case 63:
				return Read((PersistentJoint)P_1, P_2);
			case 64:
				return Read((PersistentConfigurableJoint)P_1, P_2);
			case 65:
				return Read((PersistentCharacterJoint)P_1, P_2);
			case 66:
				return Read((PersistentFixedJoint)P_1, P_2);
			case 67:
				return Read((PersistentSpringJoint)P_1, P_2);
			case 68:
				return Read((PersistentHingeJoint)P_1, P_2);
			case 69:
				return Read((PersistentRigidbody)P_1, P_2);
			case 70:
				return Read((PersistentParticleSystem)P_1, P_2);
			case 71:
				return Read((PersistentTransform)P_1, P_2);
			case 72:
				return Read((PersistentRectTransform)P_1, P_2);
			case 73:
				return Read((PersistentWindZone)P_1, P_2);
			case 74:
				return Read((PersistentLODGroup)P_1, P_2);
			case 75:
				return Read((PersistentRenderer)P_1, P_2);
			case 76:
				return Read((PersistentParticleSystemRenderer)P_1, P_2);
			case 77:
				return Read((PersistentSpriteRenderer)P_1, P_2);
			case 78:
				return Read((PersistentMeshRenderer)P_1, P_2);
			case 79:
				return Read((PersistentLineRenderer)P_1, P_2);
			case 80:
				return Read((PersistentTrailRenderer)P_1, P_2);
			case 81:
				return Read((PersistentSkinnedMeshRenderer)P_1, P_2);
			case 82:
				return Read((PersistentBillboardRenderer)P_1, P_2);
			case 83:
				return Read((PersistentMeshFilter)P_1, P_2);
			case 84:
				return Read((PersistentOcclusionPortal)P_1, P_2);
			case 85:
				return Read((PersistentOcclusionArea)P_1, P_2);
			case 86:
				return Read((PersistentBehaviour)P_1, P_2);
			case 87:
				return Read((PersistentVideoPlayer)P_1, P_2);
			case 88:
				return Read((PersistentCanvas)P_1, P_2);
			case 89:
				return Read((PersistentTerrain)P_1, P_2);
			case 90:
				return Read((PersistentAnimation)P_1, P_2);
			case 91:
				return Read((PersistentAnimator)P_1, P_2);
			case 92:
				return Read((PersistentAudioChorusFilter)P_1, P_2);
			case 93:
				return Read((PersistentAudioEchoFilter)P_1, P_2);
			case 94:
				return Read((PersistentAudioDistortionFilter)P_1, P_2);
			case 95:
				return Read((PersistentAudioReverbZone)P_1, P_2);
			case 96:
				return Read((PersistentAudioListener)P_1, P_2);
			case 97:
				return Read((PersistentAudioBehaviour)P_1, P_2);
			case 98:
				return Read((PersistentAudioReverbFilter)P_1, P_2);
			case 99:
				return Read((PersistentAudioHighPassFilter)P_1, P_2);
			case 100:
				return Read((PersistentAudioLowPassFilter)P_1, P_2);
			case 101:
				return Read((PersistentAudioSource)P_1, P_2);
			case 102:
				return Read((PersistentOffMeshLink)P_1, P_2);
			case 103:
				return Read((PersistentNavMeshObstacle)P_1, P_2);
			case 104:
				return Read((PersistentNavMeshAgent)P_1, P_2);
			case 105:
				return Read((PersistentEffector2D)P_1, P_2);
			case 106:
				return Read((PersistentSurfaceEffector2D)P_1, P_2);
			case 107:
				return Read((PersistentPointEffector2D)P_1, P_2);
			case 108:
				return Read((PersistentBuoyancyEffector2D)P_1, P_2);
			case 109:
				return Read((PersistentPlatformEffector2D)P_1, P_2);
			case 110:
				return Read((PersistentAreaEffector2D)P_1, P_2);
			case 111:
				return Read((PersistentPhysicsUpdateBehaviour2D)P_1, P_2);
			case 112:
				return Read((PersistentConstantForce2D)P_1, P_2);
			case 113:
				return Read((PersistentCollider2D)P_1, P_2);
			case 114:
				return Read((PersistentPolygonCollider2D)P_1, P_2);
			case 115:
				return Read((PersistentCompositeCollider2D)P_1, P_2);
			case 116:
				return Read((PersistentCapsuleCollider2D)P_1, P_2);
			case 117:
				return Read((PersistentEdgeCollider2D)P_1, P_2);
			case 118:
				return Read((PersistentBoxCollider2D)P_1, P_2);
			case 119:
				return Read((PersistentCircleCollider2D)P_1, P_2);
			case 120:
				return Read((PersistentJoint2D)P_1, P_2);
			case 121:
				return Read((PersistentTargetJoint2D)P_1, P_2);
			case 122:
				return Read((PersistentRelativeJoint2D)P_1, P_2);
			case 123:
				return Read((PersistentAnchoredJoint2D)P_1, P_2);
			case 124:
				return Read((PersistentWheelJoint2D)P_1, P_2);
			case 125:
				return Read((PersistentFixedJoint2D)P_1, P_2);
			case 126:
				return Read((PersistentSliderJoint2D)P_1, P_2);
			case 127:
				return Read((PersistentHingeJoint2D)P_1, P_2);
			}
			break;
		case 1:
			switch (P_0)
			{
			case 128:
				return Read((PersistentFrictionJoint2D)P_1, P_2);
			case 129:
				return Read((PersistentDistanceJoint2D)P_1, P_2);
			case 130:
				return Read((PersistentSpringJoint2D)P_1, P_2);
			case 131:
				return Read((PersistentConstantForce)P_1, P_2);
			case 132:
				return Read((PersistentSortingGroup)P_1, P_2);
			case 133:
				return Read((PersistentReflectionProbe)P_1, P_2);
			case 134:
				return Read((PersistentNetworkView)P_1, P_2);
			case 135:
				return Read((PersistentMonoBehaviour)P_1, P_2);
			case 136:
				return Read((PersistentUIBehaviour)P_1, P_2);
			case 137:
				return Read((PersistentBaseMeshEffect)P_1, P_2);
			case 138:
				return Read((PersistentShadow)P_1, P_2);
			case 139:
				return Read((PersistentOutline)P_1, P_2);
			case 140:
				return Read((PersistentPositionAsUV1)P_1, P_2);
			case 141:
				return Read((PersistentLayoutGroup)P_1, P_2);
			case 142:
				return Read((PersistentHorizontalOrVerticalLayoutGroup)P_1, P_2);
			case 143:
				return Read((PersistentVerticalLayoutGroup)P_1, P_2);
			case 144:
				return Read((PersistentHorizontalLayoutGroup)P_1, P_2);
			case 145:
				return Read((PersistentGridLayoutGroup)P_1, P_2);
			case 146:
				return Read((PersistentLayoutElement)P_1, P_2);
			case 147:
				return Read((PersistentContentSizeFitter)P_1, P_2);
			case 148:
				return Read((PersistentCanvasScaler)P_1, P_2);
			case 149:
				return Read((PersistentAspectRatioFitter)P_1, P_2);
			case 150:
				return Read((PersistentToggleGroup)P_1, P_2);
			case 151:
				return Read((PersistentSelectable)P_1, P_2);
			case 152:
				return Read((PersistentToggle)P_1, P_2);
			case 153:
				return Read((PersistentSlider)P_1, P_2);
			case 154:
				return Read((PersistentScrollbar)P_1, P_2);
			case 155:
				return Read((PersistentInputField)P_1, P_2);
			case 156:
				return Read((PersistentDropdown)P_1, P_2);
			case 157:
				return Read((PersistentButton)P_1, P_2);
			case 158:
				return Read((PersistentScrollRect)P_1, P_2);
			case 159:
				return Read((PersistentRectMask2D)P_1, P_2);
			case 160:
				return Read((PersistentMask)P_1, P_2);
			case 161:
				return Read((PersistentGraphic)P_1, P_2);
			case 162:
				return Read((PersistentMaskableGraphic)P_1, P_2);
			case 163:
				return Read((PersistentText)P_1, P_2);
			case 164:
				return Read((PersistentRawImage)P_1, P_2);
			case 165:
				return Read((PersistentImage)P_1, P_2);
			case 166:
				return Read((PersistentBaseRaycaster)P_1, P_2);
			case 167:
				return Read((PersistentGraphicRaycaster)P_1, P_2);
			case 168:
				return Read((PersistentPhysicsRaycaster)P_1, P_2);
			case 169:
				return Read((PersistentPhysics2DRaycaster)P_1, P_2);
			case 170:
				return Read((PersistentBaseInputModule)P_1, P_2);
			case 171:
				return Read((PersistentPointerInputModule)P_1, P_2);
			case 172:
				return Read((PersistentStandaloneInputModule)P_1, P_2);
			case 173:
				return Read((PersistentBaseInput)P_1, P_2);
			case 174:
				return Read((PersistentEventSystem)P_1, P_2);
			case 175:
				return Read((PersistentEventTrigger)P_1, P_2);
			case 176:
				return Read((PersistentNetworkMatch)P_1, P_2);
			case 177:
				return Read((PersistentLightProbeProxyVolume)P_1, P_2);
			case 178:
				return Read((PersistentLightProbeGroup)P_1, P_2);
			case 179:
				return Read((PersistentLight)P_1, P_2);
			case 180:
				return Read((PersistentGUILayer)P_1, P_2);
			case 181:
				return Read((PersistentGUIElement)P_1, P_2);
			case 182:
				return Read((PersistentSkybox)P_1, P_2);
			case 183:
				return Read((PersistentProjector)P_1, P_2);
			case 184:
				return Read((PersistentLensFlare)P_1, P_2);
			case 185:
				return Read((PersistentFlareLayer)P_1, P_2);
			case 186:
				return Read((PersistentCamera)P_1, P_2);
			case 187:
				return Read((PersistentBillboardAsset)P_1, P_2);
			case 188:
				return Read((PersistentScriptableObject)P_1, P_2);
			case 189:
				return Read((PersistentRenderPipelineAsset)P_1, P_2);
			case 190:
				return Read((PersistentPlayerConnection)P_1, P_2);
			case 191:
				return Read((PersistentGUISkin)P_1, P_2);
			case 192:
				return Read((PersistentStateMachineBehaviour)P_1, P_2);
			case 193:
				return Read((PersistentAssetBundleManifest)P_1, P_2);
			case 194:
				return Read((PersistentAssetBundle)P_1, P_2);
			case 195:
				return Read((PersistentTriggerModule)P_1, P_2);
			case 196:
				return Read((PersistentEmissionModule)P_1, P_2);
			case 197:
				return Read((PersistentCollisionModule)P_1, P_2);
			case 198:
				return Read((PersistentGUIStyleState)P_1, P_2);
			case 199:
				return Read((PersistentGUIStyle)P_1, P_2);
			case 200:
				return Read((PersistentVelocityOverLifetimeModule)P_1, P_2);
			case 201:
				return Read((PersistentTrailModule)P_1, P_2);
			case 202:
				return Read((PersistentTextureSheetAnimationModule)P_1, P_2);
			case 203:
				return Read((PersistentSubEmittersModule)P_1, P_2);
			case 204:
				return Read((PersistentSizeOverLifetimeModule)P_1, P_2);
			case 205:
				return Read((PersistentSizeBySpeedModule)P_1, P_2);
			case 206:
				return Read((PersistentShapeModule)P_1, P_2);
			case 207:
				return Read((PersistentRotationOverLifetimeModule)P_1, P_2);
			case 208:
				return Read((PersistentRotationBySpeedModule)P_1, P_2);
			case 209:
				return Read((PersistentParticle)P_1, P_2);
			case 210:
				return Read((PersistentNoiseModule)P_1, P_2);
			case 211:
				return Read((PersistentMinMaxGradient)P_1, P_2);
			case 212:
				return Read((PersistentMinMaxCurve)P_1, P_2);
			case 213:
				return Read((PersistentMainModule)P_1, P_2);
			case 214:
				return Read((PersistentLimitVelocityOverLifetimeModule)P_1, P_2);
			case 215:
				return Read((PersistentLightsModule)P_1, P_2);
			case 216:
				return Read((PersistentKeyframe)P_1, P_2);
			case 217:
				return Read((PersistentInheritVelocityModule)P_1, P_2);
			case 218:
				return Read((PersistentGradient)P_1, P_2);
			case 219:
				return Read((PersistentForceOverLifetimeModule)P_1, P_2);
			case 220:
				return Read((PersistentExternalForcesModule)P_1, P_2);
			case 221:
				return Read((PersistentEmitParams)P_1, P_2);
			case 222:
				return Read((PersistentCustomDataModule)P_1, P_2);
			case 223:
				return Read((PersistentColorOverLifetimeModule)P_1, P_2);
			case 224:
				return Read((PersistentColorBySpeedModule)P_1, P_2);
			case 225:
				return Read((PersistentBurst)P_1, P_2);
			case 226:
				return Read((PrimitiveContract<Vector4[]>)P_1, P_2);
			case 227:
				return Read((PrimitiveContract<Vector4>)P_1, P_2);
			case 228:
				return Read((PrimitiveContract<Vector3[]>)P_1, P_2);
			case 229:
				return Read((PrimitiveContract<Vector3>)P_1, P_2);
			case 230:
				return Read((PrimitiveContract<Color[]>)P_1, P_2);
			case 231:
				return Read((PrimitiveContract<Color>)P_1, P_2);
			case 232:
				return Read((PrimitiveContract<decimal[]>)P_1, P_2);
			case 233:
				return Read((PrimitiveContract<double[]>)P_1, P_2);
			case 234:
				return Read((PrimitiveContract<float[]>)P_1, P_2);
			case 235:
				return Read((PrimitiveContract<string[]>)P_1, P_2);
			case 236:
				return Read((PrimitiveContract<ulong[]>)P_1, P_2);
			case 237:
				return Read((PrimitiveContract<uint[]>)P_1, P_2);
			case 238:
				return Read((PrimitiveContract<ushort[]>)P_1, P_2);
			case 239:
				return Read((PrimitiveContract<long[]>)P_1, P_2);
			case 240:
				return Read((PrimitiveContract<int[]>)P_1, P_2);
			case 241:
				return Read((PrimitiveContract<short[]>)P_1, P_2);
			case 242:
				return Read((PrimitiveContract<byte[]>)P_1, P_2);
			case 243:
				return Read((PrimitiveContract<char[]>)P_1, P_2);
			case 244:
				return Read((PrimitiveContract<bool[]>)P_1, P_2);
			case 245:
				return Read((PrimitiveContract<decimal>)P_1, P_2);
			case 246:
				return Read((PrimitiveContract<double>)P_1, P_2);
			case 247:
				return Read((PrimitiveContract<float>)P_1, P_2);
			case 248:
				return Read((PrimitiveContract<string>)P_1, P_2);
			case 249:
				return Read((PrimitiveContract<ulong>)P_1, P_2);
			case 250:
				return Read((PrimitiveContract<uint>)P_1, P_2);
			case 251:
				return Read((PrimitiveContract<ushort>)P_1, P_2);
			case 252:
				return Read((PrimitiveContract<long>)P_1, P_2);
			case 253:
				return Read((PrimitiveContract<int>)P_1, P_2);
			case 254:
				return Read((PrimitiveContract<short>)P_1, P_2);
			case 255:
				return Read((PrimitiveContract<byte>)P_1, P_2);
			}
			break;
		case 2:
			switch (P_0)
			{
			case 256:
				return Read((PrimitiveContract<char>)P_1, P_2);
			case 257:
				return Read((PrimitiveContract<bool>)P_1, P_2);
			case 258:
				return Read((PersistentData)P_1, P_2);
			case 259:
				return Read((PrimitiveContract<PersistentAnimationCurve[]>)P_1, P_2);
			case 260:
				return Read((PrimitiveContract)P_1, P_2);
			case 261:
				return Read((List<PersistentAnimationCurve>)P_1, P_2);
			case 262:
				return Read((PrimitiveContract<PersistentBurst[]>)P_1, P_2);
			case 263:
				return Read((List<PersistentBurst>)P_1, P_2);
			case 264:
				return Read((PrimitiveContract<PersistentColorBySpeedModule[]>)P_1, P_2);
			case 265:
				return Read((List<PersistentColorBySpeedModule>)P_1, P_2);
			case 266:
				return Read((PrimitiveContract<PersistentColorOverLifetimeModule[]>)P_1, P_2);
			case 267:
				return Read((List<PersistentColorOverLifetimeModule>)P_1, P_2);
			case 268:
				return Read((PrimitiveContract<PersistentCustomDataModule[]>)P_1, P_2);
			case 269:
				return Read((List<PersistentCustomDataModule>)P_1, P_2);
			case 270:
				return Read((PrimitiveContract<PersistentEmitParams[]>)P_1, P_2);
			case 271:
				return Read((List<PersistentEmitParams>)P_1, P_2);
			case 272:
				return Read((PrimitiveContract<PersistentExternalForcesModule[]>)P_1, P_2);
			case 273:
				return Read((List<PersistentExternalForcesModule>)P_1, P_2);
			case 274:
				return Read((PrimitiveContract<PersistentForceOverLifetimeModule[]>)P_1, P_2);
			case 275:
				return Read((List<PersistentForceOverLifetimeModule>)P_1, P_2);
			case 276:
				return Read((PrimitiveContract<PersistentGradient[]>)P_1, P_2);
			case 277:
				return Read((List<PersistentGradient>)P_1, P_2);
			case 278:
				return Read((PrimitiveContract<PersistentInheritVelocityModule[]>)P_1, P_2);
			case 279:
				return Read((List<PersistentInheritVelocityModule>)P_1, P_2);
			case 280:
				return Read((PrimitiveContract<PersistentKeyframe[]>)P_1, P_2);
			case 281:
				return Read((List<PersistentKeyframe>)P_1, P_2);
			case 282:
				return Read((PrimitiveContract<PersistentLightsModule[]>)P_1, P_2);
			case 283:
				return Read((List<PersistentLightsModule>)P_1, P_2);
			case 284:
				return Read((PrimitiveContract<PersistentLimitVelocityOverLifetimeModule[]>)P_1, P_2);
			case 285:
				return Read((List<PersistentLimitVelocityOverLifetimeModule>)P_1, P_2);
			case 286:
				return Read((PrimitiveContract<PersistentMainModule[]>)P_1, P_2);
			case 287:
				return Read((List<PersistentMainModule>)P_1, P_2);
			case 288:
				return Read((PrimitiveContract<PersistentMinMaxCurve[]>)P_1, P_2);
			case 289:
				return Read((List<PersistentMinMaxCurve>)P_1, P_2);
			case 290:
				return Read((PrimitiveContract<PersistentMinMaxGradient[]>)P_1, P_2);
			case 291:
				return Read((List<PersistentMinMaxGradient>)P_1, P_2);
			case 292:
				return Read((PrimitiveContract<PersistentNoiseModule[]>)P_1, P_2);
			case 293:
				return Read((List<PersistentNoiseModule>)P_1, P_2);
			case 294:
				return Read((PrimitiveContract<PersistentParticle[]>)P_1, P_2);
			case 295:
				return Read((List<PersistentParticle>)P_1, P_2);
			case 296:
				return Read((PrimitiveContract<PersistentRotationBySpeedModule[]>)P_1, P_2);
			case 297:
				return Read((List<PersistentRotationBySpeedModule>)P_1, P_2);
			case 298:
				return Read((PrimitiveContract<PersistentRotationOverLifetimeModule[]>)P_1, P_2);
			case 299:
				return Read((List<PersistentRotationOverLifetimeModule>)P_1, P_2);
			case 300:
				return Read((PrimitiveContract<PersistentShapeModule[]>)P_1, P_2);
			case 301:
				return Read((List<PersistentShapeModule>)P_1, P_2);
			case 302:
				return Read((PrimitiveContract<PersistentSizeBySpeedModule[]>)P_1, P_2);
			case 303:
				return Read((List<PersistentSizeBySpeedModule>)P_1, P_2);
			case 304:
				return Read((PrimitiveContract<PersistentSizeOverLifetimeModule[]>)P_1, P_2);
			case 305:
				return Read((List<PersistentSizeOverLifetimeModule>)P_1, P_2);
			case 306:
				return Read((PrimitiveContract<PersistentSubEmittersModule[]>)P_1, P_2);
			case 307:
				return Read((List<PersistentSubEmittersModule>)P_1, P_2);
			case 308:
				return Read((PrimitiveContract<PersistentTextureSheetAnimationModule[]>)P_1, P_2);
			case 309:
				return Read((List<PersistentTextureSheetAnimationModule>)P_1, P_2);
			case 310:
				return Read((PrimitiveContract<PersistentTrailModule[]>)P_1, P_2);
			case 311:
				return Read((List<PersistentTrailModule>)P_1, P_2);
			case 312:
				return Read((PrimitiveContract<PersistentVelocityOverLifetimeModule[]>)P_1, P_2);
			case 313:
				return Read((List<PersistentVelocityOverLifetimeModule>)P_1, P_2);
			case 314:
				return Read((PrimitiveContract<PersistentAnchoredJoint2D[]>)P_1, P_2);
			case 315:
				return Read((List<PersistentAnchoredJoint2D>)P_1, P_2);
			case 316:
				return Read((PrimitiveContract<PersistentAnimation[]>)P_1, P_2);
			case 317:
				return Read((List<PersistentAnimation>)P_1, P_2);
			case 318:
				return Read((PrimitiveContract<PersistentAnimationClip[]>)P_1, P_2);
			case 319:
				return Read((List<PersistentAnimationClip>)P_1, P_2);
			case 320:
				return Read((PrimitiveContract<PersistentAnimator[]>)P_1, P_2);
			case 321:
				return Read((List<PersistentAnimator>)P_1, P_2);
			case 322:
				return Read((PrimitiveContract<PersistentAnimatorOverrideController[]>)P_1, P_2);
			case 323:
				return Read((List<PersistentAnimatorOverrideController>)P_1, P_2);
			case 324:
				return Read((PrimitiveContract<PersistentAreaEffector2D[]>)P_1, P_2);
			case 325:
				return Read((List<PersistentAreaEffector2D>)P_1, P_2);
			case 326:
				return Read((PrimitiveContract<PersistentAspectRatioFitter[]>)P_1, P_2);
			case 327:
				return Read((List<PersistentAspectRatioFitter>)P_1, P_2);
			case 328:
				return Read((PrimitiveContract<PersistentAssetBundle[]>)P_1, P_2);
			case 329:
				return Read((List<PersistentAssetBundle>)P_1, P_2);
			case 330:
				return Read((PrimitiveContract<PersistentAssetBundleManifest[]>)P_1, P_2);
			case 331:
				return Read((List<PersistentAssetBundleManifest>)P_1, P_2);
			case 332:
				return Read((PrimitiveContract<PersistentAudioBehaviour[]>)P_1, P_2);
			case 333:
				return Read((List<PersistentAudioBehaviour>)P_1, P_2);
			case 334:
				return Read((PrimitiveContract<PersistentAudioChorusFilter[]>)P_1, P_2);
			case 335:
				return Read((List<PersistentAudioChorusFilter>)P_1, P_2);
			case 336:
				return Read((PrimitiveContract<PersistentAudioClip[]>)P_1, P_2);
			case 337:
				return Read((List<PersistentAudioClip>)P_1, P_2);
			case 338:
				return Read((PrimitiveContract<PersistentAudioDistortionFilter[]>)P_1, P_2);
			case 339:
				return Read((List<PersistentAudioDistortionFilter>)P_1, P_2);
			case 340:
				return Read((PrimitiveContract<PersistentAudioEchoFilter[]>)P_1, P_2);
			case 341:
				return Read((List<PersistentAudioEchoFilter>)P_1, P_2);
			case 342:
				return Read((PrimitiveContract<PersistentAudioHighPassFilter[]>)P_1, P_2);
			case 343:
				return Read((List<PersistentAudioHighPassFilter>)P_1, P_2);
			case 344:
				return Read((PrimitiveContract<PersistentAudioListener[]>)P_1, P_2);
			case 345:
				return Read((List<PersistentAudioListener>)P_1, P_2);
			case 346:
				return Read((PrimitiveContract<PersistentAudioLowPassFilter[]>)P_1, P_2);
			case 347:
				return Read((List<PersistentAudioLowPassFilter>)P_1, P_2);
			case 348:
				return Read((PrimitiveContract<PersistentAudioMixer[]>)P_1, P_2);
			case 349:
				return Read((List<PersistentAudioMixer>)P_1, P_2);
			case 350:
				return Read((PrimitiveContract<PersistentAudioMixerGroup[]>)P_1, P_2);
			case 351:
				return Read((List<PersistentAudioMixerGroup>)P_1, P_2);
			case 352:
				return Read((PrimitiveContract<PersistentAudioMixerSnapshot[]>)P_1, P_2);
			case 353:
				return Read((List<PersistentAudioMixerSnapshot>)P_1, P_2);
			case 354:
				return Read((PrimitiveContract<PersistentAudioReverbFilter[]>)P_1, P_2);
			case 355:
				return Read((List<PersistentAudioReverbFilter>)P_1, P_2);
			case 356:
				return Read((PrimitiveContract<PersistentAudioReverbZone[]>)P_1, P_2);
			case 357:
				return Read((List<PersistentAudioReverbZone>)P_1, P_2);
			case 358:
				return Read((PrimitiveContract<PersistentAudioSource[]>)P_1, P_2);
			case 359:
				return Read((List<PersistentAudioSource>)P_1, P_2);
			case 360:
				return Read((PrimitiveContract<PersistentAvatar[]>)P_1, P_2);
			case 361:
				return Read((List<PersistentAvatar>)P_1, P_2);
			case 362:
				return Read((PrimitiveContract<PersistentAvatarMask[]>)P_1, P_2);
			case 363:
				return Read((List<PersistentAvatarMask>)P_1, P_2);
			case 364:
				return Read((PrimitiveContract<PersistentBaseInput[]>)P_1, P_2);
			case 365:
				return Read((List<PersistentBaseInput>)P_1, P_2);
			case 366:
				return Read((PrimitiveContract<PersistentBaseInputModule[]>)P_1, P_2);
			case 367:
				return Read((List<PersistentBaseInputModule>)P_1, P_2);
			case 368:
				return Read((PrimitiveContract<PersistentBaseMeshEffect[]>)P_1, P_2);
			case 369:
				return Read((List<PersistentBaseMeshEffect>)P_1, P_2);
			case 370:
				return Read((PrimitiveContract<PersistentBaseRaycaster[]>)P_1, P_2);
			case 371:
				return Read((List<PersistentBaseRaycaster>)P_1, P_2);
			case 372:
				return Read((PrimitiveContract<PersistentBehaviour[]>)P_1, P_2);
			case 373:
				return Read((List<PersistentBehaviour>)P_1, P_2);
			case 374:
				return Read((PrimitiveContract<PersistentBillboardAsset[]>)P_1, P_2);
			case 375:
				return Read((List<PersistentBillboardAsset>)P_1, P_2);
			case 376:
				return Read((PrimitiveContract<PersistentBillboardRenderer[]>)P_1, P_2);
			case 377:
				return Read((List<PersistentBillboardRenderer>)P_1, P_2);
			case 378:
				return Read((PrimitiveContract<PersistentBoxCollider[]>)P_1, P_2);
			case 379:
				return Read((List<PersistentBoxCollider>)P_1, P_2);
			case 380:
				return Read((PrimitiveContract<PersistentBoxCollider2D[]>)P_1, P_2);
			case 381:
				return Read((List<PersistentBoxCollider2D>)P_1, P_2);
			case 382:
				return Read((PrimitiveContract<PersistentBuoyancyEffector2D[]>)P_1, P_2);
			case 383:
				return Read((List<PersistentBuoyancyEffector2D>)P_1, P_2);
			}
			break;
		case 3:
			switch (P_0)
			{
			case 384:
				return Read((PrimitiveContract<PersistentCamera[]>)P_1, P_2);
			case 385:
				return Read((List<PersistentCamera>)P_1, P_2);
			case 386:
				return Read((PrimitiveContract<PersistentCanvas[]>)P_1, P_2);
			case 387:
				return Read((List<PersistentCanvas>)P_1, P_2);
			case 388:
				return Read((PrimitiveContract<PersistentCanvasGroup[]>)P_1, P_2);
			case 389:
				return Read((List<PersistentCanvasGroup>)P_1, P_2);
			case 390:
				return Read((PrimitiveContract<PersistentCanvasRenderer[]>)P_1, P_2);
			case 391:
				return Read((List<PersistentCanvasRenderer>)P_1, P_2);
			case 392:
				return Read((PrimitiveContract<PersistentCanvasScaler[]>)P_1, P_2);
			case 393:
				return Read((List<PersistentCanvasScaler>)P_1, P_2);
			case 394:
				return Read((PrimitiveContract<PersistentCapsuleCollider[]>)P_1, P_2);
			case 395:
				return Read((List<PersistentCapsuleCollider>)P_1, P_2);
			case 396:
				return Read((PrimitiveContract<PersistentCapsuleCollider2D[]>)P_1, P_2);
			case 397:
				return Read((List<PersistentCapsuleCollider2D>)P_1, P_2);
			case 398:
				return Read((PrimitiveContract<PersistentCharacterController[]>)P_1, P_2);
			case 399:
				return Read((List<PersistentCharacterController>)P_1, P_2);
			case 400:
				return Read((PrimitiveContract<PersistentCharacterJoint[]>)P_1, P_2);
			case 401:
				return Read((List<PersistentCharacterJoint>)P_1, P_2);
			case 402:
				return Read((PrimitiveContract<PersistentCircleCollider2D[]>)P_1, P_2);
			case 403:
				return Read((List<PersistentCircleCollider2D>)P_1, P_2);
			case 404:
				return Read((PrimitiveContract<PersistentCollider[]>)P_1, P_2);
			case 405:
				return Read((List<PersistentCollider>)P_1, P_2);
			case 406:
				return Read((PrimitiveContract<PersistentCollider2D[]>)P_1, P_2);
			case 407:
				return Read((List<PersistentCollider2D>)P_1, P_2);
			case 408:
				return Read((PrimitiveContract<PersistentComponent[]>)P_1, P_2);
			case 409:
				return Read((List<PersistentComponent>)P_1, P_2);
			case 410:
				return Read((PrimitiveContract<PersistentCompositeCollider2D[]>)P_1, P_2);
			case 411:
				return Read((List<PersistentCompositeCollider2D>)P_1, P_2);
			case 412:
				return Read((PrimitiveContract<PersistentComputeShader[]>)P_1, P_2);
			case 413:
				return Read((List<PersistentComputeShader>)P_1, P_2);
			case 414:
				return Read((PrimitiveContract<PersistentConfigurableJoint[]>)P_1, P_2);
			case 415:
				return Read((List<PersistentConfigurableJoint>)P_1, P_2);
			case 416:
				return Read((PrimitiveContract<PersistentConstantForce[]>)P_1, P_2);
			case 417:
				return Read((List<PersistentConstantForce>)P_1, P_2);
			case 418:
				return Read((PrimitiveContract<PersistentConstantForce2D[]>)P_1, P_2);
			case 419:
				return Read((List<PersistentConstantForce2D>)P_1, P_2);
			case 420:
				return Read((PrimitiveContract<PersistentContentSizeFitter[]>)P_1, P_2);
			case 421:
				return Read((List<PersistentContentSizeFitter>)P_1, P_2);
			case 422:
				return Read((PrimitiveContract<PersistentCubemap[]>)P_1, P_2);
			case 423:
				return Read((List<PersistentCubemap>)P_1, P_2);
			case 424:
				return Read((PrimitiveContract<PersistentCubemapArray[]>)P_1, P_2);
			case 425:
				return Read((List<PersistentCubemapArray>)P_1, P_2);
			case 426:
				return Read((PrimitiveContract<PersistentData[]>)P_1, P_2);
			case 427:
				return Read((List<PersistentData>)P_1, P_2);
			case 428:
				return Read((PersistentDetailPrototype)P_1, P_2);
			case 429:
				return Read((PrimitiveContract<PersistentDetailPrototype[]>)P_1, P_2);
			case 430:
				return Read((List<PersistentDetailPrototype>)P_1, P_2);
			case 431:
				return Read((PrimitiveContract<PersistentDistanceJoint2D[]>)P_1, P_2);
			case 432:
				return Read((List<PersistentDistanceJoint2D>)P_1, P_2);
			case 433:
				return Read((PrimitiveContract<PersistentEdgeCollider2D[]>)P_1, P_2);
			case 434:
				return Read((List<PersistentEdgeCollider2D>)P_1, P_2);
			case 435:
				return Read((PrimitiveContract<PersistentEffector2D[]>)P_1, P_2);
			case 436:
				return Read((List<PersistentEffector2D>)P_1, P_2);
			case 437:
				return Read((PrimitiveContract<PersistentEventSystem[]>)P_1, P_2);
			case 438:
				return Read((List<PersistentEventSystem>)P_1, P_2);
			case 439:
				return Read((PrimitiveContract<PersistentEventTrigger[]>)P_1, P_2);
			case 440:
				return Read((List<PersistentEventTrigger>)P_1, P_2);
			case 441:
				return Read((PrimitiveContract<PersistentFixedJoint[]>)P_1, P_2);
			case 442:
				return Read((List<PersistentFixedJoint>)P_1, P_2);
			case 443:
				return Read((PrimitiveContract<PersistentFixedJoint2D[]>)P_1, P_2);
			case 444:
				return Read((List<PersistentFixedJoint2D>)P_1, P_2);
			case 445:
				return Read((PrimitiveContract<PersistentFlare[]>)P_1, P_2);
			case 446:
				return Read((List<PersistentFlare>)P_1, P_2);
			case 447:
				return Read((PrimitiveContract<PersistentFlareLayer[]>)P_1, P_2);
			case 448:
				return Read((List<PersistentFlareLayer>)P_1, P_2);
			case 449:
				return Read((PrimitiveContract<PersistentFont[]>)P_1, P_2);
			case 450:
				return Read((List<PersistentFont>)P_1, P_2);
			case 451:
				return Read((PrimitiveContract<PersistentFrictionJoint2D[]>)P_1, P_2);
			case 452:
				return Read((List<PersistentFrictionJoint2D>)P_1, P_2);
			case 453:
				return Read((PrimitiveContract<PersistentGameObject[]>)P_1, P_2);
			case 454:
				return Read((List<PersistentGameObject>)P_1, P_2);
			case 455:
				return Read((PrimitiveContract<PersistentGraphic[]>)P_1, P_2);
			case 456:
				return Read((List<PersistentGraphic>)P_1, P_2);
			case 457:
				return Read((PrimitiveContract<PersistentGraphicRaycaster[]>)P_1, P_2);
			case 458:
				return Read((List<PersistentGraphicRaycaster>)P_1, P_2);
			case 459:
				return Read((PrimitiveContract<PersistentGraphicsSettings[]>)P_1, P_2);
			case 460:
				return Read((List<PersistentGraphicsSettings>)P_1, P_2);
			case 461:
				return Read((PrimitiveContract<PersistentGridLayoutGroup[]>)P_1, P_2);
			case 462:
				return Read((List<PersistentGridLayoutGroup>)P_1, P_2);
			case 463:
				return Read((PrimitiveContract<PersistentGUIElement[]>)P_1, P_2);
			case 464:
				return Read((List<PersistentGUIElement>)P_1, P_2);
			case 465:
				return Read((PrimitiveContract<PersistentGUILayer[]>)P_1, P_2);
			case 466:
				return Read((List<PersistentGUILayer>)P_1, P_2);
			case 467:
				return Read((PrimitiveContract<PersistentGUISkin[]>)P_1, P_2);
			case 468:
				return Read((List<PersistentGUISkin>)P_1, P_2);
			case 469:
				return Read((PrimitiveContract<PersistentGUIStyle[]>)P_1, P_2);
			case 470:
				return Read((List<PersistentGUIStyle>)P_1, P_2);
			case 471:
				return Read((PrimitiveContract<PersistentGUIStyleState[]>)P_1, P_2);
			case 472:
				return Read((List<PersistentGUIStyleState>)P_1, P_2);
			case 473:
				return Read((PrimitiveContract<PersistentHingeJoint[]>)P_1, P_2);
			case 474:
				return Read((List<PersistentHingeJoint>)P_1, P_2);
			case 475:
				return Read((PrimitiveContract<PersistentHingeJoint2D[]>)P_1, P_2);
			case 476:
				return Read((List<PersistentHingeJoint2D>)P_1, P_2);
			case 477:
				return Read((PrimitiveContract<PersistentHorizontalLayoutGroup[]>)P_1, P_2);
			case 478:
				return Read((List<PersistentHorizontalLayoutGroup>)P_1, P_2);
			case 479:
				return Read((PrimitiveContract<PersistentHorizontalOrVerticalLayoutGroup[]>)P_1, P_2);
			case 480:
				return Read((List<PersistentHorizontalOrVerticalLayoutGroup>)P_1, P_2);
			case 481:
				return Read((PrimitiveContract<PersistentImage[]>)P_1, P_2);
			case 482:
				return Read((List<PersistentImage>)P_1, P_2);
			case 483:
				return Read((PrimitiveContract<PersistentJoint[]>)P_1, P_2);
			case 484:
				return Read((List<PersistentJoint>)P_1, P_2);
			case 485:
				return Read((PrimitiveContract<PersistentJoint2D[]>)P_1, P_2);
			case 486:
				return Read((List<PersistentJoint2D>)P_1, P_2);
			case 487:
				return Read((PrimitiveContract<PersistentLayoutElement[]>)P_1, P_2);
			case 488:
				return Read((List<PersistentLayoutElement>)P_1, P_2);
			case 489:
				return Read((PrimitiveContract<PersistentLayoutGroup[]>)P_1, P_2);
			case 490:
				return Read((List<PersistentLayoutGroup>)P_1, P_2);
			case 491:
				return Read((PrimitiveContract<PersistentLensFlare[]>)P_1, P_2);
			case 492:
				return Read((List<PersistentLensFlare>)P_1, P_2);
			case 493:
				return Read((PrimitiveContract<PersistentLight[]>)P_1, P_2);
			case 494:
				return Read((List<PersistentLight>)P_1, P_2);
			case 495:
				return Read((PrimitiveContract<PersistentLightmapSettings[]>)P_1, P_2);
			case 496:
				return Read((List<PersistentLightmapSettings>)P_1, P_2);
			case 497:
				return Read((PrimitiveContract<PersistentLightProbeGroup[]>)P_1, P_2);
			case 498:
				return Read((List<PersistentLightProbeGroup>)P_1, P_2);
			case 499:
				return Read((PrimitiveContract<PersistentLightProbeProxyVolume[]>)P_1, P_2);
			case 500:
				return Read((List<PersistentLightProbeProxyVolume>)P_1, P_2);
			case 501:
				return Read((PrimitiveContract<PersistentLightProbes[]>)P_1, P_2);
			case 502:
				return Read((List<PersistentLightProbes>)P_1, P_2);
			case 503:
				return Read((PrimitiveContract<PersistentLineRenderer[]>)P_1, P_2);
			case 504:
				return Read((List<PersistentLineRenderer>)P_1, P_2);
			case 505:
				return Read((PrimitiveContract<PersistentLODGroup[]>)P_1, P_2);
			case 506:
				return Read((List<PersistentLODGroup>)P_1, P_2);
			case 507:
				return Read((PrimitiveContract<PersistentMask[]>)P_1, P_2);
			case 508:
				return Read((List<PersistentMask>)P_1, P_2);
			case 509:
				return Read((PrimitiveContract<PersistentMeshCollider[]>)P_1, P_2);
			case 510:
				return Read((List<PersistentMeshCollider>)P_1, P_2);
			case 511:
				return Read((PrimitiveContract<PersistentMeshFilter[]>)P_1, P_2);
			}
			break;
		case 4:
			switch (P_0)
			{
			case 512:
				return Read((List<PersistentMeshFilter>)P_1, P_2);
			case 513:
				return Read((PrimitiveContract<PersistentMeshRenderer[]>)P_1, P_2);
			case 514:
				return Read((List<PersistentMeshRenderer>)P_1, P_2);
			case 515:
				return Read((PrimitiveContract<PersistentMonoBehaviour[]>)P_1, P_2);
			case 516:
				return Read((List<PersistentMonoBehaviour>)P_1, P_2);
			case 517:
				return Read((PrimitiveContract<PersistentMotion[]>)P_1, P_2);
			case 518:
				return Read((List<PersistentMotion>)P_1, P_2);
			case 519:
				return Read((PrimitiveContract<PersistentMovieTexture[]>)P_1, P_2);
			case 520:
				return Read((List<PersistentMovieTexture>)P_1, P_2);
			case 521:
				return Read((PrimitiveContract<PersistentNavMeshAgent[]>)P_1, P_2);
			case 522:
				return Read((List<PersistentNavMeshAgent>)P_1, P_2);
			case 523:
				return Read((PrimitiveContract<PersistentNavMeshData[]>)P_1, P_2);
			case 524:
				return Read((List<PersistentNavMeshData>)P_1, P_2);
			case 525:
				return Read((PrimitiveContract<PersistentNavMeshObstacle[]>)P_1, P_2);
			case 526:
				return Read((List<PersistentNavMeshObstacle>)P_1, P_2);
			case 527:
				return Read((PrimitiveContract<PersistentNetworkMatch[]>)P_1, P_2);
			case 528:
				return Read((List<PersistentNetworkMatch>)P_1, P_2);
			case 529:
				return Read((PrimitiveContract<PersistentNetworkView[]>)P_1, P_2);
			case 530:
				return Read((List<PersistentNetworkView>)P_1, P_2);
			case 531:
				return Read((PrimitiveContract<PersistentOcclusionArea[]>)P_1, P_2);
			case 532:
				return Read((List<PersistentOcclusionArea>)P_1, P_2);
			case 533:
				return Read((PrimitiveContract<PersistentOcclusionPortal[]>)P_1, P_2);
			case 534:
				return Read((List<PersistentOcclusionPortal>)P_1, P_2);
			case 535:
				return Read((PrimitiveContract<PersistentOffMeshLink[]>)P_1, P_2);
			case 536:
				return Read((List<PersistentOffMeshLink>)P_1, P_2);
			case 537:
				return Read((PrimitiveContract<PersistentOutline[]>)P_1, P_2);
			case 538:
				return Read((List<PersistentOutline>)P_1, P_2);
			case 539:
				return Read((PrimitiveContract<PersistentParticleSystemRenderer[]>)P_1, P_2);
			case 540:
				return Read((List<PersistentParticleSystemRenderer>)P_1, P_2);
			case 541:
				return Read((PrimitiveContract<PersistentPhysicMaterial[]>)P_1, P_2);
			case 542:
				return Read((List<PersistentPhysicMaterial>)P_1, P_2);
			case 543:
				return Read((PrimitiveContract<PersistentPhysics2DRaycaster[]>)P_1, P_2);
			case 544:
				return Read((List<PersistentPhysics2DRaycaster>)P_1, P_2);
			case 545:
				return Read((PrimitiveContract<PersistentPhysicsMaterial2D[]>)P_1, P_2);
			case 546:
				return Read((List<PersistentPhysicsMaterial2D>)P_1, P_2);
			case 547:
				return Read((PrimitiveContract<PersistentPhysicsRaycaster[]>)P_1, P_2);
			case 548:
				return Read((List<PersistentPhysicsRaycaster>)P_1, P_2);
			case 549:
				return Read((PrimitiveContract<PersistentPhysicsUpdateBehaviour2D[]>)P_1, P_2);
			case 550:
				return Read((List<PersistentPhysicsUpdateBehaviour2D>)P_1, P_2);
			case 551:
				return Read((PrimitiveContract<PersistentPlatformEffector2D[]>)P_1, P_2);
			case 552:
				return Read((List<PersistentPlatformEffector2D>)P_1, P_2);
			case 553:
				return Read((PrimitiveContract<PersistentPlayerConnection[]>)P_1, P_2);
			case 554:
				return Read((List<PersistentPlayerConnection>)P_1, P_2);
			case 555:
				return Read((PrimitiveContract<PersistentPointEffector2D[]>)P_1, P_2);
			case 556:
				return Read((List<PersistentPointEffector2D>)P_1, P_2);
			case 557:
				return Read((PrimitiveContract<PersistentPointerInputModule[]>)P_1, P_2);
			case 558:
				return Read((List<PersistentPointerInputModule>)P_1, P_2);
			case 559:
				return Read((PrimitiveContract<PersistentPolygonCollider2D[]>)P_1, P_2);
			case 560:
				return Read((List<PersistentPolygonCollider2D>)P_1, P_2);
			case 561:
				return Read((PrimitiveContract<PersistentPositionAsUV1[]>)P_1, P_2);
			case 562:
				return Read((List<PersistentPositionAsUV1>)P_1, P_2);
			case 563:
				return Read((PrimitiveContract<PersistentProceduralTexture[]>)P_1, P_2);
			case 564:
				return Read((List<PersistentProceduralTexture>)P_1, P_2);
			case 565:
				return Read((PrimitiveContract<PersistentProjector[]>)P_1, P_2);
			case 566:
				return Read((List<PersistentProjector>)P_1, P_2);
			case 567:
				return Read((PrimitiveContract<PersistentQualitySettings[]>)P_1, P_2);
			case 568:
				return Read((List<PersistentQualitySettings>)P_1, P_2);
			case 569:
				return Read((PrimitiveContract<PersistentRawImage[]>)P_1, P_2);
			case 570:
				return Read((List<PersistentRawImage>)P_1, P_2);
			case 571:
				return Read((PrimitiveContract<PersistentRectMask2D[]>)P_1, P_2);
			case 572:
				return Read((List<PersistentRectMask2D>)P_1, P_2);
			case 573:
				return Read((PrimitiveContract<PersistentRectTransform[]>)P_1, P_2);
			case 574:
				return Read((List<PersistentRectTransform>)P_1, P_2);
			case 575:
				return Read((PrimitiveContract<PersistentReflectionProbe[]>)P_1, P_2);
			case 576:
				return Read((List<PersistentReflectionProbe>)P_1, P_2);
			case 577:
				return Read((PrimitiveContract<PersistentRelativeJoint2D[]>)P_1, P_2);
			case 578:
				return Read((List<PersistentRelativeJoint2D>)P_1, P_2);
			case 579:
				return Read((PrimitiveContract<PersistentRenderer[]>)P_1, P_2);
			case 580:
				return Read((List<PersistentRenderer>)P_1, P_2);
			case 581:
				return Read((PrimitiveContract<PersistentRenderPipelineAsset[]>)P_1, P_2);
			case 582:
				return Read((List<PersistentRenderPipelineAsset>)P_1, P_2);
			case 583:
				return Read((PrimitiveContract<PersistentRenderSettings[]>)P_1, P_2);
			case 584:
				return Read((List<PersistentRenderSettings>)P_1, P_2);
			case 585:
				return Read((PrimitiveContract<PersistentRenderTexture[]>)P_1, P_2);
			case 586:
				return Read((List<PersistentRenderTexture>)P_1, P_2);
			case 587:
				return Read((PrimitiveContract<PersistentRigidbody[]>)P_1, P_2);
			case 588:
				return Read((List<PersistentRigidbody>)P_1, P_2);
			case 589:
				return Read((PrimitiveContract<PersistentRigidbody2D[]>)P_1, P_2);
			case 590:
				return Read((List<PersistentRigidbody2D>)P_1, P_2);
			case 591:
				return Read((PrimitiveContract<PersistentRuntimeAnimatorController[]>)P_1, P_2);
			case 592:
				return Read((List<PersistentRuntimeAnimatorController>)P_1, P_2);
			case 593:
				return Read((PrimitiveContract<PersistentScriptableObject[]>)P_1, P_2);
			case 594:
				return Read((List<PersistentScriptableObject>)P_1, P_2);
			case 595:
				return Read((PrimitiveContract<PersistentShader[]>)P_1, P_2);
			case 596:
				return Read((List<PersistentShader>)P_1, P_2);
			case 597:
				return Read((PrimitiveContract<PersistentShaderVariantCollection[]>)P_1, P_2);
			case 598:
				return Read((List<PersistentShaderVariantCollection>)P_1, P_2);
			case 599:
				return Read((PrimitiveContract<PersistentShadow[]>)P_1, P_2);
			case 600:
				return Read((List<PersistentShadow>)P_1, P_2);
			case 601:
				return Read((PrimitiveContract<PersistentSkinnedMeshRenderer[]>)P_1, P_2);
			case 602:
				return Read((List<PersistentSkinnedMeshRenderer>)P_1, P_2);
			case 603:
				return Read((PrimitiveContract<PersistentSkybox[]>)P_1, P_2);
			case 604:
				return Read((List<PersistentSkybox>)P_1, P_2);
			case 605:
				return Read((PrimitiveContract<PersistentSliderJoint2D[]>)P_1, P_2);
			case 606:
				return Read((List<PersistentSliderJoint2D>)P_1, P_2);
			case 607:
				return Read((PrimitiveContract<PersistentSortingGroup[]>)P_1, P_2);
			case 608:
				return Read((List<PersistentSortingGroup>)P_1, P_2);
			case 609:
				return Read((PrimitiveContract<PersistentSparseTexture[]>)P_1, P_2);
			case 610:
				return Read((List<PersistentSparseTexture>)P_1, P_2);
			case 611:
				return Read((PrimitiveContract<PersistentSphereCollider[]>)P_1, P_2);
			case 612:
				return Read((List<PersistentSphereCollider>)P_1, P_2);
			case 613:
				return Read((PersistentSplatPrototype)P_1, P_2);
			case 614:
				return Read((PrimitiveContract<PersistentSplatPrototype[]>)P_1, P_2);
			case 615:
				return Read((List<PersistentSplatPrototype>)P_1, P_2);
			case 616:
				return Read((PrimitiveContract<PersistentSpringJoint[]>)P_1, P_2);
			case 617:
				return Read((List<PersistentSpringJoint>)P_1, P_2);
			case 618:
				return Read((PrimitiveContract<PersistentSpringJoint2D[]>)P_1, P_2);
			case 619:
				return Read((List<PersistentSpringJoint2D>)P_1, P_2);
			case 620:
				return Read((PrimitiveContract<PersistentSprite[]>)P_1, P_2);
			case 621:
				return Read((List<PersistentSprite>)P_1, P_2);
			case 622:
				return Read((PrimitiveContract<PersistentSpriteRenderer[]>)P_1, P_2);
			case 623:
				return Read((List<PersistentSpriteRenderer>)P_1, P_2);
			case 624:
				return Read((PrimitiveContract<PersistentStandaloneInputModule[]>)P_1, P_2);
			case 625:
				return Read((List<PersistentStandaloneInputModule>)P_1, P_2);
			case 626:
				return Read((PrimitiveContract<PersistentStateMachineBehaviour[]>)P_1, P_2);
			case 627:
				return Read((List<PersistentStateMachineBehaviour>)P_1, P_2);
			case 628:
				return Read((PrimitiveContract<PersistentSurfaceEffector2D[]>)P_1, P_2);
			case 629:
				return Read((List<PersistentSurfaceEffector2D>)P_1, P_2);
			case 630:
				return Read((PrimitiveContract<PersistentTargetJoint2D[]>)P_1, P_2);
			case 631:
				return Read((List<PersistentTargetJoint2D>)P_1, P_2);
			case 632:
				return Read((PrimitiveContract<PersistentTerrain[]>)P_1, P_2);
			case 633:
				return Read((List<PersistentTerrain>)P_1, P_2);
			case 634:
				return Read((PrimitiveContract<PersistentTerrainCollider[]>)P_1, P_2);
			case 635:
				return Read((List<PersistentTerrainCollider>)P_1, P_2);
			case 636:
				return Read((PrimitiveContract<PersistentTerrainData[]>)P_1, P_2);
			case 637:
				return Read((List<PersistentTerrainData>)P_1, P_2);
			case 638:
				return Read((PrimitiveContract<PersistentText[]>)P_1, P_2);
			case 639:
				return Read((List<PersistentText>)P_1, P_2);
			}
			break;
		case 5:
			switch (P_0)
			{
			case 640:
				return Read((PrimitiveContract<PersistentTextAsset[]>)P_1, P_2);
			case 641:
				return Read((List<PersistentTextAsset>)P_1, P_2);
			case 642:
				return Read((PrimitiveContract<PersistentTextMesh[]>)P_1, P_2);
			case 643:
				return Read((List<PersistentTextMesh>)P_1, P_2);
			case 644:
				return Read((PrimitiveContract<PersistentTexture2DArray[]>)P_1, P_2);
			case 645:
				return Read((List<PersistentTexture2DArray>)P_1, P_2);
			case 646:
				return Read((PrimitiveContract<PersistentTexture3D[]>)P_1, P_2);
			case 647:
				return Read((List<PersistentTexture3D>)P_1, P_2);
			case 648:
				return Read((PrimitiveContract<PersistentToggle[]>)P_1, P_2);
			case 649:
				return Read((List<PersistentToggle>)P_1, P_2);
			case 650:
				return Read((PrimitiveContract<PersistentToggleGroup[]>)P_1, P_2);
			case 651:
				return Read((List<PersistentToggleGroup>)P_1, P_2);
			case 652:
				return Read((PrimitiveContract<PersistentTrailRenderer[]>)P_1, P_2);
			case 653:
				return Read((List<PersistentTrailRenderer>)P_1, P_2);
			case 654:
				return Read((PrimitiveContract<PersistentTree[]>)P_1, P_2);
			case 655:
				return Read((List<PersistentTree>)P_1, P_2);
			case 656:
				return Read((PersistentTreePrototype)P_1, P_2);
			case 657:
				return Read((PrimitiveContract<PersistentTreePrototype[]>)P_1, P_2);
			case 658:
				return Read((List<PersistentTreePrototype>)P_1, P_2);
			case 659:
				return Read((PrimitiveContract<PersistentUIBehaviour[]>)P_1, P_2);
			case 660:
				return Read((List<PersistentUIBehaviour>)P_1, P_2);
			case 661:
				return Read((PrimitiveContract<PersistentVerticalLayoutGroup[]>)P_1, P_2);
			case 662:
				return Read((List<PersistentVerticalLayoutGroup>)P_1, P_2);
			case 663:
				return Read((PrimitiveContract<PersistentVideoClip[]>)P_1, P_2);
			case 664:
				return Read((List<PersistentVideoClip>)P_1, P_2);
			case 665:
				return Read((PrimitiveContract<PersistentVideoPlayer[]>)P_1, P_2);
			case 666:
				return Read((List<PersistentVideoPlayer>)P_1, P_2);
			case 667:
				return Read((PrimitiveContract<PersistentWebCamTexture[]>)P_1, P_2);
			case 668:
				return Read((List<PersistentWebCamTexture>)P_1, P_2);
			case 669:
				return Read((PrimitiveContract<PersistentWheelCollider[]>)P_1, P_2);
			case 670:
				return Read((List<PersistentWheelCollider>)P_1, P_2);
			case 671:
				return Read((PrimitiveContract<PersistentWheelJoint2D[]>)P_1, P_2);
			case 672:
				return Read((List<PersistentWheelJoint2D>)P_1, P_2);
			case 673:
				return Read((PrimitiveContract<PersistentWindZone[]>)P_1, P_2);
			case 674:
				return Read((List<PersistentWindZone>)P_1, P_2);
			case 675:
				return Read((PrimitiveContract<PersistentWorldAnchor[]>)P_1, P_2);
			case 676:
				return Read((List<PersistentWorldAnchor>)P_1, P_2);
			case 677:
				return Read((GradientAlphaKeySurrogate)P_1, P_2);
			case 678:
				return Read((PrimitiveContract<GradientAlphaKeySurrogate[]>)P_1, P_2);
			case 679:
				return Read((List<GradientAlphaKeySurrogate>)P_1, P_2);
			case 680:
				return Read((GradientColorKeySurrogate)P_1, P_2);
			case 681:
				return Read((PrimitiveContract<GradientColorKeySurrogate[]>)P_1, P_2);
			case 682:
				return Read((List<GradientColorKeySurrogate>)P_1, P_2);
			case 683:
				return Read((LayerMaskSurrogate)P_1, P_2);
			case 684:
				return Read((PrimitiveContract<LayerMaskSurrogate[]>)P_1, P_2);
			case 685:
				return Read((List<LayerMaskSurrogate>)P_1, P_2);
			case 686:
				return Read((RectOffsetSurrogate)P_1, P_2);
			case 687:
				return Read((PrimitiveContract<RectOffsetSurrogate[]>)P_1, P_2);
			case 688:
				return Read((List<RectOffsetSurrogate>)P_1, P_2);
			case 689:
				return Read((AnimationTriggersSurrogate)P_1, P_2);
			case 690:
				return Read((PrimitiveContract<AnimationTriggersSurrogate[]>)P_1, P_2);
			case 691:
				return Read((List<AnimationTriggersSurrogate>)P_1, P_2);
			case 692:
				return Read((ColorBlockSurrogate)P_1, P_2);
			case 693:
				return Read((PrimitiveContract<ColorBlockSurrogate[]>)P_1, P_2);
			case 694:
				return Read((List<ColorBlockSurrogate>)P_1, P_2);
			case 695:
				return Read((NavMeshPathSurrogate)P_1, P_2);
			case 696:
				return Read((PrimitiveContract<NavMeshPathSurrogate[]>)P_1, P_2);
			case 697:
				return Read((List<NavMeshPathSurrogate>)P_1, P_2);
			case 698:
				return Read((ClothSkinningCoefficientSurrogate)P_1, P_2);
			case 699:
				return Read((PrimitiveContract<ClothSkinningCoefficientSurrogate[]>)P_1, P_2);
			case 700:
				return Read((List<ClothSkinningCoefficientSurrogate>)P_1, P_2);
			case 701:
				return Read((BoneWeightSurrogate)P_1, P_2);
			case 702:
				return Read((PrimitiveContract<BoneWeightSurrogate[]>)P_1, P_2);
			case 703:
				return Read((List<BoneWeightSurrogate>)P_1, P_2);
			case 704:
				return Read((TreeInstanceSurrogate)P_1, P_2);
			case 705:
				return Read((PrimitiveContract<TreeInstanceSurrogate[]>)P_1, P_2);
			case 706:
				return Read((List<TreeInstanceSurrogate>)P_1, P_2);
			case 707:
				return Read((CharacterInfoSurrogate)P_1, P_2);
			case 708:
				return Read((PrimitiveContract<CharacterInfoSurrogate[]>)P_1, P_2);
			case 709:
				return Read((List<CharacterInfoSurrogate>)P_1, P_2);
			case 710:
				return Read((Vector3Surrogate)P_1, P_2);
			case 711:
				return Read((PrimitiveContract<Vector3Surrogate[]>)P_1, P_2);
			case 712:
				return Read((List<Vector3Surrogate>)P_1, P_2);
			case 713:
				return Read((ColorSurrogate)P_1, P_2);
			case 714:
				return Read((PrimitiveContract<ColorSurrogate[]>)P_1, P_2);
			case 715:
				return Read((List<ColorSurrogate>)P_1, P_2);
			case 716:
				return Read((RectSurrogate)P_1, P_2);
			case 717:
				return Read((PrimitiveContract<RectSurrogate[]>)P_1, P_2);
			case 718:
				return Read((List<RectSurrogate>)P_1, P_2);
			case 719:
				return Read((Matrix4x4Surrogate)P_1, P_2);
			case 720:
				return Read((PrimitiveContract<Matrix4x4Surrogate[]>)P_1, P_2);
			case 721:
				return Read((List<Matrix4x4Surrogate>)P_1, P_2);
			case 722:
				return Read((SceneSurrogate)P_1, P_2);
			case 723:
				return Read((PrimitiveContract<SceneSurrogate[]>)P_1, P_2);
			case 724:
				return Read((List<SceneSurrogate>)P_1, P_2);
			case 725:
				return Read((BoundsSurrogate)P_1, P_2);
			case 726:
				return Read((PrimitiveContract<BoundsSurrogate[]>)P_1, P_2);
			case 727:
				return Read((List<BoundsSurrogate>)P_1, P_2);
			case 728:
				return Read((Vector4Surrogate)P_1, P_2);
			case 729:
				return Read((PrimitiveContract<Vector4Surrogate[]>)P_1, P_2);
			case 730:
				return Read((List<Vector4Surrogate>)P_1, P_2);
			case 731:
				return Read((NetworkViewIDSurrogate)P_1, P_2);
			case 732:
				return Read((PrimitiveContract<NetworkViewIDSurrogate[]>)P_1, P_2);
			case 733:
				return Read((List<NetworkViewIDSurrogate>)P_1, P_2);
			case 734:
				return Read((NetworkPlayerSurrogate)P_1, P_2);
			case 735:
				return Read((PrimitiveContract<NetworkPlayerSurrogate[]>)P_1, P_2);
			case 736:
				return Read((List<NetworkPlayerSurrogate>)P_1, P_2);
			case 737:
				return Read((Vector2Surrogate)P_1, P_2);
			case 738:
				return Read((PrimitiveContract<Vector2Surrogate[]>)P_1, P_2);
			case 739:
				return Read((List<Vector2Surrogate>)P_1, P_2);
			case 740:
				return Read((RenderBufferSurrogate)P_1, P_2);
			case 741:
				return Read((PrimitiveContract<RenderBufferSurrogate[]>)P_1, P_2);
			case 742:
				return Read((List<RenderBufferSurrogate>)P_1, P_2);
			case 743:
				return Read((QuaternionSurrogate)P_1, P_2);
			case 744:
				return Read((PrimitiveContract<QuaternionSurrogate[]>)P_1, P_2);
			case 745:
				return Read((List<QuaternionSurrogate>)P_1, P_2);
			case 746:
				return Read((JointMotorSurrogate)P_1, P_2);
			case 747:
				return Read((PrimitiveContract<JointMotorSurrogate[]>)P_1, P_2);
			case 748:
				return Read((List<JointMotorSurrogate>)P_1, P_2);
			case 749:
				return Read((JointLimitsSurrogate)P_1, P_2);
			case 750:
				return Read((PrimitiveContract<JointLimitsSurrogate[]>)P_1, P_2);
			case 751:
				return Read((List<JointLimitsSurrogate>)P_1, P_2);
			case 752:
				return Read((JointSpringSurrogate)P_1, P_2);
			case 753:
				return Read((PrimitiveContract<JointSpringSurrogate[]>)P_1, P_2);
			case 754:
				return Read((List<JointSpringSurrogate>)P_1, P_2);
			case 755:
				return Read((JointDriveSurrogate)P_1, P_2);
			case 756:
				return Read((PrimitiveContract<JointDriveSurrogate[]>)P_1, P_2);
			case 757:
				return Read((List<JointDriveSurrogate>)P_1, P_2);
			case 758:
				return Read((SoftJointLimitSpringSurrogate)P_1, P_2);
			case 759:
				return Read((PrimitiveContract<SoftJointLimitSpringSurrogate[]>)P_1, P_2);
			case 760:
				return Read((List<SoftJointLimitSpringSurrogate>)P_1, P_2);
			case 761:
				return Read((SoftJointLimitSurrogate)P_1, P_2);
			case 762:
				return Read((PrimitiveContract<SoftJointLimitSurrogate[]>)P_1, P_2);
			case 763:
				return Read((List<SoftJointLimitSurrogate>)P_1, P_2);
			case 764:
				return Read((JointMotor2DSurrogate)P_1, P_2);
			case 765:
				return Read((PrimitiveContract<JointMotor2DSurrogate[]>)P_1, P_2);
			case 766:
				return Read((List<JointMotor2DSurrogate>)P_1, P_2);
			case 767:
				return Read((JointAngleLimits2DSurrogate)P_1, P_2);
			}
			break;
		case 6:
			switch (P_0)
			{
			case 768:
				return Read((PrimitiveContract<JointAngleLimits2DSurrogate[]>)P_1, P_2);
			case 769:
				return Read((List<JointAngleLimits2DSurrogate>)P_1, P_2);
			case 770:
				return Read((JointTranslationLimits2DSurrogate)P_1, P_2);
			case 771:
				return Read((PrimitiveContract<JointTranslationLimits2DSurrogate[]>)P_1, P_2);
			case 772:
				return Read((List<JointTranslationLimits2DSurrogate>)P_1, P_2);
			case 773:
				return Read((JointSuspension2DSurrogate)P_1, P_2);
			case 774:
				return Read((PrimitiveContract<JointSuspension2DSurrogate[]>)P_1, P_2);
			case 775:
				return Read((List<JointSuspension2DSurrogate>)P_1, P_2);
			case 776:
				return Read((WheelFrictionCurveSurrogate)P_1, P_2);
			case 777:
				return Read((PrimitiveContract<WheelFrictionCurveSurrogate[]>)P_1, P_2);
			case 778:
				return Read((List<WheelFrictionCurveSurrogate>)P_1, P_2);
			case 779:
				return Read((OffMeshLinkDataSurrogate)P_1, P_2);
			case 780:
				return Read((PrimitiveContract<OffMeshLinkDataSurrogate[]>)P_1, P_2);
			case 781:
				return Read((List<OffMeshLinkDataSurrogate>)P_1, P_2);
			case 782:
				return Read((PlayableGraphSurrogate)P_1, P_2);
			case 783:
				return Read((PrimitiveContract<PlayableGraphSurrogate[]>)P_1, P_2);
			case 784:
				return Read((List<PlayableGraphSurrogate>)P_1, P_2);
			case 785:
				return Read((Color32Surrogate)P_1, P_2);
			case 786:
				return Read((PrimitiveContract<Color32Surrogate[]>)P_1, P_2);
			case 787:
				return Read((List<Color32Surrogate>)P_1, P_2);
			case 788:
				return Read((PersistentDescriptor)P_1, P_2);
			case 789:
				return Read((PrimitiveContract<PersistentDescriptor[]>)P_1, P_2);
			case 790:
				return Read((List<PersistentDescriptor>)P_1, P_2);
			case 791:
				return Read((PrimitiveContract<PersistentCollisionModule[]>)P_1, P_2);
			case 792:
				return Read((List<PersistentCollisionModule>)P_1, P_2);
			case 793:
				return Read((PrimitiveContract<PersistentEmissionModule[]>)P_1, P_2);
			case 794:
				return Read((List<PersistentEmissionModule>)P_1, P_2);
			case 795:
				return Read((PrimitiveContract<PersistentParticleSystem[]>)P_1, P_2);
			case 796:
				return Read((List<PersistentParticleSystem>)P_1, P_2);
			case 797:
				return Read((PrimitiveContract<PersistentTriggerModule[]>)P_1, P_2);
			case 798:
				return Read((List<PersistentTriggerModule>)P_1, P_2);
			case 799:
				return Read((PrimitiveContract<PersistentCloth[]>)P_1, P_2);
			case 800:
				return Read((List<PersistentCloth>)P_1, P_2);
			case 801:
				return Read((PrimitiveContract<PersistentMaterial[]>)P_1, P_2);
			case 802:
				return Read((List<PersistentMaterial>)P_1, P_2);
			case 803:
				return Read((PrimitiveContract<PersistentMesh[]>)P_1, P_2);
			case 804:
				return Read((List<PersistentMesh>)P_1, P_2);
			case 805:
				return Read((PrimitiveContract<PersistentObject[]>)P_1, P_2);
			case 806:
				return Read((List<PersistentObject>)P_1, P_2);
			case 807:
				return Read((PersistentArgumentCache)P_1, P_2);
			case 808:
				return Read((PrimitiveContract<PersistentArgumentCache[]>)P_1, P_2);
			case 809:
				return Read((List<PersistentArgumentCache>)P_1, P_2);
			case 810:
				return Read((PersistentPersistentCall)P_1, P_2);
			case 811:
				return Read((PrimitiveContract<PersistentPersistentCall[]>)P_1, P_2);
			case 812:
				return Read((List<PersistentPersistentCall>)P_1, P_2);
			case 813:
				return Read((PersistentUnityEventBase)P_1, P_2);
			case 814:
				return Read((PrimitiveContract<PersistentUnityEventBase[]>)P_1, P_2);
			case 815:
				return Read((List<PersistentUnityEventBase>)P_1, P_2);
			case 816:
				return Read((IntArray)P_1, P_2);
			case 817:
				return Read((PrimitiveContract<IntArray[]>)P_1, P_2);
			case 818:
				return Read((List<IntArray>)P_1, P_2);
			case 819:
				return Read((PrimitiveContract<PrimitiveContract[]>)P_1, P_2);
			case 820:
				return Read((List<PrimitiveContract>)P_1, P_2);
			case 821:
				return Read((DataContract)P_1, P_2);
			case 822:
				return Read((PrimitiveContract<DataContract[]>)P_1, P_2);
			case 823:
				return Read((List<DataContract>)P_1, P_2);
			case 824:
				return Read((PrimitiveContract<PersistentScript[]>)P_1, P_2);
			case 825:
				return Read((List<PersistentScript>)P_1, P_2);
			case 826:
				return Read((PrimitiveContract<PersistentTexture[]>)P_1, P_2);
			case 827:
				return Read((List<PersistentTexture>)P_1, P_2);
			case 828:
				return Read((PrimitiveContract<PersistentTexture2D[]>)P_1, P_2);
			case 829:
				return Read((List<PersistentTexture2D>)P_1, P_2);
			case 830:
				return Read((PrimitiveContract<PersistentTransform[]>)P_1, P_2);
			case 831:
				return Read((List<PersistentTransform>)P_1, P_2);
			case 832:
				return Read((PrimitiveContract<PersistentButton[]>)P_1, P_2);
			case 833:
				return Read((List<PersistentButton>)P_1, P_2);
			case 834:
				return Read((PrimitiveContract<PersistentDropdown[]>)P_1, P_2);
			case 835:
				return Read((List<PersistentDropdown>)P_1, P_2);
			case 836:
				return Read((PrimitiveContract<PersistentInputField[]>)P_1, P_2);
			case 837:
				return Read((List<PersistentInputField>)P_1, P_2);
			case 838:
				return Read((PrimitiveContract<PersistentMaskableGraphic[]>)P_1, P_2);
			case 839:
				return Read((List<PersistentMaskableGraphic>)P_1, P_2);
			case 840:
				return Read((PrimitiveContract<PersistentNavigation[]>)P_1, P_2);
			case 841:
				return Read((List<PersistentNavigation>)P_1, P_2);
			case 842:
				return Read((PrimitiveContract<PersistentOptionData[]>)P_1, P_2);
			case 843:
				return Read((List<PersistentOptionData>)P_1, P_2);
			case 844:
				return Read((PrimitiveContract<PersistentScrollbar[]>)P_1, P_2);
			case 845:
				return Read((List<PersistentScrollbar>)P_1, P_2);
			case 846:
				return Read((PrimitiveContract<PersistentScrollRect[]>)P_1, P_2);
			case 847:
				return Read((List<PersistentScrollRect>)P_1, P_2);
			case 848:
				return Read((PrimitiveContract<PersistentSelectable[]>)P_1, P_2);
			case 849:
				return Read((List<PersistentSelectable>)P_1, P_2);
			case 850:
				return Read((PrimitiveContract<PersistentSlider[]>)P_1, P_2);
			case 851:
				return Read((List<PersistentSlider>)P_1, P_2);
			case 852:
				return Read((PrimitiveContract<PersistentSpriteState[]>)P_1, P_2);
			case 853:
				return Read((List<PersistentSpriteState>)P_1, P_2);
			case 854:
				return Read((PersistentScene)P_1, P_2);
			case 855:
				return Read((PrimitiveContract<PersistentScene[]>)P_1, P_2);
			case 856:
				return Read((List<PersistentScene>)P_1, P_2);
			case 857:
				return Read((NilContainer)P_1, P_2);
			case 858:
				return Read((PrimitiveContract<NilContainer[]>)P_1, P_2);
			case 859:
				return Read((List<NilContainer>)P_1, P_2);
			case 860:
				return Read((ProjectItemMeta)P_1, P_2);
			case 861:
				return Read((PrimitiveContract<ProjectItemMeta[]>)P_1, P_2);
			case 862:
				return Read((List<ProjectItemMeta>)P_1, P_2);
			case 863:
				return Read((ProjectItemData)P_1, P_2);
			case 864:
				return Read((PrimitiveContract<ProjectItemData[]>)P_1, P_2);
			case 865:
				return Read((List<ProjectItemData>)P_1, P_2);
			case 866:
				return Read((ProjectMeta)P_1, P_2);
			case 867:
				return Read((PrimitiveContract<ProjectMeta[]>)P_1, P_2);
			case 868:
				return Read((List<ProjectMeta>)P_1, P_2);
			case 869:
				return Read((ProjectData)P_1, P_2);
			case 870:
				return Read((PrimitiveContract<ProjectData[]>)P_1, P_2);
			case 871:
				return Read((List<ProjectData>)P_1, P_2);
			case 872:
				return Read((AssetBundleDescriptor)P_1, P_2);
			case 873:
				return Read((PrimitiveContract<AssetBundleDescriptor[]>)P_1, P_2);
			case 874:
				return Read((List<AssetBundleDescriptor>)P_1, P_2);
			case 875:
				return Read((ProjectItem)P_1, P_2);
			case 876:
				return Read((PrimitiveContract<ProjectItem[]>)P_1, P_2);
			case 877:
				return Read((List<ProjectItem>)P_1, P_2);
			case 878:
				return Read((List<bool>)P_1, P_2);
			case 879:
				return Read((List<char>)P_1, P_2);
			case 880:
				return Read((List<byte>)P_1, P_2);
			case 881:
				return Read((List<short>)P_1, P_2);
			case 882:
				return Read((List<int>)P_1, P_2);
			case 883:
				return Read((List<long>)P_1, P_2);
			case 884:
				return Read((List<ushort>)P_1, P_2);
			case 885:
				return Read((List<uint>)P_1, P_2);
			case 886:
				return Read((List<ulong>)P_1, P_2);
			case 887:
				return Read((List<string>)P_1, P_2);
			case 888:
				return Read((List<float>)P_1, P_2);
			case 889:
				return Read((List<double>)P_1, P_2);
			case 890:
				return Read((List<decimal>)P_1, P_2);
			case 891:
				return _891(P_1, P_2);
			case 892:
				return Read((PrimitiveContract<GradientAlphaKey[]>)P_1, P_2);
			case 893:
				return Read((List<GradientAlphaKey>)P_1, P_2);
			case 894:
				return _894(P_1, P_2);
			case 895:
				return Read((PrimitiveContract<GradientColorKey[]>)P_1, P_2);
			}
			break;
		case 7:
			switch (P_0)
			{
			case 896:
				return Read((List<GradientColorKey>)P_1, P_2);
			case 897:
				return _897(P_1, P_2);
			case 898:
				return Read((PrimitiveContract<LayerMask[]>)P_1, P_2);
			case 899:
				return Read((List<LayerMask>)P_1, P_2);
			case 900:
				return Read((RectOffset)P_1, P_2);
			case 901:
				return Read((PrimitiveContract<RectOffset[]>)P_1, P_2);
			case 902:
				return Read((List<RectOffset>)P_1, P_2);
			case 903:
				return Read((AnimationTriggers)P_1, P_2);
			case 904:
				return Read((PrimitiveContract<AnimationTriggers[]>)P_1, P_2);
			case 905:
				return Read((List<AnimationTriggers>)P_1, P_2);
			case 906:
				return _906(P_1, P_2);
			case 907:
				return Read((PrimitiveContract<ColorBlock[]>)P_1, P_2);
			case 908:
				return Read((List<ColorBlock>)P_1, P_2);
			case 909:
				return Read((NavMeshPath)P_1, P_2);
			case 910:
				return Read((PrimitiveContract<NavMeshPath[]>)P_1, P_2);
			case 911:
				return Read((List<NavMeshPath>)P_1, P_2);
			case 912:
				return _912(P_1, P_2);
			case 913:
				return Read((PrimitiveContract<ClothSkinningCoefficient[]>)P_1, P_2);
			case 914:
				return Read((List<ClothSkinningCoefficient>)P_1, P_2);
			case 915:
				return _915(P_1, P_2);
			case 916:
				return Read((PrimitiveContract<BoneWeight[]>)P_1, P_2);
			case 917:
				return Read((List<BoneWeight>)P_1, P_2);
			case 918:
				return _918(P_1, P_2);
			case 919:
				return Read((PrimitiveContract<TreeInstance[]>)P_1, P_2);
			case 920:
				return Read((List<TreeInstance>)P_1, P_2);
			case 921:
				return _921(P_1, P_2);
			case 922:
				return Read((PrimitiveContract<CharacterInfo[]>)P_1, P_2);
			case 923:
				return Read((List<CharacterInfo>)P_1, P_2);
			case 924:
				return _924(P_1, P_2);
			case 925:
				return Read((List<Vector3>)P_1, P_2);
			case 926:
				return _926(P_1, P_2);
			case 927:
				return Read((List<Color>)P_1, P_2);
			case 928:
				return _928(P_1, P_2);
			case 929:
				return Read((PrimitiveContract<Rect[]>)P_1, P_2);
			case 930:
				return Read((List<Rect>)P_1, P_2);
			case 931:
				return _931(P_1, P_2);
			case 932:
				return Read((PrimitiveContract<Matrix4x4[]>)P_1, P_2);
			case 933:
				return Read((List<Matrix4x4>)P_1, P_2);
			case 934:
				return _934(P_1, P_2);
			case 935:
				return Read((PrimitiveContract<Scene[]>)P_1, P_2);
			case 936:
				return Read((List<Scene>)P_1, P_2);
			case 937:
				return _937(P_1, P_2);
			case 938:
				return Read((PrimitiveContract<Bounds[]>)P_1, P_2);
			case 939:
				return Read((List<Bounds>)P_1, P_2);
			case 940:
				return _940(P_1, P_2);
			case 941:
				return Read((List<Vector4>)P_1, P_2);
			case 942:
				return _942(P_1, P_2);
			case 943:
				return Read((PrimitiveContract<Vector2[]>)P_1, P_2);
			case 944:
				return Read((List<Vector2>)P_1, P_2);
			case 945:
				return _945(P_1, P_2);
			case 946:
				return Read((PrimitiveContract<RenderBuffer[]>)P_1, P_2);
			case 947:
				return Read((List<RenderBuffer>)P_1, P_2);
			case 948:
				return _948(P_1, P_2);
			case 949:
				return Read((PrimitiveContract<Quaternion[]>)P_1, P_2);
			case 950:
				return Read((List<Quaternion>)P_1, P_2);
			case 951:
				return _951(P_1, P_2);
			case 952:
				return Read((PrimitiveContract<JointMotor[]>)P_1, P_2);
			case 953:
				return Read((List<JointMotor>)P_1, P_2);
			case 954:
				return _954(P_1, P_2);
			case 955:
				return Read((PrimitiveContract<JointLimits[]>)P_1, P_2);
			case 956:
				return Read((List<JointLimits>)P_1, P_2);
			case 957:
				return _957(P_1, P_2);
			case 958:
				return Read((PrimitiveContract<JointSpring[]>)P_1, P_2);
			case 959:
				return Read((List<JointSpring>)P_1, P_2);
			case 960:
				return _960(P_1, P_2);
			case 961:
				return Read((PrimitiveContract<JointDrive[]>)P_1, P_2);
			case 962:
				return Read((List<JointDrive>)P_1, P_2);
			case 963:
				return _963(P_1, P_2);
			case 964:
				return Read((PrimitiveContract<SoftJointLimitSpring[]>)P_1, P_2);
			case 965:
				return Read((List<SoftJointLimitSpring>)P_1, P_2);
			case 966:
				return _966(P_1, P_2);
			case 967:
				return Read((PrimitiveContract<SoftJointLimit[]>)P_1, P_2);
			case 968:
				return Read((List<SoftJointLimit>)P_1, P_2);
			case 969:
				return _969(P_1, P_2);
			case 970:
				return Read((PrimitiveContract<JointMotor2D[]>)P_1, P_2);
			case 971:
				return Read((List<JointMotor2D>)P_1, P_2);
			case 972:
				return _972(P_1, P_2);
			case 973:
				return Read((PrimitiveContract<JointAngleLimits2D[]>)P_1, P_2);
			case 974:
				return Read((List<JointAngleLimits2D>)P_1, P_2);
			case 975:
				return _975(P_1, P_2);
			case 976:
				return Read((PrimitiveContract<JointTranslationLimits2D[]>)P_1, P_2);
			case 977:
				return Read((List<JointTranslationLimits2D>)P_1, P_2);
			case 978:
				return _978(P_1, P_2);
			case 979:
				return Read((PrimitiveContract<JointSuspension2D[]>)P_1, P_2);
			case 980:
				return Read((List<JointSuspension2D>)P_1, P_2);
			case 981:
				return _981(P_1, P_2);
			case 982:
				return Read((PrimitiveContract<WheelFrictionCurve[]>)P_1, P_2);
			case 983:
				return Read((List<WheelFrictionCurve>)P_1, P_2);
			case 984:
				return _984(P_1, P_2);
			case 985:
				return Read((PrimitiveContract<OffMeshLinkData[]>)P_1, P_2);
			case 986:
				return Read((List<OffMeshLinkData>)P_1, P_2);
			case 987:
				return _987(P_1, P_2);
			case 988:
				return Read((PrimitiveContract<PlayableGraph[]>)P_1, P_2);
			case 989:
				return Read((List<PlayableGraph>)P_1, P_2);
			case 990:
				return _990(P_1, P_2);
			case 991:
				return Read((PrimitiveContract<Color32[]>)P_1, P_2);
			case 992:
				return Read((List<Color32>)P_1, P_2);
			case 993:
				return _993(P_1, P_2);
			case 994:
				return _994(P_1, P_2);
			case 995:
				return _995(P_1, P_2);
			case 996:
				return _996(P_1, P_2);
			case 997:
				return _997(P_1, P_2);
			case 998:
				return _998(P_1, P_2);
			case 999:
				return _999(P_1, P_2);
			case 1000:
				return _1000(P_1, P_2);
			case 1001:
				return _1001(P_1, P_2);
			case 1002:
				return _1002(P_1, P_2);
			case 1003:
				return _1003(P_1, P_2);
			case 1004:
				return _1004(P_1, P_2);
			case 1005:
				return _1005(P_1, P_2);
			case 1006:
				return _1006(P_1, P_2);
			case 1007:
				return _1007(P_1, P_2);
			case 1008:
				return _1008(P_1, P_2);
			case 1009:
				return _1009(P_1, P_2);
			case 1010:
				return _1010(P_1, P_2);
			case 1011:
				return _1011(P_1, P_2);
			case 1012:
				return _1012(P_1, P_2);
			case 1013:
				return _1013(P_1, P_2);
			case 1014:
				return _1014(P_1, P_2);
			}
			break;
		}
		return null;
	}

	static object _891(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((GradientAlphaKey)P_0, P_1);
		}
		return Read(default(GradientAlphaKey), P_1);
	}

	static object _894(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((GradientColorKey)P_0, P_1);
		}
		return Read(default(GradientColorKey), P_1);
	}

	static object _897(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((LayerMask)P_0, P_1);
		}
		return Read(default(LayerMask), P_1);
	}

	static object _906(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((ColorBlock)P_0, P_1);
		}
		return Read(default(ColorBlock), P_1);
	}

	static object _912(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((ClothSkinningCoefficient)P_0, P_1);
		}
		return Read(default(ClothSkinningCoefficient), P_1);
	}

	static object _915(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((BoneWeight)P_0, P_1);
		}
		return Read(default(BoneWeight), P_1);
	}

	static object _918(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((TreeInstance)P_0, P_1);
		}
		return Read(default(TreeInstance), P_1);
	}

	static object _921(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((CharacterInfo)P_0, P_1);
		}
		return Read(default(CharacterInfo), P_1);
	}

	static object _924(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Vector3)P_0, P_1);
		}
		return Read(default(Vector3), P_1);
	}

	static object _926(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Color)P_0, P_1);
		}
		return Read(default(Color), P_1);
	}

	static object _928(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Rect)P_0, P_1);
		}
		return Read(default(Rect), P_1);
	}

	static object _931(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Matrix4x4)P_0, P_1);
		}
		return Read(default(Matrix4x4), P_1);
	}

	static object _934(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Scene)P_0, P_1);
		}
		return Read(default(Scene), P_1);
	}

	static object _937(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Bounds)P_0, P_1);
		}
		return Read(default(Bounds), P_1);
	}

	static object _940(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Vector4)P_0, P_1);
		}
		return Read(default(Vector4), P_1);
	}

	static object _942(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Vector2)P_0, P_1);
		}
		return Read(default(Vector2), P_1);
	}

	static object _945(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((RenderBuffer)P_0, P_1);
		}
		return Read(default(RenderBuffer), P_1);
	}

	static object _948(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Quaternion)P_0, P_1);
		}
		return Read(default(Quaternion), P_1);
	}

	static object _951(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((JointMotor)P_0, P_1);
		}
		return Read(default(JointMotor), P_1);
	}

	static object _954(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((JointLimits)P_0, P_1);
		}
		return Read(default(JointLimits), P_1);
	}

	static object _957(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((JointSpring)P_0, P_1);
		}
		return Read(default(JointSpring), P_1);
	}

	static object _960(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((JointDrive)P_0, P_1);
		}
		return Read(default(JointDrive), P_1);
	}

	static object _963(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((SoftJointLimitSpring)P_0, P_1);
		}
		return Read(default(SoftJointLimitSpring), P_1);
	}

	static object _966(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((SoftJointLimit)P_0, P_1);
		}
		return Read(default(SoftJointLimit), P_1);
	}

	static object _969(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((JointMotor2D)P_0, P_1);
		}
		return Read(default(JointMotor2D), P_1);
	}

	static object _972(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((JointAngleLimits2D)P_0, P_1);
		}
		return Read(default(JointAngleLimits2D), P_1);
	}

	static object _975(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((JointTranslationLimits2D)P_0, P_1);
		}
		return Read(default(JointTranslationLimits2D), P_1);
	}

	static object _978(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((JointSuspension2D)P_0, P_1);
		}
		return Read(default(JointSuspension2D), P_1);
	}

	static object _981(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((WheelFrictionCurve)P_0, P_1);
		}
		return Read(default(WheelFrictionCurve), P_1);
	}

	static object _984(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((OffMeshLinkData)P_0, P_1);
		}
		return Read(default(OffMeshLinkData), P_1);
	}

	static object _987(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((PlayableGraph)P_0, P_1);
		}
		return Read(default(PlayableGraph), P_1);
	}

	static object _990(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Color32)P_0, P_1);
		}
		return Read(default(Color32), P_1);
	}

	static object _993(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((ParticleSystemCollisionMode)P_0, P_1);
		}
		return Read(default(ParticleSystemCollisionMode), P_1);
	}

	static object _994(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((ParticleSystemCollisionQuality)P_0, P_1);
		}
		return Read(default(ParticleSystemCollisionQuality), P_1);
	}

	static object _995(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((ParticleSystemCollisionType)P_0, P_1);
		}
		return Read(default(ParticleSystemCollisionType), P_1);
	}

	static object _996(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((ParticleSystemOverlapAction)P_0, P_1);
		}
		return Read(default(ParticleSystemOverlapAction), P_1);
	}

	static object _997(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((ScrollRect.ScrollbarVisibility)P_0, P_1);
		}
		return Read(default(ScrollRect.ScrollbarVisibility), P_1);
	}

	static object _998(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((ScrollRect.MovementType)P_0, P_1);
		}
		return Read(default(ScrollRect.MovementType), P_1);
	}

	static object _999(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Selectable.Transition)P_0, P_1);
		}
		return Read(default(Selectable.Transition), P_1);
	}

	static object _1000(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((InputField.CharacterValidation)P_0, P_1);
		}
		return Read(default(InputField.CharacterValidation), P_1);
	}

	static object _1001(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((InputField.ContentType)P_0, P_1);
		}
		return Read(default(InputField.ContentType), P_1);
	}

	static object _1002(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((InputField.InputType)P_0, P_1);
		}
		return Read(default(InputField.InputType), P_1);
	}

	static object _1003(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((TouchScreenKeyboardType)P_0, P_1);
		}
		return Read(default(TouchScreenKeyboardType), P_1);
	}

	static object _1004(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((InputField.LineType)P_0, P_1);
		}
		return Read(default(InputField.LineType), P_1);
	}

	static object _1005(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Scrollbar.Direction)P_0, P_1);
		}
		return Read(default(Scrollbar.Direction), P_1);
	}

	static object _1006(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Slider.Direction)P_0, P_1);
		}
		return Read(default(Slider.Direction), P_1);
	}

	static object _1007(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((RTShaderPropertyType)P_0, P_1);
		}
		return Read(default(RTShaderPropertyType), P_1);
	}

	static object _1008(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((TextureDimension)P_0, P_1);
		}
		return Read(default(TextureDimension), P_1);
	}

	static object _1009(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((FilterMode)P_0, P_1);
		}
		return Read(default(FilterMode), P_1);
	}

	static object _1010(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((TextureWrapMode)P_0, P_1);
		}
		return Read(default(TextureWrapMode), P_1);
	}

	static object _1011(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((KeyValuePair<string, DataContract>)P_0, P_1);
		}
		return Read(default(KeyValuePair<string, DataContract>), P_1);
	}

	static object _1012(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((Navigation.Mode)P_0, P_1);
		}
		return Read(default(Navigation.Mode), P_1);
	}

	static object _1013(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((UnityEventCallState)P_0, P_1);
		}
		return Read(default(UnityEventCallState), P_1);
	}

	static object _1014(object P_0, ProtoReader P_1)
	{
		if (P_0 != null)
		{
			return Read((PersistentListenerMode)P_0, P_1);
		}
		return Read(default(PersistentListenerMode), P_1);
	}
}
