using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using MVR.FileManagement;
using MVR.FileManagementSecure;
using UnityEngine;
using UnityEngine.UI;

public class DAZCharacterTextureControl : JSONStorable
{
	public enum Region
	{
		Face,
		Torso,
		Limbs,
		Genitals
	}

	public enum TextureType
	{
		Diffuse,
		Specular,
		Gloss,
		Normal,
		Detail,
		Decal
	}

	protected class CharacterQueuedImage : ImageLoaderThreaded.QueuedImage
	{
		public Region region;

		public TextureType textureType;
	}

	public int[] faceMaterialNums;

	public int[] torsoMaterialNums;

	public int[] limbMaterialNums;

	public int[] genitalMaterialNums;

	public Text uvLabel;

	public Text uvLabelAlt;

	public string uvSetName = "Base";

	public MeshRenderer debugRenderer;

	protected Dictionary<Material, Texture2D> origDiffuseTextures;

	protected Dictionary<Material, Texture2D> origSpecularTextures;

	protected Dictionary<Material, Texture2D> origGlossTextures;

	protected Dictionary<Material, Texture2D> origNormalTextures;

	protected Dictionary<Material, Texture2D> origDetailTextures;

	protected Dictionary<Material, Texture2D> origDecalTextures;

	protected Dictionary<Texture2D, int> textureUseCount;

	protected JSONStorableUrl faceDiffuseUrlJSON;

	protected JSONStorableUrl torsoDiffuseUrlJSON;

	protected JSONStorableUrl limbsDiffuseUrlJSON;

	protected JSONStorableUrl genitalsDiffuseUrlJSON;

	protected JSONStorableUrl faceSpecularUrlJSON;

	protected JSONStorableUrl torsoSpecularUrlJSON;

	protected JSONStorableUrl limbsSpecularUrlJSON;

	protected JSONStorableUrl genitalsSpecularUrlJSON;

	protected JSONStorableUrl faceGlossUrlJSON;

	protected JSONStorableUrl torsoGlossUrlJSON;

	protected JSONStorableUrl limbsGlossUrlJSON;

	protected JSONStorableUrl genitalsGlossUrlJSON;

	protected JSONStorableUrl faceNormalUrlJSON;

	protected JSONStorableUrl torsoNormalUrlJSON;

	protected JSONStorableUrl limbsNormalUrlJSON;

	protected JSONStorableUrl genitalsNormalUrlJSON;

	protected JSONStorableUrl faceDetailUrlJSON;

	protected JSONStorableUrl torsoDetailUrlJSON;

	protected JSONStorableUrl limbsDetailUrlJSON;

	protected JSONStorableUrl genitalsDetailUrlJSON;

	protected JSONStorableUrl faceDecalUrlJSON;

	protected JSONStorableUrl torsoDecalUrlJSON;

	protected JSONStorableUrl limbsDecalUrlJSON;

	protected JSONStorableUrl genitalsDecalUrlJSON;

	protected Texture2D lastGeneratedDiffuseGenTexture;

	protected Texture2D lastGeneratedSpecularGenTexture;

	protected Texture2D lastGeneratedGlossGenTexture;

	protected Texture2D lastGeneratedNormalGenTexture;

	public Texture2D genitalBlendMaskTexture;

	protected JSONStorableBool autoBlendGenitalTexturesJSON;

	protected JSONStorableBool autoBlendGenitalSpecGlossNormalTexturesJSON;

	protected Button dumpAutoGeneratedGenitalTextureButton;

	protected JSONStorableFloat autoBlendGenitalLightenDarkenJSON;

	protected JSONStorableFloat autoBlendGenitalHueOffsetJSON;

	protected JSONStorableFloat autoBlendGenitalSaturationOffsetJSON;

	protected Button autoBlendGenitalDiffuseTextureButton;

	public Button directoryBrowseButton;

	public Button directoryBrowseButtonAlt;

	protected string _lastDir;

	public bool hasFaceDiffuseTextureSet
	{
		get
		{
			if (faceDiffuseUrlJSON == null || faceDiffuseUrlJSON.val == null || faceDiffuseUrlJSON.val == string.Empty)
			{
				return false;
			}
			return true;
		}
	}

	public bool hasFaceTextureSet
	{
		get
		{
			if (faceDiffuseUrlJSON != null && faceDiffuseUrlJSON.val != null && faceDiffuseUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (faceSpecularUrlJSON != null && faceSpecularUrlJSON.val != null && faceSpecularUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (faceGlossUrlJSON != null && faceGlossUrlJSON.val != null && faceGlossUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (faceNormalUrlJSON != null && faceNormalUrlJSON.val != null && faceNormalUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (faceDetailUrlJSON != null && faceDetailUrlJSON.val != null && faceDetailUrlJSON.val != string.Empty)
			{
				return true;
			}
			return false;
		}
	}

	public bool hasTorsoDiffuseTextureSet
	{
		get
		{
			if (torsoDiffuseUrlJSON == null || torsoDiffuseUrlJSON.val == null || torsoDiffuseUrlJSON.val == string.Empty)
			{
				return false;
			}
			return true;
		}
	}

	public bool hasTorsoTextureSet
	{
		get
		{
			if (torsoDiffuseUrlJSON != null && torsoDiffuseUrlJSON.val != null && torsoDiffuseUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (torsoSpecularUrlJSON != null && torsoSpecularUrlJSON.val != null && torsoSpecularUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (torsoGlossUrlJSON != null && torsoGlossUrlJSON.val != null && torsoGlossUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (torsoNormalUrlJSON != null && torsoNormalUrlJSON.val != null && torsoNormalUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (torsoDetailUrlJSON != null && torsoDetailUrlJSON.val != null && torsoDetailUrlJSON.val != string.Empty)
			{
				return true;
			}
			return false;
		}
	}

	public bool hasLimbsDiffuseTextureSet
	{
		get
		{
			if (limbsDiffuseUrlJSON == null || limbsDiffuseUrlJSON.val == null || limbsDiffuseUrlJSON.val == string.Empty)
			{
				return false;
			}
			return true;
		}
	}

	public bool hasLimbsTextureSet
	{
		get
		{
			if (limbsDiffuseUrlJSON != null && limbsDiffuseUrlJSON.val != null && limbsDiffuseUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (limbsSpecularUrlJSON != null && limbsSpecularUrlJSON.val != null && limbsSpecularUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (limbsGlossUrlJSON != null && limbsGlossUrlJSON.val != null && limbsGlossUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (limbsNormalUrlJSON != null && limbsNormalUrlJSON.val != null && limbsNormalUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (limbsDetailUrlJSON != null && limbsDetailUrlJSON.val != null && limbsDetailUrlJSON.val != string.Empty)
			{
				return true;
			}
			return false;
		}
	}

	public bool hasGenitalsDiffuseTextureSet
	{
		get
		{
			if (genitalsDiffuseUrlJSON == null || genitalsDiffuseUrlJSON.val == null || genitalsDiffuseUrlJSON.val == string.Empty)
			{
				return false;
			}
			return true;
		}
	}

	public bool hasGenitalsTextureSet
	{
		get
		{
			if (genitalsDiffuseUrlJSON != null && genitalsDiffuseUrlJSON.val != null && genitalsDiffuseUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (genitalsSpecularUrlJSON != null && genitalsSpecularUrlJSON.val != null && genitalsSpecularUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (genitalsGlossUrlJSON != null && genitalsGlossUrlJSON.val != null && genitalsGlossUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (genitalsNormalUrlJSON != null && genitalsNormalUrlJSON.val != null && genitalsNormalUrlJSON.val != string.Empty)
			{
				return true;
			}
			if (genitalsDetailUrlJSON != null && genitalsDetailUrlJSON.val != null && genitalsDetailUrlJSON.val != string.Empty)
			{
				return true;
			}
			return false;
		}
	}

	public override void PostRestore(bool restorePhysical, bool restoreAppearance)
	{
		if (restoreAppearance)
		{
			DAZCharacterMaterialOptions component = GetComponent<DAZCharacterMaterialOptions>();
			if (component != null)
			{
				component.SetAllTextureGroupSetsToCurrent();
			}
		}
	}

	protected void RegisterTexture(Texture2D tex)
	{
		if (ImageLoaderThreaded.singleton != null && ImageLoaderThreaded.singleton.RegisterTextureUse(tex))
		{
			if (textureUseCount == null)
			{
				textureUseCount = new Dictionary<Texture2D, int>();
			}
			int value = 0;
			if (textureUseCount.TryGetValue(tex, out value))
			{
				textureUseCount.Remove(tex);
			}
			value++;
			textureUseCount.Add(tex, value);
		}
	}

	protected void DeregisterTexture(Texture2D tex)
	{
		int value = 0;
		if (ImageLoaderThreaded.singleton != null && textureUseCount != null && textureUseCount.TryGetValue(tex, out value))
		{
			ImageLoaderThreaded.singleton.DeregisterTextureUse(tex);
			textureUseCount.Remove(tex);
			value--;
			if (value > 0)
			{
				textureUseCount.Add(tex, value);
			}
		}
	}

	protected void DeregisterAllTextures()
	{
		if (!(ImageLoaderThreaded.singleton != null) || textureUseCount == null)
		{
			return;
		}
		foreach (Texture2D key in textureUseCount.Keys)
		{
			int value = 0;
			if (textureUseCount.TryGetValue(key, out value))
			{
				for (int i = 0; i < value; i++)
				{
					ImageLoaderThreaded.singleton.DeregisterTextureUse(key);
				}
			}
		}
		textureUseCount.Clear();
	}

	protected bool CheckIfImageIsStillValid(ImageLoaderThreaded.QueuedImage qi)
	{
		bool result = true;
		CharacterQueuedImage characterQueuedImage = qi as CharacterQueuedImage;
		switch (characterQueuedImage.region)
		{
		case Region.Face:
			switch (characterQueuedImage.textureType)
			{
			case TextureType.Diffuse:
				result = qi.imgPath == faceDiffuseUrlJSON.val;
				break;
			case TextureType.Specular:
				result = qi.imgPath == faceSpecularUrlJSON.val;
				break;
			case TextureType.Gloss:
				result = qi.imgPath == faceGlossUrlJSON.val;
				break;
			case TextureType.Normal:
				result = qi.imgPath == faceNormalUrlJSON.val;
				break;
			case TextureType.Decal:
				result = qi.imgPath == faceDecalUrlJSON.val;
				break;
			case TextureType.Detail:
				result = qi.imgPath == faceDetailUrlJSON.val;
				break;
			}
			break;
		case Region.Torso:
			switch (characterQueuedImage.textureType)
			{
			case TextureType.Diffuse:
				result = qi.imgPath == torsoDiffuseUrlJSON.val;
				break;
			case TextureType.Specular:
				result = qi.imgPath == torsoSpecularUrlJSON.val;
				break;
			case TextureType.Gloss:
				result = qi.imgPath == torsoGlossUrlJSON.val;
				break;
			case TextureType.Normal:
				result = qi.imgPath == torsoNormalUrlJSON.val;
				break;
			case TextureType.Decal:
				result = qi.imgPath == torsoDecalUrlJSON.val;
				break;
			case TextureType.Detail:
				result = qi.imgPath == torsoDetailUrlJSON.val;
				break;
			}
			break;
		case Region.Limbs:
			switch (characterQueuedImage.textureType)
			{
			case TextureType.Diffuse:
				result = qi.imgPath == limbsDiffuseUrlJSON.val;
				break;
			case TextureType.Specular:
				result = qi.imgPath == limbsSpecularUrlJSON.val;
				break;
			case TextureType.Gloss:
				result = qi.imgPath == limbsGlossUrlJSON.val;
				break;
			case TextureType.Normal:
				result = qi.imgPath == limbsNormalUrlJSON.val;
				break;
			case TextureType.Decal:
				result = qi.imgPath == limbsDecalUrlJSON.val;
				break;
			case TextureType.Detail:
				result = qi.imgPath == limbsDetailUrlJSON.val;
				break;
			}
			break;
		case Region.Genitals:
			switch (characterQueuedImage.textureType)
			{
			case TextureType.Diffuse:
				result = qi.imgPath == genitalsDiffuseUrlJSON.val;
				break;
			case TextureType.Specular:
				result = qi.imgPath == genitalsSpecularUrlJSON.val;
				break;
			case TextureType.Gloss:
				result = qi.imgPath == genitalsGlossUrlJSON.val;
				break;
			case TextureType.Normal:
				result = qi.imgPath == genitalsNormalUrlJSON.val;
				break;
			case TextureType.Decal:
				result = qi.imgPath == genitalsDecalUrlJSON.val;
				break;
			case TextureType.Detail:
				result = qi.imgPath == genitalsDetailUrlJSON.val;
				break;
			}
			break;
		}
		return result;
	}

	protected void OnImageLoaded(ImageLoaderThreaded.QueuedImage qi)
	{
		if (!qi.hadError)
		{
			if (!CheckIfImageIsStillValid(qi))
			{
				return;
			}
			CharacterQueuedImage characterQueuedImage = qi as CharacterQueuedImage;
			if (this == null)
			{
				return;
			}
			DAZMergedSkinV2 component = GetComponent<DAZMergedSkinV2>();
			if (!(component != null))
			{
				return;
			}
			int[] array = null;
			switch (characterQueuedImage.region)
			{
			case Region.Face:
				array = faceMaterialNums;
				break;
			case Region.Torso:
				array = torsoMaterialNums;
				break;
			case Region.Limbs:
				array = limbMaterialNums;
				break;
			case Region.Genitals:
				array = genitalMaterialNums;
				break;
			}
			if (array != null)
			{
				int[] array2 = array;
				foreach (int num in array2)
				{
					Material material = component.GPUmaterials[num];
					Texture2D texture2D = null;
					bool flag = false;
					switch (characterQueuedImage.textureType)
					{
					case TextureType.Diffuse:
						if (material.HasProperty("_MainTex"))
						{
							texture2D = (Texture2D)material.GetTexture("_MainTex");
							if (!origDiffuseTextures.ContainsKey(material))
							{
								origDiffuseTextures.Add(material, texture2D);
							}
							material.SetTexture("_MainTex", characterQueuedImage.tex);
							flag = true;
						}
						break;
					case TextureType.Specular:
						if (material.HasProperty("_SpecTex"))
						{
							texture2D = (Texture2D)material.GetTexture("_SpecTex");
							if (!origSpecularTextures.ContainsKey(material))
							{
								origSpecularTextures.Add(material, texture2D);
							}
							material.SetTexture("_SpecTex", characterQueuedImage.tex);
							flag = true;
						}
						break;
					case TextureType.Gloss:
						if (material.HasProperty("_GlossTex"))
						{
							texture2D = (Texture2D)material.GetTexture("_GlossTex");
							if (!origGlossTextures.ContainsKey(material))
							{
								origGlossTextures.Add(material, texture2D);
							}
							material.SetTexture("_GlossTex", characterQueuedImage.tex);
							flag = true;
						}
						break;
					case TextureType.Normal:
						if (material.HasProperty("_BumpMap"))
						{
							texture2D = (Texture2D)material.GetTexture("_BumpMap");
							if (!origNormalTextures.ContainsKey(material))
							{
								origNormalTextures.Add(material, texture2D);
							}
							material.SetTexture("_BumpMap", characterQueuedImage.tex);
							flag = true;
						}
						break;
					case TextureType.Detail:
						if (material.HasProperty("_DetailMap"))
						{
							texture2D = (Texture2D)material.GetTexture("_DetailMap");
							if (!origDetailTextures.ContainsKey(material))
							{
								origDetailTextures.Add(material, texture2D);
							}
							material.SetTexture("_DetailMap", characterQueuedImage.tex);
							flag = true;
						}
						break;
					case TextureType.Decal:
						if (material.HasProperty("_DecalTex"))
						{
							texture2D = (Texture2D)material.GetTexture("_DecalTex");
							if (!origDecalTextures.ContainsKey(material))
							{
								origDecalTextures.Add(material, texture2D);
							}
							material.SetTexture("_DecalTex", characterQueuedImage.tex);
							flag = true;
						}
						break;
					}
					if (flag && characterQueuedImage.tex != null)
					{
						RegisterTexture(characterQueuedImage.tex);
					}
					if (texture2D != null)
					{
						DeregisterTexture(texture2D);
					}
				}
			}
			if (characterQueuedImage.region == Region.Torso)
			{
				if (characterQueuedImage.textureType == TextureType.Diffuse)
				{
					SyncDiffuseGenitalTexture();
				}
				else if (characterQueuedImage.textureType == TextureType.Specular)
				{
					SyncSpecularGenitalTexture();
				}
				else if (characterQueuedImage.textureType == TextureType.Gloss)
				{
					SyncGlossGenitalTexture();
				}
				else if (characterQueuedImage.textureType == TextureType.Normal)
				{
					SyncNormalGenitalTexture();
				}
			}
		}
		else
		{
			SuperController.LogError("Error during texture load: " + qi.errorText);
		}
	}

	public void StartSyncImage(string url, Region region, TextureType ttype, bool forceReload)
	{
		if (url != null && url != string.Empty)
		{
			if (Regex.IsMatch(url, "^http"))
			{
				SuperController.LogError("Character texture loaded does not currently support http image urls");
			}
			else if (ImageLoaderThreaded.singleton != null)
			{
				CharacterQueuedImage characterQueuedImage = new CharacterQueuedImage();
				characterQueuedImage.imgPath = url;
				characterQueuedImage.forceReload = forceReload;
				bool createMipMaps = true;
				bool linear = false;
				bool isNormalMap = false;
				bool compress = true;
				switch (ttype)
				{
				case TextureType.Specular:
				case TextureType.Gloss:
					linear = true;
					break;
				case TextureType.Normal:
				case TextureType.Detail:
					linear = true;
					isNormalMap = true;
					compress = false;
					break;
				}
				characterQueuedImage.createMipMaps = createMipMaps;
				characterQueuedImage.linear = linear;
				characterQueuedImage.region = region;
				characterQueuedImage.textureType = ttype;
				characterQueuedImage.isNormalMap = isNormalMap;
				characterQueuedImage.compress = compress;
				characterQueuedImage.callback = OnImageLoaded;
				ImageLoaderThreaded.singleton.QueueImage(characterQueuedImage);
			}
			return;
		}
		DAZMergedSkinV2 component = GetComponent<DAZMergedSkinV2>();
		if (!(component != null))
		{
			return;
		}
		int[] array = null;
		switch (region)
		{
		case Region.Face:
			array = faceMaterialNums;
			break;
		case Region.Torso:
			array = torsoMaterialNums;
			switch (ttype)
			{
			case TextureType.Diffuse:
				SyncDiffuseGenitalTexture();
				break;
			case TextureType.Specular:
				SyncSpecularGenitalTexture();
				break;
			case TextureType.Gloss:
				SyncGlossGenitalTexture();
				break;
			case TextureType.Normal:
				SyncNormalGenitalTexture();
				break;
			}
			break;
		case Region.Limbs:
			array = limbMaterialNums;
			break;
		case Region.Genitals:
			array = genitalMaterialNums;
			break;
		}
		if (array == null)
		{
			return;
		}
		int[] array2 = array;
		foreach (int num in array2)
		{
			Material material = component.GPUmaterials[num];
			Texture2D texture2D = null;
			switch (ttype)
			{
			case TextureType.Diffuse:
			{
				if (material.HasProperty("_MainTex") && origDiffuseTextures.TryGetValue(material, out var value5))
				{
					texture2D = (Texture2D)material.GetTexture("_MainTex");
					material.SetTexture("_MainTex", value5);
				}
				break;
			}
			case TextureType.Specular:
			{
				if (material.HasProperty("_SpecTex") && origSpecularTextures.TryGetValue(material, out var value3))
				{
					texture2D = (Texture2D)material.GetTexture("_SpecTex");
					material.SetTexture("_SpecTex", value3);
				}
				break;
			}
			case TextureType.Gloss:
			{
				if (material.HasProperty("_GlossTex") && origGlossTextures.TryGetValue(material, out var value6))
				{
					texture2D = (Texture2D)material.GetTexture("_GlossTex");
					material.SetTexture("_GlossTex", value6);
				}
				break;
			}
			case TextureType.Normal:
			{
				if (material.HasProperty("_BumpMap") && origNormalTextures.TryGetValue(material, out var value2))
				{
					texture2D = (Texture2D)material.GetTexture("_BumpMap");
					material.SetTexture("_BumpMap", value2);
				}
				break;
			}
			case TextureType.Detail:
			{
				if (material.HasProperty("_DetailMap") && origDetailTextures.TryGetValue(material, out var value4))
				{
					texture2D = (Texture2D)material.GetTexture("_DetailMap");
					material.SetTexture("_DetailMap", value4);
				}
				break;
			}
			case TextureType.Decal:
			{
				if (material.HasProperty("_DecalTex") && origDecalTextures.TryGetValue(material, out var value))
				{
					texture2D = (Texture2D)material.GetTexture("_DecalTex");
					material.SetTexture("_DecalTex", value);
				}
				break;
			}
			}
			if (texture2D != null)
			{
				DeregisterTexture(texture2D);
			}
		}
	}

	protected void SyncFaceDiffuseUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Face, TextureType.Diffuse, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncTorsoDiffuseUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Torso, TextureType.Diffuse, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncLimbsDiffuseUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Limbs, TextureType.Diffuse, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncGenitalsDiffuseUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		if (!autoBlendGenitalTexturesJSON.val)
		{
			StartSyncImage(val, Region.Genitals, TextureType.Diffuse, jSONStorableUrl.valueSetFromBrowse);
		}
	}

	protected void SyncFaceSpecularUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Face, TextureType.Specular, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncTorsoSpecularUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Torso, TextureType.Specular, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncLimbsSpecularUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Limbs, TextureType.Specular, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncGenitalsSpecularUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		if (!autoBlendGenitalTexturesJSON.val || !autoBlendGenitalSpecGlossNormalTexturesJSON.val)
		{
			StartSyncImage(val, Region.Genitals, TextureType.Specular, jSONStorableUrl.valueSetFromBrowse);
		}
	}

	protected void SyncFaceGlossUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Face, TextureType.Gloss, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncTorsoGlossUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Torso, TextureType.Gloss, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncLimbsGlossUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Limbs, TextureType.Gloss, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncGenitalsGlossUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		if (!autoBlendGenitalTexturesJSON.val || !autoBlendGenitalSpecGlossNormalTexturesJSON.val)
		{
			StartSyncImage(val, Region.Genitals, TextureType.Gloss, jSONStorableUrl.valueSetFromBrowse);
		}
	}

	protected void SyncFaceNormalUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Face, TextureType.Normal, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncTorsoNormalUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Torso, TextureType.Normal, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncLimbsNormalUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Limbs, TextureType.Normal, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncGenitalsNormalUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		if (!autoBlendGenitalTexturesJSON.val || !autoBlendGenitalSpecGlossNormalTexturesJSON.val)
		{
			StartSyncImage(val, Region.Genitals, TextureType.Normal, jSONStorableUrl.valueSetFromBrowse);
		}
	}

	protected void SyncFaceDetailUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Face, TextureType.Detail, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncTorsoDetailUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Torso, TextureType.Detail, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncLimbsDetailUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Limbs, TextureType.Detail, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncGenitalsDetailUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Genitals, TextureType.Detail, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncFaceDecalUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Face, TextureType.Decal, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncTorsoDecalUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Torso, TextureType.Decal, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncLimbsDecalUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Limbs, TextureType.Decal, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void SyncGenitalsDecalUrl(JSONStorableString jstr)
	{
		JSONStorableUrl jSONStorableUrl = jstr as JSONStorableUrl;
		string val = jSONStorableUrl.val;
		StartSyncImage(val, Region.Genitals, TextureType.Decal, jSONStorableUrl.valueSetFromBrowse);
	}

	protected void DumpGeneratedGenitalTextures()
	{
		if (lastGeneratedDiffuseGenTexture != null)
		{
			byte[] bytes = lastGeneratedDiffuseGenTexture.EncodeToPNG();
			File.WriteAllBytes("GensDiffuse.png", bytes);
		}
		if (lastGeneratedSpecularGenTexture != null)
		{
			byte[] bytes2 = lastGeneratedSpecularGenTexture.EncodeToPNG();
			File.WriteAllBytes("GensSpecular.png", bytes2);
		}
		if (lastGeneratedGlossGenTexture != null)
		{
			byte[] bytes3 = lastGeneratedGlossGenTexture.EncodeToPNG();
			File.WriteAllBytes("GensGloss.png", bytes3);
		}
		if (lastGeneratedNormalGenTexture != null)
		{
			byte[] bytes4 = lastGeneratedNormalGenTexture.EncodeToPNG();
			File.WriteAllBytes("GensNormal.png", bytes4);
		}
	}

	protected Texture2D BlendGenitalTexture(Texture2D inTorsoTex, Texture2D inGenTex, bool linear, bool colorAdjust, bool isNormalMap = false)
	{
		Texture2D texture2D = new Texture2D(inTorsoTex.width, inTorsoTex.height, TextureFormat.RGBA32, mipmap: true, linear);
		try
		{
			Color[] pixels = inTorsoTex.GetPixels();
			Color[] pixels2 = inGenTex.GetPixels();
			Color[] pixels3 = genitalBlendMaskTexture.GetPixels();
			Color[] array = new Color[pixels.Length];
			bool flag = false;
			bool flag2 = false;
			if (isNormalMap)
			{
				if (inTorsoTex.format == TextureFormat.DXT5 || inTorsoTex.format == TextureFormat.BC7)
				{
					flag = true;
				}
				if (inGenTex.format == TextureFormat.DXT5 || inGenTex.format == TextureFormat.BC7)
				{
					flag2 = true;
				}
			}
			Color color3 = default(Color);
			for (int i = 0; i < pixels.Length; i++)
			{
				Color color = pixels2[i];
				if (colorAdjust && (autoBlendGenitalLightenDarkenJSON.val != 0f || autoBlendGenitalHueOffsetJSON.val != 0f || autoBlendGenitalSaturationOffsetJSON.val != 0f))
				{
					HSVColor hsvColor = HSVColorPicker.RGBToHSV(color.r, color.g, color.b);
					hsvColor.V = Mathf.Clamp01(hsvColor.V + autoBlendGenitalLightenDarkenJSON.val);
					hsvColor.H = Mathf.Clamp01(hsvColor.H + autoBlendGenitalHueOffsetJSON.val);
					hsvColor.S = Mathf.Clamp01(hsvColor.S + autoBlendGenitalSaturationOffsetJSON.val);
					color = HSVColorPicker.HSVToRGB(hsvColor);
				}
				float r = pixels3[i].r;
				float num = 1f - pixels3[i].r;
				Color color2 = pixels[i];
				if (isNormalMap)
				{
					if (flag)
					{
						color3.r = color2.a * num;
						color3.g = color2.g * num;
					}
					else
					{
						color3.r = color2.r * num;
						color3.g = color2.g * num;
					}
					if (flag2)
					{
						color3.r += color.a * r;
						color3.g += color.g * r;
					}
					else
					{
						color3.r += color.r * r;
						color3.g += color.g * r;
					}
					color3.b = 1f;
					color3.a = 1f;
				}
				else
				{
					color3 = color2 * num + color * r;
					color3.a = 1f;
				}
				array[i] = color3;
			}
			texture2D.SetPixels(array);
			texture2D.Apply();
		}
		catch (UnityException ex)
		{
			SuperController.LogError("Exception while blending texture " + ex);
		}
		return texture2D;
	}

	protected void SyncDiffuseGenitalTexture()
	{
		if (autoBlendGenitalTexturesJSON.val && torsoDiffuseUrlJSON.val != string.Empty)
		{
			DAZMergedSkinV2 component = GetComponent<DAZMergedSkinV2>();
			if (!(component != null) || !(genitalBlendMaskTexture != null))
			{
				return;
			}
			int num = torsoMaterialNums[0];
			Material material = component.GPUmaterials[num];
			int num2 = genitalMaterialNums[0];
			Material material2 = component.GPUmaterials[num2];
			if (!material.HasProperty("_MainTex") || !material2.HasProperty("_MainTex"))
			{
				return;
			}
			Texture2D texture2D = (Texture2D)material.GetTexture("_MainTex");
			if (texture2D.width != 4096 && texture2D.height != 4096)
			{
				SuperController.LogError("Genital diffuse texture blending only works if torso texture is 4096x4096. Torso diffuse texture is " + texture2D.width + " by " + texture2D.height);
				return;
			}
			if (!origDiffuseTextures.TryGetValue(material2, out var value))
			{
				value = (Texture2D)material2.GetTexture("_MainTex");
				origDiffuseTextures.Add(material2, value);
			}
			Texture2D value2 = BlendGenitalTexture(texture2D, value, linear: false, colorAdjust: true);
			int[] array = genitalMaterialNums;
			foreach (int num3 in array)
			{
				Material material3 = component.GPUmaterials[num3];
				if (material3.HasProperty("_MainTex"))
				{
					Texture2D texture2D2 = (Texture2D)material3.GetTexture("_MainTex");
					if (!origDiffuseTextures.ContainsKey(material3))
					{
						origDiffuseTextures.Add(material3, texture2D2);
					}
					material3.SetTexture("_MainTex", value2);
					if (texture2D2 != null)
					{
						DeregisterTexture(texture2D2);
					}
				}
			}
			if (lastGeneratedDiffuseGenTexture != null)
			{
				Object.Destroy(lastGeneratedDiffuseGenTexture);
			}
			lastGeneratedDiffuseGenTexture = value2;
		}
		else if (lastGeneratedDiffuseGenTexture != null)
		{
			Object.Destroy(lastGeneratedDiffuseGenTexture);
			lastGeneratedDiffuseGenTexture = null;
			StartSyncImage(genitalsDiffuseUrlJSON.val, Region.Genitals, TextureType.Diffuse, forceReload: false);
		}
	}

	protected void SyncSpecularGenitalTexture()
	{
		if (autoBlendGenitalTexturesJSON.val && autoBlendGenitalSpecGlossNormalTexturesJSON.val && torsoSpecularUrlJSON.val != string.Empty)
		{
			DAZMergedSkinV2 component = GetComponent<DAZMergedSkinV2>();
			if (!(component != null) || !(genitalBlendMaskTexture != null))
			{
				return;
			}
			int num = torsoMaterialNums[0];
			Material material = component.GPUmaterials[num];
			int num2 = genitalMaterialNums[0];
			Material material2 = component.GPUmaterials[num2];
			if (!material.HasProperty("_SpecTex") || !material2.HasProperty("_SpecTex"))
			{
				return;
			}
			Texture2D texture2D = (Texture2D)material.GetTexture("_SpecTex");
			if (texture2D.width != 4096 && texture2D.height != 4096)
			{
				SuperController.LogError("Genital specular texture blending only works if torso texture is 4096x4096. Torso specular texture is " + texture2D.width + " by " + texture2D.height);
				return;
			}
			if (!origSpecularTextures.TryGetValue(material2, out var value))
			{
				value = (Texture2D)material2.GetTexture("_SpecTex");
				origSpecularTextures.Add(material2, value);
			}
			Texture2D value2 = BlendGenitalTexture(texture2D, value, linear: true, colorAdjust: false);
			int[] array = genitalMaterialNums;
			foreach (int num3 in array)
			{
				Material material3 = component.GPUmaterials[num3];
				if (material3.HasProperty("_SpecTex"))
				{
					Texture2D texture2D2 = (Texture2D)material3.GetTexture("_SpecTex");
					if (!origSpecularTextures.ContainsKey(material3))
					{
						origSpecularTextures.Add(material3, texture2D2);
					}
					material3.SetTexture("_SpecTex", value2);
					if (texture2D2 != null)
					{
						DeregisterTexture(texture2D2);
					}
				}
			}
			if (lastGeneratedSpecularGenTexture != null)
			{
				Object.Destroy(lastGeneratedSpecularGenTexture);
			}
			lastGeneratedSpecularGenTexture = value2;
		}
		else if (lastGeneratedSpecularGenTexture != null)
		{
			Object.Destroy(lastGeneratedSpecularGenTexture);
			lastGeneratedSpecularGenTexture = null;
			StartSyncImage(genitalsSpecularUrlJSON.val, Region.Genitals, TextureType.Specular, forceReload: false);
		}
	}

	protected void SyncGlossGenitalTexture()
	{
		if (autoBlendGenitalTexturesJSON.val && autoBlendGenitalSpecGlossNormalTexturesJSON.val && torsoGlossUrlJSON.val != string.Empty)
		{
			DAZMergedSkinV2 component = GetComponent<DAZMergedSkinV2>();
			if (!(component != null) || !(genitalBlendMaskTexture != null))
			{
				return;
			}
			int num = torsoMaterialNums[0];
			Material material = component.GPUmaterials[num];
			int num2 = genitalMaterialNums[0];
			Material material2 = component.GPUmaterials[num2];
			if (!material.HasProperty("_GlossTex") || !material2.HasProperty("_GlossTex"))
			{
				return;
			}
			Texture2D texture2D = (Texture2D)material.GetTexture("_GlossTex");
			if (texture2D.width != 4096 && texture2D.height != 4096)
			{
				SuperController.LogError("Genital gloss texture blending only works if torso texture is 4096x4096. Torso gloss texture is " + texture2D.width + " by " + texture2D.height);
				return;
			}
			if (!origGlossTextures.TryGetValue(material2, out var value))
			{
				value = (Texture2D)material2.GetTexture("_GlossTex");
				origGlossTextures.Add(material2, value);
			}
			Texture2D value2 = BlendGenitalTexture(texture2D, value, linear: true, colorAdjust: false);
			int[] array = genitalMaterialNums;
			foreach (int num3 in array)
			{
				Material material3 = component.GPUmaterials[num3];
				if (material3.HasProperty("_GlossTex"))
				{
					Texture2D texture2D2 = (Texture2D)material3.GetTexture("_GlossTex");
					if (!origGlossTextures.ContainsKey(material3))
					{
						origGlossTextures.Add(material3, texture2D2);
					}
					material3.SetTexture("_GlossTex", value2);
					if (texture2D2 != null)
					{
						DeregisterTexture(texture2D2);
					}
				}
			}
			if (lastGeneratedGlossGenTexture != null)
			{
				Object.Destroy(lastGeneratedGlossGenTexture);
			}
			lastGeneratedGlossGenTexture = value2;
		}
		else if (lastGeneratedGlossGenTexture != null)
		{
			Object.Destroy(lastGeneratedGlossGenTexture);
			lastGeneratedGlossGenTexture = null;
			StartSyncImage(genitalsGlossUrlJSON.val, Region.Genitals, TextureType.Gloss, forceReload: false);
		}
	}

	protected void SyncNormalGenitalTexture()
	{
		if (autoBlendGenitalTexturesJSON.val && autoBlendGenitalSpecGlossNormalTexturesJSON.val && torsoNormalUrlJSON.val != string.Empty)
		{
			DAZMergedSkinV2 component = GetComponent<DAZMergedSkinV2>();
			if (!(component != null) || !(genitalBlendMaskTexture != null))
			{
				return;
			}
			int num = torsoMaterialNums[0];
			Material material = component.GPUmaterials[num];
			int num2 = genitalMaterialNums[0];
			Material material2 = component.GPUmaterials[num2];
			if (!material.HasProperty("_BumpMap") || !material2.HasProperty("_BumpMap"))
			{
				return;
			}
			Texture2D texture2D = (Texture2D)material.GetTexture("_BumpMap");
			if (texture2D.width != 4096 && texture2D.height != 4096)
			{
				SuperController.LogError("Genital normal texture blending only works if torso texture is 4096x4096. Torso normal texture is " + texture2D.width + " by " + texture2D.height);
				return;
			}
			if (!origNormalTextures.TryGetValue(material2, out var value))
			{
				value = (Texture2D)material2.GetTexture("_BumpMap");
				origNormalTextures.Add(material2, value);
			}
			Texture2D value2 = BlendGenitalTexture(texture2D, value, linear: true, colorAdjust: false, isNormalMap: true);
			int[] array = genitalMaterialNums;
			foreach (int num3 in array)
			{
				Material material3 = component.GPUmaterials[num3];
				if (material3.HasProperty("_BumpMap"))
				{
					Texture2D texture2D2 = (Texture2D)material3.GetTexture("_BumpMap");
					if (!origNormalTextures.ContainsKey(material3))
					{
						origNormalTextures.Add(material3, texture2D2);
					}
					material3.SetTexture("_BumpMap", value2);
					if (texture2D2 != null)
					{
						DeregisterTexture(texture2D2);
					}
				}
			}
			if (lastGeneratedNormalGenTexture != null)
			{
				Object.Destroy(lastGeneratedNormalGenTexture);
			}
			lastGeneratedNormalGenTexture = value2;
		}
		else if (lastGeneratedNormalGenTexture != null)
		{
			Object.Destroy(lastGeneratedNormalGenTexture);
			lastGeneratedNormalGenTexture = null;
			StartSyncImage(genitalsNormalUrlJSON.val, Region.Genitals, TextureType.Normal, forceReload: false);
		}
	}

	protected void SyncAutoBlendGenitalTextures(bool b)
	{
		SyncDiffuseGenitalTexture();
		SyncSpecularGenitalTexture();
		SyncGlossGenitalTexture();
		SyncNormalGenitalTexture();
	}

	protected void SyncAutoBlendGenitalSpecGlossNormalTextures(bool b)
	{
		SyncSpecularGenitalTexture();
		SyncGlossGenitalTexture();
		SyncNormalGenitalTexture();
	}

	protected void SyncAutoBlendGenitalLightenDarken(float f)
	{
	}

	protected void SyncAutoBlendGenitalHueOffset(float f)
	{
	}

	protected void SyncAutoBlendGenitalSaturationOffset(float f)
	{
	}

	public void FindTexturesInDirectory(string dir)
	{
		if (dir == null || !(dir != string.Empty))
		{
			return;
		}
		dir = dir.Replace("\\\\", "\\");
		if (!FileManager.DirectoryExists(dir))
		{
			dir = Path.GetDirectoryName(dir);
		}
		if (FileManager.DirectoryExists(dir))
		{
			_lastDir = dir;
			DirectoryEntry directoryEntry = FileManager.GetDirectoryEntry(dir);
			dir = directoryEntry.Uid;
			JSONStorableUrl.SetSuggestedPathGroupPath("DAZCharacterTexture", dir);
			string text = dir + "/faceD.jpg";
			if (FileManager.FileExists(text))
			{
				faceDiffuseUrlJSON.val = text;
			}
			text = dir + "/faceS.jpg";
			if (FileManager.FileExists(text))
			{
				faceSpecularUrlJSON.val = text;
			}
			text = dir + "/faceG.jpg";
			if (FileManager.FileExists(text))
			{
				faceGlossUrlJSON.val = text;
			}
			text = dir + "/faceD.png";
			if (FileManager.FileExists(text))
			{
				faceDiffuseUrlJSON.val = text;
			}
			text = dir + "/faceS.png";
			if (FileManager.FileExists(text))
			{
				faceSpecularUrlJSON.val = text;
			}
			text = dir + "/faceG.png";
			if (FileManager.FileExists(text))
			{
				faceGlossUrlJSON.val = text;
			}
			text = dir + "/faceN.png";
			if (FileManager.FileExists(text))
			{
				faceNormalUrlJSON.val = text;
			}
			text = dir + "/faceN.jpg";
			if (FileManager.FileExists(text))
			{
				faceNormalUrlJSON.val = text;
			}
			text = dir + "/faceN.tif";
			if (FileManager.FileExists(text))
			{
				faceNormalUrlJSON.val = text;
			}
			text = dir + "/faceDecal.png";
			if (FileManager.FileExists(text))
			{
				faceDecalUrlJSON.val = text;
			}
			text = dir + "/torsoD.jpg";
			if (FileManager.FileExists(text))
			{
				torsoDiffuseUrlJSON.val = text;
			}
			text = dir + "/torsoS.jpg";
			if (FileManager.FileExists(text))
			{
				torsoSpecularUrlJSON.val = text;
			}
			text = dir + "/torsoG.jpg";
			if (FileManager.FileExists(text))
			{
				torsoGlossUrlJSON.val = text;
			}
			text = dir + "/torsoD.png";
			if (FileManager.FileExists(text))
			{
				torsoDiffuseUrlJSON.val = text;
			}
			text = dir + "/torsoS.png";
			if (FileManager.FileExists(text))
			{
				torsoSpecularUrlJSON.val = text;
			}
			text = dir + "/torsoG.png";
			if (FileManager.FileExists(text))
			{
				torsoGlossUrlJSON.val = text;
			}
			text = dir + "/torsoN.png";
			if (FileManager.FileExists(text))
			{
				torsoNormalUrlJSON.val = text;
			}
			text = dir + "/torsoN.jpg";
			if (FileManager.FileExists(text))
			{
				torsoNormalUrlJSON.val = text;
			}
			text = dir + "/torsoN.tif";
			if (FileManager.FileExists(text))
			{
				torsoNormalUrlJSON.val = text;
			}
			text = dir + "/torsoDecal.png";
			if (FileManager.FileExists(text))
			{
				torsoDecalUrlJSON.val = text;
			}
			text = dir + "/limbsD.jpg";
			if (FileManager.FileExists(text))
			{
				limbsDiffuseUrlJSON.val = text;
			}
			text = dir + "/limbsS.jpg";
			if (FileManager.FileExists(text))
			{
				limbsSpecularUrlJSON.val = text;
			}
			text = dir + "/limbsG.jpg";
			if (FileManager.FileExists(text))
			{
				limbsGlossUrlJSON.val = text;
			}
			text = dir + "/limbsD.png";
			if (FileManager.FileExists(text))
			{
				limbsDiffuseUrlJSON.val = text;
			}
			text = dir + "/limbsS.png";
			if (FileManager.FileExists(text))
			{
				limbsSpecularUrlJSON.val = text;
			}
			text = dir + "/limbsG.png";
			if (FileManager.FileExists(text))
			{
				limbsGlossUrlJSON.val = text;
			}
			text = dir + "/limbsN.png";
			if (FileManager.FileExists(text))
			{
				limbsNormalUrlJSON.val = text;
			}
			text = dir + "/limbsN.jpg";
			if (FileManager.FileExists(text))
			{
				limbsNormalUrlJSON.val = text;
			}
			text = dir + "/limbsN.tif";
			if (FileManager.FileExists(text))
			{
				limbsNormalUrlJSON.val = text;
			}
			text = dir + "/limbsDecal.png";
			if (FileManager.FileExists(text))
			{
				limbsDecalUrlJSON.val = text;
			}
			text = dir + "/genitalsD.jpg";
			if (FileManager.FileExists(text))
			{
				genitalsDiffuseUrlJSON.val = text;
			}
			text = dir + "/genitalsS.jpg";
			if (FileManager.FileExists(text))
			{
				genitalsSpecularUrlJSON.val = text;
			}
			text = dir + "/genitalsG.jpg";
			if (FileManager.FileExists(text))
			{
				genitalsGlossUrlJSON.val = text;
			}
			text = dir + "/genitalsD.png";
			if (FileManager.FileExists(text))
			{
				genitalsDiffuseUrlJSON.val = text;
			}
			text = dir + "/genitalsS.png";
			if (FileManager.FileExists(text))
			{
				genitalsSpecularUrlJSON.val = text;
			}
			text = dir + "/genitalsG.png";
			if (FileManager.FileExists(text))
			{
				genitalsGlossUrlJSON.val = text;
			}
			text = dir + "/genitalsN.png";
			if (FileManager.FileExists(text))
			{
				genitalsNormalUrlJSON.val = text;
			}
			text = dir + "/genitalsN.jpg";
			if (FileManager.FileExists(text))
			{
				genitalsNormalUrlJSON.val = text;
			}
			text = dir + "/genitalsN.tif";
			if (FileManager.FileExists(text))
			{
				genitalsNormalUrlJSON.val = text;
			}
			text = dir + "/genitalsDecal.png";
			if (FileManager.FileExists(text))
			{
				genitalsDecalUrlJSON.val = text;
			}
		}
	}

	public void DirectoryBrowse()
	{
		if (SuperController.singleton != null)
		{
			if (_lastDir == null)
			{
				_lastDir = "Custom/Atom/Person/Textures";
			}
			List<ShortCut> shortCutsForDirectory = FileManager.GetShortCutsForDirectory("Custom/Atom/Person/Textures", allowNavigationAboveRegularDirectories: true, useFullPaths: true);
			ShortCut shortCut = new ShortCut();
			shortCut.displayName = "Root";
			shortCut.path = Path.GetFullPath(".");
			shortCutsForDirectory.Insert(0, shortCut);
			SuperController.singleton.GetDirectoryPathDialog(FindTexturesInDirectory, _lastDir, shortCutsForDirectory, fullComputerBrowse: false);
		}
	}

	protected void BeginBrowse(JSONStorableUrl jsurl)
	{
		List<ShortCut> shortCutsForDirectory = FileManager.GetShortCutsForDirectory("Custom/Atom/Person/Textures", allowNavigationAboveRegularDirectories: true, useFullPaths: true);
		ShortCut shortCut = new ShortCut();
		shortCut.displayName = "Root";
		shortCut.path = Path.GetFullPath(".");
		shortCutsForDirectory.Insert(0, shortCut);
		jsurl.shortCuts = shortCutsForDirectory;
	}

	protected void Init()
	{
		faceDiffuseUrlJSON = new JSONStorableUrl("faceDiffuseUrl", string.Empty, SyncFaceDiffuseUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		faceDiffuseUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		faceDiffuseUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(faceDiffuseUrlJSON);
		torsoDiffuseUrlJSON = new JSONStorableUrl("torsoDiffuseUrl", string.Empty, SyncTorsoDiffuseUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		torsoDiffuseUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		torsoDiffuseUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(torsoDiffuseUrlJSON);
		limbsDiffuseUrlJSON = new JSONStorableUrl("limbsDiffuseUrl", string.Empty, SyncLimbsDiffuseUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		limbsDiffuseUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		limbsDiffuseUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(limbsDiffuseUrlJSON);
		genitalsDiffuseUrlJSON = new JSONStorableUrl("genitalsDiffuseUrl", string.Empty, SyncGenitalsDiffuseUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		genitalsDiffuseUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		genitalsDiffuseUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(genitalsDiffuseUrlJSON);
		faceSpecularUrlJSON = new JSONStorableUrl("faceSpecularUrl", string.Empty, SyncFaceSpecularUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		faceSpecularUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		faceSpecularUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(faceSpecularUrlJSON);
		torsoSpecularUrlJSON = new JSONStorableUrl("torsoSpecularUrl", string.Empty, SyncTorsoSpecularUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		torsoSpecularUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		torsoSpecularUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(torsoSpecularUrlJSON);
		limbsSpecularUrlJSON = new JSONStorableUrl("limbsSpecularUrl", string.Empty, SyncLimbsSpecularUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		limbsSpecularUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		limbsSpecularUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(limbsSpecularUrlJSON);
		genitalsSpecularUrlJSON = new JSONStorableUrl("genitalsSpecularUrl", string.Empty, SyncGenitalsSpecularUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		genitalsSpecularUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		genitalsSpecularUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(genitalsSpecularUrlJSON);
		faceGlossUrlJSON = new JSONStorableUrl("faceGlossUrl", string.Empty, SyncFaceGlossUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		faceGlossUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		faceGlossUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(faceGlossUrlJSON);
		torsoGlossUrlJSON = new JSONStorableUrl("torsoGlossUrl", string.Empty, SyncTorsoGlossUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		torsoGlossUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		torsoGlossUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(torsoGlossUrlJSON);
		limbsGlossUrlJSON = new JSONStorableUrl("limbsGlossUrl", string.Empty, SyncLimbsGlossUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		limbsGlossUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		limbsGlossUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(limbsGlossUrlJSON);
		genitalsGlossUrlJSON = new JSONStorableUrl("genitalsGlossUrl", string.Empty, SyncGenitalsGlossUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		genitalsGlossUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		genitalsGlossUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(genitalsGlossUrlJSON);
		faceNormalUrlJSON = new JSONStorableUrl("faceNormalUrl", string.Empty, SyncFaceNormalUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		faceNormalUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		faceNormalUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(faceNormalUrlJSON);
		torsoNormalUrlJSON = new JSONStorableUrl("torsoNormalUrl", string.Empty, SyncTorsoNormalUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		torsoNormalUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		torsoNormalUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(torsoNormalUrlJSON);
		limbsNormalUrlJSON = new JSONStorableUrl("limbsNormalUrl", string.Empty, SyncLimbsNormalUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		limbsNormalUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		limbsNormalUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(limbsNormalUrlJSON);
		genitalsNormalUrlJSON = new JSONStorableUrl("genitalsNormalUrl", string.Empty, SyncGenitalsNormalUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		genitalsNormalUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		genitalsNormalUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(genitalsNormalUrlJSON);
		faceDetailUrlJSON = new JSONStorableUrl("faceDetailUrl", string.Empty, SyncFaceDetailUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		faceDetailUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		faceDetailUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(faceDetailUrlJSON);
		torsoDetailUrlJSON = new JSONStorableUrl("torsoDetailUrl", string.Empty, SyncTorsoDetailUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		torsoDetailUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		torsoDetailUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(torsoDetailUrlJSON);
		limbsDetailUrlJSON = new JSONStorableUrl("limbsDetailUrl", string.Empty, SyncLimbsDetailUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		limbsDetailUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		limbsDetailUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(limbsDetailUrlJSON);
		genitalsDetailUrlJSON = new JSONStorableUrl("genitalsDetailUrl", string.Empty, SyncGenitalsDetailUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		genitalsDetailUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		genitalsDetailUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(genitalsDetailUrlJSON);
		faceDecalUrlJSON = new JSONStorableUrl("faceDecalUrl", string.Empty, SyncFaceDecalUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		faceDecalUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		faceDecalUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(faceDecalUrlJSON);
		torsoDecalUrlJSON = new JSONStorableUrl("torsoDecalUrl", string.Empty, SyncTorsoDecalUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		torsoDecalUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		torsoDecalUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(torsoDecalUrlJSON);
		limbsDecalUrlJSON = new JSONStorableUrl("limbsDecalUrl", string.Empty, SyncLimbsDecalUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		limbsDecalUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		limbsDecalUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(limbsDecalUrlJSON);
		genitalsDecalUrlJSON = new JSONStorableUrl("genitalsDecalUrl", string.Empty, SyncGenitalsDecalUrl, "jpg|jpeg|png|tif|tiff", "Custom/Atom/Person/Textures", forceCallbackOnSet: true);
		genitalsDecalUrlJSON.suggestedPathGroup = "DAZCharacterTexture";
		genitalsDecalUrlJSON.beginBrowseWithObjectCallback = BeginBrowse;
		RegisterUrl(genitalsDecalUrlJSON);
		autoBlendGenitalTexturesJSON = new JSONStorableBool("autoBlendGenitalTextures", startingValue: false, SyncAutoBlendGenitalTextures);
		RegisterBool(autoBlendGenitalTexturesJSON);
		autoBlendGenitalSpecGlossNormalTexturesJSON = new JSONStorableBool("autoBlendGenitalSpecGlossNormalTextures", startingValue: true, SyncAutoBlendGenitalTextures);
		RegisterBool(autoBlendGenitalSpecGlossNormalTexturesJSON);
		autoBlendGenitalLightenDarkenJSON = new JSONStorableFloat("autoBlendGenitalLightenDarken", 0f, SyncAutoBlendGenitalLightenDarken, -1f, 1f);
		RegisterFloat(autoBlendGenitalLightenDarkenJSON);
		autoBlendGenitalHueOffsetJSON = new JSONStorableFloat("autoBlendGenitalHueOffset", 0f, SyncAutoBlendGenitalHueOffset, -1f, 1f);
		RegisterFloat(autoBlendGenitalHueOffsetJSON);
		autoBlendGenitalSaturationOffsetJSON = new JSONStorableFloat("autoBlendGenitalSaturationOffset", 0f, SyncAutoBlendGenitalSaturationOffset, -1f, 1f);
		RegisterFloat(autoBlendGenitalSaturationOffsetJSON);
		origDiffuseTextures = new Dictionary<Material, Texture2D>();
		origSpecularTextures = new Dictionary<Material, Texture2D>();
		origGlossTextures = new Dictionary<Material, Texture2D>();
		origNormalTextures = new Dictionary<Material, Texture2D>();
		origDetailTextures = new Dictionary<Material, Texture2D>();
		origDecalTextures = new Dictionary<Material, Texture2D>();
	}

	public override void InitUI()
	{
		if (!(UITransform != null))
		{
			return;
		}
		DAZCharacterTextureControlUI componentInChildren = UITransform.GetComponentInChildren<DAZCharacterTextureControlUI>(includeInactive: true);
		if (!(componentInChildren != null))
		{
			return;
		}
		uvLabel = componentInChildren.uvLabel;
		uvLabel.text = uvSetName;
		faceDiffuseUrlJSON.fileBrowseButton = componentInChildren.faceDiffuseFileBrowseButton;
		faceDiffuseUrlJSON.reloadButton = componentInChildren.faceDiffuseReloadButton;
		faceDiffuseUrlJSON.clearButton = componentInChildren.faceDiffuseClearButton;
		faceDiffuseUrlJSON.text = componentInChildren.faceDiffuseUrlText;
		torsoDiffuseUrlJSON.fileBrowseButton = componentInChildren.torsoDiffuseFileBrowseButton;
		torsoDiffuseUrlJSON.reloadButton = componentInChildren.torsoDiffuseReloadButton;
		torsoDiffuseUrlJSON.clearButton = componentInChildren.torsoDiffuseClearButton;
		torsoDiffuseUrlJSON.text = componentInChildren.torsoDiffuseUrlText;
		limbsDiffuseUrlJSON.fileBrowseButton = componentInChildren.limbsDiffuseFileBrowseButton;
		limbsDiffuseUrlJSON.reloadButton = componentInChildren.limbsDiffuseReloadButton;
		limbsDiffuseUrlJSON.clearButton = componentInChildren.limbsDiffuseClearButton;
		limbsDiffuseUrlJSON.text = componentInChildren.limbsDiffuseUrlText;
		genitalsDiffuseUrlJSON.fileBrowseButton = componentInChildren.genitalsDiffuseFileBrowseButton;
		genitalsDiffuseUrlJSON.reloadButton = componentInChildren.genitalsDiffuseReloadButton;
		genitalsDiffuseUrlJSON.clearButton = componentInChildren.genitalsDiffuseClearButton;
		genitalsDiffuseUrlJSON.text = componentInChildren.genitalsDiffuseUrlText;
		faceSpecularUrlJSON.fileBrowseButton = componentInChildren.faceSpecularFileBrowseButton;
		faceSpecularUrlJSON.reloadButton = componentInChildren.faceSpecularReloadButton;
		faceSpecularUrlJSON.clearButton = componentInChildren.faceSpecularClearButton;
		faceSpecularUrlJSON.text = componentInChildren.faceSpecularUrlText;
		torsoSpecularUrlJSON.fileBrowseButton = componentInChildren.torsoSpecularFileBrowseButton;
		torsoSpecularUrlJSON.reloadButton = componentInChildren.torsoSpecularReloadButton;
		torsoSpecularUrlJSON.clearButton = componentInChildren.torsoSpecularClearButton;
		torsoSpecularUrlJSON.text = componentInChildren.torsoSpecularUrlText;
		limbsSpecularUrlJSON.fileBrowseButton = componentInChildren.limbsSpecularFileBrowseButton;
		limbsSpecularUrlJSON.reloadButton = componentInChildren.limbsSpecularReloadButton;
		limbsSpecularUrlJSON.clearButton = componentInChildren.limbsSpecularClearButton;
		limbsSpecularUrlJSON.text = componentInChildren.limbsSpecularUrlText;
		genitalsSpecularUrlJSON.fileBrowseButton = componentInChildren.genitalsSpecularFileBrowseButton;
		genitalsSpecularUrlJSON.reloadButton = componentInChildren.genitalsSpecularReloadButton;
		genitalsSpecularUrlJSON.clearButton = componentInChildren.genitalsSpecularClearButton;
		genitalsSpecularUrlJSON.text = componentInChildren.genitalsSpecularUrlText;
		faceGlossUrlJSON.fileBrowseButton = componentInChildren.faceGlossFileBrowseButton;
		faceGlossUrlJSON.reloadButton = componentInChildren.faceGlossReloadButton;
		faceGlossUrlJSON.clearButton = componentInChildren.faceGlossClearButton;
		faceGlossUrlJSON.text = componentInChildren.faceGlossUrlText;
		torsoGlossUrlJSON.fileBrowseButton = componentInChildren.torsoGlossFileBrowseButton;
		torsoGlossUrlJSON.reloadButton = componentInChildren.torsoGlossReloadButton;
		torsoGlossUrlJSON.clearButton = componentInChildren.torsoGlossClearButton;
		torsoGlossUrlJSON.text = componentInChildren.torsoGlossUrlText;
		limbsGlossUrlJSON.fileBrowseButton = componentInChildren.limbsGlossFileBrowseButton;
		limbsGlossUrlJSON.reloadButton = componentInChildren.limbsGlossReloadButton;
		limbsGlossUrlJSON.clearButton = componentInChildren.limbsGlossClearButton;
		limbsGlossUrlJSON.text = componentInChildren.limbsGlossUrlText;
		genitalsGlossUrlJSON.fileBrowseButton = componentInChildren.genitalsGlossFileBrowseButton;
		genitalsGlossUrlJSON.reloadButton = componentInChildren.genitalsGlossReloadButton;
		genitalsGlossUrlJSON.clearButton = componentInChildren.genitalsGlossClearButton;
		genitalsGlossUrlJSON.text = componentInChildren.genitalsGlossUrlText;
		faceNormalUrlJSON.fileBrowseButton = componentInChildren.faceNormalFileBrowseButton;
		faceNormalUrlJSON.reloadButton = componentInChildren.faceNormalReloadButton;
		faceNormalUrlJSON.clearButton = componentInChildren.faceNormalClearButton;
		faceNormalUrlJSON.text = componentInChildren.faceNormalUrlText;
		torsoNormalUrlJSON.fileBrowseButton = componentInChildren.torsoNormalFileBrowseButton;
		torsoNormalUrlJSON.reloadButton = componentInChildren.torsoNormalReloadButton;
		torsoNormalUrlJSON.clearButton = componentInChildren.torsoNormalClearButton;
		torsoNormalUrlJSON.text = componentInChildren.torsoNormalUrlText;
		limbsNormalUrlJSON.fileBrowseButton = componentInChildren.limbsNormalFileBrowseButton;
		limbsNormalUrlJSON.reloadButton = componentInChildren.limbsNormalReloadButton;
		limbsNormalUrlJSON.clearButton = componentInChildren.limbsNormalClearButton;
		limbsNormalUrlJSON.text = componentInChildren.limbsNormalUrlText;
		genitalsNormalUrlJSON.fileBrowseButton = componentInChildren.genitalsNormalFileBrowseButton;
		genitalsNormalUrlJSON.reloadButton = componentInChildren.genitalsNormalReloadButton;
		genitalsNormalUrlJSON.clearButton = componentInChildren.genitalsNormalClearButton;
		genitalsNormalUrlJSON.text = componentInChildren.genitalsNormalUrlText;
		faceDetailUrlJSON.fileBrowseButton = componentInChildren.faceDetailFileBrowseButton;
		faceDetailUrlJSON.reloadButton = componentInChildren.faceDetailReloadButton;
		faceDetailUrlJSON.clearButton = componentInChildren.faceDetailClearButton;
		faceDetailUrlJSON.text = componentInChildren.faceDetailUrlText;
		torsoDetailUrlJSON.fileBrowseButton = componentInChildren.torsoDetailFileBrowseButton;
		torsoDetailUrlJSON.reloadButton = componentInChildren.torsoDetailReloadButton;
		torsoDetailUrlJSON.clearButton = componentInChildren.torsoDetailClearButton;
		torsoDetailUrlJSON.text = componentInChildren.torsoDetailUrlText;
		limbsDetailUrlJSON.fileBrowseButton = componentInChildren.limbsDetailFileBrowseButton;
		limbsDetailUrlJSON.reloadButton = componentInChildren.limbsDetailReloadButton;
		limbsDetailUrlJSON.clearButton = componentInChildren.limbsDetailClearButton;
		limbsDetailUrlJSON.text = componentInChildren.limbsDetailUrlText;
		genitalsDetailUrlJSON.fileBrowseButton = componentInChildren.genitalsDetailFileBrowseButton;
		genitalsDetailUrlJSON.reloadButton = componentInChildren.genitalsDetailReloadButton;
		genitalsDetailUrlJSON.clearButton = componentInChildren.genitalsDetailClearButton;
		genitalsDetailUrlJSON.text = componentInChildren.genitalsDetailUrlText;
		faceDecalUrlJSON.fileBrowseButton = componentInChildren.faceDecalFileBrowseButton;
		faceDecalUrlJSON.reloadButton = componentInChildren.faceDecalReloadButton;
		faceDecalUrlJSON.clearButton = componentInChildren.faceDecalClearButton;
		faceDecalUrlJSON.text = componentInChildren.faceDecalUrlText;
		torsoDecalUrlJSON.fileBrowseButton = componentInChildren.torsoDecalFileBrowseButton;
		torsoDecalUrlJSON.reloadButton = componentInChildren.torsoDecalReloadButton;
		torsoDecalUrlJSON.clearButton = componentInChildren.torsoDecalClearButton;
		torsoDecalUrlJSON.text = componentInChildren.torsoDecalUrlText;
		limbsDecalUrlJSON.fileBrowseButton = componentInChildren.limbsDecalFileBrowseButton;
		limbsDecalUrlJSON.reloadButton = componentInChildren.limbsDecalReloadButton;
		limbsDecalUrlJSON.clearButton = componentInChildren.limbsDecalClearButton;
		limbsDecalUrlJSON.text = componentInChildren.limbsDecalUrlText;
		genitalsDecalUrlJSON.fileBrowseButton = componentInChildren.genitalsDecalFileBrowseButton;
		genitalsDecalUrlJSON.reloadButton = componentInChildren.genitalsDecalReloadButton;
		genitalsDecalUrlJSON.clearButton = componentInChildren.genitalsDecalClearButton;
		genitalsDecalUrlJSON.text = componentInChildren.genitalsDecalUrlText;
		if (componentInChildren.autoBlendGenitalTexturesToggle != null)
		{
			if (genitalBlendMaskTexture == null)
			{
				componentInChildren.autoBlendGenitalTexturesToggle.gameObject.SetActive(value: false);
			}
			else
			{
				componentInChildren.autoBlendGenitalTexturesToggle.gameObject.SetActive(value: true);
				autoBlendGenitalTexturesJSON.toggle = componentInChildren.autoBlendGenitalTexturesToggle;
			}
		}
		if (componentInChildren.autoBlendGenitalSpecGlossNormalTexturesToggle != null)
		{
			if (genitalBlendMaskTexture == null)
			{
				componentInChildren.autoBlendGenitalSpecGlossNormalTexturesToggle.gameObject.SetActive(value: false);
			}
			else
			{
				componentInChildren.autoBlendGenitalSpecGlossNormalTexturesToggle.gameObject.SetActive(value: true);
				autoBlendGenitalSpecGlossNormalTexturesJSON.toggle = componentInChildren.autoBlendGenitalSpecGlossNormalTexturesToggle;
			}
		}
		dumpAutoGeneratedGenitalTextureButton = componentInChildren.dumpAutoGeneratedGenitalTexturesButton;
		if (dumpAutoGeneratedGenitalTextureButton != null)
		{
			if (genitalBlendMaskTexture == null)
			{
				dumpAutoGeneratedGenitalTextureButton.gameObject.SetActive(value: false);
			}
			else
			{
				dumpAutoGeneratedGenitalTextureButton.gameObject.SetActive(value: true);
			}
			dumpAutoGeneratedGenitalTextureButton.onClick.AddListener(DumpGeneratedGenitalTextures);
		}
		if (componentInChildren.autoBlendGenitalColorAdjustContainer != null)
		{
			if (genitalBlendMaskTexture == null)
			{
				componentInChildren.autoBlendGenitalColorAdjustContainer.gameObject.SetActive(value: false);
			}
			else
			{
				componentInChildren.autoBlendGenitalColorAdjustContainer.gameObject.SetActive(value: true);
				autoBlendGenitalLightenDarkenJSON.slider = componentInChildren.autoBlendGenitalLightenDarkenSlider;
				autoBlendGenitalHueOffsetJSON.slider = componentInChildren.autoBlendGenitalHueOffsetSlider;
				autoBlendGenitalSaturationOffsetJSON.slider = componentInChildren.autoBlendGenitalSaturationOffsetSlider;
			}
		}
		autoBlendGenitalDiffuseTextureButton = componentInChildren.autoBlendGenitalDiffuseTextureButton;
		if (autoBlendGenitalDiffuseTextureButton != null)
		{
			if (genitalBlendMaskTexture == null)
			{
				autoBlendGenitalDiffuseTextureButton.gameObject.SetActive(value: false);
			}
			else
			{
				autoBlendGenitalDiffuseTextureButton.gameObject.SetActive(value: true);
			}
			autoBlendGenitalDiffuseTextureButton.onClick.AddListener(SyncDiffuseGenitalTexture);
		}
		directoryBrowseButton = componentInChildren.directoryBrowseButton;
		if (directoryBrowseButton != null)
		{
			directoryBrowseButton.onClick.AddListener(DirectoryBrowse);
		}
	}

	public override void InitUIAlt()
	{
		if (!(UITransformAlt != null))
		{
			return;
		}
		DAZCharacterTextureControlUI componentInChildren = UITransformAlt.GetComponentInChildren<DAZCharacterTextureControlUI>(includeInactive: true);
		if (!(componentInChildren != null))
		{
			return;
		}
		uvLabelAlt = componentInChildren.uvLabel;
		uvLabelAlt.text = uvSetName;
		faceDiffuseUrlJSON.fileBrowseButtonAlt = componentInChildren.faceDiffuseFileBrowseButton;
		faceDiffuseUrlJSON.reloadButtonAlt = componentInChildren.faceDiffuseReloadButton;
		faceDiffuseUrlJSON.clearButtonAlt = componentInChildren.faceDiffuseClearButton;
		faceDiffuseUrlJSON.textAlt = componentInChildren.faceDiffuseUrlText;
		torsoDiffuseUrlJSON.fileBrowseButtonAlt = componentInChildren.torsoDiffuseFileBrowseButton;
		torsoDiffuseUrlJSON.reloadButtonAlt = componentInChildren.torsoDiffuseReloadButton;
		torsoDiffuseUrlJSON.clearButtonAlt = componentInChildren.torsoDiffuseClearButton;
		torsoDiffuseUrlJSON.textAlt = componentInChildren.torsoDiffuseUrlText;
		limbsDiffuseUrlJSON.fileBrowseButtonAlt = componentInChildren.limbsDiffuseFileBrowseButton;
		limbsDiffuseUrlJSON.reloadButtonAlt = componentInChildren.limbsDiffuseReloadButton;
		limbsDiffuseUrlJSON.clearButtonAlt = componentInChildren.limbsDiffuseClearButton;
		limbsDiffuseUrlJSON.textAlt = componentInChildren.limbsDiffuseUrlText;
		genitalsDiffuseUrlJSON.fileBrowseButtonAlt = componentInChildren.genitalsDiffuseFileBrowseButton;
		genitalsDiffuseUrlJSON.reloadButtonAlt = componentInChildren.genitalsDiffuseReloadButton;
		genitalsDiffuseUrlJSON.clearButtonAlt = componentInChildren.genitalsDiffuseClearButton;
		genitalsDiffuseUrlJSON.textAlt = componentInChildren.genitalsDiffuseUrlText;
		faceSpecularUrlJSON.fileBrowseButtonAlt = componentInChildren.faceSpecularFileBrowseButton;
		faceSpecularUrlJSON.reloadButtonAlt = componentInChildren.faceSpecularReloadButton;
		faceSpecularUrlJSON.clearButtonAlt = componentInChildren.faceSpecularClearButton;
		faceSpecularUrlJSON.textAlt = componentInChildren.faceSpecularUrlText;
		torsoSpecularUrlJSON.fileBrowseButtonAlt = componentInChildren.torsoSpecularFileBrowseButton;
		torsoSpecularUrlJSON.reloadButtonAlt = componentInChildren.torsoSpecularReloadButton;
		torsoSpecularUrlJSON.clearButtonAlt = componentInChildren.torsoSpecularClearButton;
		torsoSpecularUrlJSON.textAlt = componentInChildren.torsoSpecularUrlText;
		limbsSpecularUrlJSON.fileBrowseButtonAlt = componentInChildren.limbsSpecularFileBrowseButton;
		limbsSpecularUrlJSON.reloadButtonAlt = componentInChildren.limbsSpecularReloadButton;
		limbsSpecularUrlJSON.clearButtonAlt = componentInChildren.limbsSpecularClearButton;
		limbsSpecularUrlJSON.textAlt = componentInChildren.limbsSpecularUrlText;
		genitalsSpecularUrlJSON.fileBrowseButtonAlt = componentInChildren.genitalsSpecularFileBrowseButton;
		genitalsSpecularUrlJSON.reloadButtonAlt = componentInChildren.genitalsSpecularReloadButton;
		genitalsSpecularUrlJSON.clearButtonAlt = componentInChildren.genitalsSpecularClearButton;
		genitalsSpecularUrlJSON.textAlt = componentInChildren.genitalsSpecularUrlText;
		faceGlossUrlJSON.fileBrowseButtonAlt = componentInChildren.faceGlossFileBrowseButton;
		faceGlossUrlJSON.reloadButtonAlt = componentInChildren.faceGlossReloadButton;
		faceGlossUrlJSON.clearButtonAlt = componentInChildren.faceGlossClearButton;
		faceGlossUrlJSON.textAlt = componentInChildren.faceGlossUrlText;
		torsoGlossUrlJSON.fileBrowseButtonAlt = componentInChildren.torsoGlossFileBrowseButton;
		torsoGlossUrlJSON.reloadButtonAlt = componentInChildren.torsoGlossReloadButton;
		torsoGlossUrlJSON.clearButtonAlt = componentInChildren.torsoGlossClearButton;
		torsoGlossUrlJSON.textAlt = componentInChildren.torsoGlossUrlText;
		limbsGlossUrlJSON.fileBrowseButtonAlt = componentInChildren.limbsGlossFileBrowseButton;
		limbsGlossUrlJSON.reloadButtonAlt = componentInChildren.limbsGlossReloadButton;
		limbsGlossUrlJSON.clearButtonAlt = componentInChildren.limbsGlossClearButton;
		limbsGlossUrlJSON.textAlt = componentInChildren.limbsGlossUrlText;
		genitalsGlossUrlJSON.fileBrowseButtonAlt = componentInChildren.genitalsGlossFileBrowseButton;
		genitalsGlossUrlJSON.reloadButtonAlt = componentInChildren.genitalsGlossReloadButton;
		genitalsGlossUrlJSON.clearButtonAlt = componentInChildren.genitalsGlossClearButton;
		genitalsGlossUrlJSON.textAlt = componentInChildren.genitalsGlossUrlText;
		faceNormalUrlJSON.fileBrowseButtonAlt = componentInChildren.faceNormalFileBrowseButton;
		faceNormalUrlJSON.reloadButtonAlt = componentInChildren.faceNormalReloadButton;
		faceNormalUrlJSON.clearButtonAlt = componentInChildren.faceNormalClearButton;
		faceNormalUrlJSON.textAlt = componentInChildren.faceNormalUrlText;
		torsoNormalUrlJSON.fileBrowseButtonAlt = componentInChildren.torsoNormalFileBrowseButton;
		torsoNormalUrlJSON.reloadButtonAlt = componentInChildren.torsoNormalReloadButton;
		torsoNormalUrlJSON.clearButtonAlt = componentInChildren.torsoNormalClearButton;
		torsoNormalUrlJSON.textAlt = componentInChildren.torsoNormalUrlText;
		limbsNormalUrlJSON.fileBrowseButtonAlt = componentInChildren.limbsNormalFileBrowseButton;
		limbsNormalUrlJSON.reloadButtonAlt = componentInChildren.limbsNormalReloadButton;
		limbsNormalUrlJSON.clearButtonAlt = componentInChildren.limbsNormalClearButton;
		limbsNormalUrlJSON.textAlt = componentInChildren.limbsNormalUrlText;
		genitalsNormalUrlJSON.fileBrowseButtonAlt = componentInChildren.genitalsNormalFileBrowseButton;
		genitalsNormalUrlJSON.reloadButtonAlt = componentInChildren.genitalsNormalReloadButton;
		genitalsNormalUrlJSON.clearButtonAlt = componentInChildren.genitalsNormalClearButton;
		genitalsNormalUrlJSON.textAlt = componentInChildren.genitalsNormalUrlText;
		faceDetailUrlJSON.fileBrowseButtonAlt = componentInChildren.faceDetailFileBrowseButton;
		faceDetailUrlJSON.reloadButtonAlt = componentInChildren.faceDetailReloadButton;
		faceDetailUrlJSON.clearButtonAlt = componentInChildren.faceDetailClearButton;
		faceDetailUrlJSON.textAlt = componentInChildren.faceDetailUrlText;
		torsoDetailUrlJSON.fileBrowseButtonAlt = componentInChildren.torsoDetailFileBrowseButton;
		torsoDetailUrlJSON.reloadButtonAlt = componentInChildren.torsoDetailReloadButton;
		torsoDetailUrlJSON.clearButtonAlt = componentInChildren.torsoDetailClearButton;
		torsoDetailUrlJSON.textAlt = componentInChildren.torsoDetailUrlText;
		limbsDetailUrlJSON.fileBrowseButtonAlt = componentInChildren.limbsDetailFileBrowseButton;
		limbsDetailUrlJSON.reloadButtonAlt = componentInChildren.limbsDetailReloadButton;
		limbsDetailUrlJSON.clearButtonAlt = componentInChildren.limbsDetailClearButton;
		limbsDetailUrlJSON.textAlt = componentInChildren.limbsDetailUrlText;
		genitalsDetailUrlJSON.fileBrowseButtonAlt = componentInChildren.genitalsDetailFileBrowseButton;
		genitalsDetailUrlJSON.reloadButtonAlt = componentInChildren.genitalsDetailReloadButton;
		genitalsDetailUrlJSON.clearButtonAlt = componentInChildren.genitalsDetailClearButton;
		genitalsDetailUrlJSON.textAlt = componentInChildren.genitalsDetailUrlText;
		faceDecalUrlJSON.fileBrowseButtonAlt = componentInChildren.faceDecalFileBrowseButton;
		faceDecalUrlJSON.reloadButtonAlt = componentInChildren.faceDecalReloadButton;
		faceDecalUrlJSON.clearButtonAlt = componentInChildren.faceDecalClearButton;
		faceDecalUrlJSON.textAlt = componentInChildren.faceDecalUrlText;
		torsoDecalUrlJSON.fileBrowseButtonAlt = componentInChildren.torsoDecalFileBrowseButton;
		torsoDecalUrlJSON.reloadButtonAlt = componentInChildren.torsoDecalReloadButton;
		torsoDecalUrlJSON.clearButtonAlt = componentInChildren.torsoDecalClearButton;
		torsoDecalUrlJSON.textAlt = componentInChildren.torsoDecalUrlText;
		limbsDecalUrlJSON.fileBrowseButtonAlt = componentInChildren.limbsDecalFileBrowseButton;
		limbsDecalUrlJSON.reloadButtonAlt = componentInChildren.limbsDecalReloadButton;
		limbsDecalUrlJSON.clearButtonAlt = componentInChildren.limbsDecalClearButton;
		limbsDecalUrlJSON.textAlt = componentInChildren.limbsDecalUrlText;
		genitalsDecalUrlJSON.fileBrowseButtonAlt = componentInChildren.genitalsDecalFileBrowseButton;
		genitalsDecalUrlJSON.reloadButtonAlt = componentInChildren.genitalsDecalReloadButton;
		genitalsDecalUrlJSON.clearButtonAlt = componentInChildren.genitalsDecalClearButton;
		genitalsDecalUrlJSON.textAlt = componentInChildren.genitalsDecalUrlText;
		if (componentInChildren.autoBlendGenitalTexturesToggle != null)
		{
			if (genitalBlendMaskTexture == null)
			{
				componentInChildren.autoBlendGenitalTexturesToggle.gameObject.SetActive(value: false);
			}
			else
			{
				componentInChildren.autoBlendGenitalTexturesToggle.gameObject.SetActive(value: true);
				autoBlendGenitalTexturesJSON.toggleAlt = componentInChildren.autoBlendGenitalTexturesToggle;
			}
		}
		if (componentInChildren.autoBlendGenitalSpecGlossNormalTexturesToggle != null)
		{
			if (genitalBlendMaskTexture == null)
			{
				componentInChildren.autoBlendGenitalSpecGlossNormalTexturesToggle.gameObject.SetActive(value: false);
			}
			else
			{
				componentInChildren.autoBlendGenitalSpecGlossNormalTexturesToggle.gameObject.SetActive(value: true);
				autoBlendGenitalSpecGlossNormalTexturesJSON.toggleAlt = componentInChildren.autoBlendGenitalSpecGlossNormalTexturesToggle;
			}
		}
		if (componentInChildren.autoBlendGenitalColorAdjustContainer != null)
		{
			if (genitalBlendMaskTexture == null)
			{
				componentInChildren.autoBlendGenitalColorAdjustContainer.gameObject.SetActive(value: false);
			}
			else
			{
				componentInChildren.autoBlendGenitalColorAdjustContainer.gameObject.SetActive(value: true);
				autoBlendGenitalLightenDarkenJSON.sliderAlt = componentInChildren.autoBlendGenitalLightenDarkenSlider;
				autoBlendGenitalHueOffsetJSON.sliderAlt = componentInChildren.autoBlendGenitalHueOffsetSlider;
				autoBlendGenitalSaturationOffsetJSON.sliderAlt = componentInChildren.autoBlendGenitalSaturationOffsetSlider;
			}
		}
		directoryBrowseButtonAlt = componentInChildren.directoryBrowseButton;
		if (directoryBrowseButtonAlt != null)
		{
			directoryBrowseButtonAlt.onClick.AddListener(DirectoryBrowse);
		}
	}

	public void DeregisterUI()
	{
		UITransform = null;
		uvLabel = null;
		faceDiffuseUrlJSON.fileBrowseButton = null;
		faceDiffuseUrlJSON.clearButton = null;
		faceDiffuseUrlJSON.text = null;
		torsoDiffuseUrlJSON.fileBrowseButton = null;
		torsoDiffuseUrlJSON.clearButton = null;
		torsoDiffuseUrlJSON.text = null;
		limbsDiffuseUrlJSON.fileBrowseButton = null;
		limbsDiffuseUrlJSON.clearButton = null;
		limbsDiffuseUrlJSON.text = null;
		genitalsDiffuseUrlJSON.fileBrowseButton = null;
		genitalsDiffuseUrlJSON.clearButton = null;
		genitalsDiffuseUrlJSON.text = null;
		faceSpecularUrlJSON.fileBrowseButton = null;
		faceSpecularUrlJSON.clearButton = null;
		faceSpecularUrlJSON.text = null;
		torsoSpecularUrlJSON.fileBrowseButton = null;
		torsoSpecularUrlJSON.clearButton = null;
		torsoSpecularUrlJSON.text = null;
		limbsSpecularUrlJSON.fileBrowseButton = null;
		limbsSpecularUrlJSON.clearButton = null;
		limbsSpecularUrlJSON.text = null;
		genitalsSpecularUrlJSON.fileBrowseButton = null;
		genitalsSpecularUrlJSON.clearButton = null;
		genitalsSpecularUrlJSON.text = null;
		faceGlossUrlJSON.fileBrowseButton = null;
		faceGlossUrlJSON.clearButton = null;
		faceGlossUrlJSON.text = null;
		torsoGlossUrlJSON.fileBrowseButton = null;
		torsoGlossUrlJSON.clearButton = null;
		torsoGlossUrlJSON.text = null;
		limbsGlossUrlJSON.fileBrowseButton = null;
		limbsGlossUrlJSON.clearButton = null;
		limbsGlossUrlJSON.text = null;
		genitalsGlossUrlJSON.fileBrowseButton = null;
		genitalsGlossUrlJSON.clearButton = null;
		genitalsGlossUrlJSON.text = null;
		faceNormalUrlJSON.fileBrowseButton = null;
		faceNormalUrlJSON.clearButton = null;
		faceNormalUrlJSON.text = null;
		torsoNormalUrlJSON.fileBrowseButton = null;
		torsoNormalUrlJSON.clearButton = null;
		torsoNormalUrlJSON.text = null;
		limbsNormalUrlJSON.fileBrowseButton = null;
		limbsNormalUrlJSON.clearButton = null;
		limbsNormalUrlJSON.text = null;
		genitalsNormalUrlJSON.fileBrowseButton = null;
		genitalsNormalUrlJSON.clearButton = null;
		genitalsNormalUrlJSON.text = null;
		faceDetailUrlJSON.fileBrowseButton = null;
		faceDetailUrlJSON.clearButton = null;
		faceDetailUrlJSON.text = null;
		torsoDetailUrlJSON.fileBrowseButton = null;
		torsoDetailUrlJSON.clearButton = null;
		torsoDetailUrlJSON.text = null;
		limbsDetailUrlJSON.fileBrowseButton = null;
		limbsDetailUrlJSON.clearButton = null;
		limbsDetailUrlJSON.text = null;
		genitalsDetailUrlJSON.fileBrowseButton = null;
		genitalsDetailUrlJSON.clearButton = null;
		genitalsDetailUrlJSON.text = null;
		faceDecalUrlJSON.fileBrowseButton = null;
		faceDecalUrlJSON.clearButton = null;
		faceDecalUrlJSON.text = null;
		torsoDecalUrlJSON.fileBrowseButton = null;
		torsoDecalUrlJSON.clearButton = null;
		torsoDecalUrlJSON.text = null;
		limbsDecalUrlJSON.fileBrowseButton = null;
		limbsDecalUrlJSON.clearButton = null;
		limbsDecalUrlJSON.text = null;
		genitalsDecalUrlJSON.fileBrowseButton = null;
		genitalsDecalUrlJSON.clearButton = null;
		genitalsDecalUrlJSON.text = null;
		autoBlendGenitalTexturesJSON.toggle = null;
		autoBlendGenitalSpecGlossNormalTexturesJSON.toggle = null;
		if (dumpAutoGeneratedGenitalTextureButton != null)
		{
			dumpAutoGeneratedGenitalTextureButton.onClick.RemoveListener(DumpGeneratedGenitalTextures);
			dumpAutoGeneratedGenitalTextureButton = null;
		}
		autoBlendGenitalLightenDarkenJSON.slider = null;
		autoBlendGenitalHueOffsetJSON.slider = null;
		autoBlendGenitalSaturationOffsetJSON.slider = null;
		if (autoBlendGenitalDiffuseTextureButton != null)
		{
			autoBlendGenitalDiffuseTextureButton.onClick.RemoveListener(SyncDiffuseGenitalTexture);
			autoBlendGenitalDiffuseTextureButton = null;
		}
		if (directoryBrowseButton != null)
		{
			directoryBrowseButton.onClick.RemoveListener(DirectoryBrowse);
		}
	}

	public void DeregisterUIAlt()
	{
		UITransformAlt = null;
		uvLabelAlt = null;
		faceDiffuseUrlJSON.fileBrowseButtonAlt = null;
		faceDiffuseUrlJSON.clearButtonAlt = null;
		faceDiffuseUrlJSON.textAlt = null;
		torsoDiffuseUrlJSON.fileBrowseButtonAlt = null;
		torsoDiffuseUrlJSON.clearButtonAlt = null;
		torsoDiffuseUrlJSON.textAlt = null;
		limbsDiffuseUrlJSON.fileBrowseButtonAlt = null;
		limbsDiffuseUrlJSON.clearButtonAlt = null;
		limbsDiffuseUrlJSON.textAlt = null;
		genitalsDiffuseUrlJSON.fileBrowseButtonAlt = null;
		genitalsDiffuseUrlJSON.clearButtonAlt = null;
		genitalsDiffuseUrlJSON.textAlt = null;
		faceSpecularUrlJSON.fileBrowseButtonAlt = null;
		faceSpecularUrlJSON.clearButtonAlt = null;
		faceSpecularUrlJSON.textAlt = null;
		torsoSpecularUrlJSON.fileBrowseButtonAlt = null;
		torsoSpecularUrlJSON.clearButtonAlt = null;
		torsoSpecularUrlJSON.textAlt = null;
		limbsSpecularUrlJSON.fileBrowseButtonAlt = null;
		limbsSpecularUrlJSON.clearButtonAlt = null;
		limbsSpecularUrlJSON.textAlt = null;
		genitalsSpecularUrlJSON.fileBrowseButtonAlt = null;
		genitalsSpecularUrlJSON.clearButtonAlt = null;
		genitalsSpecularUrlJSON.textAlt = null;
		faceGlossUrlJSON.fileBrowseButtonAlt = null;
		faceGlossUrlJSON.clearButtonAlt = null;
		faceGlossUrlJSON.textAlt = null;
		torsoGlossUrlJSON.fileBrowseButtonAlt = null;
		torsoGlossUrlJSON.clearButtonAlt = null;
		torsoGlossUrlJSON.textAlt = null;
		limbsGlossUrlJSON.fileBrowseButtonAlt = null;
		limbsGlossUrlJSON.clearButtonAlt = null;
		limbsGlossUrlJSON.textAlt = null;
		genitalsGlossUrlJSON.fileBrowseButtonAlt = null;
		genitalsGlossUrlJSON.clearButtonAlt = null;
		genitalsGlossUrlJSON.textAlt = null;
		faceNormalUrlJSON.fileBrowseButtonAlt = null;
		faceNormalUrlJSON.clearButtonAlt = null;
		faceNormalUrlJSON.textAlt = null;
		torsoNormalUrlJSON.fileBrowseButtonAlt = null;
		torsoNormalUrlJSON.clearButtonAlt = null;
		torsoNormalUrlJSON.textAlt = null;
		limbsNormalUrlJSON.fileBrowseButtonAlt = null;
		limbsNormalUrlJSON.clearButtonAlt = null;
		limbsNormalUrlJSON.textAlt = null;
		genitalsNormalUrlJSON.fileBrowseButtonAlt = null;
		genitalsNormalUrlJSON.clearButtonAlt = null;
		genitalsNormalUrlJSON.textAlt = null;
		faceDetailUrlJSON.fileBrowseButtonAlt = null;
		faceDetailUrlJSON.clearButtonAlt = null;
		faceDetailUrlJSON.textAlt = null;
		torsoDetailUrlJSON.fileBrowseButtonAlt = null;
		torsoDetailUrlJSON.clearButtonAlt = null;
		torsoDetailUrlJSON.textAlt = null;
		limbsDetailUrlJSON.fileBrowseButtonAlt = null;
		limbsDetailUrlJSON.clearButtonAlt = null;
		limbsDetailUrlJSON.textAlt = null;
		genitalsDetailUrlJSON.fileBrowseButtonAlt = null;
		genitalsDetailUrlJSON.clearButtonAlt = null;
		genitalsDetailUrlJSON.textAlt = null;
		faceDecalUrlJSON.fileBrowseButtonAlt = null;
		faceDecalUrlJSON.clearButtonAlt = null;
		faceDecalUrlJSON.textAlt = null;
		torsoDecalUrlJSON.fileBrowseButtonAlt = null;
		torsoDecalUrlJSON.clearButtonAlt = null;
		torsoDecalUrlJSON.textAlt = null;
		limbsDecalUrlJSON.fileBrowseButtonAlt = null;
		limbsDecalUrlJSON.clearButtonAlt = null;
		limbsDecalUrlJSON.textAlt = null;
		genitalsDecalUrlJSON.fileBrowseButtonAlt = null;
		genitalsDecalUrlJSON.clearButtonAlt = null;
		genitalsDecalUrlJSON.textAlt = null;
		autoBlendGenitalTexturesJSON.toggleAlt = null;
		autoBlendGenitalSpecGlossNormalTexturesJSON.toggleAlt = null;
		autoBlendGenitalLightenDarkenJSON.sliderAlt = null;
		autoBlendGenitalHueOffsetJSON.sliderAlt = null;
		autoBlendGenitalSaturationOffsetJSON.sliderAlt = null;
		if (directoryBrowseButtonAlt != null)
		{
			directoryBrowseButtonAlt.onClick.RemoveListener(DirectoryBrowse);
		}
	}

	protected override void Awake()
	{
		if (!awakecalled)
		{
			base.Awake();
			Init();
			InitUI();
			InitUIAlt();
		}
	}

	protected void OnDestroy()
	{
		DeregisterUI();
		DeregisterUIAlt();
		DeregisterAllTextures();
		if ((bool)lastGeneratedDiffuseGenTexture)
		{
			Object.Destroy(lastGeneratedDiffuseGenTexture);
		}
		if ((bool)lastGeneratedSpecularGenTexture)
		{
			Object.Destroy(lastGeneratedSpecularGenTexture);
		}
		if ((bool)lastGeneratedGlossGenTexture)
		{
			Object.Destroy(lastGeneratedGlossGenTexture);
		}
		if ((bool)lastGeneratedNormalGenTexture)
		{
			Object.Destroy(lastGeneratedNormalGenTexture);
		}
	}
}
